;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: 10c43be62775f54694e5e4fe22275125
;
; Pipeline Runtime Information: 
;
; Compute Shader
;
;
; Buffer Definitions:
;
; cbuffer _CullShadow
; {
;
;   struct dx.alignment.legacy._CullShadow
;   {
;
;       struct dx.alignment.legacy.struct.S_FrustumCullingParams
;       {
;
;           row_major float4x4 worldToProj;           ; Offset:    0
;           row_major float4x4 worldToView;           ; Offset:   64
;           row_major float4x4 projection;            ; Offset:  128
;           float4 referencePosition;                 ; Offset:  192
;           float2 range;                             ; Offset:  208
;           float minScreenRadius;                    ; Offset:  216
;           float fovY;                               ; Offset:  220
;           uint sourceID;                            ; Offset:  224
;           float LODScale;                           ; Offset:  228
;           uint minLODIndex;                         ; Offset:  232
;           int forceLODIndex;                        ; Offset:  236
;           uint ignoreLODProxies;                    ; Offset:  240
;           uint renderPrimitiveMask;                 ; Offset:  244
;           uint pad1;                                ; Offset:  248
;           uint pad2;                                ; Offset:  252
;       
;       } gMainCameraParams;                          ; Offset:    0
;
;       struct dx.alignment.legacy.struct.S_FrustumCullingParams
;       {
;
;           row_major float4x4 worldToProj;           ; Offset:  256
;           row_major float4x4 worldToView;           ; Offset:  320
;           row_major float4x4 projection;            ; Offset:  384
;           float4 referencePosition;                 ; Offset:  448
;           float2 range;                             ; Offset:  464
;           float minScreenRadius;                    ; Offset:  472
;           float fovY;                               ; Offset:  476
;           uint sourceID;                            ; Offset:  480
;           float LODScale;                           ; Offset:  484
;           uint minLODIndex;                         ; Offset:  488
;           int forceLODIndex;                        ; Offset:  492
;           uint ignoreLODProxies;                    ; Offset:  496
;           uint renderPrimitiveMask;                 ; Offset:  500
;           uint pad1;                                ; Offset:  504
;           uint pad2;                                ; Offset:  508
;       
;       } gShadowSliceParams;                         ; Offset:  256
;
;       struct struct.SClipPlanes
;       {
;
;           float4 planes[6];                         ; Offset:  512
;       
;       } gMainCameraClipPlanes;                      ; Offset:  512
;
;       struct struct.SClipPlanes
;       {
;
;           float4 planes[6];                         ; Offset:  608
;       
;       } gShadowSliceClipPlanes;                     ; Offset:  608
;
;       float4 gLightDirection;                       ; Offset:  704
;       uint4 gHizResolution;                         ; Offset:  720
;       uint2 gLODChannel;                            ; Offset:  736
;       uint gStaticVisibility;                       ; Offset:  744
;       float fPadding0;                              ; Offset:  748
;   
;   } _CullShadow;                                    ; Offset:    0 Size:   752
;
; }
;
; Resource bind info for mapPrimitiveResourceData
; {
;
;   struct struct.S_PrimitiveResourceData
;   {
;
;       uint nGlobLODOffset;                          ; Offset:    0
;       uint nLODCount;                               ; Offset:    4
;       uint nGlobRenderPrimitiveOffset;              ; Offset:    8
;       float fPadding;                               ; Offset:   12
;   
;   } $Element;                                       ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for mapPrimitiveResourceLODData
; {
;
;   struct struct.S_PrimitiveResourceLODData
;   {
;
;       uint nRelRenderPrimitiveOffset;               ; Offset:    0
;       uint nRenderPrimitiveCount;                   ; Offset:    4
;       uint nVertexCount;                            ; Offset:    8
;       float fScreenSize;                            ; Offset:   12
;   
;   } $Element;                                       ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for mapRenderPrimitiveData
; {
;
;   struct struct.S_RenderPrimitiveData
;   {
;
;       float4 vLocalCenter;                          ; Offset:    0
;       float4 vLocalHalfSize;                        ; Offset:   16
;       float4 vPosScale;                             ; Offset:   32
;       float4 vPosBias;                              ; Offset:   48
;       float4 vTexScaleBias;                         ; Offset:   64
;       uint nRelVertexColorOffset;                   ; Offset:   80
;       uint nRelBonesOffset;                         ; Offset:   84
;       uint nIndexCount;                             ; Offset:   88
;       uint nRenderFlags;                            ; Offset:   92
;   
;   } $Element;                                       ; Offset:    0 Size:    96
;
; }
;
; Resource bind info for mapRGNBoundingBoxData
; {
;
;   struct struct.S_RGNBoundingBoxData
;   {
;
;       float4 vLocalCenter;                          ; Offset:    0
;       float4 vLocalHalfSize;                        ; Offset:   16
;   
;   } $Element;                                       ; Offset:    0 Size:    32
;
; }
;
; Resource bind info for mapRGNInstanceVariance
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for mapInstanceData
; {
;
;   struct dx.alignment.legacy.struct.S_DefaultInstanceData
;   {
;
;       row_major float4x4 mObjectToWorld;            ; Offset:    0
;       uint nGlobBonesOffset;                        ; Offset:   64
;       uint nGlobVertexColorOffset;                  ; Offset:   68
;       uint nGlobPreviousFrameIndex;                 ; Offset:   72
;       uint nGlobPrimitiveResource;                  ; Offset:   76
;       uint nGlobRGNBoundingBox;                     ; Offset:   80
;       uint nGlobRGNInstanceVarianceOffset;          ; Offset:   84
;       uint nGlobRenderMask;                         ; Offset:   88
;       uint nGlobLODProxy;                           ; Offset:   92
;       uint nGlobLODSelectionMaskIndex;              ; Offset:   96
;       uint nFlags;                                  ; Offset:  100
;       int nForcedLODIndex;                          ; Offset:  104
;       float fLODScale;                              ; Offset:  108
;       float fDitherFadeValue;                       ; Offset:  112
;   
;   } $Element;                                       ; Offset:    0 Size:   116
;
; }
;
; Resource bind info for gInstancesSRV
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for gInstancesUAV
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _CullShadow                       cbuffer      NA          NA     CB0            cb0     1
; mapPrimitiveResourceData          texture  struct         r/o      T0     t29,space1     1
; mapPrimitiveResourceLODData       texture  struct         r/o      T1     t30,space1     1
; mapRenderPrimitiveData            texture  struct         r/o      T2     t31,space1     1
; mapRGNBoundingBoxData             texture  struct         r/o      T3     t32,space1     1
; mapRGNInstanceVariance            texture  struct         r/o      T4     t34,space1     1
; mapInstanceData                   texture  struct         r/o      T5     t35,space1     1
; mapInstanceVarianceOffsets        texture    byte         r/o      T6     t38,space1     1
; gLODStateSRV                      texture    byte         r/o      T7             t1     1
; gInstancesSRV                     texture  struct         r/o      T8             t2     1
; gHiZSRV                           texture     f32          2d      T9             t0     1
; gInstancesUAV                         UAV  struct         r/w      U0             u0     1
; gDrawArgsUAV                          UAV    byte         r/w      U1             u1     1
; gLODStateUAV                          UAV    byte         r/w      U2             u2     1
; gLODVarianceUAV                       UAV    byte         r/w      U3             u3     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.StructuredBuffer<S_PrimitiveResourceData>" = type { %struct.S_PrimitiveResourceData }
%struct.S_PrimitiveResourceData = type { i32, i32, i32, float }
%"class.StructuredBuffer<S_PrimitiveResourceLODData>" = type { %struct.S_PrimitiveResourceLODData }
%struct.S_PrimitiveResourceLODData = type { i32, i32, i32, float }
%"class.StructuredBuffer<S_RenderPrimitiveData>" = type { %struct.S_RenderPrimitiveData }
%struct.S_RenderPrimitiveData = type { <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, i32, i32, i32, i32 }
%"class.StructuredBuffer<S_RGNBoundingBoxData>" = type { %struct.S_RGNBoundingBoxData }
%struct.S_RGNBoundingBoxData = type { <4 x float>, <4 x float> }
%"class.StructuredBuffer<unsigned int>" = type { i32 }
%"dx.alignment.legacy.class.StructuredBuffer<S_DefaultInstanceData>" = type { %dx.alignment.legacy.struct.S_DefaultInstanceData }
%dx.alignment.legacy.struct.S_DefaultInstanceData = type { [4 x <4 x float>], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float }
%struct.ByteAddressBuffer = type { i32 }
%"class.Texture2D<float>" = type { float, %"class.Texture2D<float>::mips_type" }
%"class.Texture2D<float>::mips_type" = type { i32 }
%"class.RWStructuredBuffer<unsigned int>" = type { i32 }
%struct.RWByteAddressBuffer = type { i32 }
%dx.alignment.legacy._CullShadow = type { %dx.alignment.legacy.struct.S_FrustumCullingParams, %dx.alignment.legacy.struct.S_FrustumCullingParams, %struct.SClipPlanes, %struct.SClipPlanes, <4 x float>, <4 x i32>, <2 x i32>, i32, float }
%dx.alignment.legacy.struct.S_FrustumCullingParams = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <2 x float>, float, float, i32, float, i32, i32, i32, i32, i32, i32 }
%struct.SClipPlanes = type { [6 x <4 x float>] }

define void @WriteInstanceShadow_CS() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 3, i32 3, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 2, i32 2, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 9, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 8, i32 2, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 7, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 6, i32 38, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 5, i32 35, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 4, i32 34, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 3, i32 32, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 2, i32 31, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 30, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 29, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %16 = call i32 @dx.op.groupId.i32(i32 94, i32 0)  ; GroupId(component)
  %17 = call i32 @dx.op.flattenedThreadIdInGroup.i32(i32 96)  ; FlattenedThreadIdInGroup()
  %18 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %15, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %19 = extractvalue %dx.types.CBufRet.f32 %18, 0
  %20 = extractvalue %dx.types.CBufRet.f32 %18, 1
  %21 = extractvalue %dx.types.CBufRet.f32 %18, 2
  %22 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %15, i32 13)  ; CBufferLoadLegacy(handle,regIndex)
  %23 = extractvalue %dx.types.CBufRet.f32 %22, 3
  %24 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %15, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %25 = extractvalue %dx.types.CBufRet.f32 %24, 0
  %26 = extractvalue %dx.types.CBufRet.f32 %24, 1
  %27 = extractvalue %dx.types.CBufRet.f32 %24, 2
  %28 = extractvalue %dx.types.CBufRet.f32 %24, 3
  %29 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %15, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %30 = extractvalue %dx.types.CBufRet.f32 %29, 0
  %31 = extractvalue %dx.types.CBufRet.f32 %29, 1
  %32 = extractvalue %dx.types.CBufRet.f32 %29, 2
  %33 = extractvalue %dx.types.CBufRet.f32 %29, 3
  %34 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %15, i32 18)  ; CBufferLoadLegacy(handle,regIndex)
  %35 = extractvalue %dx.types.CBufRet.f32 %34, 0
  %36 = extractvalue %dx.types.CBufRet.f32 %34, 1
  %37 = extractvalue %dx.types.CBufRet.f32 %34, 2
  %38 = extractvalue %dx.types.CBufRet.f32 %34, 3
  %39 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %15, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %40 = extractvalue %dx.types.CBufRet.f32 %39, 0
  %41 = extractvalue %dx.types.CBufRet.f32 %39, 1
  %42 = extractvalue %dx.types.CBufRet.f32 %39, 2
  %43 = extractvalue %dx.types.CBufRet.f32 %39, 3
  %44 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %15, i32 45)  ; CBufferLoadLegacy(handle,regIndex)
  %45 = extractvalue %dx.types.CBufRet.i32 %44, 0
  %46 = extractvalue %dx.types.CBufRet.i32 %44, 1
  %47 = extractvalue %dx.types.CBufRet.i32 %44, 2
  %48 = extractvalue %dx.types.CBufRet.i32 %44, 3
  %49 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %15, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %50 = extractvalue %dx.types.CBufRet.f32 %49, 2
  %51 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %6, i32 %16, i32 0)  ; BufferLoad(srv,index,wot)
  %52 = extractvalue %dx.types.ResRet.i32 %51, 0
  %53 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %9, i32 %52, i32 0)  ; BufferLoad(srv,index,wot)
  %54 = extractvalue %dx.types.ResRet.f32 %53, 0
  %55 = extractvalue %dx.types.ResRet.f32 %53, 1
  %56 = extractvalue %dx.types.ResRet.f32 %53, 2
  %57 = extractvalue %dx.types.ResRet.f32 %53, 3
  %58 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %9, i32 %52, i32 16)  ; BufferLoad(srv,index,wot)
  %59 = extractvalue %dx.types.ResRet.f32 %58, 0
  %60 = extractvalue %dx.types.ResRet.f32 %58, 1
  %61 = extractvalue %dx.types.ResRet.f32 %58, 2
  %62 = extractvalue %dx.types.ResRet.f32 %58, 3
  %63 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %9, i32 %52, i32 32)  ; BufferLoad(srv,index,wot)
  %64 = extractvalue %dx.types.ResRet.f32 %63, 0
  %65 = extractvalue %dx.types.ResRet.f32 %63, 1
  %66 = extractvalue %dx.types.ResRet.f32 %63, 2
  %67 = extractvalue %dx.types.ResRet.f32 %63, 3
  %68 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %9, i32 %52, i32 48)  ; BufferLoad(srv,index,wot)
  %69 = extractvalue %dx.types.ResRet.f32 %68, 0
  %70 = extractvalue %dx.types.ResRet.f32 %68, 1
  %71 = extractvalue %dx.types.ResRet.f32 %68, 2
  %72 = extractvalue %dx.types.ResRet.f32 %68, 3
  %73 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %9, i32 %52, i32 76)  ; BufferLoad(srv,index,wot)
  %74 = extractvalue %dx.types.ResRet.i32 %73, 0
  %75 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %9, i32 %52, i32 80)  ; BufferLoad(srv,index,wot)
  %76 = extractvalue %dx.types.ResRet.i32 %75, 0
  %77 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %9, i32 %52, i32 84)  ; BufferLoad(srv,index,wot)
  %78 = extractvalue %dx.types.ResRet.i32 %77, 0
  %79 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %9, i32 %52, i32 96)  ; BufferLoad(srv,index,wot)
  %80 = extractvalue %dx.types.ResRet.i32 %79, 0
  %81 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %9, i32 %52, i32 100)  ; BufferLoad(srv,index,wot)
  %82 = extractvalue %dx.types.ResRet.i32 %81, 0
  %83 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %9, i32 %52, i32 104)  ; BufferLoad(srv,index,wot)
  %84 = extractvalue %dx.types.ResRet.i32 %83, 0
  %85 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %9, i32 %52, i32 108)  ; BufferLoad(srv,index,wot)
  %86 = extractvalue %dx.types.ResRet.f32 %85, 0
  %87 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %14, i32 %74, i32 0)  ; BufferLoad(srv,index,wot)
  %88 = extractvalue %dx.types.ResRet.i32 %87, 0
  %89 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %14, i32 %74, i32 4)  ; BufferLoad(srv,index,wot)
  %90 = extractvalue %dx.types.ResRet.i32 %89, 0
  %91 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %14, i32 %74, i32 8)  ; BufferLoad(srv,index,wot)
  %92 = extractvalue %dx.types.ResRet.i32 %91, 0
  %93 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %11, i32 %76, i32 0)  ; BufferLoad(srv,index,wot)
  %94 = extractvalue %dx.types.ResRet.f32 %93, 0
  %95 = extractvalue %dx.types.ResRet.f32 %93, 1
  %96 = extractvalue %dx.types.ResRet.f32 %93, 2
  %97 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %11, i32 %76, i32 16)  ; BufferLoad(srv,index,wot)
  %98 = extractvalue %dx.types.ResRet.f32 %97, 0
  %99 = extractvalue %dx.types.ResRet.f32 %97, 1
  %100 = extractvalue %dx.types.ResRet.f32 %97, 2
  %101 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %15, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %102 = extractvalue %dx.types.CBufRet.i32 %101, 3
  %103 = icmp sgt i32 %102, -1
  %104 = select i1 %103, i32 %102, i32 %84
  %105 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %15, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %106 = extractvalue %dx.types.CBufRet.f32 %105, 1
  %107 = fmul fast float %98, %54
  %108 = fmul fast float %98, %55
  %109 = fmul fast float %98, %56
  %110 = call float @dx.op.unary.f32(i32 6, float %107)  ; FAbs(value)
  %111 = call float @dx.op.unary.f32(i32 6, float %108)  ; FAbs(value)
  %112 = call float @dx.op.unary.f32(i32 6, float %109)  ; FAbs(value)
  %113 = fmul fast float %99, %59
  %114 = fmul fast float %99, %60
  %115 = fmul fast float %99, %61
  %116 = call float @dx.op.unary.f32(i32 6, float %113)  ; FAbs(value)
  %117 = call float @dx.op.unary.f32(i32 6, float %114)  ; FAbs(value)
  %118 = call float @dx.op.unary.f32(i32 6, float %115)  ; FAbs(value)
  %119 = fadd fast float %116, %110
  %120 = fadd fast float %117, %111
  %121 = fadd fast float %118, %112
  %122 = fmul fast float %100, %64
  %123 = fmul fast float %100, %65
  %124 = fmul fast float %100, %66
  %125 = call float @dx.op.unary.f32(i32 6, float %122)  ; FAbs(value)
  %126 = call float @dx.op.unary.f32(i32 6, float %123)  ; FAbs(value)
  %127 = call float @dx.op.unary.f32(i32 6, float %124)  ; FAbs(value)
  %128 = fadd fast float %119, %125
  %129 = fadd fast float %120, %126
  %130 = fadd fast float %121, %127
  %131 = call float @dx.op.binary.f32(i32 35, float %128, float %129)  ; FMax(a,b)
  %132 = call float @dx.op.binary.f32(i32 35, float %131, float %130)  ; FMax(a,b)
  %133 = fmul fast float %94, %54
  %134 = call float @dx.op.tertiary.f32(i32 46, float %95, float %59, float %133)  ; FMad(a,b,c)
  %135 = call float @dx.op.tertiary.f32(i32 46, float %96, float %64, float %134)  ; FMad(a,b,c)
  %136 = fmul fast float %94, %55
  %137 = call float @dx.op.tertiary.f32(i32 46, float %95, float %60, float %136)  ; FMad(a,b,c)
  %138 = call float @dx.op.tertiary.f32(i32 46, float %96, float %65, float %137)  ; FMad(a,b,c)
  %139 = fmul fast float %94, %56
  %140 = call float @dx.op.tertiary.f32(i32 46, float %95, float %61, float %139)  ; FMad(a,b,c)
  %141 = call float @dx.op.tertiary.f32(i32 46, float %96, float %66, float %140)  ; FMad(a,b,c)
  %142 = fsub fast float %69, %19
  %143 = fadd fast float %142, %135
  %144 = fsub fast float %70, %20
  %145 = fadd fast float %144, %138
  %146 = fsub fast float %71, %21
  %147 = fadd fast float %146, %141
  %148 = fmul fast float %143, %143
  %149 = fmul fast float %145, %145
  %150 = fadd fast float %149, %148
  %151 = fmul fast float %147, %147
  %152 = fadd fast float %150, %151
  %153 = call float @dx.op.unary.f32(i32 24, float %152)  ; Sqrt(value)
  %154 = add i32 %90, -1
  %155 = call i32 @dx.op.binary.i32(i32 37, i32 %154, i32 0)  ; IMax(a,b)
  %156 = call i32 @dx.op.binary.i32(i32 38, i32 %155, i32 9)  ; IMin(a,b)
  %157 = icmp sgt i32 %104, -1
  br i1 %157, label %158, label %160, !dx.controlflow.hints !32

; <label>:158                                     ; preds = %0
  %159 = call i32 @dx.op.binary.i32(i32 38, i32 %104, i32 %156)  ; IMin(a,b)
  br label %208

; <label>:160                                     ; preds = %0
  %161 = call float @dx.op.binary.f32(i32 35, float 0x3F50624DE0000000, float %153)  ; FMax(a,b)
  %162 = fdiv fast float %132, %161
  %163 = fmul fast float %162, %23
  %164 = call float @dx.op.binary.f32(i32 35, float %163, float 0.000000e+00)  ; FMax(a,b)
  %165 = extractvalue %dx.types.CBufRet.i32 %101, 2
  %166 = add i32 %156, %88
  %167 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %13, i32 %166, i32 4)  ; BufferLoad(srv,index,wot)
  %168 = extractvalue %dx.types.ResRet.i32 %167, 0
  %169 = icmp eq i32 %168, 0
  %170 = add nsw i32 %156, -2
  %171 = call i32 @dx.op.binary.i32(i32 37, i32 %170, i32 0)  ; IMax(a,b)
  %172 = select i1 %169, i32 %171, i32 %156
  %173 = call i32 @dx.op.binary.i32(i32 38, i32 %172, i32 %165)  ; IMin(a,b)
  %174 = call i32 @dx.op.binary.i32(i32 37, i32 %173, i32 0)  ; IMax(a,b)
  %175 = call i32 @dx.op.binary.i32(i32 38, i32 %174, i32 9)  ; IMin(a,b)
  %176 = fmul fast float %106, %86
  %177 = fmul fast float %176, %164
  %178 = icmp sgt i32 %156, %175
  br i1 %178, label %179, label %191

; <label>:179                                     ; preds = %160
  br label %180

; <label>:180                                     ; preds = %186, %179
  %181 = phi i32 [ %187, %186 ], [ %156, %179 ]
  %182 = add i32 %181, %88
  %183 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %13, i32 %182, i32 12)  ; BufferLoad(srv,index,wot)
  %184 = extractvalue %dx.types.ResRet.f32 %183, 0
  %185 = fcmp fast ugt float %177, %184
  br i1 %185, label %186, label %189

; <label>:186                                     ; preds = %180
  %187 = add nsw i32 %181, -1
  %188 = icmp sgt i32 %187, %175
  br i1 %188, label %180, label %189

; <label>:189                                     ; preds = %186, %180
  %190 = phi i32 [ %187, %186 ], [ %181, %180 ]
  br label %191

; <label>:191                                     ; preds = %189, %160
  %192 = phi i32 [ %156, %160 ], [ %190, %189 ]
  %193 = add nsw i32 %156, -1
  %194 = icmp eq i32 %192, %193
  %195 = and i1 %169, %194
  br i1 %195, label %196, label %208

; <label>:196                                     ; preds = %191
  %197 = add i32 %192, %88
  %198 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %13, i32 %197, i32 12)  ; BufferLoad(srv,index,wot)
  %199 = extractvalue %dx.types.ResRet.f32 %198, 0
  %200 = fdiv fast float %132, %199
  %201 = fmul fast float %86, %23
  %202 = fmul fast float %201, %106
  %203 = fmul fast float %202, %200
  %204 = fmul fast float %132, 3.000000e+00
  %205 = fadd fast float %203, %204
  %206 = fcmp fast ogt float %153, %205
  br i1 %206, label %207, label %208

; <label>:207                                     ; preds = %196
  br label %208

; <label>:208                                     ; preds = %207, %196, %191, %158
  %209 = phi i32 [ %159, %158 ], [ %156, %207 ], [ %192, %196 ], [ %192, %191 ]
  %210 = add i32 %209, 9
  %211 = and i32 %210, 31
  %212 = shl i32 2, %211
  %213 = shl i32 %80, 2
  %214 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %2, i32 2, i32 %213, i32 undef, i32 undef, i32 %212)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %215 = add i32 %209, %88
  %216 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %13, i32 %215, i32 0)  ; BufferLoad(srv,index,wot)
  %217 = extractvalue %dx.types.ResRet.i32 %216, 0
  %218 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %13, i32 %215, i32 4)  ; BufferLoad(srv,index,wot)
  %219 = extractvalue %dx.types.ResRet.i32 %218, 0
  %220 = add i32 %217, %78
  %221 = icmp ult i32 %17, %219
  br i1 %221, label %222, label %237

; <label>:222                                     ; preds = %208
  br label %223

; <label>:223                                     ; preds = %223, %222
  %224 = phi i32 [ %234, %223 ], [ %17, %222 ]
  %225 = add i32 %220, %224
  %226 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %10, i32 %225, i32 0)  ; BufferLoad(srv,index,wot)
  %227 = extractvalue %dx.types.ResRet.i32 %226, 0
  %228 = shl i32 %227, 2
  %229 = and i32 %228, 28
  %230 = shl i32 2, %229
  %231 = lshr i32 %227, 3
  %232 = shl nuw nsw i32 %231, 2
  %233 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %1, i32 2, i32 %232, i32 undef, i32 undef, i32 %230)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %234 = add i32 %224, 64
  %235 = icmp ult i32 %234, %219
  br i1 %235, label %223, label %236

; <label>:236                                     ; preds = %223
  br label %237

; <label>:237                                     ; preds = %236, %208
  %238 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %15, i32 15)  ; CBufferLoadLegacy(handle,regIndex)
  %239 = extractvalue %dx.types.CBufRet.i32 %238, 1
  %240 = icmp eq i32 %78, -1
  br i1 %240, label %662, label %241

; <label>:241                                     ; preds = %237
  %242 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %7, i32 %213, i32 undef)  ; BufferLoad(srv,index,wot)
  %243 = extractvalue %dx.types.ResRet.i32 %242, 0
  %244 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %15, i32 46)  ; CBufferLoadLegacy(handle,regIndex)
  %245 = extractvalue %dx.types.CBufRet.i32 %244, 0
  %246 = and i32 %245, 31
  %247 = lshr i32 %243, %246
  %248 = extractvalue %dx.types.CBufRet.i32 %244, 1
  %249 = and i32 %247, %248
  %250 = icmp eq i32 %249, 0
  %251 = select i1 %250, i32 -1, i32 %249
  br i1 %157, label %265, label %252, !dx.controlflow.hints !33

; <label>:252                                     ; preds = %241
  %253 = add i32 %209, 1
  %254 = and i32 %253, 31
  %255 = shl i32 -1, %254
  %256 = xor i32 %255, -1
  %257 = and i32 %251, %256
  %258 = icmp ne i32 %257, 0
  %259 = call i32 @dx.op.unaryBits.i32(i32 33, i32 %257)  ; FirstbitHi(value)
  %260 = sub i32 31, %259
  %261 = icmp eq i32 %259, -1
  %262 = select i1 %261, i32 -1, i32 %260
  %263 = call i32 @dx.op.unaryBits.i32(i32 32, i32 %251)  ; FirstbitLo(value)
  %264 = select i1 %258, i32 %262, i32 %263
  br label %265

; <label>:265                                     ; preds = %252, %241
  %266 = phi i32 [ %264, %252 ], [ %104, %241 ]
  %267 = call i32 @dx.op.binary.i32(i32 39, i32 %266, i32 0)  ; UMax(a,b)
  %268 = call i32 @dx.op.binary.i32(i32 40, i32 %267, i32 %154)  ; UMin(a,b)
  %269 = add i32 %268, %88
  %270 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %13, i32 %269, i32 0)  ; BufferLoad(srv,index,wot)
  %271 = extractvalue %dx.types.ResRet.i32 %270, 0
  %272 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %13, i32 %269, i32 4)  ; BufferLoad(srv,index,wot)
  %273 = extractvalue %dx.types.ResRet.i32 %272, 0
  %274 = add i32 %271, %92
  %275 = add i32 %271, %78
  %276 = icmp ult i32 %17, %273
  br i1 %276, label %277, label %662

; <label>:277                                     ; preds = %265
  br label %278

; <label>:278                                     ; preds = %658, %277
  %279 = phi i32 [ %659, %658 ], [ %17, %277 ]
  %280 = add i32 %279, %274
  %281 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %12, i32 %280, i32 0)  ; BufferLoad(srv,index,wot)
  %282 = extractvalue %dx.types.ResRet.f32 %281, 0
  %283 = extractvalue %dx.types.ResRet.f32 %281, 1
  %284 = extractvalue %dx.types.ResRet.f32 %281, 2
  %285 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %12, i32 %280, i32 16)  ; BufferLoad(srv,index,wot)
  %286 = extractvalue %dx.types.ResRet.f32 %285, 0
  %287 = extractvalue %dx.types.ResRet.f32 %285, 1
  %288 = extractvalue %dx.types.ResRet.f32 %285, 2
  %289 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %12, i32 %280, i32 88)  ; BufferLoad(srv,index,wot)
  %290 = extractvalue %dx.types.ResRet.i32 %289, 0
  %291 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %12, i32 %280, i32 92)  ; BufferLoad(srv,index,wot)
  %292 = extractvalue %dx.types.ResRet.i32 %291, 0
  %293 = and i32 %82, 2
  %294 = icmp ne i32 %293, 0
  %295 = fmul fast float %54, %25
  %296 = call float @dx.op.tertiary.f32(i32 46, float %55, float %30, float %295)  ; FMad(a,b,c)
  %297 = call float @dx.op.tertiary.f32(i32 46, float %56, float %35, float %296)  ; FMad(a,b,c)
  %298 = call float @dx.op.tertiary.f32(i32 46, float %57, float %40, float %297)  ; FMad(a,b,c)
  %299 = fmul fast float %54, %26
  %300 = call float @dx.op.tertiary.f32(i32 46, float %55, float %31, float %299)  ; FMad(a,b,c)
  %301 = call float @dx.op.tertiary.f32(i32 46, float %56, float %36, float %300)  ; FMad(a,b,c)
  %302 = call float @dx.op.tertiary.f32(i32 46, float %57, float %41, float %301)  ; FMad(a,b,c)
  %303 = fmul fast float %54, %27
  %304 = call float @dx.op.tertiary.f32(i32 46, float %55, float %32, float %303)  ; FMad(a,b,c)
  %305 = call float @dx.op.tertiary.f32(i32 46, float %56, float %37, float %304)  ; FMad(a,b,c)
  %306 = call float @dx.op.tertiary.f32(i32 46, float %57, float %42, float %305)  ; FMad(a,b,c)
  %307 = fmul fast float %54, %28
  %308 = call float @dx.op.tertiary.f32(i32 46, float %55, float %33, float %307)  ; FMad(a,b,c)
  %309 = call float @dx.op.tertiary.f32(i32 46, float %56, float %38, float %308)  ; FMad(a,b,c)
  %310 = call float @dx.op.tertiary.f32(i32 46, float %57, float %43, float %309)  ; FMad(a,b,c)
  %311 = fmul fast float %59, %25
  %312 = call float @dx.op.tertiary.f32(i32 46, float %60, float %30, float %311)  ; FMad(a,b,c)
  %313 = call float @dx.op.tertiary.f32(i32 46, float %61, float %35, float %312)  ; FMad(a,b,c)
  %314 = call float @dx.op.tertiary.f32(i32 46, float %62, float %40, float %313)  ; FMad(a,b,c)
  %315 = fmul fast float %59, %26
  %316 = call float @dx.op.tertiary.f32(i32 46, float %60, float %31, float %315)  ; FMad(a,b,c)
  %317 = call float @dx.op.tertiary.f32(i32 46, float %61, float %36, float %316)  ; FMad(a,b,c)
  %318 = call float @dx.op.tertiary.f32(i32 46, float %62, float %41, float %317)  ; FMad(a,b,c)
  %319 = fmul fast float %59, %27
  %320 = call float @dx.op.tertiary.f32(i32 46, float %60, float %32, float %319)  ; FMad(a,b,c)
  %321 = call float @dx.op.tertiary.f32(i32 46, float %61, float %37, float %320)  ; FMad(a,b,c)
  %322 = call float @dx.op.tertiary.f32(i32 46, float %62, float %42, float %321)  ; FMad(a,b,c)
  %323 = fmul fast float %59, %28
  %324 = call float @dx.op.tertiary.f32(i32 46, float %60, float %33, float %323)  ; FMad(a,b,c)
  %325 = call float @dx.op.tertiary.f32(i32 46, float %61, float %38, float %324)  ; FMad(a,b,c)
  %326 = call float @dx.op.tertiary.f32(i32 46, float %62, float %43, float %325)  ; FMad(a,b,c)
  %327 = fmul fast float %64, %25
  %328 = call float @dx.op.tertiary.f32(i32 46, float %65, float %30, float %327)  ; FMad(a,b,c)
  %329 = call float @dx.op.tertiary.f32(i32 46, float %66, float %35, float %328)  ; FMad(a,b,c)
  %330 = call float @dx.op.tertiary.f32(i32 46, float %67, float %40, float %329)  ; FMad(a,b,c)
  %331 = fmul fast float %64, %26
  %332 = call float @dx.op.tertiary.f32(i32 46, float %65, float %31, float %331)  ; FMad(a,b,c)
  %333 = call float @dx.op.tertiary.f32(i32 46, float %66, float %36, float %332)  ; FMad(a,b,c)
  %334 = call float @dx.op.tertiary.f32(i32 46, float %67, float %41, float %333)  ; FMad(a,b,c)
  %335 = fmul fast float %64, %27
  %336 = call float @dx.op.tertiary.f32(i32 46, float %65, float %32, float %335)  ; FMad(a,b,c)
  %337 = call float @dx.op.tertiary.f32(i32 46, float %66, float %37, float %336)  ; FMad(a,b,c)
  %338 = call float @dx.op.tertiary.f32(i32 46, float %67, float %42, float %337)  ; FMad(a,b,c)
  %339 = fmul fast float %64, %28
  %340 = call float @dx.op.tertiary.f32(i32 46, float %65, float %33, float %339)  ; FMad(a,b,c)
  %341 = call float @dx.op.tertiary.f32(i32 46, float %66, float %38, float %340)  ; FMad(a,b,c)
  %342 = call float @dx.op.tertiary.f32(i32 46, float %67, float %43, float %341)  ; FMad(a,b,c)
  %343 = fmul fast float %69, %25
  %344 = call float @dx.op.tertiary.f32(i32 46, float %70, float %30, float %343)  ; FMad(a,b,c)
  %345 = call float @dx.op.tertiary.f32(i32 46, float %71, float %35, float %344)  ; FMad(a,b,c)
  %346 = call float @dx.op.tertiary.f32(i32 46, float %72, float %40, float %345)  ; FMad(a,b,c)
  %347 = fmul fast float %69, %26
  %348 = call float @dx.op.tertiary.f32(i32 46, float %70, float %31, float %347)  ; FMad(a,b,c)
  %349 = call float @dx.op.tertiary.f32(i32 46, float %71, float %36, float %348)  ; FMad(a,b,c)
  %350 = call float @dx.op.tertiary.f32(i32 46, float %72, float %41, float %349)  ; FMad(a,b,c)
  %351 = fmul fast float %69, %27
  %352 = call float @dx.op.tertiary.f32(i32 46, float %70, float %32, float %351)  ; FMad(a,b,c)
  %353 = call float @dx.op.tertiary.f32(i32 46, float %71, float %37, float %352)  ; FMad(a,b,c)
  %354 = call float @dx.op.tertiary.f32(i32 46, float %72, float %42, float %353)  ; FMad(a,b,c)
  %355 = fmul fast float %69, %28
  %356 = call float @dx.op.tertiary.f32(i32 46, float %70, float %33, float %355)  ; FMad(a,b,c)
  %357 = call float @dx.op.tertiary.f32(i32 46, float %71, float %38, float %356)  ; FMad(a,b,c)
  %358 = call float @dx.op.tertiary.f32(i32 46, float %72, float %43, float %357)  ; FMad(a,b,c)
  %359 = fsub fast float %282, %286
  %360 = fsub fast float %283, %287
  %361 = fsub fast float %284, %288
  %362 = fadd fast float %286, %282
  %363 = fadd fast float %287, %283
  %364 = fadd fast float %288, %284
  %365 = fmul fast float %298, %359
  %366 = call float @dx.op.tertiary.f32(i32 46, float %360, float %314, float %365)  ; FMad(a,b,c)
  %367 = call float @dx.op.tertiary.f32(i32 46, float %361, float %330, float %366)  ; FMad(a,b,c)
  %368 = fadd fast float %367, %346
  %369 = fmul fast float %302, %359
  %370 = call float @dx.op.tertiary.f32(i32 46, float %360, float %318, float %369)  ; FMad(a,b,c)
  %371 = call float @dx.op.tertiary.f32(i32 46, float %361, float %334, float %370)  ; FMad(a,b,c)
  %372 = fadd fast float %371, %350
  %373 = fmul fast float %306, %359
  %374 = call float @dx.op.tertiary.f32(i32 46, float %360, float %322, float %373)  ; FMad(a,b,c)
  %375 = call float @dx.op.tertiary.f32(i32 46, float %361, float %338, float %374)  ; FMad(a,b,c)
  %376 = fadd fast float %375, %354
  %377 = fmul fast float %310, %359
  %378 = call float @dx.op.tertiary.f32(i32 46, float %360, float %326, float %377)  ; FMad(a,b,c)
  %379 = call float @dx.op.tertiary.f32(i32 46, float %361, float %342, float %378)  ; FMad(a,b,c)
  %380 = fadd fast float %379, %358
  %381 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %380)  ; FMax(a,b)
  %382 = fdiv fast float %368, %381
  %383 = fdiv fast float %372, %381
  %384 = fdiv fast float %376, %381
  %385 = call float @dx.op.tertiary.f32(i32 46, float %364, float %330, float %366)  ; FMad(a,b,c)
  %386 = fadd fast float %385, %346
  %387 = call float @dx.op.tertiary.f32(i32 46, float %364, float %334, float %370)  ; FMad(a,b,c)
  %388 = fadd fast float %387, %350
  %389 = call float @dx.op.tertiary.f32(i32 46, float %364, float %338, float %374)  ; FMad(a,b,c)
  %390 = fadd fast float %389, %354
  %391 = call float @dx.op.tertiary.f32(i32 46, float %364, float %342, float %378)  ; FMad(a,b,c)
  %392 = fadd fast float %391, %358
  %393 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %392)  ; FMax(a,b)
  %394 = fdiv fast float %386, %393
  %395 = fdiv fast float %388, %393
  %396 = fdiv fast float %390, %393
  %397 = call float @dx.op.binary.f32(i32 36, float %382, float %394)  ; FMin(a,b)
  %398 = call float @dx.op.binary.f32(i32 36, float %383, float %395)  ; FMin(a,b)
  %399 = call float @dx.op.binary.f32(i32 36, float %384, float %396)  ; FMin(a,b)
  %400 = call float @dx.op.binary.f32(i32 35, float %382, float %394)  ; FMax(a,b)
  %401 = call float @dx.op.binary.f32(i32 35, float %383, float %395)  ; FMax(a,b)
  %402 = call float @dx.op.binary.f32(i32 35, float %384, float %396)  ; FMax(a,b)
  %403 = call float @dx.op.tertiary.f32(i32 46, float %363, float %314, float %365)  ; FMad(a,b,c)
  %404 = call float @dx.op.tertiary.f32(i32 46, float %361, float %330, float %403)  ; FMad(a,b,c)
  %405 = fadd fast float %404, %346
  %406 = call float @dx.op.tertiary.f32(i32 46, float %363, float %318, float %369)  ; FMad(a,b,c)
  %407 = call float @dx.op.tertiary.f32(i32 46, float %361, float %334, float %406)  ; FMad(a,b,c)
  %408 = fadd fast float %407, %350
  %409 = call float @dx.op.tertiary.f32(i32 46, float %363, float %322, float %373)  ; FMad(a,b,c)
  %410 = call float @dx.op.tertiary.f32(i32 46, float %361, float %338, float %409)  ; FMad(a,b,c)
  %411 = fadd fast float %410, %354
  %412 = call float @dx.op.tertiary.f32(i32 46, float %363, float %326, float %377)  ; FMad(a,b,c)
  %413 = call float @dx.op.tertiary.f32(i32 46, float %361, float %342, float %412)  ; FMad(a,b,c)
  %414 = fadd fast float %413, %358
  %415 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %414)  ; FMax(a,b)
  %416 = fdiv fast float %405, %415
  %417 = fdiv fast float %408, %415
  %418 = fdiv fast float %411, %415
  %419 = call float @dx.op.binary.f32(i32 36, float %397, float %416)  ; FMin(a,b)
  %420 = call float @dx.op.binary.f32(i32 36, float %398, float %417)  ; FMin(a,b)
  %421 = call float @dx.op.binary.f32(i32 36, float %399, float %418)  ; FMin(a,b)
  %422 = call float @dx.op.binary.f32(i32 35, float %400, float %416)  ; FMax(a,b)
  %423 = call float @dx.op.binary.f32(i32 35, float %401, float %417)  ; FMax(a,b)
  %424 = call float @dx.op.binary.f32(i32 35, float %402, float %418)  ; FMax(a,b)
  %425 = call float @dx.op.tertiary.f32(i32 46, float %364, float %330, float %403)  ; FMad(a,b,c)
  %426 = fadd fast float %425, %346
  %427 = call float @dx.op.tertiary.f32(i32 46, float %364, float %334, float %406)  ; FMad(a,b,c)
  %428 = fadd fast float %427, %350
  %429 = call float @dx.op.tertiary.f32(i32 46, float %364, float %338, float %409)  ; FMad(a,b,c)
  %430 = fadd fast float %429, %354
  %431 = call float @dx.op.tertiary.f32(i32 46, float %364, float %342, float %412)  ; FMad(a,b,c)
  %432 = fadd fast float %431, %358
  %433 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %432)  ; FMax(a,b)
  %434 = fdiv fast float %426, %433
  %435 = fdiv fast float %428, %433
  %436 = fdiv fast float %430, %433
  %437 = call float @dx.op.binary.f32(i32 36, float %419, float %434)  ; FMin(a,b)
  %438 = call float @dx.op.binary.f32(i32 36, float %420, float %435)  ; FMin(a,b)
  %439 = call float @dx.op.binary.f32(i32 36, float %421, float %436)  ; FMin(a,b)
  %440 = call float @dx.op.binary.f32(i32 35, float %422, float %434)  ; FMax(a,b)
  %441 = call float @dx.op.binary.f32(i32 35, float %423, float %435)  ; FMax(a,b)
  %442 = call float @dx.op.binary.f32(i32 35, float %424, float %436)  ; FMax(a,b)
  %443 = fmul fast float %298, %362
  %444 = call float @dx.op.tertiary.f32(i32 46, float %360, float %314, float %443)  ; FMad(a,b,c)
  %445 = call float @dx.op.tertiary.f32(i32 46, float %361, float %330, float %444)  ; FMad(a,b,c)
  %446 = fadd fast float %445, %346
  %447 = fmul fast float %302, %362
  %448 = call float @dx.op.tertiary.f32(i32 46, float %360, float %318, float %447)  ; FMad(a,b,c)
  %449 = call float @dx.op.tertiary.f32(i32 46, float %361, float %334, float %448)  ; FMad(a,b,c)
  %450 = fadd fast float %449, %350
  %451 = fmul fast float %306, %362
  %452 = call float @dx.op.tertiary.f32(i32 46, float %360, float %322, float %451)  ; FMad(a,b,c)
  %453 = call float @dx.op.tertiary.f32(i32 46, float %361, float %338, float %452)  ; FMad(a,b,c)
  %454 = fadd fast float %453, %354
  %455 = fmul fast float %310, %362
  %456 = call float @dx.op.tertiary.f32(i32 46, float %360, float %326, float %455)  ; FMad(a,b,c)
  %457 = call float @dx.op.tertiary.f32(i32 46, float %361, float %342, float %456)  ; FMad(a,b,c)
  %458 = fadd fast float %457, %358
  %459 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %458)  ; FMax(a,b)
  %460 = fdiv fast float %446, %459
  %461 = fdiv fast float %450, %459
  %462 = fdiv fast float %454, %459
  %463 = call float @dx.op.binary.f32(i32 36, float %437, float %460)  ; FMin(a,b)
  %464 = call float @dx.op.binary.f32(i32 36, float %438, float %461)  ; FMin(a,b)
  %465 = call float @dx.op.binary.f32(i32 36, float %439, float %462)  ; FMin(a,b)
  %466 = call float @dx.op.binary.f32(i32 35, float %440, float %460)  ; FMax(a,b)
  %467 = call float @dx.op.binary.f32(i32 35, float %441, float %461)  ; FMax(a,b)
  %468 = call float @dx.op.binary.f32(i32 35, float %442, float %462)  ; FMax(a,b)
  %469 = call float @dx.op.tertiary.f32(i32 46, float %364, float %330, float %444)  ; FMad(a,b,c)
  %470 = fadd fast float %469, %346
  %471 = call float @dx.op.tertiary.f32(i32 46, float %364, float %334, float %448)  ; FMad(a,b,c)
  %472 = fadd fast float %471, %350
  %473 = call float @dx.op.tertiary.f32(i32 46, float %364, float %338, float %452)  ; FMad(a,b,c)
  %474 = fadd fast float %473, %354
  %475 = call float @dx.op.tertiary.f32(i32 46, float %364, float %342, float %456)  ; FMad(a,b,c)
  %476 = fadd fast float %475, %358
  %477 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %476)  ; FMax(a,b)
  %478 = fdiv fast float %470, %477
  %479 = fdiv fast float %472, %477
  %480 = fdiv fast float %474, %477
  %481 = call float @dx.op.binary.f32(i32 36, float %463, float %478)  ; FMin(a,b)
  %482 = call float @dx.op.binary.f32(i32 36, float %464, float %479)  ; FMin(a,b)
  %483 = call float @dx.op.binary.f32(i32 36, float %465, float %480)  ; FMin(a,b)
  %484 = call float @dx.op.binary.f32(i32 35, float %466, float %478)  ; FMax(a,b)
  %485 = call float @dx.op.binary.f32(i32 35, float %467, float %479)  ; FMax(a,b)
  %486 = call float @dx.op.binary.f32(i32 35, float %468, float %480)  ; FMax(a,b)
  %487 = call float @dx.op.tertiary.f32(i32 46, float %363, float %314, float %443)  ; FMad(a,b,c)
  %488 = call float @dx.op.tertiary.f32(i32 46, float %361, float %330, float %487)  ; FMad(a,b,c)
  %489 = fadd fast float %488, %346
  %490 = call float @dx.op.tertiary.f32(i32 46, float %363, float %318, float %447)  ; FMad(a,b,c)
  %491 = call float @dx.op.tertiary.f32(i32 46, float %361, float %334, float %490)  ; FMad(a,b,c)
  %492 = fadd fast float %491, %350
  %493 = call float @dx.op.tertiary.f32(i32 46, float %363, float %322, float %451)  ; FMad(a,b,c)
  %494 = call float @dx.op.tertiary.f32(i32 46, float %361, float %338, float %493)  ; FMad(a,b,c)
  %495 = fadd fast float %494, %354
  %496 = call float @dx.op.tertiary.f32(i32 46, float %363, float %326, float %455)  ; FMad(a,b,c)
  %497 = call float @dx.op.tertiary.f32(i32 46, float %361, float %342, float %496)  ; FMad(a,b,c)
  %498 = fadd fast float %497, %358
  %499 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %498)  ; FMax(a,b)
  %500 = fdiv fast float %489, %499
  %501 = fdiv fast float %492, %499
  %502 = fdiv fast float %495, %499
  %503 = call float @dx.op.binary.f32(i32 36, float %481, float %500)  ; FMin(a,b)
  %504 = call float @dx.op.binary.f32(i32 36, float %482, float %501)  ; FMin(a,b)
  %505 = call float @dx.op.binary.f32(i32 36, float %483, float %502)  ; FMin(a,b)
  %506 = call float @dx.op.binary.f32(i32 35, float %484, float %500)  ; FMax(a,b)
  %507 = call float @dx.op.binary.f32(i32 35, float %485, float %501)  ; FMax(a,b)
  %508 = call float @dx.op.binary.f32(i32 35, float %486, float %502)  ; FMax(a,b)
  %509 = call float @dx.op.tertiary.f32(i32 46, float %364, float %330, float %487)  ; FMad(a,b,c)
  %510 = fadd fast float %509, %346
  %511 = call float @dx.op.tertiary.f32(i32 46, float %364, float %334, float %490)  ; FMad(a,b,c)
  %512 = fadd fast float %511, %350
  %513 = call float @dx.op.tertiary.f32(i32 46, float %364, float %338, float %493)  ; FMad(a,b,c)
  %514 = fadd fast float %513, %354
  %515 = call float @dx.op.tertiary.f32(i32 46, float %364, float %342, float %496)  ; FMad(a,b,c)
  %516 = fadd fast float %515, %358
  %517 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %516)  ; FMax(a,b)
  %518 = fdiv fast float %510, %517
  %519 = fdiv fast float %512, %517
  %520 = fdiv fast float %514, %517
  %521 = call float @dx.op.binary.f32(i32 36, float %503, float %518)  ; FMin(a,b)
  %522 = call float @dx.op.binary.f32(i32 36, float %504, float %519)  ; FMin(a,b)
  %523 = call float @dx.op.binary.f32(i32 36, float %505, float %520)  ; FMin(a,b)
  %524 = call float @dx.op.binary.f32(i32 35, float %506, float %518)  ; FMax(a,b)
  %525 = call float @dx.op.binary.f32(i32 35, float %507, float %519)  ; FMax(a,b)
  %526 = call float @dx.op.binary.f32(i32 35, float %508, float %520)  ; FMax(a,b)
  %527 = fmul fast float %521, 5.000000e-01
  %528 = fmul fast float %522, 5.000000e-01
  %529 = fadd fast float %527, 5.000000e-01
  %530 = fadd fast float %528, 5.000000e-01
  %531 = call float @dx.op.binary.f32(i32 35, float %529, float 0xBFC3333340000000)  ; FMax(a,b)
  %532 = call float @dx.op.binary.f32(i32 35, float %530, float 0xBFC3333340000000)  ; FMax(a,b)
  %533 = call float @dx.op.binary.f32(i32 35, float %523, float 0.000000e+00)  ; FMax(a,b)
  %534 = call float @dx.op.binary.f32(i32 36, float %531, float 0x3FF2666660000000)  ; FMin(a,b)
  %535 = call float @dx.op.binary.f32(i32 36, float %532, float 0x3FF2666660000000)  ; FMin(a,b)
  %536 = call float @dx.op.binary.f32(i32 36, float %533, float 1.000000e+00)  ; FMin(a,b)
  %537 = fmul fast float %524, 5.000000e-01
  %538 = fmul fast float %525, 5.000000e-01
  %539 = fadd fast float %537, 5.000000e-01
  %540 = fadd fast float %538, 5.000000e-01
  %541 = call float @dx.op.binary.f32(i32 35, float %539, float 0xBFC3333340000000)  ; FMax(a,b)
  %542 = call float @dx.op.binary.f32(i32 35, float %540, float 0xBFC3333340000000)  ; FMax(a,b)
  %543 = call float @dx.op.binary.f32(i32 35, float %526, float 0.000000e+00)  ; FMax(a,b)
  %544 = call float @dx.op.binary.f32(i32 36, float %541, float 0x3FF2666660000000)  ; FMin(a,b)
  %545 = call float @dx.op.binary.f32(i32 36, float %542, float 0x3FF2666660000000)  ; FMin(a,b)
  %546 = call float @dx.op.binary.f32(i32 36, float %543, float 1.000000e+00)  ; FMin(a,b)
  %547 = fsub fast float %544, %534
  %548 = fsub fast float %545, %535
  %549 = fsub fast float %546, %536
  %550 = call float @dx.op.binary.f32(i32 35, float %547, float %548)  ; FMax(a,b)
  %551 = fmul fast float %548, %547
  %552 = fmul fast float %551, %549
  %553 = fcmp fast ugt float %552, 0.000000e+00
  %554 = fcmp fast ogt float %550, %50
  %555 = and i1 %554, %553
  br i1 %555, label %556, label %638

; <label>:556                                     ; preds = %278
  %557 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %15, i32 45)  ; CBufferLoadLegacy(handle,regIndex)
  %558 = extractvalue %dx.types.CBufRet.i32 %557, 0
  %559 = icmp eq i32 %558, 0
  br i1 %559, label %638, label %560, !dx.controlflow.hints !34

; <label>:560                                     ; preds = %556
  %561 = call float @dx.op.unary.f32(i32 7, float %534)  ; Saturate(value)
  %562 = call float @dx.op.unary.f32(i32 7, float %535)  ; Saturate(value)
  %563 = call float @dx.op.unary.f32(i32 7, float %536)  ; Saturate(value)
  %564 = call float @dx.op.unary.f32(i32 7, float %544)  ; Saturate(value)
  %565 = call float @dx.op.unary.f32(i32 7, float %545)  ; Saturate(value)
  %566 = fsub fast float 1.000000e+00, %562
  %567 = fsub fast float 1.000000e+00, %565
  %568 = uitofp i32 %45 to float
  %569 = uitofp i32 %46 to float
  %570 = fmul fast float %561, %568
  %571 = fmul fast float %567, %569
  %572 = fmul fast float %564, %568
  %573 = fmul fast float %566, %569
  %574 = fsub fast float %564, %561
  %575 = fmul fast float %568, %574
  %576 = fsub fast float %566, %567
  %577 = fmul fast float %569, %576
  %578 = call float @dx.op.unary.f32(i32 28, float %575)  ; Round_pi(value)
  %579 = call float @dx.op.unary.f32(i32 28, float %577)  ; Round_pi(value)
  %580 = fadd fast float %579, %578
  %581 = fmul fast float %580, 5.000000e-01
  %582 = call float @dx.op.unary.f32(i32 23, float %581)  ; Log(value)
  %583 = fptosi float %582 to i32
  %584 = sub i32 %583, %48
  %585 = call i32 @dx.op.binary.i32(i32 39, i32 %584, i32 0)  ; UMax(a,b)
  %586 = call i32 @dx.op.binary.i32(i32 40, i32 %585, i32 %47)  ; UMin(a,b)
  %587 = add i32 %586, %48
  %588 = and i32 %587, 31
  %589 = lshr i32 %45, %588
  %590 = lshr i32 %46, %588
  %591 = add i32 %589, -1
  %592 = add i32 %590, -1
  %593 = fptosi float %570 to i32
  %594 = fptosi float %571 to i32
  %595 = ashr i32 %593, %588
  %596 = ashr i32 %594, %588
  %597 = call i32 @dx.op.binary.i32(i32 38, i32 %595, i32 %591)  ; IMin(a,b)
  %598 = call i32 @dx.op.binary.i32(i32 38, i32 %596, i32 %592)  ; IMin(a,b)
  %599 = fptosi float %572 to i32
  %600 = fptosi float %573 to i32
  %601 = ashr i32 %599, %588
  %602 = ashr i32 %600, %588
  %603 = call i32 @dx.op.binary.i32(i32 38, i32 %601, i32 %591)  ; IMin(a,b)
  %604 = call i32 @dx.op.binary.i32(i32 38, i32 %602, i32 %592)  ; IMin(a,b)
  %605 = icmp slt i32 %603, %597
  br i1 %605, label %628, label %606

; <label>:606                                     ; preds = %560
  br label %607

; <label>:607                                     ; preds = %623, %606
  %608 = phi float [ %624, %623 ], [ 0.000000e+00, %606 ]
  %609 = phi i32 [ %625, %623 ], [ %597, %606 ]
  %610 = icmp slt i32 %604, %598
  br i1 %610, label %623, label %611

; <label>:611                                     ; preds = %607
  br label %612

; <label>:612                                     ; preds = %612, %611
  %613 = phi float [ %619, %612 ], [ %608, %611 ]
  %614 = phi i32 [ %620, %612 ], [ %598, %611 ]
  %615 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %5, i32 %586, i32 %609, i32 %614, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %616 = extractvalue %dx.types.ResRet.f32 %615, 0
  %617 = fcmp fast ogt float %563, %616
  %618 = select i1 %617, float 1.000000e+00, float 0.000000e+00
  %619 = fadd fast float %618, %613
  %620 = add nsw i32 %614, 1
  %621 = icmp slt i32 %614, %604
  br i1 %621, label %612, label %622

; <label>:622                                     ; preds = %612
  br label %623

; <label>:623                                     ; preds = %622, %607
  %624 = phi float [ %608, %607 ], [ %619, %622 ]
  %625 = add nsw i32 %609, 1
  %626 = icmp slt i32 %609, %603
  br i1 %626, label %607, label %627

; <label>:627                                     ; preds = %623
  br label %628

; <label>:628                                     ; preds = %627, %560
  %629 = phi float [ 0.000000e+00, %560 ], [ %624, %627 ]
  %630 = sub i32 1, %597
  %631 = add i32 %630, %603
  %632 = sub i32 1, %598
  %633 = add i32 %632, %604
  %634 = mul nsw i32 %633, %631
  %635 = sitofp i32 %634 to float
  %636 = fcmp fast ult float %629, %635
  br i1 %636, label %637, label %638

; <label>:637                                     ; preds = %628
  br label %638

; <label>:638                                     ; preds = %637, %628, %556, %278
  %639 = phi i1 [ true, %637 ], [ false, %278 ], [ false, %628 ], [ true, %556 ]
  %640 = or i1 %294, %639
  %641 = and i32 %292, %239
  %642 = icmp ne i32 %641, 0
  %643 = and i1 %642, %640
  br i1 %643, label %644, label %658

; <label>:644                                     ; preds = %638
  %645 = add i32 %275, %279
  %646 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %10, i32 %645, i32 0)  ; BufferLoad(srv,index,wot)
  %647 = extractvalue %dx.types.ResRet.i32 %646, 0
  %648 = mul i32 %647, 20
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %3, i32 %648, i32 undef, i32 %290, i32 undef, i32 undef, i32 undef, i8 1)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %649 = add i32 %648, 4
  %650 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %3, i32 0, i32 %649, i32 undef, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %651 = shl i32 %647, 2
  %652 = add i32 %651, 4
  %653 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %8, i32 %652, i32 undef)  ; BufferLoad(srv,index,wot)
  %654 = extractvalue %dx.types.ResRet.i32 %653, 0
  %655 = add i32 %654, %650
  %656 = shl i32 %655, 1
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4, i32 %656, i32 0, i32 %52, i32 undef, i32 undef, i32 undef, i8 1)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  %657 = or i32 %656, 1
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %4, i32 %657, i32 0, i32 %280, i32 undef, i32 undef, i32 undef, i8 1)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %658

; <label>:658                                     ; preds = %644, %638
  %659 = add i32 %279, 64
  %660 = icmp ult i32 %659, %273
  br i1 %660, label %278, label %661

; <label>:661                                     ; preds = %658
  br label %662

; <label>:662                                     ; preds = %661, %265, %237
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.groupId.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.flattenedThreadIdInGroup.i32(i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind
declare i32 @dx.op.atomicBinOp.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.unaryBits.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

; Function Attrs: nounwind
declare void @dx.op.bufferStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i8) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32, %dx.types.Handle, i32, i32) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!29}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 5}
!3 = !{!"cs", i32 6, i32 0}
!4 = !{!5, !22, !27, null}
!5 = !{!6, !8, !9, !11, !13, !15, !17, !18, !19, !20}
!6 = !{i32 0, %"class.StructuredBuffer<S_PrimitiveResourceData>"* undef, !"", i32 1, i32 29, i32 1, i32 12, i32 0, !7}
!7 = !{i32 1, i32 16}
!8 = !{i32 1, %"class.StructuredBuffer<S_PrimitiveResourceLODData>"* undef, !"", i32 1, i32 30, i32 1, i32 12, i32 0, !7}
!9 = !{i32 2, %"class.StructuredBuffer<S_RenderPrimitiveData>"* undef, !"", i32 1, i32 31, i32 1, i32 12, i32 0, !10}
!10 = !{i32 1, i32 96}
!11 = !{i32 3, %"class.StructuredBuffer<S_RGNBoundingBoxData>"* undef, !"", i32 1, i32 32, i32 1, i32 12, i32 0, !12}
!12 = !{i32 1, i32 32}
!13 = !{i32 4, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 1, i32 34, i32 1, i32 12, i32 0, !14}
!14 = !{i32 1, i32 4}
!15 = !{i32 5, %"dx.alignment.legacy.class.StructuredBuffer<S_DefaultInstanceData>"* undef, !"", i32 1, i32 35, i32 1, i32 12, i32 0, !16}
!16 = !{i32 1, i32 116}
!17 = !{i32 6, %struct.ByteAddressBuffer* undef, !"", i32 1, i32 38, i32 1, i32 11, i32 0, null}
!18 = !{i32 7, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 1, i32 1, i32 11, i32 0, null}
!19 = !{i32 8, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 2, i32 1, i32 12, i32 0, !14}
!20 = !{i32 9, %"class.Texture2D<float>"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !21}
!21 = !{i32 0, i32 9}
!22 = !{!23, !24, !25, !26}
!23 = !{i32 0, %"class.RWStructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 0, i32 1, i32 12, i1 false, i1 false, i1 false, !14}
!24 = !{i32 1, %struct.RWByteAddressBuffer* undef, !"", i32 0, i32 1, i32 1, i32 11, i1 false, i1 false, i1 false, null}
!25 = !{i32 2, %struct.RWByteAddressBuffer* undef, !"", i32 0, i32 2, i32 1, i32 11, i1 false, i1 false, i1 false, null}
!26 = !{i32 3, %struct.RWByteAddressBuffer* undef, !"", i32 0, i32 3, i32 1, i32 11, i1 false, i1 false, i1 false, null}
!27 = !{!28}
!28 = !{i32 0, %dx.alignment.legacy._CullShadow* undef, !"", i32 0, i32 0, i32 1, i32 752, null}
!29 = !{void ()* @WriteInstanceShadow_CS, !"WriteInstanceShadow_CS", null, !4, !30}
!30 = !{i32 0, i64 16, i32 4, !31}
!31 = !{i32 64, i32 1, i32 1}
!32 = distinct !{!32, !"dx.controlflow.hints", i32 1}
!33 = distinct !{!33, !"dx.controlflow.hints", i32 1}
!34 = distinct !{!34, !"dx.controlflow.hints", i32 1}
 