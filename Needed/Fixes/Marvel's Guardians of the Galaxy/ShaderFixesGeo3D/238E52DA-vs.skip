;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_InstanceID            0   x           0   INSTID    uint   x   
; SV_VertexID              0   x           1   VERTID    uint       
; POSITION                 0   xyzw        2     NONE   float   xyz 
; NORMAL                   0   xyzw        3     NONE   float       
; TANGENT                  0   xyzw        4     NONE   float       
; BINORMAL                 0   xyzw        5     NONE   float       
; COLOR                    0   xyzw        6     NONE   float       
; TEXCOORD                 0   xy          7     NONE   float       
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
;
; shader hash: 262910a60be79bf99afce3a69bba2654
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_InstanceID            0                              
; SV_VertexID              0                              
; POSITION                 0                              
; NORMAL                   0                              
; TANGENT                  0                              
; BINORMAL                 0                              
; COLOR                    0                              
; TEXCOORD                 0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
;
; Buffer Definitions:
;
; cbuffer _cbDrawCallBaseIndex
; {
;
;   struct _cbDrawCallBaseIndex
;   {
;
;       struct struct.S_DrawCallConstantBuffer
;       {
;
;           uint nDefaultBaseInstance;                ; Offset:    0
;           uint nCustomBaseInstance;                 ; Offset:    4
;           uint nGPUCullingEnabled;                  ; Offset:    8
;           uint nUnused2;                            ; Offset:   12
;       
;       } cbDrawCallBaseIndex;                        ; Offset:    0
;
;   
;   } _cbDrawCallBaseIndex;                           ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for mapShadowMatrices
; {
;
;   struct dx.alignment.legacy.struct.S_ShadowMatrices
;   {
;
;       row_major float4x4 m_mWorldToView;            ; Offset:    0
;       row_major float4x4 m_mViewToProj;             ; Offset:   64
;       row_major float4x4 m_mViewToWorld;            ; Offset:  128
;   
;   } $Element;                                       ; Offset:    0 Size:   192
;
; }
;
; Resource bind info for mapInstanceData
; {
;
;   struct dx.alignment.legacy.struct.S_DefaultInstanceData
;   {
;
;       row_major float4x4 mObjectToWorld;            ; Offset:    0
;       uint nGlobBonesOffset;                        ; Offset:   64
;       uint nGlobVertexColorOffset;                  ; Offset:   68
;       uint nGlobPreviousFrameIndex;                 ; Offset:   72
;       uint nGlobPrimitiveResource;                  ; Offset:   76
;       uint nGlobRGNBoundingBox;                     ; Offset:   80
;       uint nGlobRGNInstanceVarianceOffset;          ; Offset:   84
;       uint nGlobRenderMask;                         ; Offset:   88
;       uint nGlobLODProxy;                           ; Offset:   92
;       uint nGlobLODSelectionMaskIndex;              ; Offset:   96
;       uint nFlags;                                  ; Offset:  100
;       int nForcedLODIndex;                          ; Offset:  104
;       float fLODScale;                              ; Offset:  108
;       float fDitherFadeValue;                       ; Offset:  112
;   
;   } $Element;                                       ; Offset:    0 Size:   116
;
; }
;
; Resource bind info for mapInstancingData
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for mapCPUInstanceIndex
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _cbDrawCallBaseIndex              cbuffer      NA          NA     CB0            cb1     1
; mapShadowMatrices                 texture  struct         r/o      T0     t10,space1     1
; mapInstanceData                   texture  struct         r/o      T1     t35,space1     1
; mapInstanceVarianceOffsets        texture    byte         r/o      T2     t38,space1     1
; mapInstancingData                 texture  struct         r/o      T3     t42,space1     1
; mapCPUInstanceIndex               texture  struct         r/o      T4     t43,space1     1
;
;
; ViewId state:
;
; Number of inputs: 30, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 8, 9, 10 }
;   output 1 depends on inputs: { 0, 8, 9, 10 }
;   output 2 depends on inputs: { 0, 8, 9, 10 }
;   output 3 depends on inputs: { 0, 8, 9, 10 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%"dx.alignment.legacy.class.StructuredBuffer<S_ShadowMatrices>" = type { %dx.alignment.legacy.struct.S_ShadowMatrices }
%dx.alignment.legacy.struct.S_ShadowMatrices = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>] }
%"dx.alignment.legacy.class.StructuredBuffer<S_DefaultInstanceData>" = type { %dx.alignment.legacy.struct.S_DefaultInstanceData }
%dx.alignment.legacy.struct.S_DefaultInstanceData = type { [4 x <4 x float>], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float }
%struct.ByteAddressBuffer = type { i32 }
%"class.StructuredBuffer<unsigned int>" = type { i32 }
%_cbDrawCallBaseIndex = type { %struct.S_DrawCallConstantBuffer }
%struct.S_DrawCallConstantBuffer = type { i32, i32, i32, i32 }

define void @Shadow_VS() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 4, i32 43, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 3, i32 42, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 2, i32 38, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 35, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 10, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef), !dx.precise !35  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef), !dx.precise !35  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef), !dx.precise !35  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call i32 @dx.op.loadInput.i32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %5, i32 0, i32 0)  ; BufferLoad(srv,index,wot)
  %12 = extractvalue %dx.types.ResRet.f32 %11, 0
  %13 = extractvalue %dx.types.ResRet.f32 %11, 1
  %14 = extractvalue %dx.types.ResRet.f32 %11, 2
  %15 = extractvalue %dx.types.ResRet.f32 %11, 3
  %16 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %5, i32 0, i32 16)  ; BufferLoad(srv,index,wot)
  %17 = extractvalue %dx.types.ResRet.f32 %16, 0
  %18 = extractvalue %dx.types.ResRet.f32 %16, 1
  %19 = extractvalue %dx.types.ResRet.f32 %16, 2
  %20 = extractvalue %dx.types.ResRet.f32 %16, 3
  %21 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %5, i32 0, i32 32)  ; BufferLoad(srv,index,wot)
  %22 = extractvalue %dx.types.ResRet.f32 %21, 0
  %23 = extractvalue %dx.types.ResRet.f32 %21, 1
  %24 = extractvalue %dx.types.ResRet.f32 %21, 2
  %25 = extractvalue %dx.types.ResRet.f32 %21, 3
  %26 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %5, i32 0, i32 48)  ; BufferLoad(srv,index,wot)
  %27 = extractvalue %dx.types.ResRet.f32 %26, 0
  %28 = extractvalue %dx.types.ResRet.f32 %26, 1
  %29 = extractvalue %dx.types.ResRet.f32 %26, 2
  %30 = extractvalue %dx.types.ResRet.f32 %26, 3
  %31 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %5, i32 0, i32 64)  ; BufferLoad(srv,index,wot)
  %32 = extractvalue %dx.types.ResRet.f32 %31, 0
  %33 = extractvalue %dx.types.ResRet.f32 %31, 1
  %34 = extractvalue %dx.types.ResRet.f32 %31, 2
  %35 = extractvalue %dx.types.ResRet.f32 %31, 3
  %36 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %5, i32 0, i32 80)  ; BufferLoad(srv,index,wot)
  %37 = extractvalue %dx.types.ResRet.f32 %36, 0
  %38 = extractvalue %dx.types.ResRet.f32 %36, 1
  %39 = extractvalue %dx.types.ResRet.f32 %36, 2
  %40 = extractvalue %dx.types.ResRet.f32 %36, 3
  %41 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %5, i32 0, i32 96)  ; BufferLoad(srv,index,wot)
  %42 = extractvalue %dx.types.ResRet.f32 %41, 0
  %43 = extractvalue %dx.types.ResRet.f32 %41, 1
  %44 = extractvalue %dx.types.ResRet.f32 %41, 2
  %45 = extractvalue %dx.types.ResRet.f32 %41, 3
  %46 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %5, i32 0, i32 112)  ; BufferLoad(srv,index,wot)
  %47 = extractvalue %dx.types.ResRet.f32 %46, 0
  %48 = extractvalue %dx.types.ResRet.f32 %46, 1
  %49 = extractvalue %dx.types.ResRet.f32 %46, 2
  %50 = extractvalue %dx.types.ResRet.f32 %46, 3
  %51 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %6, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %52 = extractvalue %dx.types.CBufRet.i32 %51, 0
  %53 = extractvalue %dx.types.CBufRet.i32 %51, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %64, label %55

; <label>:55                                      ; preds = %0
  %56 = shl i32 %52, 2
  %57 = add i32 %56, 4
  %58 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %3, i32 %57, i32 undef)  ; BufferLoad(srv,index,wot)
  %59 = extractvalue %dx.types.ResRet.i32 %58, 0
  %60 = add i32 %59, %10
  %61 = shl i32 %60, 1
  %62 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %61, i32 0)  ; BufferLoad(srv,index,wot)
  %63 = extractvalue %dx.types.ResRet.i32 %62, 0
  br label %69

; <label>:64                                      ; preds = %0
  %65 = add i32 %52, %10
  %66 = shl i32 %65, 1
  %67 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %66, i32 0)  ; BufferLoad(srv,index,wot)
  %68 = extractvalue %dx.types.ResRet.i32 %67, 0
  br label %69

; <label>:69                                      ; preds = %64, %55
  %70 = phi i32 [ %63, %55 ], [ %68, %64 ]
  %71 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %4, i32 %70, i32 0)  ; BufferLoad(srv,index,wot)
  %72 = extractvalue %dx.types.ResRet.f32 %71, 0
  %73 = extractvalue %dx.types.ResRet.f32 %71, 1
  %74 = extractvalue %dx.types.ResRet.f32 %71, 2
  %75 = extractvalue %dx.types.ResRet.f32 %71, 3
  %76 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %4, i32 %70, i32 16)  ; BufferLoad(srv,index,wot)
  %77 = extractvalue %dx.types.ResRet.f32 %76, 0
  %78 = extractvalue %dx.types.ResRet.f32 %76, 1
  %79 = extractvalue %dx.types.ResRet.f32 %76, 2
  %80 = extractvalue %dx.types.ResRet.f32 %76, 3
  %81 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %4, i32 %70, i32 32)  ; BufferLoad(srv,index,wot)
  %82 = extractvalue %dx.types.ResRet.f32 %81, 0
  %83 = extractvalue %dx.types.ResRet.f32 %81, 1
  %84 = extractvalue %dx.types.ResRet.f32 %81, 2
  %85 = extractvalue %dx.types.ResRet.f32 %81, 3
  %86 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %4, i32 %70, i32 48)  ; BufferLoad(srv,index,wot)
  %87 = extractvalue %dx.types.ResRet.f32 %86, 0
  %88 = extractvalue %dx.types.ResRet.f32 %86, 1
  %89 = extractvalue %dx.types.ResRet.f32 %86, 2
  %90 = extractvalue %dx.types.ResRet.f32 %86, 3
  %91 = fmul float %12, %72
  %92 = call float @dx.op.tertiary.f32(i32 46, float %73, float %17, float %91), !dx.precise !35  ; FMad(a,b,c)
  %93 = call float @dx.op.tertiary.f32(i32 46, float %74, float %22, float %92), !dx.precise !35  ; FMad(a,b,c)
  %94 = call float @dx.op.tertiary.f32(i32 46, float %75, float %27, float %93), !dx.precise !35  ; FMad(a,b,c)
  %95 = fmul float %13, %72
  %96 = call float @dx.op.tertiary.f32(i32 46, float %73, float %18, float %95), !dx.precise !35  ; FMad(a,b,c)
  %97 = call float @dx.op.tertiary.f32(i32 46, float %74, float %23, float %96), !dx.precise !35  ; FMad(a,b,c)
  %98 = call float @dx.op.tertiary.f32(i32 46, float %75, float %28, float %97), !dx.precise !35  ; FMad(a,b,c)
  %99 = fmul float %14, %72
  %100 = call float @dx.op.tertiary.f32(i32 46, float %73, float %19, float %99), !dx.precise !35  ; FMad(a,b,c)
  %101 = call float @dx.op.tertiary.f32(i32 46, float %74, float %24, float %100), !dx.precise !35  ; FMad(a,b,c)
  %102 = call float @dx.op.tertiary.f32(i32 46, float %75, float %29, float %101), !dx.precise !35  ; FMad(a,b,c)
  %103 = fmul float %15, %72
  %104 = call float @dx.op.tertiary.f32(i32 46, float %73, float %20, float %103), !dx.precise !35  ; FMad(a,b,c)
  %105 = call float @dx.op.tertiary.f32(i32 46, float %74, float %25, float %104), !dx.precise !35  ; FMad(a,b,c)
  %106 = call float @dx.op.tertiary.f32(i32 46, float %75, float %30, float %105), !dx.precise !35  ; FMad(a,b,c)
  %107 = fmul float %12, %77
  %108 = call float @dx.op.tertiary.f32(i32 46, float %78, float %17, float %107), !dx.precise !35  ; FMad(a,b,c)
  %109 = call float @dx.op.tertiary.f32(i32 46, float %79, float %22, float %108), !dx.precise !35  ; FMad(a,b,c)
  %110 = call float @dx.op.tertiary.f32(i32 46, float %80, float %27, float %109), !dx.precise !35  ; FMad(a,b,c)
  %111 = fmul float %13, %77
  %112 = call float @dx.op.tertiary.f32(i32 46, float %78, float %18, float %111), !dx.precise !35  ; FMad(a,b,c)
  %113 = call float @dx.op.tertiary.f32(i32 46, float %79, float %23, float %112), !dx.precise !35  ; FMad(a,b,c)
  %114 = call float @dx.op.tertiary.f32(i32 46, float %80, float %28, float %113), !dx.precise !35  ; FMad(a,b,c)
  %115 = fmul float %14, %77
  %116 = call float @dx.op.tertiary.f32(i32 46, float %78, float %19, float %115), !dx.precise !35  ; FMad(a,b,c)
  %117 = call float @dx.op.tertiary.f32(i32 46, float %79, float %24, float %116), !dx.precise !35  ; FMad(a,b,c)
  %118 = call float @dx.op.tertiary.f32(i32 46, float %80, float %29, float %117), !dx.precise !35  ; FMad(a,b,c)
  %119 = fmul float %15, %77
  %120 = call float @dx.op.tertiary.f32(i32 46, float %78, float %20, float %119), !dx.precise !35  ; FMad(a,b,c)
  %121 = call float @dx.op.tertiary.f32(i32 46, float %79, float %25, float %120), !dx.precise !35  ; FMad(a,b,c)
  %122 = call float @dx.op.tertiary.f32(i32 46, float %80, float %30, float %121), !dx.precise !35  ; FMad(a,b,c)
  %123 = fmul float %12, %82
  %124 = call float @dx.op.tertiary.f32(i32 46, float %83, float %17, float %123), !dx.precise !35  ; FMad(a,b,c)
  %125 = call float @dx.op.tertiary.f32(i32 46, float %84, float %22, float %124), !dx.precise !35  ; FMad(a,b,c)
  %126 = call float @dx.op.tertiary.f32(i32 46, float %85, float %27, float %125), !dx.precise !35  ; FMad(a,b,c)
  %127 = fmul float %13, %82
  %128 = call float @dx.op.tertiary.f32(i32 46, float %83, float %18, float %127), !dx.precise !35  ; FMad(a,b,c)
  %129 = call float @dx.op.tertiary.f32(i32 46, float %84, float %23, float %128), !dx.precise !35  ; FMad(a,b,c)
  %130 = call float @dx.op.tertiary.f32(i32 46, float %85, float %28, float %129), !dx.precise !35  ; FMad(a,b,c)
  %131 = fmul float %14, %82
  %132 = call float @dx.op.tertiary.f32(i32 46, float %83, float %19, float %131), !dx.precise !35  ; FMad(a,b,c)
  %133 = call float @dx.op.tertiary.f32(i32 46, float %84, float %24, float %132), !dx.precise !35  ; FMad(a,b,c)
  %134 = call float @dx.op.tertiary.f32(i32 46, float %85, float %29, float %133), !dx.precise !35  ; FMad(a,b,c)
  %135 = fmul float %15, %82
  %136 = call float @dx.op.tertiary.f32(i32 46, float %83, float %20, float %135), !dx.precise !35  ; FMad(a,b,c)
  %137 = call float @dx.op.tertiary.f32(i32 46, float %84, float %25, float %136), !dx.precise !35  ; FMad(a,b,c)
  %138 = call float @dx.op.tertiary.f32(i32 46, float %85, float %30, float %137), !dx.precise !35  ; FMad(a,b,c)
  %139 = fmul float %12, %87
  %140 = call float @dx.op.tertiary.f32(i32 46, float %88, float %17, float %139), !dx.precise !35  ; FMad(a,b,c)
  %141 = call float @dx.op.tertiary.f32(i32 46, float %89, float %22, float %140), !dx.precise !35  ; FMad(a,b,c)
  %142 = call float @dx.op.tertiary.f32(i32 46, float %90, float %27, float %141), !dx.precise !35  ; FMad(a,b,c)
  %143 = fmul float %13, %87
  %144 = call float @dx.op.tertiary.f32(i32 46, float %88, float %18, float %143), !dx.precise !35  ; FMad(a,b,c)
  %145 = call float @dx.op.tertiary.f32(i32 46, float %89, float %23, float %144), !dx.precise !35  ; FMad(a,b,c)
  %146 = call float @dx.op.tertiary.f32(i32 46, float %90, float %28, float %145), !dx.precise !35  ; FMad(a,b,c)
  %147 = fmul float %14, %87
  %148 = call float @dx.op.tertiary.f32(i32 46, float %88, float %19, float %147), !dx.precise !35  ; FMad(a,b,c)
  %149 = call float @dx.op.tertiary.f32(i32 46, float %89, float %24, float %148), !dx.precise !35  ; FMad(a,b,c)
  %150 = call float @dx.op.tertiary.f32(i32 46, float %90, float %29, float %149), !dx.precise !35  ; FMad(a,b,c)
  %151 = fmul float %15, %87
  %152 = call float @dx.op.tertiary.f32(i32 46, float %88, float %20, float %151), !dx.precise !35  ; FMad(a,b,c)
  %153 = call float @dx.op.tertiary.f32(i32 46, float %89, float %25, float %152), !dx.precise !35  ; FMad(a,b,c)
  %154 = call float @dx.op.tertiary.f32(i32 46, float %90, float %30, float %153), !dx.precise !35  ; FMad(a,b,c)
  %155 = fmul float %9, %126
  %156 = fmul float %9, %130
  %157 = fmul float %9, %134
  %158 = fmul float %9, %138
  %159 = fadd float %155, %142
  %160 = fadd float %156, %146
  %161 = fadd float %157, %150
  %162 = fadd float %158, %154
  %163 = fmul float %7, %94
  %164 = fmul float %7, %98
  %165 = fmul float %7, %102
  %166 = fmul float %7, %106
  %167 = fadd float %163, %159
  %168 = fadd float %164, %160
  %169 = fadd float %165, %161
  %170 = fadd float %166, %162
  %171 = fmul float %8, %110
  %172 = fmul float %8, %114
  %173 = fmul float %8, %118
  %174 = fmul float %8, %122
  %175 = fadd float %171, %167
  %176 = fadd float %172, %168
  %177 = fadd float %173, %169
  %178 = fadd float %174, %170
  %179 = fmul float %32, %175
  %180 = call float @dx.op.tertiary.f32(i32 46, float %176, float %37, float %179), !dx.precise !35  ; FMad(a,b,c)
  %181 = call float @dx.op.tertiary.f32(i32 46, float %177, float %42, float %180), !dx.precise !35  ; FMad(a,b,c)
  %182 = call float @dx.op.tertiary.f32(i32 46, float %178, float %47, float %181), !dx.precise !35  ; FMad(a,b,c)
  %183 = fmul float %33, %175
  %184 = call float @dx.op.tertiary.f32(i32 46, float %176, float %38, float %183), !dx.precise !35  ; FMad(a,b,c)
  %185 = call float @dx.op.tertiary.f32(i32 46, float %177, float %43, float %184), !dx.precise !35  ; FMad(a,b,c)
  %186 = call float @dx.op.tertiary.f32(i32 46, float %178, float %48, float %185), !dx.precise !35  ; FMad(a,b,c)
  %187 = fmul float %34, %175
  %188 = call float @dx.op.tertiary.f32(i32 46, float %176, float %39, float %187), !dx.precise !35  ; FMad(a,b,c)
  %189 = call float @dx.op.tertiary.f32(i32 46, float %177, float %44, float %188), !dx.precise !35  ; FMad(a,b,c)
  %190 = call float @dx.op.tertiary.f32(i32 46, float %178, float %49, float %189), !dx.precise !35  ; FMad(a,b,c)
  %191 = fmul float %35, %175
  %192 = call float @dx.op.tertiary.f32(i32 46, float %176, float %40, float %191), !dx.precise !35  ; FMad(a,b,c)
  %193 = call float @dx.op.tertiary.f32(i32 46, float %177, float %45, float %192), !dx.precise !35  ; FMad(a,b,c)
  %194 = call float @dx.op.tertiary.f32(i32 46, float %178, float %50, float %193), !dx.precise !35  ; FMad(a,b,c)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %182)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %186)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %190)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %194)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32, %dx.types.Handle, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!16}
!dx.entryPoints = !{!17}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 5}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{!5, null, !14, null}
!5 = !{!6, !8, !10, !11, !13}
!6 = !{i32 0, %"dx.alignment.legacy.class.StructuredBuffer<S_ShadowMatrices>"* undef, !"", i32 1, i32 10, i32 1, i32 12, i32 0, !7}
!7 = !{i32 1, i32 192}
!8 = !{i32 1, %"dx.alignment.legacy.class.StructuredBuffer<S_DefaultInstanceData>"* undef, !"", i32 1, i32 35, i32 1, i32 12, i32 0, !9}
!9 = !{i32 1, i32 116}
!10 = !{i32 2, %struct.ByteAddressBuffer* undef, !"", i32 1, i32 38, i32 1, i32 11, i32 0, null}
!11 = !{i32 3, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 1, i32 42, i32 1, i32 12, i32 0, !12}
!12 = !{i32 1, i32 4}
!13 = !{i32 4, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 1, i32 43, i32 1, i32 12, i32 0, !12}
!14 = !{!15}
!15 = !{i32 0, %_cbDrawCallBaseIndex* undef, !"", i32 0, i32 1, i32 1, i32 16, null}
!16 = !{[32 x i32] [i32 30, i32 4, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 15, i32 15, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0]}
!17 = !{void ()* @Shadow_VS, !"Shadow_VS", !18, !4, !34}
!18 = !{!19, !31, null}
!19 = !{!20, !23, !24, !26, !27, !28, !29, !30}
!20 = !{i32 0, !"SV_InstanceID", i8 5, i8 2, !21, i8 0, i32 1, i8 1, i32 0, i8 0, !22}
!21 = !{i32 0}
!22 = !{i32 3, i32 1}
!23 = !{i32 1, !"SV_VertexID", i8 5, i8 1, !21, i8 0, i32 1, i8 1, i32 1, i8 0, null}
!24 = !{i32 2, !"POSITION", i8 9, i8 0, !21, i8 0, i32 1, i8 4, i32 2, i8 0, !25}
!25 = !{i32 3, i32 7}
!26 = !{i32 3, !"NORMAL", i8 9, i8 0, !21, i8 0, i32 1, i8 4, i32 3, i8 0, null}
!27 = !{i32 4, !"TANGENT", i8 9, i8 0, !21, i8 0, i32 1, i8 4, i32 4, i8 0, null}
!28 = !{i32 5, !"BINORMAL", i8 9, i8 0, !21, i8 0, i32 1, i8 4, i32 5, i8 0, null}
!29 = !{i32 6, !"COLOR", i8 9, i8 0, !21, i8 0, i32 1, i8 4, i32 6, i8 0, null}
!30 = !{i32 7, !"TEXCOORD", i8 9, i8 0, !21, i8 0, i32 1, i8 2, i32 7, i8 0, null}
!31 = !{!32}
!32 = !{i32 0, !"SV_Position", i8 9, i8 3, !21, i8 4, i32 1, i8 4, i32 0, i8 0, !33}
!33 = !{i32 3, i32 15}
!34 = !{i32 0, i64 16}
!35 = !{i32 1}
 