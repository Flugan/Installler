;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; POSITION                 0   xyz         0     NONE   float   xyz 
; TEXCOORD                 0   xyzw        1     NONE   float   xyzw
; TEXCOORD                 1   xy          2     NONE   float   xy  
; TEXCOORD                 2   xy          3     NONE   float   xy  
; TEXCOORD                 3   x           4     NONE    uint   x   
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; TEXCOORD                 0   xyzw        1     NONE   float   xyzw
; TEXCOORD                 1   xy          2     NONE   float   xy  
; TEXCOORD                 2     zw        2     NONE   float     zw
; TEXCOORD                 3   x           3     NONE    uint   x   
; TEXCOORD                 4   xyzw        4     NONE   float   xyzw
;
; shader hash: 6abe113f2fb400398d9878ed1581a3e8
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; POSITION                 0                              
; TEXCOORD                 0                              
; TEXCOORD                 1                              
; TEXCOORD                 2                              
; TEXCOORD                 3                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; TEXCOORD                 3        nointerpolation       
; TEXCOORD                 4                 linear       
;
; Buffer Definitions:
;
; cbuffer _UI
; {
;
;   struct dx.alignment.legacy._UI
;   {
;
;       row_major float4x4 g_mWorldToView;            ; Offset:    0
;       row_major float4x4 g_mProjection;             ; Offset:   64
;       uint g_TextureIndexOffset;                    ; Offset:  128
;       bool g_bIntermediate;                         ; Offset:  132
;       float fPadding0;                              ; Offset:  136
;       float fPadding1;                              ; Offset:  140
;   
;   } _UI;                                            ; Offset:    0 Size:   144
;
; }
;
; Resource bind info for gDataSRV
; {
;
;   struct dx.alignment.legacy.struct.SUIData
;   {
;
;       row_major float4x4 mColorTransform;           ; Offset:    0
;       row_major float4x4 mColorTransformNegativeFill;; Offset:   64
;       row_major float4x4 mObjectToWorld;            ; Offset:  128
;       float4 vFillSettings;                         ; Offset:  192
;       float2 vShadowOffset;                         ; Offset:  208
;       float fExposure;                              ; Offset:  216
;       float fGreenThreshold;                        ; Offset:  220
;       uint nFillType;                               ; Offset:  224
;       uint nBlurType;                               ; Offset:  228
;       uint nFlags;                                  ; Offset:  232
;       uint pad;                                     ; Offset:  236
;   
;   } $Element;                                       ; Offset:    0 Size:   240
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _UI                               cbuffer      NA          NA     CB0            cb0     1
; gDataSRV                          texture  struct         r/o      T0            t32     1
;
;
; ViewId state:
;
; Number of inputs: 17, outputs: 20
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2, 16 }
;   output 1 depends on inputs: { 0, 1, 2, 16 }
;   output 2 depends on inputs: { 0, 1, 2, 16 }
;   output 3 depends on inputs: { 0, 1, 2, 16 }
;   output 4 depends on inputs: { 0, 1, 2, 16 }
;   output 5 depends on inputs: { 0, 1, 2, 16 }
;   output 6 depends on inputs: { 0, 1, 2, 16 }
;   output 7 depends on inputs: { 0, 1, 2, 16 }
;   output 8 depends on inputs: { 8 }
;   output 9 depends on inputs: { 9 }
;   output 10 depends on inputs: { 12 }
;   output 11 depends on inputs: { 13 }
;   output 12 depends on inputs: { 16 }
;   output 16 depends on inputs: { 4 }
;   output 17 depends on inputs: { 5 }
;   output 18 depends on inputs: { 6 }
;   output 19 depends on inputs: { 7 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%"dx.alignment.legacy.class.StructuredBuffer<SUIData>" = type { %dx.alignment.legacy.struct.SUIData }
%dx.alignment.legacy.struct.SUIData = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <2 x float>, float, float, i32, i32, i32, i32 }
%dx.alignment.legacy._UI = type { [4 x <4 x float>], [4 x <4 x float>], i32, i32, float, float }

define void @UI_VS() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 32, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call i32 @dx.op.loadInput.i32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.i32(i32 5, i32 4, i32 0, i8 0, i32 0)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 0, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 1, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 2, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 3, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  %15 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1, i32 %3, i32 128)  ; BufferLoad(srv,index,wot)
  %16 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1, i32 %3, i32 144)  ; BufferLoad(srv,index,wot)
  %17 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1, i32 %3, i32 160)  ; BufferLoad(srv,index,wot)
  %18 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1, i32 %3, i32 176)  ; BufferLoad(srv,index,wot)
  %19 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1, i32 %3, i32 208)  ; BufferLoad(srv,index,wot)
  %20 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %3, i32 232)  ; BufferLoad(srv,index,wot)
  %21 = extractvalue %dx.types.ResRet.i32 %20, 0
  %22 = and i32 %21, 1
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %103, label %24

; <label>:24                                      ; preds = %0
  %25 = extractvalue %dx.types.ResRet.f32 %19, 1
  %26 = extractvalue %dx.types.ResRet.f32 %19, 0
  %27 = extractvalue %dx.types.ResRet.f32 %18, 2
  %28 = extractvalue %dx.types.ResRet.f32 %18, 1
  %29 = extractvalue %dx.types.ResRet.f32 %18, 0
  %30 = extractvalue %dx.types.ResRet.f32 %17, 2
  %31 = extractvalue %dx.types.ResRet.f32 %17, 1
  %32 = extractvalue %dx.types.ResRet.f32 %17, 0
  %33 = extractvalue %dx.types.ResRet.f32 %16, 2
  %34 = extractvalue %dx.types.ResRet.f32 %16, 1
  %35 = extractvalue %dx.types.ResRet.f32 %16, 0
  %36 = extractvalue %dx.types.ResRet.f32 %15, 2
  %37 = extractvalue %dx.types.ResRet.f32 %15, 1
  %38 = extractvalue %dx.types.ResRet.f32 %15, 0
  %39 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %40 = extractvalue %dx.types.CBufRet.f32 %39, 0
  %41 = extractvalue %dx.types.CBufRet.f32 %39, 1
  %42 = extractvalue %dx.types.CBufRet.f32 %39, 2
  %43 = extractvalue %dx.types.CBufRet.f32 %39, 3
  %44 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %45 = extractvalue %dx.types.CBufRet.f32 %44, 0
  %46 = extractvalue %dx.types.CBufRet.f32 %44, 1
  %47 = extractvalue %dx.types.CBufRet.f32 %44, 2
  %48 = extractvalue %dx.types.CBufRet.f32 %44, 3
  %49 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %50 = extractvalue %dx.types.CBufRet.f32 %49, 0
  %51 = extractvalue %dx.types.CBufRet.f32 %49, 1
  %52 = extractvalue %dx.types.CBufRet.f32 %49, 2
  %53 = extractvalue %dx.types.CBufRet.f32 %49, 3
  %54 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %55 = extractvalue %dx.types.CBufRet.f32 %54, 0
  %56 = extractvalue %dx.types.CBufRet.f32 %54, 1
  %57 = extractvalue %dx.types.CBufRet.f32 %54, 2
  %58 = extractvalue %dx.types.CBufRet.f32 %54, 3
  %59 = fadd fast float %26, %12
  %60 = fadd fast float %25, %13
  %61 = fmul fast float %32, %14
  %62 = fmul fast float %31, %14
  %63 = fmul fast float %30, %14
  %64 = fadd fast float %61, %29
  %65 = fadd fast float %62, %28
  %66 = fadd fast float %63, %27
  %67 = fmul fast float %59, %38
  %68 = fmul fast float %59, %37
  %69 = fmul fast float %59, %36
  %70 = fadd fast float %64, %67
  %71 = fadd fast float %65, %68
  %72 = fadd fast float %66, %69
  %73 = fmul fast float %60, %35
  %74 = fmul fast float %60, %34
  %75 = fmul fast float %60, %33
  %76 = fadd fast float %70, %73
  %77 = fadd fast float %71, %74
  %78 = fadd fast float %72, %75
  %79 = fmul fast float %50, %78
  %80 = fmul fast float %51, %78
  %81 = fmul fast float %52, %78
  %82 = fmul fast float %53, %78
  %83 = fmul fast float %40, %76
  %84 = fmul fast float %41, %76
  %85 = fmul fast float %42, %76
  %86 = fmul fast float %43, %76
  %87 = fmul fast float %45, %77
  %88 = fmul fast float %46, %77
  %89 = fmul fast float %47, %77
  %90 = fmul fast float %48, %77
  %91 = fadd fast float %87, %83
  %92 = fadd fast float %91, %55
  %93 = fadd fast float %92, %79
  %94 = fadd fast float %88, %84
  %95 = fadd fast float %94, %56
  %96 = fadd fast float %95, %80
  %97 = fadd fast float %89, %85
  %98 = fadd fast float %97, %57
  %99 = fadd fast float %98, %81
  %100 = fadd fast float %90, %86
  %101 = fadd fast float %100, %58
  %102 = fadd fast float %101, %82
  br label %103

; <label>:103                                     ; preds = %24, %0
  %104 = phi float [ %93, %24 ], [ %12, %0 ]
  %105 = phi float [ %96, %24 ], [ %13, %0 ]
  %106 = phi float [ %99, %24 ], [ %14, %0 ]
  %107 = phi float [ %102, %24 ], [ 1.000000e+00, %0 ]
  %108 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %109 = extractvalue %dx.types.CBufRet.f32 %108, 0
  %110 = extractvalue %dx.types.CBufRet.f32 %108, 1
  %111 = extractvalue %dx.types.CBufRet.f32 %108, 2
  %112 = extractvalue %dx.types.CBufRet.f32 %108, 3
  %113 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %114 = extractvalue %dx.types.CBufRet.f32 %113, 0
  %115 = extractvalue %dx.types.CBufRet.f32 %113, 1
  %116 = extractvalue %dx.types.CBufRet.f32 %113, 2
  %117 = extractvalue %dx.types.CBufRet.f32 %113, 3
  %118 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %119 = extractvalue %dx.types.CBufRet.f32 %118, 0
  %120 = extractvalue %dx.types.CBufRet.f32 %118, 1
  %121 = extractvalue %dx.types.CBufRet.f32 %118, 2
  %122 = extractvalue %dx.types.CBufRet.f32 %118, 3
  %123 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %124 = extractvalue %dx.types.CBufRet.f32 %123, 0
  %125 = extractvalue %dx.types.CBufRet.f32 %123, 1
  %126 = extractvalue %dx.types.CBufRet.f32 %123, 2
  %127 = extractvalue %dx.types.CBufRet.f32 %123, 3
  %128 = fmul fast float %109, %104
  %129 = call float @dx.op.tertiary.f32(i32 46, float %105, float %114, float %128)  ; FMad(a,b,c)
  %130 = call float @dx.op.tertiary.f32(i32 46, float %106, float %119, float %129)  ; FMad(a,b,c)
  %131 = call float @dx.op.tertiary.f32(i32 46, float %107, float %124, float %130)  ; FMad(a,b,c)
  %132 = fmul fast float %110, %104
  %133 = call float @dx.op.tertiary.f32(i32 46, float %105, float %115, float %132)  ; FMad(a,b,c)
  %134 = call float @dx.op.tertiary.f32(i32 46, float %106, float %120, float %133)  ; FMad(a,b,c)
  %135 = call float @dx.op.tertiary.f32(i32 46, float %107, float %125, float %134)  ; FMad(a,b,c)
  %136 = fmul fast float %111, %104
  %137 = call float @dx.op.tertiary.f32(i32 46, float %105, float %116, float %136)  ; FMad(a,b,c)
  %138 = call float @dx.op.tertiary.f32(i32 46, float %106, float %121, float %137)  ; FMad(a,b,c)
  %139 = call float @dx.op.tertiary.f32(i32 46, float %107, float %126, float %138)  ; FMad(a,b,c)
  %140 = fmul fast float %112, %104
  %141 = call float @dx.op.tertiary.f32(i32 46, float %105, float %117, float %140)  ; FMad(a,b,c)
  %142 = call float @dx.op.tertiary.f32(i32 46, float %106, float %122, float %141)  ; FMad(a,b,c)
  %143 = call float @dx.op.tertiary.f32(i32 46, float %107, float %127, float %142)  ; FMad(a,b,c)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %131)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %135)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %139)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %143)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %104)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %105)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %106)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %107)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %6)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %7)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %4)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %5)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.i32(i32 5, i32 4, i32 0, i8 0, i32 %3)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 0, float %8)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 1, float %9)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 2, float %10)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 3, float %11)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind
declare void @dx.op.storeOutput.i32(i32, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32, %dx.types.Handle, i32, i32) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!10}
!dx.entryPoints = !{!11}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 5}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{!5, null, !8, null}
!5 = !{!6}
!6 = !{i32 0, %"dx.alignment.legacy.class.StructuredBuffer<SUIData>"* undef, !"", i32 0, i32 32, i32 1, i32 12, i32 0, !7}
!7 = !{i32 1, i32 240}
!8 = !{!9}
!9 = !{i32 0, %dx.alignment.legacy._UI* undef, !"", i32 0, i32 0, i32 1, i32 144, null}
!10 = !{[19 x i32] [i32 17, i32 20, i32 255, i32 255, i32 255, i32 0, i32 65536, i32 131072, i32 262144, i32 524288, i32 256, i32 512, i32 0, i32 0, i32 1024, i32 2048, i32 0, i32 0, i32 4351]}
!11 = !{void ()* @UI_VS, !"UI_VS", !12, !4, !35}
!12 = !{!13, !27, null}
!13 = !{!14, !17, !19, !22, !24}
!14 = !{i32 0, !"POSITION", i8 9, i8 0, !15, i8 0, i32 1, i8 3, i32 0, i8 0, !16}
!15 = !{i32 0}
!16 = !{i32 3, i32 7}
!17 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !15, i8 0, i32 1, i8 4, i32 1, i8 0, !18}
!18 = !{i32 3, i32 15}
!19 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !20, i8 0, i32 1, i8 2, i32 2, i8 0, !21}
!20 = !{i32 1}
!21 = !{i32 3, i32 3}
!22 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !23, i8 0, i32 1, i8 2, i32 3, i8 0, !21}
!23 = !{i32 2}
!24 = !{i32 4, !"TEXCOORD", i8 5, i8 0, !25, i8 0, i32 1, i8 1, i32 4, i8 0, !26}
!25 = !{i32 3}
!26 = !{i32 3, i32 1}
!27 = !{!28, !29, !30, !31, !32, !33}
!28 = !{i32 0, !"SV_Position", i8 9, i8 3, !15, i8 4, i32 1, i8 4, i32 0, i8 0, !18}
!29 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !15, i8 2, i32 1, i8 4, i32 1, i8 0, !18}
!30 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !20, i8 2, i32 1, i8 2, i32 2, i8 0, !21}
!31 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !23, i8 2, i32 1, i8 2, i32 2, i8 2, !21}
!32 = !{i32 4, !"TEXCOORD", i8 5, i8 0, !25, i8 1, i32 1, i8 1, i32 3, i8 0, !26}
!33 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !34, i8 2, i32 1, i8 4, i32 4, i8 0, !18}
!34 = !{i32 4}
!35 = !{i32 0, i64 16}
 