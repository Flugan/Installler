;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_InstanceID            0   x           0   INSTID    uint   x   
; SV_VertexID              0   x           1   VERTID    uint       
; POSITION                 0   xyzw        2     NONE   float   xyzw
; NORMAL                   0   xyzw        3     NONE   float       
; TANGENT                  0   xyzw        4     NONE   float       
; BINORMAL                 0   xyzw        5     NONE   float       
; COLOR                    0   xyzw        6     NONE   float       
; TEXCOORD                 0   xy          7     NONE   float       
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; TEXCOORD                 0   xyzw        1     NONE   float   xyzw
; TEXCOORD                 1   x           2     NONE   float   x   
;
; shader hash: a68c0d3d578eedbd9bf0bc7629d5ec1d
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_InstanceID            0                              
; SV_VertexID              0                              
; POSITION                 0                              
; NORMAL                   0                              
; TANGENT                  0                              
; BINORMAL                 0                              
; COLOR                    0                              
; TEXCOORD                 0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
;
; Buffer Definitions:
;
; cbuffer _cbDrawCallBaseIndex
; {
;
;   struct _cbDrawCallBaseIndex
;   {
;
;       struct struct.S_DrawCallConstantBuffer
;       {
;
;           uint nDefaultBaseInstance;                ; Offset:    0
;           uint nCustomBaseInstance;                 ; Offset:    4
;           uint nGPUCullingEnabled;                  ; Offset:    8
;           uint nUnused2;                            ; Offset:   12
;       
;       } cbDrawCallBaseIndex;                        ; Offset:    0
;
;   
;   } _cbDrawCallBaseIndex;                           ; Offset:    0 Size:    16
;
; }
;
; cbuffer _cbSharedPerViewData
; {
;
;   struct dx.alignment.legacy._cbSharedPerViewData
;   {
;
;       struct dx.alignment.legacy.struct.S_SharedPerViewData
;       {
;
;           row_major float4x4 mProjection;           ; Offset:    0
;           row_major float4x4 mProjectionInverse;    ; Offset:   64
;           row_major float4x4 mViewToViewport;       ; Offset:  128
;           row_major float4x4 mWorldToView;          ; Offset:  192
;           row_major float4x4 mViewToWorld;          ; Offset:  256
;           float4 vViewRemap;                        ; Offset:  320
;           float4 vViewDepthRemap;                   ; Offset:  336
;           float4 vEyeVectorUL;                      ; Offset:  352
;           float4 vEyeVectorLR;                      ; Offset:  368
;           float4 vEye_WS;                           ; Offset:  384
;           float4 vEyeVectorUL_WS;                   ; Offset:  400
;           float4 vEyeDeltaX_WS;                     ; Offset:  416
;           float4 vEyeDeltaY_WS;                     ; Offset:  432
;           float4 vViewSpaceUpVector;                ; Offset:  448
;           float4 vCheckerModeParams;                ; Offset:  464
;           float4 vViewportSize;                     ; Offset:  480
;           float4 vEngineTime;                       ; Offset:  496
;           float4 vPrecipitations;                   ; Offset:  512
;           float4 vClipPlane;                        ; Offset:  528
;           float4 vExtraParams;                      ; Offset:  544
;           float4 vScatteringParams;                 ; Offset:  560
;           float4 vScatteringParams2;                ; Offset:  576
;           float4 vStereoscopic3DCorrectionParams;   ; Offset:  592
;           float4 vVoxelDefinition;                  ; Offset:  608
;           float4 vWaterSimulationDefinition;        ; Offset:  624
;           float4 vShadowBias;                       ; Offset:  640
;           float4 vLightningIntensity;               ; Offset:  656
;           float4 vReflectionData;                   ; Offset:  672
;           uint nIsDLSS;                             ; Offset:  688
;           uint nEnableRaytraceReflSpecTrans;        ; Offset:  692
;           uint nFrameIndex;                         ; Offset:  696
;           float fNear;                              ; Offset:  700
;           float fRcpLogFarNear;                     ; Offset:  704
;           float fRcpTanLODFovY;                     ; Offset:  708
;           uint nIsMirrorCamera;                     ; Offset:  712
;           uint nAdvancedHairLightingParams;         ; Offset:  716
;           float fHairAlphaThresholdOffset;          ; Offset:  720
;           uint nUseHairHashedAlphaTest;             ; Offset:  724
;       
;       } cbSharedPerViewData;                        ; Offset:    0
;
;   
;   } _cbSharedPerViewData;                           ; Offset:    0 Size:   728
;
; }
;
; cbuffer _cbPerViewVelocityData
; {
;
;   struct dx.alignment.legacy._cbPerViewVelocityData
;   {
;
;       struct dx.alignment.legacy.struct.S_PerViewVelocityData
;       {
;
;           row_major float4x4 gm_mPreviousWorldToProjection;; Offset:    0
;           row_major float4x4 gm_mPreviousViewToProjection;; Offset:   64
;       
;       } cbPerViewVelocityData;                      ; Offset:    0
;
;   
;   } _cbPerViewVelocityData;                         ; Offset:    0 Size:   128
;
; }
;
; Resource bind info for mapRenderPrimitiveData
; {
;
;   struct struct.S_RenderPrimitiveData
;   {
;
;       float4 vLocalCenter;                          ; Offset:    0
;       float4 vLocalHalfSize;                        ; Offset:   16
;       float4 vPosScale;                             ; Offset:   32
;       float4 vPosBias;                              ; Offset:   48
;       float4 vTexScaleBias;                         ; Offset:   64
;       uint nRelVertexColorOffset;                   ; Offset:   80
;       uint nRelBonesOffset;                         ; Offset:   84
;       uint nIndexCount;                             ; Offset:   88
;       uint nRenderFlags;                            ; Offset:   92
;   
;   } $Element;                                       ; Offset:    0 Size:    96
;
; }
;
; Resource bind info for mapInstanceData
; {
;
;   struct dx.alignment.legacy.struct.S_DefaultInstanceData
;   {
;
;       row_major float4x4 mObjectToWorld;            ; Offset:    0
;       uint nGlobBonesOffset;                        ; Offset:   64
;       uint nGlobVertexColorOffset;                  ; Offset:   68
;       uint nGlobPreviousFrameIndex;                 ; Offset:   72
;       uint nGlobPrimitiveResource;                  ; Offset:   76
;       uint nGlobRGNBoundingBox;                     ; Offset:   80
;       uint nGlobRGNInstanceVarianceOffset;          ; Offset:   84
;       uint nGlobRenderMask;                         ; Offset:   88
;       uint nGlobLODProxy;                           ; Offset:   92
;       uint nGlobLODSelectionMaskIndex;              ; Offset:   96
;       uint nFlags;                                  ; Offset:  100
;       int nForcedLODIndex;                          ; Offset:  104
;       float fLODScale;                              ; Offset:  108
;       float fDitherFadeValue;                       ; Offset:  112
;   
;   } $Element;                                       ; Offset:    0 Size:   116
;
; }
;
; Resource bind info for mapBonesBuffer
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for mapInstancingData
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for mapCPUInstanceIndex
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _cbDrawCallBaseIndex              cbuffer      NA          NA     CB0            cb1     1
; _cbSharedPerViewData              cbuffer      NA          NA     CB1            cb2     1
; _cbPerViewVelocityData            cbuffer      NA          NA     CB2            cb3     1
; mapRenderPrimitiveData            texture  struct         r/o      T0     t31,space1     1
; mapInstanceData                   texture  struct         r/o      T1     t35,space1     1
; mapInstanceVarianceOffsets        texture    byte         r/o      T2     t38,space1     1
; mapBonesBuffer                    texture  struct         r/o      T3     t39,space1     1
; mapInstancingData                 texture  struct         r/o      T4     t42,space1     1
; mapCPUInstanceIndex               texture  struct         r/o      T5     t43,space1     1
;
;
; ViewId state:
;
; Number of inputs: 30, outputs: 9
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 8, 9, 10, 11 }
;   output 1 depends on inputs: { 0, 8, 9, 10, 11 }
;   output 2 depends on inputs: { 0, 8, 9, 10, 11 }
;   output 3 depends on inputs: { 0, 8, 9, 10, 11 }
;   output 4 depends on inputs: { 0, 8, 9, 10, 11 }
;   output 5 depends on inputs: { 0, 8, 9, 10, 11 }
;   output 6 depends on inputs: { 0, 8, 9, 10, 11 }
;   output 7 depends on inputs: { 0, 8, 9, 10, 11 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%"class.StructuredBuffer<S_RenderPrimitiveData>" = type { %struct.S_RenderPrimitiveData }
%struct.S_RenderPrimitiveData = type { <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, i32, i32, i32, i32 }
%"dx.alignment.legacy.class.StructuredBuffer<S_DefaultInstanceData>" = type { %dx.alignment.legacy.struct.S_DefaultInstanceData }
%dx.alignment.legacy.struct.S_DefaultInstanceData = type { [4 x <4 x float>], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float }
%struct.ByteAddressBuffer = type { i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%"class.StructuredBuffer<unsigned int>" = type { i32 }
%_cbDrawCallBaseIndex = type { %struct.S_DrawCallConstantBuffer }
%struct.S_DrawCallConstantBuffer = type { i32, i32, i32, i32 }
%dx.alignment.legacy._cbSharedPerViewData = type { %dx.alignment.legacy.struct.S_SharedPerViewData }
%dx.alignment.legacy.struct.S_SharedPerViewData = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, i32, i32, i32, float, float, float, i32, i32, float, i32 }
%dx.alignment.legacy._cbPerViewVelocityData = type { %dx.alignment.legacy.struct.S_PerViewVelocityData }
%dx.alignment.legacy.struct.S_PerViewVelocityData = type { [4 x <4 x float>], [4 x <4 x float>] }

define void @Velocity_VS() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 5, i32 43, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 4, i32 42, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 3, i32 39, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 2, i32 38, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 35, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 31, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 2, i32 3, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 1, i32 2, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef), !dx.precise !39  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef), !dx.precise !39  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef), !dx.precise !39  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 3, i32 undef), !dx.precise !39  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call i32 @dx.op.loadInput.i32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %9, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %16 = extractvalue %dx.types.CBufRet.i32 %15, 0
  %17 = extractvalue %dx.types.CBufRet.i32 %15, 2
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %28, label %19

; <label>:19                                      ; preds = %0
  %20 = shl i32 %16, 2
  %21 = add i32 %20, 4
  %22 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %4, i32 %21, i32 undef)  ; BufferLoad(srv,index,wot)
  %23 = extractvalue %dx.types.ResRet.i32 %22, 0
  %24 = add i32 %23, %14
  %25 = shl i32 %24, 1
  %26 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %25, i32 0)  ; BufferLoad(srv,index,wot)
  %27 = extractvalue %dx.types.ResRet.i32 %26, 0
  br label %33

; <label>:28                                      ; preds = %0
  %29 = add i32 %16, %14
  %30 = shl i32 %29, 1
  %31 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %30, i32 0)  ; BufferLoad(srv,index,wot)
  %32 = extractvalue %dx.types.ResRet.i32 %31, 0
  br label %33

; <label>:33                                      ; preds = %28, %19
  %34 = phi i32 [ %27, %19 ], [ %32, %28 ]
  %35 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %5, i32 %34, i32 0)  ; BufferLoad(srv,index,wot)
  %36 = extractvalue %dx.types.ResRet.f32 %35, 0
  %37 = extractvalue %dx.types.ResRet.f32 %35, 1
  %38 = extractvalue %dx.types.ResRet.f32 %35, 2
  %39 = extractvalue %dx.types.ResRet.f32 %35, 3
  %40 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %5, i32 %34, i32 16)  ; BufferLoad(srv,index,wot)
  %41 = extractvalue %dx.types.ResRet.f32 %40, 0
  %42 = extractvalue %dx.types.ResRet.f32 %40, 1
  %43 = extractvalue %dx.types.ResRet.f32 %40, 2
  %44 = extractvalue %dx.types.ResRet.f32 %40, 3
  %45 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %5, i32 %34, i32 32)  ; BufferLoad(srv,index,wot)
  %46 = extractvalue %dx.types.ResRet.f32 %45, 0
  %47 = extractvalue %dx.types.ResRet.f32 %45, 1
  %48 = extractvalue %dx.types.ResRet.f32 %45, 2
  %49 = extractvalue %dx.types.ResRet.f32 %45, 3
  %50 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %5, i32 %34, i32 48)  ; BufferLoad(srv,index,wot)
  %51 = extractvalue %dx.types.ResRet.f32 %50, 0
  %52 = extractvalue %dx.types.ResRet.f32 %50, 1
  %53 = extractvalue %dx.types.ResRet.f32 %50, 2
  %54 = extractvalue %dx.types.ResRet.f32 %50, 3
  br i1 %18, label %67, label %55

; <label>:55                                      ; preds = %33
  %56 = shl i32 %16, 2
  %57 = add i32 %56, 4
  %58 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %4, i32 %57, i32 undef)  ; BufferLoad(srv,index,wot)
  %59 = extractvalue %dx.types.ResRet.i32 %58, 0
  %60 = add i32 %59, %14
  %61 = shl i32 %60, 1
  %62 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %61, i32 0)  ; BufferLoad(srv,index,wot)
  %63 = extractvalue %dx.types.ResRet.i32 %62, 0
  %64 = or i32 %61, 1
  %65 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %64, i32 0)  ; BufferLoad(srv,index,wot)
  %66 = extractvalue %dx.types.ResRet.i32 %65, 0
  br label %75

; <label>:67                                      ; preds = %33
  %68 = add i32 %16, %14
  %69 = shl i32 %68, 1
  %70 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %69, i32 0)  ; BufferLoad(srv,index,wot)
  %71 = extractvalue %dx.types.ResRet.i32 %70, 0
  %72 = or i32 %69, 1
  %73 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %72, i32 0)  ; BufferLoad(srv,index,wot)
  %74 = extractvalue %dx.types.ResRet.i32 %73, 0
  br label %75

; <label>:75                                      ; preds = %67, %55
  %76 = phi i32 [ %63, %55 ], [ %71, %67 ]
  %77 = phi i32 [ %66, %55 ], [ %74, %67 ]
  %78 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %5, i32 %76, i32 64)  ; BufferLoad(srv,index,wot)
  %79 = extractvalue %dx.types.ResRet.i32 %78, 0
  %80 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %6, i32 %77, i32 84)  ; BufferLoad(srv,index,wot)
  %81 = extractvalue %dx.types.ResRet.i32 %80, 0
  %82 = add i32 %81, %79
  %83 = fadd float %13, 5.000000e-01
  %84 = fptosi float %83 to i32
  %85 = mul nsw i32 %84, 3
  %86 = add i32 %82, %85
  %87 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %3, i32 %86, i32 0)  ; BufferLoad(srv,index,wot)
  %88 = extractvalue %dx.types.ResRet.f32 %87, 0
  %89 = extractvalue %dx.types.ResRet.f32 %87, 1
  %90 = extractvalue %dx.types.ResRet.f32 %87, 2
  %91 = extractvalue %dx.types.ResRet.f32 %87, 3
  %92 = add i32 %85, 1
  %93 = add i32 %92, %82
  %94 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %3, i32 %93, i32 0)  ; BufferLoad(srv,index,wot)
  %95 = extractvalue %dx.types.ResRet.f32 %94, 0
  %96 = extractvalue %dx.types.ResRet.f32 %94, 1
  %97 = extractvalue %dx.types.ResRet.f32 %94, 2
  %98 = extractvalue %dx.types.ResRet.f32 %94, 3
  %99 = add i32 %85, 2
  %100 = add i32 %99, %82
  %101 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %3, i32 %100, i32 0)  ; BufferLoad(srv,index,wot)
  %102 = extractvalue %dx.types.ResRet.f32 %101, 0
  %103 = extractvalue %dx.types.ResRet.f32 %101, 1
  %104 = extractvalue %dx.types.ResRet.f32 %101, 2
  %105 = extractvalue %dx.types.ResRet.f32 %101, 3
  %106 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %107 = extractvalue %dx.types.CBufRet.f32 %106, 0
  %108 = extractvalue %dx.types.CBufRet.f32 %106, 1
  %109 = extractvalue %dx.types.CBufRet.f32 %106, 2
  %110 = extractvalue %dx.types.CBufRet.f32 %106, 3
  %111 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 13)  ; CBufferLoadLegacy(handle,regIndex)
  %112 = extractvalue %dx.types.CBufRet.f32 %111, 0
  %113 = extractvalue %dx.types.CBufRet.f32 %111, 1
  %114 = extractvalue %dx.types.CBufRet.f32 %111, 2
  %115 = extractvalue %dx.types.CBufRet.f32 %111, 3
  %116 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %117 = extractvalue %dx.types.CBufRet.f32 %116, 0
  %118 = extractvalue %dx.types.CBufRet.f32 %116, 1
  %119 = extractvalue %dx.types.CBufRet.f32 %116, 2
  %120 = extractvalue %dx.types.CBufRet.f32 %116, 3
  %121 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 15)  ; CBufferLoadLegacy(handle,regIndex)
  %122 = extractvalue %dx.types.CBufRet.f32 %121, 0
  %123 = extractvalue %dx.types.CBufRet.f32 %121, 1
  %124 = extractvalue %dx.types.CBufRet.f32 %121, 2
  %125 = extractvalue %dx.types.CBufRet.f32 %121, 3
  %126 = fmul float %36, %88
  %127 = call float @dx.op.tertiary.f32(i32 46, float %95, float %41, float %126), !dx.precise !39  ; FMad(a,b,c)
  %128 = call float @dx.op.tertiary.f32(i32 46, float %102, float %46, float %127), !dx.precise !39  ; FMad(a,b,c)
  %129 = call float @dx.op.tertiary.f32(i32 46, float 0.000000e+00, float %51, float %128), !dx.precise !39  ; FMad(a,b,c)
  %130 = fmul float %37, %88
  %131 = call float @dx.op.tertiary.f32(i32 46, float %95, float %42, float %130), !dx.precise !39  ; FMad(a,b,c)
  %132 = call float @dx.op.tertiary.f32(i32 46, float %102, float %47, float %131), !dx.precise !39  ; FMad(a,b,c)
  %133 = call float @dx.op.tertiary.f32(i32 46, float 0.000000e+00, float %52, float %132), !dx.precise !39  ; FMad(a,b,c)
  %134 = fmul float %38, %88
  %135 = call float @dx.op.tertiary.f32(i32 46, float %95, float %43, float %134), !dx.precise !39  ; FMad(a,b,c)
  %136 = call float @dx.op.tertiary.f32(i32 46, float %102, float %48, float %135), !dx.precise !39  ; FMad(a,b,c)
  %137 = call float @dx.op.tertiary.f32(i32 46, float 0.000000e+00, float %53, float %136), !dx.precise !39  ; FMad(a,b,c)
  %138 = fmul float %39, %88
  %139 = call float @dx.op.tertiary.f32(i32 46, float %95, float %44, float %138), !dx.precise !39  ; FMad(a,b,c)
  %140 = call float @dx.op.tertiary.f32(i32 46, float %102, float %49, float %139), !dx.precise !39  ; FMad(a,b,c)
  %141 = call float @dx.op.tertiary.f32(i32 46, float 0.000000e+00, float %54, float %140), !dx.precise !39  ; FMad(a,b,c)
  %142 = fmul float %36, %89
  %143 = call float @dx.op.tertiary.f32(i32 46, float %96, float %41, float %142), !dx.precise !39  ; FMad(a,b,c)
  %144 = call float @dx.op.tertiary.f32(i32 46, float %103, float %46, float %143), !dx.precise !39  ; FMad(a,b,c)
  %145 = call float @dx.op.tertiary.f32(i32 46, float 0.000000e+00, float %51, float %144), !dx.precise !39  ; FMad(a,b,c)
  %146 = fmul float %37, %89
  %147 = call float @dx.op.tertiary.f32(i32 46, float %96, float %42, float %146), !dx.precise !39  ; FMad(a,b,c)
  %148 = call float @dx.op.tertiary.f32(i32 46, float %103, float %47, float %147), !dx.precise !39  ; FMad(a,b,c)
  %149 = call float @dx.op.tertiary.f32(i32 46, float 0.000000e+00, float %52, float %148), !dx.precise !39  ; FMad(a,b,c)
  %150 = fmul float %38, %89
  %151 = call float @dx.op.tertiary.f32(i32 46, float %96, float %43, float %150), !dx.precise !39  ; FMad(a,b,c)
  %152 = call float @dx.op.tertiary.f32(i32 46, float %103, float %48, float %151), !dx.precise !39  ; FMad(a,b,c)
  %153 = call float @dx.op.tertiary.f32(i32 46, float 0.000000e+00, float %53, float %152), !dx.precise !39  ; FMad(a,b,c)
  %154 = fmul float %39, %89
  %155 = call float @dx.op.tertiary.f32(i32 46, float %96, float %44, float %154), !dx.precise !39  ; FMad(a,b,c)
  %156 = call float @dx.op.tertiary.f32(i32 46, float %103, float %49, float %155), !dx.precise !39  ; FMad(a,b,c)
  %157 = call float @dx.op.tertiary.f32(i32 46, float 0.000000e+00, float %54, float %156), !dx.precise !39  ; FMad(a,b,c)
  %158 = fmul float %36, %90
  %159 = call float @dx.op.tertiary.f32(i32 46, float %97, float %41, float %158), !dx.precise !39  ; FMad(a,b,c)
  %160 = call float @dx.op.tertiary.f32(i32 46, float %104, float %46, float %159), !dx.precise !39  ; FMad(a,b,c)
  %161 = call float @dx.op.tertiary.f32(i32 46, float 0.000000e+00, float %51, float %160), !dx.precise !39  ; FMad(a,b,c)
  %162 = fmul float %37, %90
  %163 = call float @dx.op.tertiary.f32(i32 46, float %97, float %42, float %162), !dx.precise !39  ; FMad(a,b,c)
  %164 = call float @dx.op.tertiary.f32(i32 46, float %104, float %47, float %163), !dx.precise !39  ; FMad(a,b,c)
  %165 = call float @dx.op.tertiary.f32(i32 46, float 0.000000e+00, float %52, float %164), !dx.precise !39  ; FMad(a,b,c)
  %166 = fmul float %38, %90
  %167 = call float @dx.op.tertiary.f32(i32 46, float %97, float %43, float %166), !dx.precise !39  ; FMad(a,b,c)
  %168 = call float @dx.op.tertiary.f32(i32 46, float %104, float %48, float %167), !dx.precise !39  ; FMad(a,b,c)
  %169 = call float @dx.op.tertiary.f32(i32 46, float 0.000000e+00, float %53, float %168), !dx.precise !39  ; FMad(a,b,c)
  %170 = fmul float %39, %90
  %171 = call float @dx.op.tertiary.f32(i32 46, float %97, float %44, float %170), !dx.precise !39  ; FMad(a,b,c)
  %172 = call float @dx.op.tertiary.f32(i32 46, float %104, float %49, float %171), !dx.precise !39  ; FMad(a,b,c)
  %173 = call float @dx.op.tertiary.f32(i32 46, float 0.000000e+00, float %54, float %172), !dx.precise !39  ; FMad(a,b,c)
  %174 = fmul float %36, %91
  %175 = call float @dx.op.tertiary.f32(i32 46, float %98, float %41, float %174), !dx.precise !39  ; FMad(a,b,c)
  %176 = call float @dx.op.tertiary.f32(i32 46, float %105, float %46, float %175), !dx.precise !39  ; FMad(a,b,c)
  %177 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %51, float %176), !dx.precise !39  ; FMad(a,b,c)
  %178 = fmul float %37, %91
  %179 = call float @dx.op.tertiary.f32(i32 46, float %98, float %42, float %178), !dx.precise !39  ; FMad(a,b,c)
  %180 = call float @dx.op.tertiary.f32(i32 46, float %105, float %47, float %179), !dx.precise !39  ; FMad(a,b,c)
  %181 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %52, float %180), !dx.precise !39  ; FMad(a,b,c)
  %182 = fmul float %38, %91
  %183 = call float @dx.op.tertiary.f32(i32 46, float %98, float %43, float %182), !dx.precise !39  ; FMad(a,b,c)
  %184 = call float @dx.op.tertiary.f32(i32 46, float %105, float %48, float %183), !dx.precise !39  ; FMad(a,b,c)
  %185 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %53, float %184), !dx.precise !39  ; FMad(a,b,c)
  %186 = fmul float %39, %91
  %187 = call float @dx.op.tertiary.f32(i32 46, float %98, float %44, float %186), !dx.precise !39  ; FMad(a,b,c)
  %188 = call float @dx.op.tertiary.f32(i32 46, float %105, float %49, float %187), !dx.precise !39  ; FMad(a,b,c)
  %189 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %54, float %188), !dx.precise !39  ; FMad(a,b,c)
  %190 = fmul float %107, %129
  %191 = call float @dx.op.tertiary.f32(i32 46, float %133, float %112, float %190), !dx.precise !39  ; FMad(a,b,c)
  %192 = call float @dx.op.tertiary.f32(i32 46, float %137, float %117, float %191), !dx.precise !39  ; FMad(a,b,c)
  %193 = call float @dx.op.tertiary.f32(i32 46, float %141, float %122, float %192), !dx.precise !39  ; FMad(a,b,c)
  %194 = fmul float %108, %129
  %195 = call float @dx.op.tertiary.f32(i32 46, float %133, float %113, float %194), !dx.precise !39  ; FMad(a,b,c)
  %196 = call float @dx.op.tertiary.f32(i32 46, float %137, float %118, float %195), !dx.precise !39  ; FMad(a,b,c)
  %197 = call float @dx.op.tertiary.f32(i32 46, float %141, float %123, float %196), !dx.precise !39  ; FMad(a,b,c)
  %198 = fmul float %109, %129
  %199 = call float @dx.op.tertiary.f32(i32 46, float %133, float %114, float %198), !dx.precise !39  ; FMad(a,b,c)
  %200 = call float @dx.op.tertiary.f32(i32 46, float %137, float %119, float %199), !dx.precise !39  ; FMad(a,b,c)
  %201 = call float @dx.op.tertiary.f32(i32 46, float %141, float %124, float %200), !dx.precise !39  ; FMad(a,b,c)
  %202 = fmul float %110, %129
  %203 = call float @dx.op.tertiary.f32(i32 46, float %133, float %115, float %202), !dx.precise !39  ; FMad(a,b,c)
  %204 = call float @dx.op.tertiary.f32(i32 46, float %137, float %120, float %203), !dx.precise !39  ; FMad(a,b,c)
  %205 = call float @dx.op.tertiary.f32(i32 46, float %141, float %125, float %204), !dx.precise !39  ; FMad(a,b,c)
  %206 = fmul float %107, %145
  %207 = call float @dx.op.tertiary.f32(i32 46, float %149, float %112, float %206), !dx.precise !39  ; FMad(a,b,c)
  %208 = call float @dx.op.tertiary.f32(i32 46, float %153, float %117, float %207), !dx.precise !39  ; FMad(a,b,c)
  %209 = call float @dx.op.tertiary.f32(i32 46, float %157, float %122, float %208), !dx.precise !39  ; FMad(a,b,c)
  %210 = fmul float %108, %145
  %211 = call float @dx.op.tertiary.f32(i32 46, float %149, float %113, float %210), !dx.precise !39  ; FMad(a,b,c)
  %212 = call float @dx.op.tertiary.f32(i32 46, float %153, float %118, float %211), !dx.precise !39  ; FMad(a,b,c)
  %213 = call float @dx.op.tertiary.f32(i32 46, float %157, float %123, float %212), !dx.precise !39  ; FMad(a,b,c)
  %214 = fmul float %109, %145
  %215 = call float @dx.op.tertiary.f32(i32 46, float %149, float %114, float %214), !dx.precise !39  ; FMad(a,b,c)
  %216 = call float @dx.op.tertiary.f32(i32 46, float %153, float %119, float %215), !dx.precise !39  ; FMad(a,b,c)
  %217 = call float @dx.op.tertiary.f32(i32 46, float %157, float %124, float %216), !dx.precise !39  ; FMad(a,b,c)
  %218 = fmul float %110, %145
  %219 = call float @dx.op.tertiary.f32(i32 46, float %149, float %115, float %218), !dx.precise !39  ; FMad(a,b,c)
  %220 = call float @dx.op.tertiary.f32(i32 46, float %153, float %120, float %219), !dx.precise !39  ; FMad(a,b,c)
  %221 = call float @dx.op.tertiary.f32(i32 46, float %157, float %125, float %220), !dx.precise !39  ; FMad(a,b,c)
  %222 = fmul float %107, %161
  %223 = call float @dx.op.tertiary.f32(i32 46, float %165, float %112, float %222), !dx.precise !39  ; FMad(a,b,c)
  %224 = call float @dx.op.tertiary.f32(i32 46, float %169, float %117, float %223), !dx.precise !39  ; FMad(a,b,c)
  %225 = call float @dx.op.tertiary.f32(i32 46, float %173, float %122, float %224), !dx.precise !39  ; FMad(a,b,c)
  %226 = fmul float %108, %161
  %227 = call float @dx.op.tertiary.f32(i32 46, float %165, float %113, float %226), !dx.precise !39  ; FMad(a,b,c)
  %228 = call float @dx.op.tertiary.f32(i32 46, float %169, float %118, float %227), !dx.precise !39  ; FMad(a,b,c)
  %229 = call float @dx.op.tertiary.f32(i32 46, float %173, float %123, float %228), !dx.precise !39  ; FMad(a,b,c)
  %230 = fmul float %109, %161
  %231 = call float @dx.op.tertiary.f32(i32 46, float %165, float %114, float %230), !dx.precise !39  ; FMad(a,b,c)
  %232 = call float @dx.op.tertiary.f32(i32 46, float %169, float %119, float %231), !dx.precise !39  ; FMad(a,b,c)
  %233 = call float @dx.op.tertiary.f32(i32 46, float %173, float %124, float %232), !dx.precise !39  ; FMad(a,b,c)
  %234 = fmul float %110, %161
  %235 = call float @dx.op.tertiary.f32(i32 46, float %165, float %115, float %234), !dx.precise !39  ; FMad(a,b,c)
  %236 = call float @dx.op.tertiary.f32(i32 46, float %169, float %120, float %235), !dx.precise !39  ; FMad(a,b,c)
  %237 = call float @dx.op.tertiary.f32(i32 46, float %173, float %125, float %236), !dx.precise !39  ; FMad(a,b,c)
  %238 = fmul float %107, %177
  %239 = call float @dx.op.tertiary.f32(i32 46, float %181, float %112, float %238), !dx.precise !39  ; FMad(a,b,c)
  %240 = call float @dx.op.tertiary.f32(i32 46, float %185, float %117, float %239), !dx.precise !39  ; FMad(a,b,c)
  %241 = call float @dx.op.tertiary.f32(i32 46, float %189, float %122, float %240), !dx.precise !39  ; FMad(a,b,c)
  %242 = fmul float %108, %177
  %243 = call float @dx.op.tertiary.f32(i32 46, float %181, float %113, float %242), !dx.precise !39  ; FMad(a,b,c)
  %244 = call float @dx.op.tertiary.f32(i32 46, float %185, float %118, float %243), !dx.precise !39  ; FMad(a,b,c)
  %245 = call float @dx.op.tertiary.f32(i32 46, float %189, float %123, float %244), !dx.precise !39  ; FMad(a,b,c)
  %246 = fmul float %109, %177
  %247 = call float @dx.op.tertiary.f32(i32 46, float %181, float %114, float %246), !dx.precise !39  ; FMad(a,b,c)
  %248 = call float @dx.op.tertiary.f32(i32 46, float %185, float %119, float %247), !dx.precise !39  ; FMad(a,b,c)
  %249 = call float @dx.op.tertiary.f32(i32 46, float %189, float %124, float %248), !dx.precise !39  ; FMad(a,b,c)
  %250 = fmul float %110, %177
  %251 = call float @dx.op.tertiary.f32(i32 46, float %181, float %115, float %250), !dx.precise !39  ; FMad(a,b,c)
  %252 = call float @dx.op.tertiary.f32(i32 46, float %185, float %120, float %251), !dx.precise !39  ; FMad(a,b,c)
  %253 = call float @dx.op.tertiary.f32(i32 46, float %189, float %125, float %252), !dx.precise !39  ; FMad(a,b,c)
  br i1 %18, label %266, label %254

; <label>:254                                     ; preds = %75
  %255 = shl i32 %16, 2
  %256 = add i32 %255, 4
  %257 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %4, i32 %256, i32 undef)  ; BufferLoad(srv,index,wot)
  %258 = extractvalue %dx.types.ResRet.i32 %257, 0
  %259 = add i32 %258, %14
  %260 = shl i32 %259, 1
  %261 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %260, i32 0)  ; BufferLoad(srv,index,wot)
  %262 = extractvalue %dx.types.ResRet.i32 %261, 0
  %263 = or i32 %260, 1
  %264 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %263, i32 0)  ; BufferLoad(srv,index,wot)
  %265 = extractvalue %dx.types.ResRet.i32 %264, 0
  br label %274

; <label>:266                                     ; preds = %75
  %267 = add i32 %16, %14
  %268 = shl i32 %267, 1
  %269 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %268, i32 0)  ; BufferLoad(srv,index,wot)
  %270 = extractvalue %dx.types.ResRet.i32 %269, 0
  %271 = or i32 %268, 1
  %272 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %271, i32 0)  ; BufferLoad(srv,index,wot)
  %273 = extractvalue %dx.types.ResRet.i32 %272, 0
  br label %274

; <label>:274                                     ; preds = %266, %254
  %275 = phi i32 [ %262, %254 ], [ %270, %266 ]
  %276 = phi i32 [ %265, %254 ], [ %273, %266 ]
  %277 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %5, i32 %275, i32 72)  ; BufferLoad(srv,index,wot)
  %278 = extractvalue %dx.types.ResRet.i32 %277, 0
  %279 = icmp ne i32 %278, -1
  %280 = select i1 %279, i32 %278, i32 %275
  %281 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %5, i32 %280, i32 64)  ; BufferLoad(srv,index,wot)
  %282 = extractvalue %dx.types.ResRet.i32 %281, 0
  %283 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %6, i32 %276, i32 84)  ; BufferLoad(srv,index,wot)
  %284 = extractvalue %dx.types.ResRet.i32 %283, 0
  %285 = add i32 %284, %282
  %286 = add i32 %285, %85
  %287 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %3, i32 %286, i32 0)  ; BufferLoad(srv,index,wot)
  %288 = extractvalue %dx.types.ResRet.f32 %287, 0
  %289 = extractvalue %dx.types.ResRet.f32 %287, 1
  %290 = extractvalue %dx.types.ResRet.f32 %287, 2
  %291 = extractvalue %dx.types.ResRet.f32 %287, 3
  %292 = add i32 %92, %285
  %293 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %3, i32 %292, i32 0)  ; BufferLoad(srv,index,wot)
  %294 = extractvalue %dx.types.ResRet.f32 %293, 0
  %295 = extractvalue %dx.types.ResRet.f32 %293, 1
  %296 = extractvalue %dx.types.ResRet.f32 %293, 2
  %297 = extractvalue %dx.types.ResRet.f32 %293, 3
  %298 = add i32 %99, %285
  %299 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %3, i32 %298, i32 0)  ; BufferLoad(srv,index,wot)
  %300 = extractvalue %dx.types.ResRet.f32 %299, 0
  %301 = extractvalue %dx.types.ResRet.f32 %299, 1
  %302 = extractvalue %dx.types.ResRet.f32 %299, 2
  %303 = extractvalue %dx.types.ResRet.f32 %299, 3
  br i1 %18, label %313, label %304

; <label>:304                                     ; preds = %274
  %305 = shl i32 %16, 2
  %306 = add i32 %305, 4
  %307 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %4, i32 %306, i32 undef)  ; BufferLoad(srv,index,wot)
  %308 = extractvalue %dx.types.ResRet.i32 %307, 0
  %309 = add i32 %308, %14
  %310 = shl i32 %309, 1
  %311 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %310, i32 0)  ; BufferLoad(srv,index,wot)
  %312 = extractvalue %dx.types.ResRet.i32 %311, 0
  br label %318

; <label>:313                                     ; preds = %274
  %314 = add i32 %16, %14
  %315 = shl i32 %314, 1
  %316 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %315, i32 0)  ; BufferLoad(srv,index,wot)
  %317 = extractvalue %dx.types.ResRet.i32 %316, 0
  br label %318

; <label>:318                                     ; preds = %313, %304
  %319 = phi i32 [ %312, %304 ], [ %317, %313 ]
  %320 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %5, i32 %319, i32 72)  ; BufferLoad(srv,index,wot)
  %321 = extractvalue %dx.types.ResRet.i32 %320, 0
  %322 = icmp ne i32 %321, -1
  %323 = select i1 %322, i32 %321, i32 %319
  %324 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %5, i32 %323, i32 0)  ; BufferLoad(srv,index,wot)
  %325 = extractvalue %dx.types.ResRet.f32 %324, 0
  %326 = extractvalue %dx.types.ResRet.f32 %324, 1
  %327 = extractvalue %dx.types.ResRet.f32 %324, 2
  %328 = extractvalue %dx.types.ResRet.f32 %324, 3
  %329 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %5, i32 %323, i32 16)  ; BufferLoad(srv,index,wot)
  %330 = extractvalue %dx.types.ResRet.f32 %329, 0
  %331 = extractvalue %dx.types.ResRet.f32 %329, 1
  %332 = extractvalue %dx.types.ResRet.f32 %329, 2
  %333 = extractvalue %dx.types.ResRet.f32 %329, 3
  %334 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %5, i32 %323, i32 32)  ; BufferLoad(srv,index,wot)
  %335 = extractvalue %dx.types.ResRet.f32 %334, 0
  %336 = extractvalue %dx.types.ResRet.f32 %334, 1
  %337 = extractvalue %dx.types.ResRet.f32 %334, 2
  %338 = extractvalue %dx.types.ResRet.f32 %334, 3
  %339 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %5, i32 %323, i32 48)  ; BufferLoad(srv,index,wot)
  %340 = extractvalue %dx.types.ResRet.f32 %339, 0
  %341 = extractvalue %dx.types.ResRet.f32 %339, 1
  %342 = extractvalue %dx.types.ResRet.f32 %339, 2
  %343 = extractvalue %dx.types.ResRet.f32 %339, 3
  %344 = fmul fast float %325, %288
  %345 = call float @dx.op.tertiary.f32(i32 46, float %294, float %330, float %344)  ; FMad(a,b,c)
  %346 = call float @dx.op.tertiary.f32(i32 46, float %300, float %335, float %345)  ; FMad(a,b,c)
  %347 = fmul fast float %326, %288
  %348 = call float @dx.op.tertiary.f32(i32 46, float %294, float %331, float %347)  ; FMad(a,b,c)
  %349 = call float @dx.op.tertiary.f32(i32 46, float %300, float %336, float %348)  ; FMad(a,b,c)
  %350 = fmul fast float %327, %288
  %351 = call float @dx.op.tertiary.f32(i32 46, float %294, float %332, float %350)  ; FMad(a,b,c)
  %352 = call float @dx.op.tertiary.f32(i32 46, float %300, float %337, float %351)  ; FMad(a,b,c)
  %353 = fmul fast float %328, %288
  %354 = call float @dx.op.tertiary.f32(i32 46, float %294, float %333, float %353)  ; FMad(a,b,c)
  %355 = call float @dx.op.tertiary.f32(i32 46, float %300, float %338, float %354)  ; FMad(a,b,c)
  %356 = fmul fast float %325, %289
  %357 = call float @dx.op.tertiary.f32(i32 46, float %295, float %330, float %356)  ; FMad(a,b,c)
  %358 = call float @dx.op.tertiary.f32(i32 46, float %301, float %335, float %357)  ; FMad(a,b,c)
  %359 = fmul fast float %326, %289
  %360 = call float @dx.op.tertiary.f32(i32 46, float %295, float %331, float %359)  ; FMad(a,b,c)
  %361 = call float @dx.op.tertiary.f32(i32 46, float %301, float %336, float %360)  ; FMad(a,b,c)
  %362 = fmul fast float %327, %289
  %363 = call float @dx.op.tertiary.f32(i32 46, float %295, float %332, float %362)  ; FMad(a,b,c)
  %364 = call float @dx.op.tertiary.f32(i32 46, float %301, float %337, float %363)  ; FMad(a,b,c)
  %365 = fmul fast float %328, %289
  %366 = call float @dx.op.tertiary.f32(i32 46, float %295, float %333, float %365)  ; FMad(a,b,c)
  %367 = call float @dx.op.tertiary.f32(i32 46, float %301, float %338, float %366)  ; FMad(a,b,c)
  %368 = fmul fast float %325, %290
  %369 = call float @dx.op.tertiary.f32(i32 46, float %296, float %330, float %368)  ; FMad(a,b,c)
  %370 = call float @dx.op.tertiary.f32(i32 46, float %302, float %335, float %369)  ; FMad(a,b,c)
  %371 = fmul fast float %326, %290
  %372 = call float @dx.op.tertiary.f32(i32 46, float %296, float %331, float %371)  ; FMad(a,b,c)
  %373 = call float @dx.op.tertiary.f32(i32 46, float %302, float %336, float %372)  ; FMad(a,b,c)
  %374 = fmul fast float %327, %290
  %375 = call float @dx.op.tertiary.f32(i32 46, float %296, float %332, float %374)  ; FMad(a,b,c)
  %376 = call float @dx.op.tertiary.f32(i32 46, float %302, float %337, float %375)  ; FMad(a,b,c)
  %377 = fmul fast float %328, %290
  %378 = call float @dx.op.tertiary.f32(i32 46, float %296, float %333, float %377)  ; FMad(a,b,c)
  %379 = call float @dx.op.tertiary.f32(i32 46, float %302, float %338, float %378)  ; FMad(a,b,c)
  %380 = fmul fast float %325, %291
  %381 = call float @dx.op.tertiary.f32(i32 46, float %297, float %330, float %380)  ; FMad(a,b,c)
  %382 = call float @dx.op.tertiary.f32(i32 46, float %303, float %335, float %381)  ; FMad(a,b,c)
  %383 = fadd fast float %382, %340
  %384 = fmul fast float %326, %291
  %385 = call float @dx.op.tertiary.f32(i32 46, float %297, float %331, float %384)  ; FMad(a,b,c)
  %386 = call float @dx.op.tertiary.f32(i32 46, float %303, float %336, float %385)  ; FMad(a,b,c)
  %387 = fadd fast float %386, %341
  %388 = fmul fast float %327, %291
  %389 = call float @dx.op.tertiary.f32(i32 46, float %297, float %332, float %388)  ; FMad(a,b,c)
  %390 = call float @dx.op.tertiary.f32(i32 46, float %303, float %337, float %389)  ; FMad(a,b,c)
  %391 = fadd fast float %390, %342
  %392 = fmul fast float %328, %291
  %393 = call float @dx.op.tertiary.f32(i32 46, float %297, float %333, float %392)  ; FMad(a,b,c)
  %394 = call float @dx.op.tertiary.f32(i32 46, float %303, float %338, float %393)  ; FMad(a,b,c)
  %395 = fadd fast float %394, %343
  %396 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %397 = extractvalue %dx.types.CBufRet.f32 %396, 0
  %398 = extractvalue %dx.types.CBufRet.f32 %396, 1
  %399 = extractvalue %dx.types.CBufRet.f32 %396, 2
  %400 = extractvalue %dx.types.CBufRet.f32 %396, 3
  %401 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %402 = extractvalue %dx.types.CBufRet.f32 %401, 0
  %403 = extractvalue %dx.types.CBufRet.f32 %401, 1
  %404 = extractvalue %dx.types.CBufRet.f32 %401, 2
  %405 = extractvalue %dx.types.CBufRet.f32 %401, 3
  %406 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %407 = extractvalue %dx.types.CBufRet.f32 %406, 0
  %408 = extractvalue %dx.types.CBufRet.f32 %406, 1
  %409 = extractvalue %dx.types.CBufRet.f32 %406, 2
  %410 = extractvalue %dx.types.CBufRet.f32 %406, 3
  %411 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %412 = extractvalue %dx.types.CBufRet.f32 %411, 0
  %413 = extractvalue %dx.types.CBufRet.f32 %411, 1
  %414 = extractvalue %dx.types.CBufRet.f32 %411, 2
  %415 = extractvalue %dx.types.CBufRet.f32 %411, 3
  %416 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %417 = extractvalue %dx.types.CBufRet.f32 %416, 0
  %418 = extractvalue %dx.types.CBufRet.f32 %416, 1
  %419 = extractvalue %dx.types.CBufRet.f32 %416, 2
  %420 = extractvalue %dx.types.CBufRet.f32 %416, 3
  %421 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %422 = extractvalue %dx.types.CBufRet.f32 %421, 0
  %423 = extractvalue %dx.types.CBufRet.f32 %421, 1
  %424 = extractvalue %dx.types.CBufRet.f32 %421, 2
  %425 = extractvalue %dx.types.CBufRet.f32 %421, 3
  %426 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %427 = extractvalue %dx.types.CBufRet.f32 %426, 0
  %428 = extractvalue %dx.types.CBufRet.f32 %426, 1
  %429 = extractvalue %dx.types.CBufRet.f32 %426, 2
  %430 = extractvalue %dx.types.CBufRet.f32 %426, 3
  %431 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %432 = extractvalue %dx.types.CBufRet.f32 %431, 0
  %433 = extractvalue %dx.types.CBufRet.f32 %431, 1
  %434 = extractvalue %dx.types.CBufRet.f32 %431, 2
  %435 = extractvalue %dx.types.CBufRet.f32 %431, 3
  %436 = fmul fast float %417, %346
  %437 = call float @dx.op.tertiary.f32(i32 46, float %349, float %422, float %436)  ; FMad(a,b,c)
  %438 = call float @dx.op.tertiary.f32(i32 46, float %352, float %427, float %437)  ; FMad(a,b,c)
  %439 = call float @dx.op.tertiary.f32(i32 46, float %355, float %432, float %438)  ; FMad(a,b,c)
  %440 = fmul fast float %418, %346
  %441 = call float @dx.op.tertiary.f32(i32 46, float %349, float %423, float %440)  ; FMad(a,b,c)
  %442 = call float @dx.op.tertiary.f32(i32 46, float %352, float %428, float %441)  ; FMad(a,b,c)
  %443 = call float @dx.op.tertiary.f32(i32 46, float %355, float %433, float %442)  ; FMad(a,b,c)
  %444 = fmul fast float %419, %346
  %445 = call float @dx.op.tertiary.f32(i32 46, float %349, float %424, float %444)  ; FMad(a,b,c)
  %446 = call float @dx.op.tertiary.f32(i32 46, float %352, float %429, float %445)  ; FMad(a,b,c)
  %447 = call float @dx.op.tertiary.f32(i32 46, float %355, float %434, float %446)  ; FMad(a,b,c)
  %448 = fmul fast float %420, %346
  %449 = call float @dx.op.tertiary.f32(i32 46, float %349, float %425, float %448)  ; FMad(a,b,c)
  %450 = call float @dx.op.tertiary.f32(i32 46, float %352, float %430, float %449)  ; FMad(a,b,c)
  %451 = call float @dx.op.tertiary.f32(i32 46, float %355, float %435, float %450)  ; FMad(a,b,c)
  %452 = fmul fast float %417, %358
  %453 = call float @dx.op.tertiary.f32(i32 46, float %361, float %422, float %452)  ; FMad(a,b,c)
  %454 = call float @dx.op.tertiary.f32(i32 46, float %364, float %427, float %453)  ; FMad(a,b,c)
  %455 = call float @dx.op.tertiary.f32(i32 46, float %367, float %432, float %454)  ; FMad(a,b,c)
  %456 = fmul fast float %418, %358
  %457 = call float @dx.op.tertiary.f32(i32 46, float %361, float %423, float %456)  ; FMad(a,b,c)
  %458 = call float @dx.op.tertiary.f32(i32 46, float %364, float %428, float %457)  ; FMad(a,b,c)
  %459 = call float @dx.op.tertiary.f32(i32 46, float %367, float %433, float %458)  ; FMad(a,b,c)
  %460 = fmul fast float %419, %358
  %461 = call float @dx.op.tertiary.f32(i32 46, float %361, float %424, float %460)  ; FMad(a,b,c)
  %462 = call float @dx.op.tertiary.f32(i32 46, float %364, float %429, float %461)  ; FMad(a,b,c)
  %463 = call float @dx.op.tertiary.f32(i32 46, float %367, float %434, float %462)  ; FMad(a,b,c)
  %464 = fmul fast float %420, %358
  %465 = call float @dx.op.tertiary.f32(i32 46, float %361, float %425, float %464)  ; FMad(a,b,c)
  %466 = call float @dx.op.tertiary.f32(i32 46, float %364, float %430, float %465)  ; FMad(a,b,c)
  %467 = call float @dx.op.tertiary.f32(i32 46, float %367, float %435, float %466)  ; FMad(a,b,c)
  %468 = fmul fast float %417, %370
  %469 = call float @dx.op.tertiary.f32(i32 46, float %373, float %422, float %468)  ; FMad(a,b,c)
  %470 = call float @dx.op.tertiary.f32(i32 46, float %376, float %427, float %469)  ; FMad(a,b,c)
  %471 = call float @dx.op.tertiary.f32(i32 46, float %379, float %432, float %470)  ; FMad(a,b,c)
  %472 = fmul fast float %418, %370
  %473 = call float @dx.op.tertiary.f32(i32 46, float %373, float %423, float %472)  ; FMad(a,b,c)
  %474 = call float @dx.op.tertiary.f32(i32 46, float %376, float %428, float %473)  ; FMad(a,b,c)
  %475 = call float @dx.op.tertiary.f32(i32 46, float %379, float %433, float %474)  ; FMad(a,b,c)
  %476 = fmul fast float %419, %370
  %477 = call float @dx.op.tertiary.f32(i32 46, float %373, float %424, float %476)  ; FMad(a,b,c)
  %478 = call float @dx.op.tertiary.f32(i32 46, float %376, float %429, float %477)  ; FMad(a,b,c)
  %479 = call float @dx.op.tertiary.f32(i32 46, float %379, float %434, float %478)  ; FMad(a,b,c)
  %480 = fmul fast float %420, %370
  %481 = call float @dx.op.tertiary.f32(i32 46, float %373, float %425, float %480)  ; FMad(a,b,c)
  %482 = call float @dx.op.tertiary.f32(i32 46, float %376, float %430, float %481)  ; FMad(a,b,c)
  %483 = call float @dx.op.tertiary.f32(i32 46, float %379, float %435, float %482)  ; FMad(a,b,c)
  %484 = fmul fast float %417, %383
  %485 = call float @dx.op.tertiary.f32(i32 46, float %387, float %422, float %484)  ; FMad(a,b,c)
  %486 = call float @dx.op.tertiary.f32(i32 46, float %391, float %427, float %485)  ; FMad(a,b,c)
  %487 = call float @dx.op.tertiary.f32(i32 46, float %395, float %432, float %486)  ; FMad(a,b,c)
  %488 = fmul fast float %418, %383
  %489 = call float @dx.op.tertiary.f32(i32 46, float %387, float %423, float %488)  ; FMad(a,b,c)
  %490 = call float @dx.op.tertiary.f32(i32 46, float %391, float %428, float %489)  ; FMad(a,b,c)
  %491 = call float @dx.op.tertiary.f32(i32 46, float %395, float %433, float %490)  ; FMad(a,b,c)
  %492 = fmul fast float %419, %383
  %493 = call float @dx.op.tertiary.f32(i32 46, float %387, float %424, float %492)  ; FMad(a,b,c)
  %494 = call float @dx.op.tertiary.f32(i32 46, float %391, float %429, float %493)  ; FMad(a,b,c)
  %495 = call float @dx.op.tertiary.f32(i32 46, float %395, float %434, float %494)  ; FMad(a,b,c)
  %496 = fmul fast float %420, %383
  %497 = call float @dx.op.tertiary.f32(i32 46, float %387, float %425, float %496)  ; FMad(a,b,c)
  %498 = call float @dx.op.tertiary.f32(i32 46, float %391, float %430, float %497)  ; FMad(a,b,c)
  %499 = call float @dx.op.tertiary.f32(i32 46, float %395, float %435, float %498)  ; FMad(a,b,c)
  %500 = fmul float %12, %225
  %501 = fmul float %12, %229
  %502 = fmul float %12, %233
  %503 = fmul float %12, %237
  %504 = fadd float %500, %241
  %505 = fadd float %501, %245
  %506 = fadd float %502, %249
  %507 = fadd float %503, %253
  %508 = fmul float %10, %193
  %509 = fmul float %10, %197
  %510 = fmul float %10, %201
  %511 = fmul float %10, %205
  %512 = fadd float %508, %504
  %513 = fadd float %509, %505
  %514 = fadd float %510, %506
  %515 = fadd float %511, %507
  %516 = fmul float %11, %209
  %517 = fmul float %11, %213
  %518 = fmul float %11, %217
  %519 = fmul float %11, %221
  %520 = fadd float %516, %512
  %521 = fadd float %517, %513
  %522 = fadd float %518, %514
  %523 = fadd float %519, %515
  %524 = fmul float %520, %397
  %525 = call float @dx.op.tertiary.f32(i32 46, float %521, float %402, float %524), !dx.precise !39  ; FMad(a,b,c)
  %526 = call float @dx.op.tertiary.f32(i32 46, float %522, float %407, float %525), !dx.precise !39  ; FMad(a,b,c)
  %527 = call float @dx.op.tertiary.f32(i32 46, float %523, float %412, float %526), !dx.precise !39  ; FMad(a,b,c)
  %528 = fmul float %520, %398
  %529 = call float @dx.op.tertiary.f32(i32 46, float %521, float %403, float %528), !dx.precise !39  ; FMad(a,b,c)
  %530 = call float @dx.op.tertiary.f32(i32 46, float %522, float %408, float %529), !dx.precise !39  ; FMad(a,b,c)
  %531 = call float @dx.op.tertiary.f32(i32 46, float %523, float %413, float %530), !dx.precise !39  ; FMad(a,b,c)
  %532 = fmul float %520, %399
  %533 = call float @dx.op.tertiary.f32(i32 46, float %521, float %404, float %532), !dx.precise !39  ; FMad(a,b,c)
  %534 = call float @dx.op.tertiary.f32(i32 46, float %522, float %409, float %533), !dx.precise !39  ; FMad(a,b,c)
  %535 = call float @dx.op.tertiary.f32(i32 46, float %523, float %414, float %534), !dx.precise !39  ; FMad(a,b,c)
  %536 = fmul float %520, %400
  %537 = call float @dx.op.tertiary.f32(i32 46, float %521, float %405, float %536), !dx.precise !39  ; FMad(a,b,c)
  %538 = call float @dx.op.tertiary.f32(i32 46, float %522, float %410, float %537), !dx.precise !39  ; FMad(a,b,c)
  %539 = call float @dx.op.tertiary.f32(i32 46, float %523, float %415, float %538), !dx.precise !39  ; FMad(a,b,c)
  %540 = fmul fast float %471, %12
  %541 = fmul fast float %475, %12
  %542 = fmul fast float %479, %12
  %543 = fmul fast float %483, %12
  %544 = fmul fast float %439, %10
  %545 = fmul fast float %443, %10
  %546 = fmul fast float %447, %10
  %547 = fmul fast float %451, %10
  %548 = fmul fast float %455, %11
  %549 = fmul fast float %459, %11
  %550 = fmul fast float %463, %11
  %551 = fmul fast float %467, %11
  %552 = fadd fast float %548, %544
  %553 = fadd fast float %552, %540
  %554 = fadd fast float %553, %487
  %555 = fadd fast float %549, %545
  %556 = fadd fast float %555, %541
  %557 = fadd fast float %556, %491
  %558 = fadd fast float %550, %546
  %559 = fadd fast float %558, %542
  %560 = fadd fast float %559, %495
  %561 = fadd fast float %551, %547
  %562 = fadd fast float %561, %543
  %563 = fadd fast float %562, %499
  %564 = fmul fast float %554, 5.000000e-01
  %565 = fmul fast float %557, -5.000000e-01
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %527)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %531)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %535)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %539)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %564)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %565)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %560)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %563)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float 1.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32, %dx.types.Handle, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!20}
!dx.entryPoints = !{!21}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 5}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{!5, null, !16, null}
!5 = !{!6, !8, !10, !11, !13, !15}
!6 = !{i32 0, %"class.StructuredBuffer<S_RenderPrimitiveData>"* undef, !"", i32 1, i32 31, i32 1, i32 12, i32 0, !7}
!7 = !{i32 1, i32 96}
!8 = !{i32 1, %"dx.alignment.legacy.class.StructuredBuffer<S_DefaultInstanceData>"* undef, !"", i32 1, i32 35, i32 1, i32 12, i32 0, !9}
!9 = !{i32 1, i32 116}
!10 = !{i32 2, %struct.ByteAddressBuffer* undef, !"", i32 1, i32 38, i32 1, i32 11, i32 0, null}
!11 = !{i32 3, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 1, i32 39, i32 1, i32 12, i32 0, !12}
!12 = !{i32 1, i32 16}
!13 = !{i32 4, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 1, i32 42, i32 1, i32 12, i32 0, !14}
!14 = !{i32 1, i32 4}
!15 = !{i32 5, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 1, i32 43, i32 1, i32 12, i32 0, !14}
!16 = !{!17, !18, !19}
!17 = !{i32 0, %_cbDrawCallBaseIndex* undef, !"", i32 0, i32 1, i32 1, i32 16, null}
!18 = !{i32 1, %dx.alignment.legacy._cbSharedPerViewData* undef, !"", i32 0, i32 2, i32 1, i32 728, null}
!19 = !{i32 2, %dx.alignment.legacy._cbPerViewVelocityData* undef, !"", i32 0, i32 3, i32 1, i32 128, null}
!20 = !{[32 x i32] [i32 30, i32 9, i32 255, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 255, i32 255, i32 255, i32 255, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0]}
!21 = !{void ()* @Velocity_VS, !"Velocity_VS", !22, !4, !40}
!22 = !{!23, !35, null}
!23 = !{!24, !27, !28, !30, !31, !32, !33, !34}
!24 = !{i32 0, !"SV_InstanceID", i8 5, i8 2, !25, i8 0, i32 1, i8 1, i32 0, i8 0, !26}
!25 = !{i32 0}
!26 = !{i32 3, i32 1}
!27 = !{i32 1, !"SV_VertexID", i8 5, i8 1, !25, i8 0, i32 1, i8 1, i32 1, i8 0, null}
!28 = !{i32 2, !"POSITION", i8 9, i8 0, !25, i8 0, i32 1, i8 4, i32 2, i8 0, !29}
!29 = !{i32 3, i32 15}
!30 = !{i32 3, !"NORMAL", i8 9, i8 0, !25, i8 0, i32 1, i8 4, i32 3, i8 0, null}
!31 = !{i32 4, !"TANGENT", i8 9, i8 0, !25, i8 0, i32 1, i8 4, i32 4, i8 0, null}
!32 = !{i32 5, !"BINORMAL", i8 9, i8 0, !25, i8 0, i32 1, i8 4, i32 5, i8 0, null}
!33 = !{i32 6, !"COLOR", i8 9, i8 0, !25, i8 0, i32 1, i8 4, i32 6, i8 0, null}
!34 = !{i32 7, !"TEXCOORD", i8 9, i8 0, !25, i8 0, i32 1, i8 2, i32 7, i8 0, null}
!35 = !{!36, !37, !38}
!36 = !{i32 0, !"SV_Position", i8 9, i8 3, !25, i8 4, i32 1, i8 4, i32 0, i8 0, !29}
!37 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !25, i8 2, i32 1, i8 4, i32 1, i8 0, !29}
!38 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !39, i8 2, i32 1, i8 1, i32 2, i8 0, !26}
!39 = !{i32 1}
!40 = !{i32 0, i64 16}
 