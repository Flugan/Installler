;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; POSITION                 0   xyz         0     NONE   float   xyz 
; BLENDINDICES             0   xyzw        1     NONE    uint   xyzw
; BLENDWEIGHT              0   xyzw        2     NONE   float   xyzw
; BLENDINDICES             1   xyzw        3     NONE    uint   xyzw
; BLENDWEIGHT              1   xyzw        4     NONE   float   xyzw
; TEXCOORD                 0   xy          5     NONE   float   xy  
; NORMAL                   0   xyz         6     NONE   float   xyz 
; TANGENT                  0   xyzw        7     NONE   float   xyzw
; COLOR                    0   xyzw        8     NONE   float   xyzw
; TEXCOORD                 1   xy          9     NONE   float       
; INSTANCE_TRANSFORM       0   xyzw       10     NONE   float   xyzw
; INSTANCE_TRANSFORM       1   xyzw       11     NONE   float   xyzw
; INSTANCE_TRANSFORM       2   xyzw       12     NONE   float   xyzw
; INSTANCE_SKINNING_DATA     0   xyzw       13     NONE    uint   xyz 
; EXTRA_DATA               0   xyz        14     NONE   float   xyz 
; SV_VertexID              0   x          15   VERTID    uint   x   
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; TEXCOORD                 0   xyzw        1     NONE   float   xyzw
; TEXCOORD                 1   xyzw        2     NONE   float   xyzw
; TEXCOORD                 2   xyzw        3     NONE   float   xyzw
; TEXCOORD                 3   xyzw        4     NONE   float   xyzw
; TEXCOORD                 4   xyzw        5     NONE   float   xyzw
; TEXCOORD                 5   xyzw        6     NONE   float   xyzw
; TEXCOORD                 6   xyzw        7     NONE   float   xyzw
; TEXCOORD                 7   xy          8     NONE   float   xy  
; SV_ClipDistance          0   x           9  CLIPDST   float   x   
;
; shader hash: 3e4413fc18d0c18e24de25855911f402
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; POSITION                 0                              
; BLENDINDICES             0                              
; BLENDWEIGHT              0                              
; BLENDINDICES             1                              
; BLENDWEIGHT              1                              
; TEXCOORD                 0                              
; NORMAL                   0                              
; TANGENT                  0                              
; COLOR                    0                              
; TEXCOORD                 1                              
; INSTANCE_TRANSFORM       0                              
; INSTANCE_SKINNING_DATA     0                              
; EXTRA_DATA               0                              
; SV_VertexID              0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; TEXCOORD                 3                 linear       
; TEXCOORD                 4                 linear       
; TEXCOORD                 5                 linear       
; TEXCOORD                 6                 linear       
; TEXCOORD                 7                 linear       
; SV_ClipDistance          0                 linear       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [496 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [848 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [5760 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [640 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [112 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [512 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb7     1
;                                   cbuffer      NA          NA     CB1            cb1     1
;                                   cbuffer      NA          NA     CB2            cb9     1
;                                   cbuffer      NA          NA     CB3           cb10     1
;                                   cbuffer      NA          NA     CB4            cb5     1
;                                   cbuffer      NA          NA     CB5            cb8     1
;                                   texture    byte         r/o      T0            t10     1
;                                   texture     f32          2d      T1            t77     1
;
;
; ViewId state:
;
; Number of inputs: 61, outputs: 37
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 1 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 2 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 3 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 4 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 5 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 6 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 7 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 28, 29, 30, 31, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 8 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 28, 29, 30, 31, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 9 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 28, 29, 30, 31, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 10 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 11 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 12 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 13 depends on inputs: { 20 }
;   output 14 depends on inputs: { 21 }
;   output 15 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 52, 53, 56, 57, 58, 60 }
;   output 16 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 44, 45, 46, 47, 52, 53, 56, 57, 58, 60 }
;   output 17 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 18 depends on inputs: { 32 }
;   output 19 depends on inputs: { 33 }
;   output 20 depends on inputs: { 34 }
;   output 21 depends on inputs: { 35 }
;   output 22 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 23 depends on inputs: { 20, 21 }
;   output 24 depends on inputs: { 20, 21 }
;   output 25 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 26 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 27 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 28 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 29 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 53, 54, 56, 57, 58, 60 }
;   output 30 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 53, 54, 56, 57, 58, 60 }
;   output 31 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 53, 54, 56, 57, 58, 60 }
;   output 32 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 53, 54, 56, 57, 58, 60 }
;   output 36 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%MaterialModifiersConsts = type { [31 x <4 x float>] }
%hostlayout.CameraShaderConsts = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, i32, i32, <2 x i32>, float, float }
%TextureRegionsCB = type { [40 x %struct.SRegion] }
%struct.SRegion = type { i32, float, float, [4 x <4 x float>], [4 x <4 x float>] }
%FloatTracksDataCB = type { [40 x <4 x float>] }
%hostlayout.FrequentVertexConsts = type { [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float> }
%CullObjectsCB = type { [8 x %struct.CullObjectPacked] }
%struct.CullObjectPacked = type { <2 x i32>, <2 x i32>, <3 x float>, float, <3 x float>, float, <3 x float>, i32 }

define void @vs_main_() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 77, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 10, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 5, i32 8, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 4, i32 5, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 3, i32 10, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 2, i32 9, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 7, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %9 = call i32 @dx.op.loadInput.i32(i32 4, i32 13, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 12, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 12, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 12, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call i32 @dx.op.loadInput.i32(i32 4, i32 11, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call i32 @dx.op.loadInput.i32(i32 4, i32 11, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call i32 @dx.op.loadInput.i32(i32 4, i32 11, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %20 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %21 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %22 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %23 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %24 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %25 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %26 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %27 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %28 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %29 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %30 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %31 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %32 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %33 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %34 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %35 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %36 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %37 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %38 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %39 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %40 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %41 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %42 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %43 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %44 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %45 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %46 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %47 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %48 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %49 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %50 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %51 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %52 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %53 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %54 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %55 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %56 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %57 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %58 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %59 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %60 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %7, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %61 = extractvalue %dx.types.CBufRet.i32 %60, 0
  %62 = extractvalue %dx.types.CBufRet.i32 %60, 1
  %63 = extractvalue %dx.types.CBufRet.i32 %60, 2
  %64 = bitcast float %51 to i32
  %65 = bitcast float %55 to i32
  %66 = bitcast float %59 to i32
  %67 = sub i32 %64, %61
  %68 = sub i32 %65, %62
  %69 = sub i32 %66, %63
  %70 = sitofp i32 %67 to float
  %71 = sitofp i32 %68 to float
  %72 = sitofp i32 %69 to float
  %73 = fmul fast float %70, 0x3EE0000000000000
  %74 = fmul fast float %71, 0x3EE0000000000000
  %75 = fmul fast float %72, 0x3EE0000000000000
  %76 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %77 = extractvalue %dx.types.CBufRet.f32 %76, 0
  %78 = extractvalue %dx.types.CBufRet.f32 %76, 1
  %79 = extractvalue %dx.types.CBufRet.f32 %76, 2
  %80 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %81 = extractvalue %dx.types.CBufRet.f32 %80, 0
  %82 = extractvalue %dx.types.CBufRet.f32 %80, 1
  %83 = extractvalue %dx.types.CBufRet.f32 %80, 2
  %84 = fmul fast float %81, %45
  %85 = fmul fast float %82, %46
  %86 = fmul fast float %83, %47
  %87 = fadd fast float %84, %77
  %88 = fadd fast float %85, %78
  %89 = fadd fast float %86, %79
  %90 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %91 = extractvalue %dx.types.CBufRet.f32 %90, 0
  %92 = fcmp fast ogt float %91, 5.000000e-01
  br i1 %92, label %93, label %98

; <label>:93                                      ; preds = %0
  %94 = and i32 %9, 255
  %95 = lshr i32 %9, 8
  %96 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1, i32 0, i32 %94, i32 %95, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %97 = extractvalue %dx.types.ResRet.f32 %96, 0
  br label %98

; <label>:98                                      ; preds = %93, %0
  %99 = phi float [ %97, %93 ], [ 0.000000e+00, %0 ]
  %100 = fmul fast float %99, 2.500000e+00
  %101 = fmul fast float %100, %10
  %102 = fmul fast float %100, %11
  %103 = fmul fast float %100, %12
  %104 = fadd fast float %87, %101
  %105 = fadd fast float %88, %102
  %106 = fadd fast float %89, %103
  %107 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %108 = extractvalue %dx.types.CBufRet.f32 %107, 0
  %109 = fptoui float %108 to i32
  %110 = call i32 @dx.op.binary.i32(i32 40, i32 %109, i32 8)  ; UMin(a,b)
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %177, label %112

; <label>:112                                     ; preds = %98
  br label %113

; <label>:113                                     ; preds = %113, %112
  %114 = phi float [ %173, %113 ], [ 0.000000e+00, %112 ]
  %115 = phi i32 [ %174, %113 ], [ 0, %112 ]
  %116 = shl i32 %115, 2
  %117 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %116)  ; CBufferLoadLegacy(handle,regIndex)
  %118 = extractvalue %dx.types.CBufRet.i32 %117, 0
  %119 = extractvalue %dx.types.CBufRet.i32 %117, 1
  %120 = call float @dx.op.legacyF16ToF32(i32 131, i32 %118)  ; LegacyF16ToF32(value)
  %121 = lshr i32 %118, 16
  %122 = call float @dx.op.legacyF16ToF32(i32 131, i32 %121)  ; LegacyF16ToF32(value)
  %123 = call float @dx.op.legacyF16ToF32(i32 131, i32 %119)  ; LegacyF16ToF32(value)
  %124 = lshr i32 %119, 16
  %125 = call float @dx.op.legacyF16ToF32(i32 131, i32 %124)  ; LegacyF16ToF32(value)
  %126 = or i32 %116, 1
  %127 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %126)  ; CBufferLoadLegacy(handle,regIndex)
  %128 = extractvalue %dx.types.CBufRet.f32 %127, 0
  %129 = extractvalue %dx.types.CBufRet.f32 %127, 1
  %130 = extractvalue %dx.types.CBufRet.f32 %127, 2
  %131 = extractvalue %dx.types.CBufRet.f32 %127, 3
  %132 = or i32 %116, 2
  %133 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %132)  ; CBufferLoadLegacy(handle,regIndex)
  %134 = extractvalue %dx.types.CBufRet.f32 %133, 0
  %135 = extractvalue %dx.types.CBufRet.f32 %133, 1
  %136 = extractvalue %dx.types.CBufRet.f32 %133, 2
  %137 = extractvalue %dx.types.CBufRet.f32 %133, 3
  %138 = call float @dx.op.dot4.f32(i32 56, float %120, float %122, float %123, float %125, float %104, float %105, float %106, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %139 = fmul fast float %138, -1.000000e+01
  %140 = call float @dx.op.unary.f32(i32 7, float %139)  ; Saturate(value)
  %141 = fsub fast float 1.000000e+00, %140
  %142 = fsub fast float %104, %128
  %143 = fsub fast float %105, %129
  %144 = fsub fast float %106, %130
  %145 = fsub fast float %134, %128
  %146 = fsub fast float %135, %129
  %147 = fsub fast float %136, %130
  %148 = call float @dx.op.dot3.f32(i32 55, float %142, float %143, float %144, float %145, float %146, float %147)  ; Dot3(ax,ay,az,bx,by,bz)
  %149 = call float @dx.op.dot3.f32(i32 55, float %145, float %146, float %147, float %145, float %146, float %147)  ; Dot3(ax,ay,az,bx,by,bz)
  %150 = fdiv fast float %148, %149
  %151 = fmul fast float %150, %145
  %152 = fmul fast float %150, %146
  %153 = fmul fast float %150, %147
  %154 = fsub fast float %128, %104
  %155 = fadd fast float %154, %151
  %156 = fsub fast float %129, %105
  %157 = fadd fast float %156, %152
  %158 = fsub fast float %130, %106
  %159 = fadd fast float %158, %153
  %160 = call float @dx.op.dot3.f32(i32 55, float %155, float %157, float %159, float %155, float %157, float %159)  ; Dot3(ax,ay,az,bx,by,bz)
  %161 = call float @dx.op.unary.f32(i32 24, float %160)  ; Sqrt(value)
  %162 = fmul fast float %131, 5.000000e-01
  %163 = fsub fast float %161, %162
  %164 = fdiv fast float %163, %162
  %165 = call float @dx.op.unary.f32(i32 7, float %164)  ; Saturate(value)
  %166 = fmul fast float %165, 2.000000e+00
  %167 = fsub fast float 3.000000e+00, %166
  %168 = fmul fast float %165, %165
  %169 = fmul fast float %168, %167
  %170 = fsub fast float 1.000000e+00, %169
  %171 = fmul fast float %141, %137
  %172 = fmul fast float %171, %170
  %173 = call float @dx.op.binary.f32(i32 35, float %172, float %114)  ; FMax(a,b)
  %174 = add nuw i32 %115, 1
  %175 = icmp eq i32 %174, %110
  br i1 %175, label %176, label %113

; <label>:176                                     ; preds = %113
  br label %177

; <label>:177                                     ; preds = %176, %98
  %178 = phi float [ 0.000000e+00, %98 ], [ %173, %176 ]
  %179 = call float @dx.op.unary.f32(i32 7, float %178)  ; Saturate(value)
  %180 = fmul fast float %179, %10
  %181 = fmul fast float %179, %11
  %182 = fmul fast float %179, %12
  %183 = fadd fast float %180, %104
  %184 = fadd fast float %181, %105
  %185 = fadd fast float %182, %106
  %186 = extractvalue %dx.types.CBufRet.f32 %107, 1
  %187 = extractvalue %dx.types.CBufRet.f32 %107, 2
  %188 = fcmp fast ogt float %187, 5.000000e-01
  br i1 %188, label %264, label %189

; <label>:189                                     ; preds = %177
  br i1 %111, label %255, label %190

; <label>:190                                     ; preds = %189
  br label %191

; <label>:191                                     ; preds = %191, %190
  %192 = phi float [ %251, %191 ], [ 0.000000e+00, %190 ]
  %193 = phi i32 [ %252, %191 ], [ 0, %190 ]
  %194 = shl i32 %193, 2
  %195 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %194)  ; CBufferLoadLegacy(handle,regIndex)
  %196 = extractvalue %dx.types.CBufRet.i32 %195, 0
  %197 = extractvalue %dx.types.CBufRet.i32 %195, 1
  %198 = call float @dx.op.legacyF16ToF32(i32 131, i32 %196)  ; LegacyF16ToF32(value)
  %199 = lshr i32 %196, 16
  %200 = call float @dx.op.legacyF16ToF32(i32 131, i32 %199)  ; LegacyF16ToF32(value)
  %201 = call float @dx.op.legacyF16ToF32(i32 131, i32 %197)  ; LegacyF16ToF32(value)
  %202 = lshr i32 %197, 16
  %203 = call float @dx.op.legacyF16ToF32(i32 131, i32 %202)  ; LegacyF16ToF32(value)
  %204 = or i32 %194, 1
  %205 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %204)  ; CBufferLoadLegacy(handle,regIndex)
  %206 = extractvalue %dx.types.CBufRet.f32 %205, 0
  %207 = extractvalue %dx.types.CBufRet.f32 %205, 1
  %208 = extractvalue %dx.types.CBufRet.f32 %205, 2
  %209 = extractvalue %dx.types.CBufRet.f32 %205, 3
  %210 = or i32 %194, 2
  %211 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %210)  ; CBufferLoadLegacy(handle,regIndex)
  %212 = extractvalue %dx.types.CBufRet.f32 %211, 0
  %213 = extractvalue %dx.types.CBufRet.f32 %211, 1
  %214 = extractvalue %dx.types.CBufRet.f32 %211, 2
  %215 = extractvalue %dx.types.CBufRet.f32 %211, 3
  %216 = call float @dx.op.dot4.f32(i32 56, float %198, float %200, float %201, float %203, float %183, float %184, float %185, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %217 = fmul fast float %216, -1.000000e+01
  %218 = call float @dx.op.unary.f32(i32 7, float %217)  ; Saturate(value)
  %219 = fsub fast float 1.000000e+00, %218
  %220 = fsub fast float %183, %206
  %221 = fsub fast float %184, %207
  %222 = fsub fast float %185, %208
  %223 = fsub fast float %212, %206
  %224 = fsub fast float %213, %207
  %225 = fsub fast float %214, %208
  %226 = call float @dx.op.dot3.f32(i32 55, float %220, float %221, float %222, float %223, float %224, float %225)  ; Dot3(ax,ay,az,bx,by,bz)
  %227 = call float @dx.op.dot3.f32(i32 55, float %223, float %224, float %225, float %223, float %224, float %225)  ; Dot3(ax,ay,az,bx,by,bz)
  %228 = fdiv fast float %226, %227
  %229 = fmul fast float %228, %223
  %230 = fmul fast float %228, %224
  %231 = fmul fast float %228, %225
  %232 = fsub fast float %206, %183
  %233 = fadd fast float %232, %229
  %234 = fsub fast float %207, %184
  %235 = fadd fast float %234, %230
  %236 = fsub fast float %208, %185
  %237 = fadd fast float %236, %231
  %238 = call float @dx.op.dot3.f32(i32 55, float %233, float %235, float %237, float %233, float %235, float %237)  ; Dot3(ax,ay,az,bx,by,bz)
  %239 = call float @dx.op.unary.f32(i32 24, float %238)  ; Sqrt(value)
  %240 = fmul fast float %209, 5.000000e-01
  %241 = fsub fast float %239, %240
  %242 = fdiv fast float %241, %240
  %243 = call float @dx.op.unary.f32(i32 7, float %242)  ; Saturate(value)
  %244 = fmul fast float %243, 2.000000e+00
  %245 = fsub fast float 3.000000e+00, %244
  %246 = fmul fast float %243, %243
  %247 = fmul fast float %246, %245
  %248 = fsub fast float 1.000000e+00, %247
  %249 = fmul fast float %219, %215
  %250 = fmul fast float %249, %248
  %251 = call float @dx.op.binary.f32(i32 35, float %250, float %192)  ; FMax(a,b)
  %252 = add nuw i32 %193, 1
  %253 = icmp eq i32 %252, %110
  br i1 %253, label %254, label %191

; <label>:254                                     ; preds = %191
  br label %255

; <label>:255                                     ; preds = %254, %189
  %256 = phi float [ 0.000000e+00, %189 ], [ %251, %254 ]
  %257 = call float @dx.op.unary.f32(i32 7, float %256)  ; Saturate(value)
  %258 = fmul fast float %257, %10
  %259 = fmul fast float %257, %11
  %260 = fmul fast float %257, %12
  %261 = fadd fast float %258, %183
  %262 = fadd fast float %259, %184
  %263 = fadd fast float %260, %185
  br label %264

; <label>:264                                     ; preds = %255, %177
  %265 = phi float [ %183, %177 ], [ %261, %255 ]
  %266 = phi float [ %184, %177 ], [ %262, %255 ]
  %267 = phi float [ %185, %177 ], [ %263, %255 ]
  %268 = call float @dx.op.dot4.f32(i32 56, float %37, float %38, float %39, float %40, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %269 = call float @dx.op.dot4.f32(i32 56, float %29, float %30, float %31, float %32, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %270 = fadd fast float %269, %268
  %271 = call float @dx.op.binary.f32(i32 35, float 0x3EE4F8B580000000, float %270)  ; FMax(a,b)
  %272 = fdiv fast float %37, %271
  %273 = fdiv fast float %38, %271
  %274 = fdiv fast float %39, %271
  %275 = fdiv fast float %40, %271
  %276 = fdiv fast float %29, %271
  %277 = fdiv fast float %30, %271
  %278 = fdiv fast float %31, %271
  %279 = fdiv fast float %32, %271
  %280 = mul i32 %41, %14
  %281 = add i32 %280, %13
  %282 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %281, i32 undef)  ; BufferLoad(srv,index,wot)
  %283 = extractvalue %dx.types.ResRet.i32 %282, 0
  %284 = extractvalue %dx.types.ResRet.i32 %282, 1
  %285 = extractvalue %dx.types.ResRet.i32 %282, 2
  %286 = extractvalue %dx.types.ResRet.i32 %282, 3
  %287 = bitcast i32 %283 to float
  %288 = bitcast i32 %284 to float
  %289 = bitcast i32 %285 to float
  %290 = bitcast i32 %286 to float
  %291 = add i32 %281, 16
  %292 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %291, i32 undef)  ; BufferLoad(srv,index,wot)
  %293 = extractvalue %dx.types.ResRet.i32 %292, 0
  %294 = extractvalue %dx.types.ResRet.i32 %292, 1
  %295 = extractvalue %dx.types.ResRet.i32 %292, 2
  %296 = extractvalue %dx.types.ResRet.i32 %292, 3
  %297 = bitcast i32 %293 to float
  %298 = bitcast i32 %294 to float
  %299 = bitcast i32 %295 to float
  %300 = bitcast i32 %296 to float
  %301 = add i32 %281, 32
  %302 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %301, i32 undef)  ; BufferLoad(srv,index,wot)
  %303 = extractvalue %dx.types.ResRet.i32 %302, 0
  %304 = extractvalue %dx.types.ResRet.i32 %302, 1
  %305 = extractvalue %dx.types.ResRet.i32 %302, 2
  %306 = extractvalue %dx.types.ResRet.i32 %302, 3
  %307 = bitcast i32 %303 to float
  %308 = bitcast i32 %304 to float
  %309 = bitcast i32 %305 to float
  %310 = bitcast i32 %306 to float
  %311 = mul i32 %33, %14
  %312 = add i32 %311, %13
  %313 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %312, i32 undef)  ; BufferLoad(srv,index,wot)
  %314 = extractvalue %dx.types.ResRet.i32 %313, 0
  %315 = extractvalue %dx.types.ResRet.i32 %313, 1
  %316 = extractvalue %dx.types.ResRet.i32 %313, 2
  %317 = extractvalue %dx.types.ResRet.i32 %313, 3
  %318 = bitcast i32 %314 to float
  %319 = bitcast i32 %315 to float
  %320 = bitcast i32 %316 to float
  %321 = bitcast i32 %317 to float
  %322 = add i32 %312, 16
  %323 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %322, i32 undef)  ; BufferLoad(srv,index,wot)
  %324 = extractvalue %dx.types.ResRet.i32 %323, 0
  %325 = extractvalue %dx.types.ResRet.i32 %323, 1
  %326 = extractvalue %dx.types.ResRet.i32 %323, 2
  %327 = extractvalue %dx.types.ResRet.i32 %323, 3
  %328 = bitcast i32 %324 to float
  %329 = bitcast i32 %325 to float
  %330 = bitcast i32 %326 to float
  %331 = bitcast i32 %327 to float
  %332 = add i32 %312, 32
  %333 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %332, i32 undef)  ; BufferLoad(srv,index,wot)
  %334 = extractvalue %dx.types.ResRet.i32 %333, 0
  %335 = extractvalue %dx.types.ResRet.i32 %333, 1
  %336 = extractvalue %dx.types.ResRet.i32 %333, 2
  %337 = extractvalue %dx.types.ResRet.i32 %333, 3
  %338 = bitcast i32 %334 to float
  %339 = bitcast i32 %335 to float
  %340 = bitcast i32 %336 to float
  %341 = bitcast i32 %337 to float
  %342 = fmul fast float %287, %272
  %343 = fmul fast float %297, %272
  %344 = fmul fast float %307, %272
  %345 = fmul fast float %288, %272
  %346 = fmul fast float %298, %272
  %347 = fmul fast float %308, %272
  %348 = fmul fast float %289, %272
  %349 = fmul fast float %299, %272
  %350 = fmul fast float %309, %272
  %351 = fmul fast float %290, %272
  %352 = fmul fast float %300, %272
  %353 = fmul fast float %310, %272
  %354 = fmul fast float %318, %276
  %355 = fmul fast float %328, %276
  %356 = fmul fast float %338, %276
  %357 = fmul fast float %319, %276
  %358 = fmul fast float %329, %276
  %359 = fmul fast float %339, %276
  %360 = fmul fast float %320, %276
  %361 = fmul fast float %330, %276
  %362 = fmul fast float %340, %276
  %363 = fmul fast float %321, %276
  %364 = fmul fast float %331, %276
  %365 = fmul fast float %341, %276
  %366 = fadd fast float %354, %342
  %367 = fadd fast float %355, %343
  %368 = fadd fast float %356, %344
  %369 = fadd fast float %357, %345
  %370 = fadd fast float %358, %346
  %371 = fadd fast float %359, %347
  %372 = fadd fast float %360, %348
  %373 = fadd fast float %361, %349
  %374 = fadd fast float %362, %350
  %375 = fadd fast float %363, %351
  %376 = fadd fast float %364, %352
  %377 = fadd fast float %365, %353
  %378 = mul i32 %42, %14
  %379 = add i32 %378, %13
  %380 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %379, i32 undef)  ; BufferLoad(srv,index,wot)
  %381 = extractvalue %dx.types.ResRet.i32 %380, 0
  %382 = extractvalue %dx.types.ResRet.i32 %380, 1
  %383 = extractvalue %dx.types.ResRet.i32 %380, 2
  %384 = extractvalue %dx.types.ResRet.i32 %380, 3
  %385 = bitcast i32 %381 to float
  %386 = bitcast i32 %382 to float
  %387 = bitcast i32 %383 to float
  %388 = bitcast i32 %384 to float
  %389 = add i32 %379, 16
  %390 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %389, i32 undef)  ; BufferLoad(srv,index,wot)
  %391 = extractvalue %dx.types.ResRet.i32 %390, 0
  %392 = extractvalue %dx.types.ResRet.i32 %390, 1
  %393 = extractvalue %dx.types.ResRet.i32 %390, 2
  %394 = extractvalue %dx.types.ResRet.i32 %390, 3
  %395 = bitcast i32 %391 to float
  %396 = bitcast i32 %392 to float
  %397 = bitcast i32 %393 to float
  %398 = bitcast i32 %394 to float
  %399 = add i32 %379, 32
  %400 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %399, i32 undef)  ; BufferLoad(srv,index,wot)
  %401 = extractvalue %dx.types.ResRet.i32 %400, 0
  %402 = extractvalue %dx.types.ResRet.i32 %400, 1
  %403 = extractvalue %dx.types.ResRet.i32 %400, 2
  %404 = extractvalue %dx.types.ResRet.i32 %400, 3
  %405 = bitcast i32 %401 to float
  %406 = bitcast i32 %402 to float
  %407 = bitcast i32 %403 to float
  %408 = bitcast i32 %404 to float
  %409 = mul i32 %34, %14
  %410 = add i32 %409, %13
  %411 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %410, i32 undef)  ; BufferLoad(srv,index,wot)
  %412 = extractvalue %dx.types.ResRet.i32 %411, 0
  %413 = extractvalue %dx.types.ResRet.i32 %411, 1
  %414 = extractvalue %dx.types.ResRet.i32 %411, 2
  %415 = extractvalue %dx.types.ResRet.i32 %411, 3
  %416 = bitcast i32 %412 to float
  %417 = bitcast i32 %413 to float
  %418 = bitcast i32 %414 to float
  %419 = bitcast i32 %415 to float
  %420 = add i32 %410, 16
  %421 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %420, i32 undef)  ; BufferLoad(srv,index,wot)
  %422 = extractvalue %dx.types.ResRet.i32 %421, 0
  %423 = extractvalue %dx.types.ResRet.i32 %421, 1
  %424 = extractvalue %dx.types.ResRet.i32 %421, 2
  %425 = extractvalue %dx.types.ResRet.i32 %421, 3
  %426 = bitcast i32 %422 to float
  %427 = bitcast i32 %423 to float
  %428 = bitcast i32 %424 to float
  %429 = bitcast i32 %425 to float
  %430 = add i32 %410, 32
  %431 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %430, i32 undef)  ; BufferLoad(srv,index,wot)
  %432 = extractvalue %dx.types.ResRet.i32 %431, 0
  %433 = extractvalue %dx.types.ResRet.i32 %431, 1
  %434 = extractvalue %dx.types.ResRet.i32 %431, 2
  %435 = extractvalue %dx.types.ResRet.i32 %431, 3
  %436 = bitcast i32 %432 to float
  %437 = bitcast i32 %433 to float
  %438 = bitcast i32 %434 to float
  %439 = bitcast i32 %435 to float
  %440 = fmul fast float %385, %273
  %441 = fmul fast float %395, %273
  %442 = fmul fast float %405, %273
  %443 = fmul fast float %386, %273
  %444 = fmul fast float %396, %273
  %445 = fmul fast float %406, %273
  %446 = fmul fast float %387, %273
  %447 = fmul fast float %397, %273
  %448 = fmul fast float %407, %273
  %449 = fmul fast float %388, %273
  %450 = fmul fast float %398, %273
  %451 = fmul fast float %408, %273
  %452 = fadd fast float %366, %440
  %453 = fadd fast float %367, %441
  %454 = fadd fast float %368, %442
  %455 = fadd fast float %369, %443
  %456 = fadd fast float %370, %444
  %457 = fadd fast float %371, %445
  %458 = fadd fast float %372, %446
  %459 = fadd fast float %373, %447
  %460 = fadd fast float %374, %448
  %461 = fadd fast float %375, %449
  %462 = fadd fast float %376, %450
  %463 = fadd fast float %377, %451
  %464 = fmul fast float %416, %277
  %465 = fmul fast float %426, %277
  %466 = fmul fast float %436, %277
  %467 = fmul fast float %417, %277
  %468 = fmul fast float %427, %277
  %469 = fmul fast float %437, %277
  %470 = fmul fast float %418, %277
  %471 = fmul fast float %428, %277
  %472 = fmul fast float %438, %277
  %473 = fmul fast float %419, %277
  %474 = fmul fast float %429, %277
  %475 = fmul fast float %439, %277
  %476 = fadd fast float %452, %464
  %477 = fadd fast float %453, %465
  %478 = fadd fast float %454, %466
  %479 = fadd fast float %455, %467
  %480 = fadd fast float %456, %468
  %481 = fadd fast float %457, %469
  %482 = fadd fast float %458, %470
  %483 = fadd fast float %459, %471
  %484 = fadd fast float %460, %472
  %485 = fadd fast float %461, %473
  %486 = fadd fast float %462, %474
  %487 = fadd fast float %463, %475
  %488 = mul i32 %43, %14
  %489 = add i32 %488, %13
  %490 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %489, i32 undef)  ; BufferLoad(srv,index,wot)
  %491 = extractvalue %dx.types.ResRet.i32 %490, 0
  %492 = extractvalue %dx.types.ResRet.i32 %490, 1
  %493 = extractvalue %dx.types.ResRet.i32 %490, 2
  %494 = extractvalue %dx.types.ResRet.i32 %490, 3
  %495 = bitcast i32 %491 to float
  %496 = bitcast i32 %492 to float
  %497 = bitcast i32 %493 to float
  %498 = bitcast i32 %494 to float
  %499 = add i32 %489, 16
  %500 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %499, i32 undef)  ; BufferLoad(srv,index,wot)
  %501 = extractvalue %dx.types.ResRet.i32 %500, 0
  %502 = extractvalue %dx.types.ResRet.i32 %500, 1
  %503 = extractvalue %dx.types.ResRet.i32 %500, 2
  %504 = extractvalue %dx.types.ResRet.i32 %500, 3
  %505 = bitcast i32 %501 to float
  %506 = bitcast i32 %502 to float
  %507 = bitcast i32 %503 to float
  %508 = bitcast i32 %504 to float
  %509 = add i32 %489, 32
  %510 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %509, i32 undef)  ; BufferLoad(srv,index,wot)
  %511 = extractvalue %dx.types.ResRet.i32 %510, 0
  %512 = extractvalue %dx.types.ResRet.i32 %510, 1
  %513 = extractvalue %dx.types.ResRet.i32 %510, 2
  %514 = extractvalue %dx.types.ResRet.i32 %510, 3
  %515 = bitcast i32 %511 to float
  %516 = bitcast i32 %512 to float
  %517 = bitcast i32 %513 to float
  %518 = bitcast i32 %514 to float
  %519 = mul i32 %35, %14
  %520 = add i32 %519, %13
  %521 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %520, i32 undef)  ; BufferLoad(srv,index,wot)
  %522 = extractvalue %dx.types.ResRet.i32 %521, 0
  %523 = extractvalue %dx.types.ResRet.i32 %521, 1
  %524 = extractvalue %dx.types.ResRet.i32 %521, 2
  %525 = extractvalue %dx.types.ResRet.i32 %521, 3
  %526 = bitcast i32 %522 to float
  %527 = bitcast i32 %523 to float
  %528 = bitcast i32 %524 to float
  %529 = bitcast i32 %525 to float
  %530 = add i32 %520, 16
  %531 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %530, i32 undef)  ; BufferLoad(srv,index,wot)
  %532 = extractvalue %dx.types.ResRet.i32 %531, 0
  %533 = extractvalue %dx.types.ResRet.i32 %531, 1
  %534 = extractvalue %dx.types.ResRet.i32 %531, 2
  %535 = extractvalue %dx.types.ResRet.i32 %531, 3
  %536 = bitcast i32 %532 to float
  %537 = bitcast i32 %533 to float
  %538 = bitcast i32 %534 to float
  %539 = bitcast i32 %535 to float
  %540 = add i32 %520, 32
  %541 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %540, i32 undef)  ; BufferLoad(srv,index,wot)
  %542 = extractvalue %dx.types.ResRet.i32 %541, 0
  %543 = extractvalue %dx.types.ResRet.i32 %541, 1
  %544 = extractvalue %dx.types.ResRet.i32 %541, 2
  %545 = extractvalue %dx.types.ResRet.i32 %541, 3
  %546 = bitcast i32 %542 to float
  %547 = bitcast i32 %543 to float
  %548 = bitcast i32 %544 to float
  %549 = bitcast i32 %545 to float
  %550 = fmul fast float %495, %274
  %551 = fmul fast float %505, %274
  %552 = fmul fast float %515, %274
  %553 = fmul fast float %496, %274
  %554 = fmul fast float %506, %274
  %555 = fmul fast float %516, %274
  %556 = fmul fast float %497, %274
  %557 = fmul fast float %507, %274
  %558 = fmul fast float %517, %274
  %559 = fmul fast float %498, %274
  %560 = fmul fast float %508, %274
  %561 = fmul fast float %518, %274
  %562 = fadd fast float %476, %550
  %563 = fadd fast float %477, %551
  %564 = fadd fast float %478, %552
  %565 = fadd fast float %479, %553
  %566 = fadd fast float %480, %554
  %567 = fadd fast float %481, %555
  %568 = fadd fast float %482, %556
  %569 = fadd fast float %483, %557
  %570 = fadd fast float %484, %558
  %571 = fadd fast float %485, %559
  %572 = fadd fast float %486, %560
  %573 = fadd fast float %487, %561
  %574 = fmul fast float %526, %278
  %575 = fmul fast float %536, %278
  %576 = fmul fast float %546, %278
  %577 = fmul fast float %527, %278
  %578 = fmul fast float %537, %278
  %579 = fmul fast float %547, %278
  %580 = fmul fast float %528, %278
  %581 = fmul fast float %538, %278
  %582 = fmul fast float %548, %278
  %583 = fmul fast float %529, %278
  %584 = fmul fast float %539, %278
  %585 = fmul fast float %549, %278
  %586 = fadd fast float %562, %574
  %587 = fadd fast float %563, %575
  %588 = fadd fast float %564, %576
  %589 = fadd fast float %565, %577
  %590 = fadd fast float %566, %578
  %591 = fadd fast float %567, %579
  %592 = fadd fast float %568, %580
  %593 = fadd fast float %569, %581
  %594 = fadd fast float %570, %582
  %595 = fadd fast float %571, %583
  %596 = fadd fast float %572, %584
  %597 = fadd fast float %573, %585
  %598 = mul i32 %44, %14
  %599 = add i32 %598, %13
  %600 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %599, i32 undef)  ; BufferLoad(srv,index,wot)
  %601 = extractvalue %dx.types.ResRet.i32 %600, 0
  %602 = extractvalue %dx.types.ResRet.i32 %600, 1
  %603 = extractvalue %dx.types.ResRet.i32 %600, 2
  %604 = extractvalue %dx.types.ResRet.i32 %600, 3
  %605 = bitcast i32 %601 to float
  %606 = bitcast i32 %602 to float
  %607 = bitcast i32 %603 to float
  %608 = bitcast i32 %604 to float
  %609 = add i32 %599, 16
  %610 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %609, i32 undef)  ; BufferLoad(srv,index,wot)
  %611 = extractvalue %dx.types.ResRet.i32 %610, 0
  %612 = extractvalue %dx.types.ResRet.i32 %610, 1
  %613 = extractvalue %dx.types.ResRet.i32 %610, 2
  %614 = extractvalue %dx.types.ResRet.i32 %610, 3
  %615 = bitcast i32 %611 to float
  %616 = bitcast i32 %612 to float
  %617 = bitcast i32 %613 to float
  %618 = bitcast i32 %614 to float
  %619 = add i32 %599, 32
  %620 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %619, i32 undef)  ; BufferLoad(srv,index,wot)
  %621 = extractvalue %dx.types.ResRet.i32 %620, 0
  %622 = extractvalue %dx.types.ResRet.i32 %620, 1
  %623 = extractvalue %dx.types.ResRet.i32 %620, 2
  %624 = extractvalue %dx.types.ResRet.i32 %620, 3
  %625 = bitcast i32 %621 to float
  %626 = bitcast i32 %622 to float
  %627 = bitcast i32 %623 to float
  %628 = bitcast i32 %624 to float
  %629 = mul i32 %36, %14
  %630 = add i32 %629, %13
  %631 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %630, i32 undef)  ; BufferLoad(srv,index,wot)
  %632 = extractvalue %dx.types.ResRet.i32 %631, 0
  %633 = extractvalue %dx.types.ResRet.i32 %631, 1
  %634 = extractvalue %dx.types.ResRet.i32 %631, 2
  %635 = extractvalue %dx.types.ResRet.i32 %631, 3
  %636 = bitcast i32 %632 to float
  %637 = bitcast i32 %633 to float
  %638 = bitcast i32 %634 to float
  %639 = bitcast i32 %635 to float
  %640 = add i32 %630, 16
  %641 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %640, i32 undef)  ; BufferLoad(srv,index,wot)
  %642 = extractvalue %dx.types.ResRet.i32 %641, 0
  %643 = extractvalue %dx.types.ResRet.i32 %641, 1
  %644 = extractvalue %dx.types.ResRet.i32 %641, 2
  %645 = extractvalue %dx.types.ResRet.i32 %641, 3
  %646 = bitcast i32 %642 to float
  %647 = bitcast i32 %643 to float
  %648 = bitcast i32 %644 to float
  %649 = bitcast i32 %645 to float
  %650 = add i32 %630, 32
  %651 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %650, i32 undef)  ; BufferLoad(srv,index,wot)
  %652 = extractvalue %dx.types.ResRet.i32 %651, 0
  %653 = extractvalue %dx.types.ResRet.i32 %651, 1
  %654 = extractvalue %dx.types.ResRet.i32 %651, 2
  %655 = extractvalue %dx.types.ResRet.i32 %651, 3
  %656 = bitcast i32 %652 to float
  %657 = bitcast i32 %653 to float
  %658 = bitcast i32 %654 to float
  %659 = bitcast i32 %655 to float
  %660 = fmul fast float %605, %275
  %661 = fmul fast float %615, %275
  %662 = fmul fast float %625, %275
  %663 = fmul fast float %606, %275
  %664 = fmul fast float %616, %275
  %665 = fmul fast float %626, %275
  %666 = fmul fast float %607, %275
  %667 = fmul fast float %617, %275
  %668 = fmul fast float %627, %275
  %669 = fmul fast float %608, %275
  %670 = fmul fast float %618, %275
  %671 = fmul fast float %628, %275
  %672 = fadd fast float %586, %660
  %673 = fadd fast float %587, %661
  %674 = fadd fast float %588, %662
  %675 = fadd fast float %589, %663
  %676 = fadd fast float %590, %664
  %677 = fadd fast float %591, %665
  %678 = fadd fast float %592, %666
  %679 = fadd fast float %593, %667
  %680 = fadd fast float %594, %668
  %681 = fadd fast float %595, %669
  %682 = fadd fast float %596, %670
  %683 = fadd fast float %597, %671
  %684 = fmul fast float %636, %279
  %685 = fmul fast float %646, %279
  %686 = fmul fast float %656, %279
  %687 = fmul fast float %637, %279
  %688 = fmul fast float %647, %279
  %689 = fmul fast float %657, %279
  %690 = fmul fast float %638, %279
  %691 = fmul fast float %648, %279
  %692 = fmul fast float %658, %279
  %693 = fmul fast float %639, %279
  %694 = fmul fast float %649, %279
  %695 = fmul fast float %659, %279
  %696 = fadd fast float %672, %684
  %697 = fadd fast float %673, %685
  %698 = fadd fast float %674, %686
  %699 = fadd fast float %675, %687
  %700 = fadd fast float %676, %688
  %701 = fadd fast float %677, %689
  %702 = fadd fast float %678, %690
  %703 = fadd fast float %679, %691
  %704 = fadd fast float %680, %692
  %705 = fadd fast float %681, %693
  %706 = fadd fast float %682, %694
  %707 = fadd fast float %683, %695
  %708 = fmul fast float %696, %265
  %709 = call float @dx.op.tertiary.f32(i32 46, float %266, float %699, float %708)  ; FMad(a,b,c)
  %710 = call float @dx.op.tertiary.f32(i32 46, float %267, float %702, float %709)  ; FMad(a,b,c)
  %711 = fadd fast float %710, %705
  %712 = fmul fast float %697, %265
  %713 = call float @dx.op.tertiary.f32(i32 46, float %266, float %700, float %712)  ; FMad(a,b,c)
  %714 = call float @dx.op.tertiary.f32(i32 46, float %267, float %703, float %713)  ; FMad(a,b,c)
  %715 = fadd fast float %714, %706
  %716 = fmul fast float %698, %265
  %717 = call float @dx.op.tertiary.f32(i32 46, float %266, float %701, float %716)  ; FMad(a,b,c)
  %718 = call float @dx.op.tertiary.f32(i32 46, float %267, float %704, float %717)  ; FMad(a,b,c)
  %719 = fadd fast float %718, %707
  br i1 %188, label %720, label %795

; <label>:720                                     ; preds = %264
  br i1 %111, label %786, label %721

; <label>:721                                     ; preds = %720
  br label %722

; <label>:722                                     ; preds = %722, %721
  %723 = phi float [ %782, %722 ], [ 0.000000e+00, %721 ]
  %724 = phi i32 [ %783, %722 ], [ 0, %721 ]
  %725 = shl i32 %724, 2
  %726 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %725)  ; CBufferLoadLegacy(handle,regIndex)
  %727 = extractvalue %dx.types.CBufRet.i32 %726, 0
  %728 = extractvalue %dx.types.CBufRet.i32 %726, 1
  %729 = call float @dx.op.legacyF16ToF32(i32 131, i32 %727)  ; LegacyF16ToF32(value)
  %730 = lshr i32 %727, 16
  %731 = call float @dx.op.legacyF16ToF32(i32 131, i32 %730)  ; LegacyF16ToF32(value)
  %732 = call float @dx.op.legacyF16ToF32(i32 131, i32 %728)  ; LegacyF16ToF32(value)
  %733 = lshr i32 %728, 16
  %734 = call float @dx.op.legacyF16ToF32(i32 131, i32 %733)  ; LegacyF16ToF32(value)
  %735 = or i32 %725, 1
  %736 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %735)  ; CBufferLoadLegacy(handle,regIndex)
  %737 = extractvalue %dx.types.CBufRet.f32 %736, 0
  %738 = extractvalue %dx.types.CBufRet.f32 %736, 1
  %739 = extractvalue %dx.types.CBufRet.f32 %736, 2
  %740 = extractvalue %dx.types.CBufRet.f32 %736, 3
  %741 = or i32 %725, 2
  %742 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %741)  ; CBufferLoadLegacy(handle,regIndex)
  %743 = extractvalue %dx.types.CBufRet.f32 %742, 0
  %744 = extractvalue %dx.types.CBufRet.f32 %742, 1
  %745 = extractvalue %dx.types.CBufRet.f32 %742, 2
  %746 = extractvalue %dx.types.CBufRet.f32 %742, 3
  %747 = call float @dx.op.dot4.f32(i32 56, float %729, float %731, float %732, float %734, float %711, float %715, float %719, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %748 = fmul fast float %747, -1.000000e+01
  %749 = call float @dx.op.unary.f32(i32 7, float %748)  ; Saturate(value)
  %750 = fsub fast float 1.000000e+00, %749
  %751 = fsub fast float %711, %737
  %752 = fsub fast float %715, %738
  %753 = fsub fast float %719, %739
  %754 = fsub fast float %743, %737
  %755 = fsub fast float %744, %738
  %756 = fsub fast float %745, %739
  %757 = call float @dx.op.dot3.f32(i32 55, float %751, float %752, float %753, float %754, float %755, float %756)  ; Dot3(ax,ay,az,bx,by,bz)
  %758 = call float @dx.op.dot3.f32(i32 55, float %754, float %755, float %756, float %754, float %755, float %756)  ; Dot3(ax,ay,az,bx,by,bz)
  %759 = fdiv fast float %757, %758
  %760 = fmul fast float %759, %754
  %761 = fmul fast float %759, %755
  %762 = fmul fast float %759, %756
  %763 = fsub fast float %737, %711
  %764 = fadd fast float %763, %760
  %765 = fsub fast float %738, %715
  %766 = fadd fast float %765, %761
  %767 = fsub fast float %739, %719
  %768 = fadd fast float %767, %762
  %769 = call float @dx.op.dot3.f32(i32 55, float %764, float %766, float %768, float %764, float %766, float %768)  ; Dot3(ax,ay,az,bx,by,bz)
  %770 = call float @dx.op.unary.f32(i32 24, float %769)  ; Sqrt(value)
  %771 = fmul fast float %740, 5.000000e-01
  %772 = fsub fast float %770, %771
  %773 = fdiv fast float %772, %771
  %774 = call float @dx.op.unary.f32(i32 7, float %773)  ; Saturate(value)
  %775 = fmul fast float %774, 2.000000e+00
  %776 = fsub fast float 3.000000e+00, %775
  %777 = fmul fast float %774, %774
  %778 = fmul fast float %777, %776
  %779 = fsub fast float 1.000000e+00, %778
  %780 = fmul fast float %750, %746
  %781 = fmul fast float %780, %779
  %782 = call float @dx.op.binary.f32(i32 35, float %781, float %723)  ; FMax(a,b)
  %783 = add nuw i32 %724, 1
  %784 = icmp eq i32 %783, %110
  br i1 %784, label %785, label %722

; <label>:785                                     ; preds = %722
  br label %786

; <label>:786                                     ; preds = %785, %720
  %787 = phi float [ 0.000000e+00, %720 ], [ %782, %785 ]
  %788 = call float @dx.op.unary.f32(i32 7, float %787)  ; Saturate(value)
  %789 = fmul fast float %788, %10
  %790 = fmul fast float %788, %11
  %791 = fmul fast float %788, %12
  %792 = fadd fast float %789, %711
  %793 = fadd fast float %790, %715
  %794 = fadd fast float %791, %719
  br label %795

; <label>:795                                     ; preds = %786, %264
  %796 = phi float [ %792, %786 ], [ %711, %264 ]
  %797 = phi float [ %793, %786 ], [ %715, %264 ]
  %798 = phi float [ %794, %786 ], [ %719, %264 ]
  %799 = fcmp ule float %186, 5.000000e-01
  %800 = xor i1 %799, true
  %801 = or i1 %188, %800
  %802 = or i1 %801, %111
  br i1 %802, label %933, label %803

; <label>:803                                     ; preds = %795
  br label %804

; <label>:804                                     ; preds = %929, %803
  %805 = phi i32 [ %930, %929 ], [ 0, %803 ]
  %806 = shl i32 %805, 2
  %807 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %806)  ; CBufferLoadLegacy(handle,regIndex)
  %808 = extractvalue %dx.types.CBufRet.i32 %807, 0
  %809 = extractvalue %dx.types.CBufRet.i32 %807, 1
  %810 = call float @dx.op.legacyF16ToF32(i32 131, i32 %808)  ; LegacyF16ToF32(value)
  %811 = lshr i32 %808, 16
  %812 = call float @dx.op.legacyF16ToF32(i32 131, i32 %811)  ; LegacyF16ToF32(value)
  %813 = call float @dx.op.legacyF16ToF32(i32 131, i32 %809)  ; LegacyF16ToF32(value)
  %814 = lshr i32 %809, 16
  %815 = call float @dx.op.legacyF16ToF32(i32 131, i32 %814)  ; LegacyF16ToF32(value)
  %816 = extractvalue %dx.types.CBufRet.i32 %807, 2
  %817 = extractvalue %dx.types.CBufRet.i32 %807, 3
  %818 = call float @dx.op.legacyF16ToF32(i32 131, i32 %816)  ; LegacyF16ToF32(value)
  %819 = lshr i32 %816, 16
  %820 = call float @dx.op.legacyF16ToF32(i32 131, i32 %819)  ; LegacyF16ToF32(value)
  %821 = call float @dx.op.legacyF16ToF32(i32 131, i32 %817)  ; LegacyF16ToF32(value)
  %822 = lshr i32 %817, 16
  %823 = call float @dx.op.legacyF16ToF32(i32 131, i32 %822)  ; LegacyF16ToF32(value)
  %824 = or i32 %806, 1
  %825 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %824)  ; CBufferLoadLegacy(handle,regIndex)
  %826 = extractvalue %dx.types.CBufRet.f32 %825, 0
  %827 = extractvalue %dx.types.CBufRet.f32 %825, 1
  %828 = extractvalue %dx.types.CBufRet.f32 %825, 2
  %829 = extractvalue %dx.types.CBufRet.f32 %825, 3
  %830 = or i32 %806, 2
  %831 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %830)  ; CBufferLoadLegacy(handle,regIndex)
  %832 = extractvalue %dx.types.CBufRet.f32 %831, 0
  %833 = extractvalue %dx.types.CBufRet.f32 %831, 1
  %834 = extractvalue %dx.types.CBufRet.f32 %831, 2
  %835 = or i32 %806, 3
  %836 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %835)  ; CBufferLoadLegacy(handle,regIndex)
  %837 = extractvalue %dx.types.CBufRet.i32 %836, 3
  %838 = icmp eq i32 %837, 0
  %839 = fsub fast float %265, %826
  %840 = fsub fast float %266, %827
  %841 = fsub fast float %267, %828
  %842 = fsub fast float %832, %826
  %843 = fsub fast float %833, %827
  %844 = fsub fast float %834, %828
  %845 = call float @dx.op.dot3.f32(i32 55, float %839, float %840, float %841, float %842, float %843, float %844)  ; Dot3(ax,ay,az,bx,by,bz)
  %846 = call float @dx.op.dot3.f32(i32 55, float %842, float %843, float %844, float %842, float %843, float %844)  ; Dot3(ax,ay,az,bx,by,bz)
  %847 = fdiv fast float %845, %846
  %848 = fmul fast float %847, %842
  %849 = fmul fast float %847, %843
  %850 = fmul fast float %847, %844
  %851 = fsub fast float %826, %265
  %852 = fadd fast float %851, %848
  %853 = fsub fast float %827, %266
  %854 = fadd fast float %853, %849
  %855 = fsub fast float %828, %267
  %856 = fadd fast float %855, %850
  %857 = call float @dx.op.dot3.f32(i32 55, float %852, float %854, float %856, float %852, float %854, float %856)  ; Dot3(ax,ay,az,bx,by,bz)
  %858 = fmul fast float %829, %829
  %859 = fcmp fast ole float %857, %858
  %860 = call float @dx.op.dot4.f32(i32 56, float %818, float %820, float %821, float %823, float %265, float %266, float %267, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  br i1 %838, label %861, label %891, !dx.controlflow.hints !59

; <label>:861                                     ; preds = %804
  %862 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %835)  ; CBufferLoadLegacy(handle,regIndex)
  %863 = call float @dx.op.dot4.f32(i32 56, float %810, float %812, float %813, float %815, float %265, float %266, float %267, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %864 = fcmp fast ogt float %863, 0.000000e+00
  %865 = and i1 %859, %864
  %866 = fcmp fast ogt float %860, 0.000000e+00
  %867 = and i1 %865, %866
  br i1 %867, label %868, label %929

; <label>:868                                     ; preds = %861
  %869 = extractvalue %dx.types.CBufRet.f32 %862, 0
  %870 = extractvalue %dx.types.CBufRet.f32 %862, 1
  %871 = extractvalue %dx.types.CBufRet.f32 %862, 2
  %872 = call float @dx.op.dot4.f32(i32 56, float %265, float %266, float %267, float 1.000000e+00, float %810, float %812, float %813, float %815)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %873 = fmul fast float %810, %872
  %874 = fsub fast float -0.000000e+00, %873
  %875 = fmul fast float %812, %872
  %876 = fsub fast float -0.000000e+00, %875
  %877 = fmul fast float %813, %872
  %878 = fsub fast float -0.000000e+00, %877
  %879 = call float @dx.op.dot3.f32(i32 55, float %874, float %876, float %878, float %874, float %876, float %878)  ; Dot3(ax,ay,az,bx,by,bz)
  %880 = fmul fast float %879, 0x408F3FFFE0000000
  %881 = call float @dx.op.unary.f32(i32 7, float %880)  ; Saturate(value)
  %882 = fsub fast float %869, %796
  %883 = fsub fast float %870, %797
  %884 = fsub fast float %871, %798
  %885 = fmul fast float %881, %882
  %886 = fmul fast float %881, %883
  %887 = fmul fast float %881, %884
  %888 = fadd fast float %885, %796
  %889 = fadd fast float %886, %797
  %890 = fadd fast float %887, %798
  br label %933

; <label>:891                                     ; preds = %804
  %892 = fcmp fast oge float %860, 0.000000e+00
  %893 = and i1 %859, %892
  br i1 %893, label %894, label %929

; <label>:894                                     ; preds = %891
  %895 = fadd fast float %848, %826
  %896 = fadd fast float %849, %827
  %897 = fadd fast float %850, %828
  %898 = call float @dx.op.dot4.f32(i32 56, float %265, float %266, float %267, float 1.000000e+00, float %810, float %812, float %813, float %815)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %899 = fmul fast float %898, %810
  %900 = fmul fast float %898, %812
  %901 = fmul fast float %898, %813
  %902 = fsub fast float %265, %899
  %903 = fsub fast float %266, %900
  %904 = fsub fast float %267, %901
  %905 = fsub fast float %902, %895
  %906 = fsub fast float %903, %896
  %907 = fsub fast float %904, %897
  %908 = call float @dx.op.dot3.f32(i32 55, float %905, float %906, float %907, float %905, float %906, float %907)  ; Dot3(ax,ay,az,bx,by,bz)
  %909 = call float @dx.op.unary.f32(i32 25, float %908)  ; Rsqrt(value)
  %910 = fmul fast float %909, %829
  %911 = fmul fast float %910, %905
  %912 = fmul fast float %910, %906
  %913 = fmul fast float %910, %907
  %914 = fadd fast float %911, %895
  %915 = fadd fast float %912, %896
  %916 = fadd fast float %913, %897
  %917 = fmul fast float %914, %696
  %918 = call float @dx.op.tertiary.f32(i32 46, float %915, float %699, float %917)  ; FMad(a,b,c)
  %919 = call float @dx.op.tertiary.f32(i32 46, float %916, float %702, float %918)  ; FMad(a,b,c)
  %920 = fadd fast float %919, %705
  %921 = fmul fast float %914, %697
  %922 = call float @dx.op.tertiary.f32(i32 46, float %915, float %700, float %921)  ; FMad(a,b,c)
  %923 = call float @dx.op.tertiary.f32(i32 46, float %916, float %703, float %922)  ; FMad(a,b,c)
  %924 = fadd fast float %923, %706
  %925 = fmul fast float %914, %698
  %926 = call float @dx.op.tertiary.f32(i32 46, float %915, float %701, float %925)  ; FMad(a,b,c)
  %927 = call float @dx.op.tertiary.f32(i32 46, float %916, float %704, float %926)  ; FMad(a,b,c)
  %928 = fadd fast float %927, %707
  br label %933

; <label>:929                                     ; preds = %891, %861
  %930 = add nuw i32 %805, 1
  %931 = icmp ult i32 %930, %110
  br i1 %931, label %804, label %932, !llvm.loop !60

; <label>:932                                     ; preds = %929
  br label %933

; <label>:933                                     ; preds = %932, %894, %868, %795
  %934 = phi float [ %796, %795 ], [ %888, %868 ], [ %920, %894 ], [ %796, %932 ]
  %935 = phi float [ %797, %795 ], [ %889, %868 ], [ %924, %894 ], [ %797, %932 ]
  %936 = phi float [ %798, %795 ], [ %890, %868 ], [ %928, %894 ], [ %798, %932 ]
  %937 = fmul fast float %934, %48
  %938 = call float @dx.op.tertiary.f32(i32 46, float %935, float %49, float %937)  ; FMad(a,b,c)
  %939 = call float @dx.op.tertiary.f32(i32 46, float %936, float %50, float %938)  ; FMad(a,b,c)
  %940 = fadd fast float %939, %73
  %941 = fmul fast float %934, %52
  %942 = call float @dx.op.tertiary.f32(i32 46, float %935, float %53, float %941)  ; FMad(a,b,c)
  %943 = call float @dx.op.tertiary.f32(i32 46, float %936, float %54, float %942)  ; FMad(a,b,c)
  %944 = fadd fast float %943, %74
  %945 = fmul fast float %934, %56
  %946 = call float @dx.op.tertiary.f32(i32 46, float %935, float %57, float %945)  ; FMad(a,b,c)
  %947 = call float @dx.op.tertiary.f32(i32 46, float %936, float %58, float %946)  ; FMad(a,b,c)
  %948 = fadd fast float %947, %75
  %949 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %950 = extractvalue %dx.types.CBufRet.f32 %949, 0
  %951 = extractvalue %dx.types.CBufRet.f32 %949, 1
  %952 = extractvalue %dx.types.CBufRet.f32 %949, 2
  %953 = extractvalue %dx.types.CBufRet.f32 %949, 3
  %954 = fmul fast float %950, %940
  %955 = call float @dx.op.tertiary.f32(i32 46, float %944, float %951, float %954)  ; FMad(a,b,c)
  %956 = call float @dx.op.tertiary.f32(i32 46, float %948, float %952, float %955)  ; FMad(a,b,c)
  %957 = fadd fast float %956, %953
  %958 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 37)  ; CBufferLoadLegacy(handle,regIndex)
  %959 = extractvalue %dx.types.CBufRet.f32 %958, 0
  %960 = extractvalue %dx.types.CBufRet.f32 %958, 1
  %961 = extractvalue %dx.types.CBufRet.f32 %958, 2
  %962 = fadd fast float %959, %940
  %963 = fadd fast float %960, %944
  %964 = fadd fast float %961, %948
  %965 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %966 = extractvalue %dx.types.CBufRet.f32 %965, 0
  %967 = extractvalue %dx.types.CBufRet.f32 %965, 1
  %968 = extractvalue %dx.types.CBufRet.f32 %965, 2
  %969 = extractvalue %dx.types.CBufRet.f32 %965, 3
  %970 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %971 = extractvalue %dx.types.CBufRet.f32 %970, 0
  %972 = extractvalue %dx.types.CBufRet.f32 %970, 1
  %973 = extractvalue %dx.types.CBufRet.f32 %970, 2
  %974 = extractvalue %dx.types.CBufRet.f32 %970, 3
  %975 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %976 = extractvalue %dx.types.CBufRet.f32 %975, 0
  %977 = extractvalue %dx.types.CBufRet.f32 %975, 1
  %978 = extractvalue %dx.types.CBufRet.f32 %975, 2
  %979 = extractvalue %dx.types.CBufRet.f32 %975, 3
  %980 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %981 = extractvalue %dx.types.CBufRet.f32 %980, 0
  %982 = extractvalue %dx.types.CBufRet.f32 %980, 1
  %983 = extractvalue %dx.types.CBufRet.f32 %980, 2
  %984 = extractvalue %dx.types.CBufRet.f32 %980, 3
  %985 = fmul fast float %966, %940
  %986 = call float @dx.op.tertiary.f32(i32 46, float %944, float %967, float %985)  ; FMad(a,b,c)
  %987 = call float @dx.op.tertiary.f32(i32 46, float %948, float %968, float %986)  ; FMad(a,b,c)
  %988 = fadd fast float %987, %969
  %989 = fmul fast float %971, %940
  %990 = call float @dx.op.tertiary.f32(i32 46, float %944, float %972, float %989)  ; FMad(a,b,c)
  %991 = call float @dx.op.tertiary.f32(i32 46, float %948, float %973, float %990)  ; FMad(a,b,c)
  %992 = fadd fast float %991, %974
  %993 = fmul fast float %976, %940
  %994 = call float @dx.op.tertiary.f32(i32 46, float %944, float %977, float %993)  ; FMad(a,b,c)
  %995 = call float @dx.op.tertiary.f32(i32 46, float %948, float %978, float %994)  ; FMad(a,b,c)
  %996 = fadd fast float %995, %979
  %997 = fmul fast float %981, %940
  %998 = call float @dx.op.tertiary.f32(i32 46, float %944, float %982, float %997)  ; FMad(a,b,c)
  %999 = call float @dx.op.tertiary.f32(i32 46, float %948, float %983, float %998)  ; FMad(a,b,c)
  %1000 = fadd fast float %999, %984
  br i1 %188, label %1076, label %1001

; <label>:1001                                    ; preds = %933
  br i1 %111, label %1067, label %1002

; <label>:1002                                    ; preds = %1001
  br label %1003

; <label>:1003                                    ; preds = %1003, %1002
  %1004 = phi float [ %1063, %1003 ], [ 0.000000e+00, %1002 ]
  %1005 = phi i32 [ %1064, %1003 ], [ 0, %1002 ]
  %1006 = shl i32 %1005, 2
  %1007 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %1006)  ; CBufferLoadLegacy(handle,regIndex)
  %1008 = extractvalue %dx.types.CBufRet.i32 %1007, 0
  %1009 = extractvalue %dx.types.CBufRet.i32 %1007, 1
  %1010 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1008)  ; LegacyF16ToF32(value)
  %1011 = lshr i32 %1008, 16
  %1012 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1011)  ; LegacyF16ToF32(value)
  %1013 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1009)  ; LegacyF16ToF32(value)
  %1014 = lshr i32 %1009, 16
  %1015 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1014)  ; LegacyF16ToF32(value)
  %1016 = or i32 %1006, 1
  %1017 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %1016)  ; CBufferLoadLegacy(handle,regIndex)
  %1018 = extractvalue %dx.types.CBufRet.f32 %1017, 0
  %1019 = extractvalue %dx.types.CBufRet.f32 %1017, 1
  %1020 = extractvalue %dx.types.CBufRet.f32 %1017, 2
  %1021 = extractvalue %dx.types.CBufRet.f32 %1017, 3
  %1022 = or i32 %1006, 2
  %1023 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %1022)  ; CBufferLoadLegacy(handle,regIndex)
  %1024 = extractvalue %dx.types.CBufRet.f32 %1023, 0
  %1025 = extractvalue %dx.types.CBufRet.f32 %1023, 1
  %1026 = extractvalue %dx.types.CBufRet.f32 %1023, 2
  %1027 = extractvalue %dx.types.CBufRet.f32 %1023, 3
  %1028 = call float @dx.op.dot4.f32(i32 56, float %1010, float %1012, float %1013, float %1015, float %183, float %184, float %185, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1029 = fmul fast float %1028, -1.000000e+01
  %1030 = call float @dx.op.unary.f32(i32 7, float %1029)  ; Saturate(value)
  %1031 = fsub fast float 1.000000e+00, %1030
  %1032 = fsub fast float %183, %1018
  %1033 = fsub fast float %184, %1019
  %1034 = fsub fast float %185, %1020
  %1035 = fsub fast float %1024, %1018
  %1036 = fsub fast float %1025, %1019
  %1037 = fsub fast float %1026, %1020
  %1038 = call float @dx.op.dot3.f32(i32 55, float %1032, float %1033, float %1034, float %1035, float %1036, float %1037)  ; Dot3(ax,ay,az,bx,by,bz)
  %1039 = call float @dx.op.dot3.f32(i32 55, float %1035, float %1036, float %1037, float %1035, float %1036, float %1037)  ; Dot3(ax,ay,az,bx,by,bz)
  %1040 = fdiv fast float %1038, %1039
  %1041 = fmul fast float %1040, %1035
  %1042 = fmul fast float %1040, %1036
  %1043 = fmul fast float %1040, %1037
  %1044 = fsub fast float %1018, %183
  %1045 = fadd fast float %1044, %1041
  %1046 = fsub fast float %1019, %184
  %1047 = fadd fast float %1046, %1042
  %1048 = fsub fast float %1020, %185
  %1049 = fadd fast float %1048, %1043
  %1050 = call float @dx.op.dot3.f32(i32 55, float %1045, float %1047, float %1049, float %1045, float %1047, float %1049)  ; Dot3(ax,ay,az,bx,by,bz)
  %1051 = call float @dx.op.unary.f32(i32 24, float %1050)  ; Sqrt(value)
  %1052 = fmul fast float %1021, 5.000000e-01
  %1053 = fsub fast float %1051, %1052
  %1054 = fdiv fast float %1053, %1052
  %1055 = call float @dx.op.unary.f32(i32 7, float %1054)  ; Saturate(value)
  %1056 = fmul fast float %1055, 2.000000e+00
  %1057 = fsub fast float 3.000000e+00, %1056
  %1058 = fmul fast float %1055, %1055
  %1059 = fmul fast float %1058, %1057
  %1060 = fsub fast float 1.000000e+00, %1059
  %1061 = fmul fast float %1031, %1027
  %1062 = fmul fast float %1061, %1060
  %1063 = call float @dx.op.binary.f32(i32 35, float %1062, float %1004)  ; FMax(a,b)
  %1064 = add nuw i32 %1005, 1
  %1065 = icmp eq i32 %1064, %110
  br i1 %1065, label %1066, label %1003

; <label>:1066                                    ; preds = %1003
  br label %1067

; <label>:1067                                    ; preds = %1066, %1001
  %1068 = phi float [ 0.000000e+00, %1001 ], [ %1063, %1066 ]
  %1069 = call float @dx.op.unary.f32(i32 7, float %1068)  ; Saturate(value)
  %1070 = fmul fast float %1069, %10
  %1071 = fmul fast float %1069, %11
  %1072 = fmul fast float %1069, %12
  %1073 = fadd fast float %1070, %183
  %1074 = fadd fast float %1071, %184
  %1075 = fadd fast float %1072, %185
  br label %1076

; <label>:1076                                    ; preds = %1067, %933
  %1077 = phi float [ %183, %933 ], [ %1073, %1067 ]
  %1078 = phi float [ %184, %933 ], [ %1074, %1067 ]
  %1079 = phi float [ %185, %933 ], [ %1075, %1067 ]
  %1080 = add i32 %280, %15
  %1081 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1080, i32 undef)  ; BufferLoad(srv,index,wot)
  %1082 = extractvalue %dx.types.ResRet.i32 %1081, 0
  %1083 = extractvalue %dx.types.ResRet.i32 %1081, 1
  %1084 = extractvalue %dx.types.ResRet.i32 %1081, 2
  %1085 = extractvalue %dx.types.ResRet.i32 %1081, 3
  %1086 = bitcast i32 %1082 to float
  %1087 = bitcast i32 %1083 to float
  %1088 = bitcast i32 %1084 to float
  %1089 = bitcast i32 %1085 to float
  %1090 = add i32 %1080, 16
  %1091 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1090, i32 undef)  ; BufferLoad(srv,index,wot)
  %1092 = extractvalue %dx.types.ResRet.i32 %1091, 0
  %1093 = extractvalue %dx.types.ResRet.i32 %1091, 1
  %1094 = extractvalue %dx.types.ResRet.i32 %1091, 2
  %1095 = extractvalue %dx.types.ResRet.i32 %1091, 3
  %1096 = bitcast i32 %1092 to float
  %1097 = bitcast i32 %1093 to float
  %1098 = bitcast i32 %1094 to float
  %1099 = bitcast i32 %1095 to float
  %1100 = add i32 %1080, 32
  %1101 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1100, i32 undef)  ; BufferLoad(srv,index,wot)
  %1102 = extractvalue %dx.types.ResRet.i32 %1101, 0
  %1103 = extractvalue %dx.types.ResRet.i32 %1101, 1
  %1104 = extractvalue %dx.types.ResRet.i32 %1101, 2
  %1105 = extractvalue %dx.types.ResRet.i32 %1101, 3
  %1106 = bitcast i32 %1102 to float
  %1107 = bitcast i32 %1103 to float
  %1108 = bitcast i32 %1104 to float
  %1109 = bitcast i32 %1105 to float
  %1110 = add i32 %311, %15
  %1111 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1110, i32 undef)  ; BufferLoad(srv,index,wot)
  %1112 = extractvalue %dx.types.ResRet.i32 %1111, 0
  %1113 = extractvalue %dx.types.ResRet.i32 %1111, 1
  %1114 = extractvalue %dx.types.ResRet.i32 %1111, 2
  %1115 = extractvalue %dx.types.ResRet.i32 %1111, 3
  %1116 = bitcast i32 %1112 to float
  %1117 = bitcast i32 %1113 to float
  %1118 = bitcast i32 %1114 to float
  %1119 = bitcast i32 %1115 to float
  %1120 = add i32 %1110, 16
  %1121 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1120, i32 undef)  ; BufferLoad(srv,index,wot)
  %1122 = extractvalue %dx.types.ResRet.i32 %1121, 0
  %1123 = extractvalue %dx.types.ResRet.i32 %1121, 1
  %1124 = extractvalue %dx.types.ResRet.i32 %1121, 2
  %1125 = extractvalue %dx.types.ResRet.i32 %1121, 3
  %1126 = bitcast i32 %1122 to float
  %1127 = bitcast i32 %1123 to float
  %1128 = bitcast i32 %1124 to float
  %1129 = bitcast i32 %1125 to float
  %1130 = add i32 %1110, 32
  %1131 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1130, i32 undef)  ; BufferLoad(srv,index,wot)
  %1132 = extractvalue %dx.types.ResRet.i32 %1131, 0
  %1133 = extractvalue %dx.types.ResRet.i32 %1131, 1
  %1134 = extractvalue %dx.types.ResRet.i32 %1131, 2
  %1135 = extractvalue %dx.types.ResRet.i32 %1131, 3
  %1136 = bitcast i32 %1132 to float
  %1137 = bitcast i32 %1133 to float
  %1138 = bitcast i32 %1134 to float
  %1139 = bitcast i32 %1135 to float
  %1140 = fmul fast float %1086, %272
  %1141 = fmul fast float %1096, %272
  %1142 = fmul fast float %1106, %272
  %1143 = fmul fast float %1087, %272
  %1144 = fmul fast float %1097, %272
  %1145 = fmul fast float %1107, %272
  %1146 = fmul fast float %1088, %272
  %1147 = fmul fast float %1098, %272
  %1148 = fmul fast float %1108, %272
  %1149 = fmul fast float %1089, %272
  %1150 = fmul fast float %1099, %272
  %1151 = fmul fast float %1109, %272
  %1152 = fmul fast float %1116, %276
  %1153 = fmul fast float %1126, %276
  %1154 = fmul fast float %1136, %276
  %1155 = fmul fast float %1117, %276
  %1156 = fmul fast float %1127, %276
  %1157 = fmul fast float %1137, %276
  %1158 = fmul fast float %1118, %276
  %1159 = fmul fast float %1128, %276
  %1160 = fmul fast float %1138, %276
  %1161 = fmul fast float %1119, %276
  %1162 = fmul fast float %1129, %276
  %1163 = fmul fast float %1139, %276
  %1164 = fadd fast float %1152, %1140
  %1165 = fadd fast float %1153, %1141
  %1166 = fadd fast float %1154, %1142
  %1167 = fadd fast float %1155, %1143
  %1168 = fadd fast float %1156, %1144
  %1169 = fadd fast float %1157, %1145
  %1170 = fadd fast float %1158, %1146
  %1171 = fadd fast float %1159, %1147
  %1172 = fadd fast float %1160, %1148
  %1173 = fadd fast float %1161, %1149
  %1174 = fadd fast float %1162, %1150
  %1175 = fadd fast float %1163, %1151
  %1176 = add i32 %378, %15
  %1177 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1176, i32 undef)  ; BufferLoad(srv,index,wot)
  %1178 = extractvalue %dx.types.ResRet.i32 %1177, 0
  %1179 = extractvalue %dx.types.ResRet.i32 %1177, 1
  %1180 = extractvalue %dx.types.ResRet.i32 %1177, 2
  %1181 = extractvalue %dx.types.ResRet.i32 %1177, 3
  %1182 = bitcast i32 %1178 to float
  %1183 = bitcast i32 %1179 to float
  %1184 = bitcast i32 %1180 to float
  %1185 = bitcast i32 %1181 to float
  %1186 = add i32 %1176, 16
  %1187 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1186, i32 undef)  ; BufferLoad(srv,index,wot)
  %1188 = extractvalue %dx.types.ResRet.i32 %1187, 0
  %1189 = extractvalue %dx.types.ResRet.i32 %1187, 1
  %1190 = extractvalue %dx.types.ResRet.i32 %1187, 2
  %1191 = extractvalue %dx.types.ResRet.i32 %1187, 3
  %1192 = bitcast i32 %1188 to float
  %1193 = bitcast i32 %1189 to float
  %1194 = bitcast i32 %1190 to float
  %1195 = bitcast i32 %1191 to float
  %1196 = add i32 %1176, 32
  %1197 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1196, i32 undef)  ; BufferLoad(srv,index,wot)
  %1198 = extractvalue %dx.types.ResRet.i32 %1197, 0
  %1199 = extractvalue %dx.types.ResRet.i32 %1197, 1
  %1200 = extractvalue %dx.types.ResRet.i32 %1197, 2
  %1201 = extractvalue %dx.types.ResRet.i32 %1197, 3
  %1202 = bitcast i32 %1198 to float
  %1203 = bitcast i32 %1199 to float
  %1204 = bitcast i32 %1200 to float
  %1205 = bitcast i32 %1201 to float
  %1206 = add i32 %409, %15
  %1207 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1206, i32 undef)  ; BufferLoad(srv,index,wot)
  %1208 = extractvalue %dx.types.ResRet.i32 %1207, 0
  %1209 = extractvalue %dx.types.ResRet.i32 %1207, 1
  %1210 = extractvalue %dx.types.ResRet.i32 %1207, 2
  %1211 = extractvalue %dx.types.ResRet.i32 %1207, 3
  %1212 = bitcast i32 %1208 to float
  %1213 = bitcast i32 %1209 to float
  %1214 = bitcast i32 %1210 to float
  %1215 = bitcast i32 %1211 to float
  %1216 = add i32 %1206, 16
  %1217 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1216, i32 undef)  ; BufferLoad(srv,index,wot)
  %1218 = extractvalue %dx.types.ResRet.i32 %1217, 0
  %1219 = extractvalue %dx.types.ResRet.i32 %1217, 1
  %1220 = extractvalue %dx.types.ResRet.i32 %1217, 2
  %1221 = extractvalue %dx.types.ResRet.i32 %1217, 3
  %1222 = bitcast i32 %1218 to float
  %1223 = bitcast i32 %1219 to float
  %1224 = bitcast i32 %1220 to float
  %1225 = bitcast i32 %1221 to float
  %1226 = add i32 %1206, 32
  %1227 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1226, i32 undef)  ; BufferLoad(srv,index,wot)
  %1228 = extractvalue %dx.types.ResRet.i32 %1227, 0
  %1229 = extractvalue %dx.types.ResRet.i32 %1227, 1
  %1230 = extractvalue %dx.types.ResRet.i32 %1227, 2
  %1231 = extractvalue %dx.types.ResRet.i32 %1227, 3
  %1232 = bitcast i32 %1228 to float
  %1233 = bitcast i32 %1229 to float
  %1234 = bitcast i32 %1230 to float
  %1235 = bitcast i32 %1231 to float
  %1236 = fmul fast float %1182, %273
  %1237 = fmul fast float %1192, %273
  %1238 = fmul fast float %1202, %273
  %1239 = fmul fast float %1183, %273
  %1240 = fmul fast float %1193, %273
  %1241 = fmul fast float %1203, %273
  %1242 = fmul fast float %1184, %273
  %1243 = fmul fast float %1194, %273
  %1244 = fmul fast float %1204, %273
  %1245 = fmul fast float %1185, %273
  %1246 = fmul fast float %1195, %273
  %1247 = fmul fast float %1205, %273
  %1248 = fadd fast float %1164, %1236
  %1249 = fadd fast float %1165, %1237
  %1250 = fadd fast float %1166, %1238
  %1251 = fadd fast float %1167, %1239
  %1252 = fadd fast float %1168, %1240
  %1253 = fadd fast float %1169, %1241
  %1254 = fadd fast float %1170, %1242
  %1255 = fadd fast float %1171, %1243
  %1256 = fadd fast float %1172, %1244
  %1257 = fadd fast float %1173, %1245
  %1258 = fadd fast float %1174, %1246
  %1259 = fadd fast float %1175, %1247
  %1260 = fmul fast float %1212, %277
  %1261 = fmul fast float %1222, %277
  %1262 = fmul fast float %1232, %277
  %1263 = fmul fast float %1213, %277
  %1264 = fmul fast float %1223, %277
  %1265 = fmul fast float %1233, %277
  %1266 = fmul fast float %1214, %277
  %1267 = fmul fast float %1224, %277
  %1268 = fmul fast float %1234, %277
  %1269 = fmul fast float %1215, %277
  %1270 = fmul fast float %1225, %277
  %1271 = fmul fast float %1235, %277
  %1272 = fadd fast float %1248, %1260
  %1273 = fadd fast float %1249, %1261
  %1274 = fadd fast float %1250, %1262
  %1275 = fadd fast float %1251, %1263
  %1276 = fadd fast float %1252, %1264
  %1277 = fadd fast float %1253, %1265
  %1278 = fadd fast float %1254, %1266
  %1279 = fadd fast float %1255, %1267
  %1280 = fadd fast float %1256, %1268
  %1281 = fadd fast float %1257, %1269
  %1282 = fadd fast float %1258, %1270
  %1283 = fadd fast float %1259, %1271
  %1284 = add i32 %488, %15
  %1285 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1284, i32 undef)  ; BufferLoad(srv,index,wot)
  %1286 = extractvalue %dx.types.ResRet.i32 %1285, 0
  %1287 = extractvalue %dx.types.ResRet.i32 %1285, 1
  %1288 = extractvalue %dx.types.ResRet.i32 %1285, 2
  %1289 = extractvalue %dx.types.ResRet.i32 %1285, 3
  %1290 = bitcast i32 %1286 to float
  %1291 = bitcast i32 %1287 to float
  %1292 = bitcast i32 %1288 to float
  %1293 = bitcast i32 %1289 to float
  %1294 = add i32 %1284, 16
  %1295 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1294, i32 undef)  ; BufferLoad(srv,index,wot)
  %1296 = extractvalue %dx.types.ResRet.i32 %1295, 0
  %1297 = extractvalue %dx.types.ResRet.i32 %1295, 1
  %1298 = extractvalue %dx.types.ResRet.i32 %1295, 2
  %1299 = extractvalue %dx.types.ResRet.i32 %1295, 3
  %1300 = bitcast i32 %1296 to float
  %1301 = bitcast i32 %1297 to float
  %1302 = bitcast i32 %1298 to float
  %1303 = bitcast i32 %1299 to float
  %1304 = add i32 %1284, 32
  %1305 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1304, i32 undef)  ; BufferLoad(srv,index,wot)
  %1306 = extractvalue %dx.types.ResRet.i32 %1305, 0
  %1307 = extractvalue %dx.types.ResRet.i32 %1305, 1
  %1308 = extractvalue %dx.types.ResRet.i32 %1305, 2
  %1309 = extractvalue %dx.types.ResRet.i32 %1305, 3
  %1310 = bitcast i32 %1306 to float
  %1311 = bitcast i32 %1307 to float
  %1312 = bitcast i32 %1308 to float
  %1313 = bitcast i32 %1309 to float
  %1314 = add i32 %519, %15
  %1315 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1314, i32 undef)  ; BufferLoad(srv,index,wot)
  %1316 = extractvalue %dx.types.ResRet.i32 %1315, 0
  %1317 = extractvalue %dx.types.ResRet.i32 %1315, 1
  %1318 = extractvalue %dx.types.ResRet.i32 %1315, 2
  %1319 = extractvalue %dx.types.ResRet.i32 %1315, 3
  %1320 = bitcast i32 %1316 to float
  %1321 = bitcast i32 %1317 to float
  %1322 = bitcast i32 %1318 to float
  %1323 = bitcast i32 %1319 to float
  %1324 = add i32 %1314, 16
  %1325 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1324, i32 undef)  ; BufferLoad(srv,index,wot)
  %1326 = extractvalue %dx.types.ResRet.i32 %1325, 0
  %1327 = extractvalue %dx.types.ResRet.i32 %1325, 1
  %1328 = extractvalue %dx.types.ResRet.i32 %1325, 2
  %1329 = extractvalue %dx.types.ResRet.i32 %1325, 3
  %1330 = bitcast i32 %1326 to float
  %1331 = bitcast i32 %1327 to float
  %1332 = bitcast i32 %1328 to float
  %1333 = bitcast i32 %1329 to float
  %1334 = add i32 %1314, 32
  %1335 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1334, i32 undef)  ; BufferLoad(srv,index,wot)
  %1336 = extractvalue %dx.types.ResRet.i32 %1335, 0
  %1337 = extractvalue %dx.types.ResRet.i32 %1335, 1
  %1338 = extractvalue %dx.types.ResRet.i32 %1335, 2
  %1339 = extractvalue %dx.types.ResRet.i32 %1335, 3
  %1340 = bitcast i32 %1336 to float
  %1341 = bitcast i32 %1337 to float
  %1342 = bitcast i32 %1338 to float
  %1343 = bitcast i32 %1339 to float
  %1344 = fmul fast float %1290, %274
  %1345 = fmul fast float %1300, %274
  %1346 = fmul fast float %1310, %274
  %1347 = fmul fast float %1291, %274
  %1348 = fmul fast float %1301, %274
  %1349 = fmul fast float %1311, %274
  %1350 = fmul fast float %1292, %274
  %1351 = fmul fast float %1302, %274
  %1352 = fmul fast float %1312, %274
  %1353 = fmul fast float %1293, %274
  %1354 = fmul fast float %1303, %274
  %1355 = fmul fast float %1313, %274
  %1356 = fadd fast float %1272, %1344
  %1357 = fadd fast float %1273, %1345
  %1358 = fadd fast float %1274, %1346
  %1359 = fadd fast float %1275, %1347
  %1360 = fadd fast float %1276, %1348
  %1361 = fadd fast float %1277, %1349
  %1362 = fadd fast float %1278, %1350
  %1363 = fadd fast float %1279, %1351
  %1364 = fadd fast float %1280, %1352
  %1365 = fadd fast float %1281, %1353
  %1366 = fadd fast float %1282, %1354
  %1367 = fadd fast float %1283, %1355
  %1368 = fmul fast float %1320, %278
  %1369 = fmul fast float %1330, %278
  %1370 = fmul fast float %1340, %278
  %1371 = fmul fast float %1321, %278
  %1372 = fmul fast float %1331, %278
  %1373 = fmul fast float %1341, %278
  %1374 = fmul fast float %1322, %278
  %1375 = fmul fast float %1332, %278
  %1376 = fmul fast float %1342, %278
  %1377 = fmul fast float %1323, %278
  %1378 = fmul fast float %1333, %278
  %1379 = fmul fast float %1343, %278
  %1380 = fadd fast float %1356, %1368
  %1381 = fadd fast float %1357, %1369
  %1382 = fadd fast float %1358, %1370
  %1383 = fadd fast float %1359, %1371
  %1384 = fadd fast float %1360, %1372
  %1385 = fadd fast float %1361, %1373
  %1386 = fadd fast float %1362, %1374
  %1387 = fadd fast float %1363, %1375
  %1388 = fadd fast float %1364, %1376
  %1389 = fadd fast float %1365, %1377
  %1390 = fadd fast float %1366, %1378
  %1391 = fadd fast float %1367, %1379
  %1392 = add i32 %598, %15
  %1393 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1392, i32 undef)  ; BufferLoad(srv,index,wot)
  %1394 = extractvalue %dx.types.ResRet.i32 %1393, 0
  %1395 = extractvalue %dx.types.ResRet.i32 %1393, 1
  %1396 = extractvalue %dx.types.ResRet.i32 %1393, 2
  %1397 = extractvalue %dx.types.ResRet.i32 %1393, 3
  %1398 = bitcast i32 %1394 to float
  %1399 = bitcast i32 %1395 to float
  %1400 = bitcast i32 %1396 to float
  %1401 = bitcast i32 %1397 to float
  %1402 = add i32 %1392, 16
  %1403 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1402, i32 undef)  ; BufferLoad(srv,index,wot)
  %1404 = extractvalue %dx.types.ResRet.i32 %1403, 0
  %1405 = extractvalue %dx.types.ResRet.i32 %1403, 1
  %1406 = extractvalue %dx.types.ResRet.i32 %1403, 2
  %1407 = extractvalue %dx.types.ResRet.i32 %1403, 3
  %1408 = bitcast i32 %1404 to float
  %1409 = bitcast i32 %1405 to float
  %1410 = bitcast i32 %1406 to float
  %1411 = bitcast i32 %1407 to float
  %1412 = add i32 %1392, 32
  %1413 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1412, i32 undef)  ; BufferLoad(srv,index,wot)
  %1414 = extractvalue %dx.types.ResRet.i32 %1413, 0
  %1415 = extractvalue %dx.types.ResRet.i32 %1413, 1
  %1416 = extractvalue %dx.types.ResRet.i32 %1413, 2
  %1417 = extractvalue %dx.types.ResRet.i32 %1413, 3
  %1418 = bitcast i32 %1414 to float
  %1419 = bitcast i32 %1415 to float
  %1420 = bitcast i32 %1416 to float
  %1421 = bitcast i32 %1417 to float
  %1422 = add i32 %629, %15
  %1423 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1422, i32 undef)  ; BufferLoad(srv,index,wot)
  %1424 = extractvalue %dx.types.ResRet.i32 %1423, 0
  %1425 = extractvalue %dx.types.ResRet.i32 %1423, 1
  %1426 = extractvalue %dx.types.ResRet.i32 %1423, 2
  %1427 = extractvalue %dx.types.ResRet.i32 %1423, 3
  %1428 = bitcast i32 %1424 to float
  %1429 = bitcast i32 %1425 to float
  %1430 = bitcast i32 %1426 to float
  %1431 = bitcast i32 %1427 to float
  %1432 = add i32 %1422, 16
  %1433 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1432, i32 undef)  ; BufferLoad(srv,index,wot)
  %1434 = extractvalue %dx.types.ResRet.i32 %1433, 0
  %1435 = extractvalue %dx.types.ResRet.i32 %1433, 1
  %1436 = extractvalue %dx.types.ResRet.i32 %1433, 2
  %1437 = extractvalue %dx.types.ResRet.i32 %1433, 3
  %1438 = bitcast i32 %1434 to float
  %1439 = bitcast i32 %1435 to float
  %1440 = bitcast i32 %1436 to float
  %1441 = bitcast i32 %1437 to float
  %1442 = add i32 %1422, 32
  %1443 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1442, i32 undef)  ; BufferLoad(srv,index,wot)
  %1444 = extractvalue %dx.types.ResRet.i32 %1443, 0
  %1445 = extractvalue %dx.types.ResRet.i32 %1443, 1
  %1446 = extractvalue %dx.types.ResRet.i32 %1443, 2
  %1447 = extractvalue %dx.types.ResRet.i32 %1443, 3
  %1448 = bitcast i32 %1444 to float
  %1449 = bitcast i32 %1445 to float
  %1450 = bitcast i32 %1446 to float
  %1451 = bitcast i32 %1447 to float
  %1452 = fmul fast float %1398, %275
  %1453 = fmul fast float %1408, %275
  %1454 = fmul fast float %1418, %275
  %1455 = fmul fast float %1399, %275
  %1456 = fmul fast float %1409, %275
  %1457 = fmul fast float %1419, %275
  %1458 = fmul fast float %1400, %275
  %1459 = fmul fast float %1410, %275
  %1460 = fmul fast float %1420, %275
  %1461 = fmul fast float %1401, %275
  %1462 = fmul fast float %1411, %275
  %1463 = fmul fast float %1421, %275
  %1464 = fadd fast float %1380, %1452
  %1465 = fadd fast float %1381, %1453
  %1466 = fadd fast float %1382, %1454
  %1467 = fadd fast float %1383, %1455
  %1468 = fadd fast float %1384, %1456
  %1469 = fadd fast float %1385, %1457
  %1470 = fadd fast float %1386, %1458
  %1471 = fadd fast float %1387, %1459
  %1472 = fadd fast float %1388, %1460
  %1473 = fadd fast float %1389, %1461
  %1474 = fadd fast float %1390, %1462
  %1475 = fadd fast float %1391, %1463
  %1476 = fmul fast float %1428, %279
  %1477 = fmul fast float %1438, %279
  %1478 = fmul fast float %1448, %279
  %1479 = fmul fast float %1429, %279
  %1480 = fmul fast float %1439, %279
  %1481 = fmul fast float %1449, %279
  %1482 = fmul fast float %1430, %279
  %1483 = fmul fast float %1440, %279
  %1484 = fmul fast float %1450, %279
  %1485 = fmul fast float %1431, %279
  %1486 = fmul fast float %1441, %279
  %1487 = fmul fast float %1451, %279
  %1488 = fadd fast float %1464, %1476
  %1489 = fadd fast float %1465, %1477
  %1490 = fadd fast float %1466, %1478
  %1491 = fadd fast float %1467, %1479
  %1492 = fadd fast float %1468, %1480
  %1493 = fadd fast float %1469, %1481
  %1494 = fadd fast float %1470, %1482
  %1495 = fadd fast float %1471, %1483
  %1496 = fadd fast float %1472, %1484
  %1497 = fadd fast float %1473, %1485
  %1498 = fadd fast float %1474, %1486
  %1499 = fadd fast float %1475, %1487
  %1500 = fmul fast float %1488, %1077
  %1501 = call float @dx.op.tertiary.f32(i32 46, float %1078, float %1491, float %1500)  ; FMad(a,b,c)
  %1502 = call float @dx.op.tertiary.f32(i32 46, float %1079, float %1494, float %1501)  ; FMad(a,b,c)
  %1503 = fadd fast float %1502, %1497
  %1504 = fmul fast float %1489, %1077
  %1505 = call float @dx.op.tertiary.f32(i32 46, float %1078, float %1492, float %1504)  ; FMad(a,b,c)
  %1506 = call float @dx.op.tertiary.f32(i32 46, float %1079, float %1495, float %1505)  ; FMad(a,b,c)
  %1507 = fadd fast float %1506, %1498
  %1508 = fmul fast float %1490, %1077
  %1509 = call float @dx.op.tertiary.f32(i32 46, float %1078, float %1493, float %1508)  ; FMad(a,b,c)
  %1510 = call float @dx.op.tertiary.f32(i32 46, float %1079, float %1496, float %1509)  ; FMad(a,b,c)
  %1511 = fadd fast float %1510, %1499
  br i1 %188, label %1512, label %1587

; <label>:1512                                    ; preds = %1076
  br i1 %111, label %1578, label %1513

; <label>:1513                                    ; preds = %1512
  br label %1514

; <label>:1514                                    ; preds = %1514, %1513
  %1515 = phi float [ %1574, %1514 ], [ 0.000000e+00, %1513 ]
  %1516 = phi i32 [ %1575, %1514 ], [ 0, %1513 ]
  %1517 = shl i32 %1516, 2
  %1518 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %1517)  ; CBufferLoadLegacy(handle,regIndex)
  %1519 = extractvalue %dx.types.CBufRet.i32 %1518, 0
  %1520 = extractvalue %dx.types.CBufRet.i32 %1518, 1
  %1521 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1519)  ; LegacyF16ToF32(value)
  %1522 = lshr i32 %1519, 16
  %1523 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1522)  ; LegacyF16ToF32(value)
  %1524 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1520)  ; LegacyF16ToF32(value)
  %1525 = lshr i32 %1520, 16
  %1526 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1525)  ; LegacyF16ToF32(value)
  %1527 = or i32 %1517, 1
  %1528 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %1527)  ; CBufferLoadLegacy(handle,regIndex)
  %1529 = extractvalue %dx.types.CBufRet.f32 %1528, 0
  %1530 = extractvalue %dx.types.CBufRet.f32 %1528, 1
  %1531 = extractvalue %dx.types.CBufRet.f32 %1528, 2
  %1532 = extractvalue %dx.types.CBufRet.f32 %1528, 3
  %1533 = or i32 %1517, 2
  %1534 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %1533)  ; CBufferLoadLegacy(handle,regIndex)
  %1535 = extractvalue %dx.types.CBufRet.f32 %1534, 0
  %1536 = extractvalue %dx.types.CBufRet.f32 %1534, 1
  %1537 = extractvalue %dx.types.CBufRet.f32 %1534, 2
  %1538 = extractvalue %dx.types.CBufRet.f32 %1534, 3
  %1539 = call float @dx.op.dot4.f32(i32 56, float %1521, float %1523, float %1524, float %1526, float %1503, float %1507, float %1511, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1540 = fmul fast float %1539, -1.000000e+01
  %1541 = call float @dx.op.unary.f32(i32 7, float %1540)  ; Saturate(value)
  %1542 = fsub fast float 1.000000e+00, %1541
  %1543 = fsub fast float %1503, %1529
  %1544 = fsub fast float %1507, %1530
  %1545 = fsub fast float %1511, %1531
  %1546 = fsub fast float %1535, %1529
  %1547 = fsub fast float %1536, %1530
  %1548 = fsub fast float %1537, %1531
  %1549 = call float @dx.op.dot3.f32(i32 55, float %1543, float %1544, float %1545, float %1546, float %1547, float %1548)  ; Dot3(ax,ay,az,bx,by,bz)
  %1550 = call float @dx.op.dot3.f32(i32 55, float %1546, float %1547, float %1548, float %1546, float %1547, float %1548)  ; Dot3(ax,ay,az,bx,by,bz)
  %1551 = fdiv fast float %1549, %1550
  %1552 = fmul fast float %1551, %1546
  %1553 = fmul fast float %1551, %1547
  %1554 = fmul fast float %1551, %1548
  %1555 = fsub fast float %1529, %1503
  %1556 = fadd fast float %1555, %1552
  %1557 = fsub fast float %1530, %1507
  %1558 = fadd fast float %1557, %1553
  %1559 = fsub fast float %1531, %1511
  %1560 = fadd fast float %1559, %1554
  %1561 = call float @dx.op.dot3.f32(i32 55, float %1556, float %1558, float %1560, float %1556, float %1558, float %1560)  ; Dot3(ax,ay,az,bx,by,bz)
  %1562 = call float @dx.op.unary.f32(i32 24, float %1561)  ; Sqrt(value)
  %1563 = fmul fast float %1532, 5.000000e-01
  %1564 = fsub fast float %1562, %1563
  %1565 = fdiv fast float %1564, %1563
  %1566 = call float @dx.op.unary.f32(i32 7, float %1565)  ; Saturate(value)
  %1567 = fmul fast float %1566, 2.000000e+00
  %1568 = fsub fast float 3.000000e+00, %1567
  %1569 = fmul fast float %1566, %1566
  %1570 = fmul fast float %1569, %1568
  %1571 = fsub fast float 1.000000e+00, %1570
  %1572 = fmul fast float %1542, %1538
  %1573 = fmul fast float %1572, %1571
  %1574 = call float @dx.op.binary.f32(i32 35, float %1573, float %1515)  ; FMax(a,b)
  %1575 = add nuw i32 %1516, 1
  %1576 = icmp eq i32 %1575, %110
  br i1 %1576, label %1577, label %1514

; <label>:1577                                    ; preds = %1514
  br label %1578

; <label>:1578                                    ; preds = %1577, %1512
  %1579 = phi float [ 0.000000e+00, %1512 ], [ %1574, %1577 ]
  %1580 = call float @dx.op.unary.f32(i32 7, float %1579)  ; Saturate(value)
  %1581 = fmul fast float %1580, %10
  %1582 = fmul fast float %1580, %11
  %1583 = fmul fast float %1580, %12
  %1584 = fadd fast float %1581, %1503
  %1585 = fadd fast float %1582, %1507
  %1586 = fadd fast float %1583, %1511
  br label %1587

; <label>:1587                                    ; preds = %1578, %1076
  %1588 = phi float [ %1584, %1578 ], [ %1503, %1076 ]
  %1589 = phi float [ %1585, %1578 ], [ %1507, %1076 ]
  %1590 = phi float [ %1586, %1578 ], [ %1511, %1076 ]
  %1591 = xor i1 %799, true
  %1592 = or i1 %188, %1591
  %1593 = or i1 %1592, %111
  br i1 %1593, label %1724, label %1594

; <label>:1594                                    ; preds = %1587
  br label %1595

; <label>:1595                                    ; preds = %1720, %1594
  %1596 = phi i32 [ %1721, %1720 ], [ 0, %1594 ]
  %1597 = shl i32 %1596, 2
  %1598 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %1597)  ; CBufferLoadLegacy(handle,regIndex)
  %1599 = extractvalue %dx.types.CBufRet.i32 %1598, 0
  %1600 = extractvalue %dx.types.CBufRet.i32 %1598, 1
  %1601 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1599)  ; LegacyF16ToF32(value)
  %1602 = lshr i32 %1599, 16
  %1603 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1602)  ; LegacyF16ToF32(value)
  %1604 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1600)  ; LegacyF16ToF32(value)
  %1605 = lshr i32 %1600, 16
  %1606 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1605)  ; LegacyF16ToF32(value)
  %1607 = extractvalue %dx.types.CBufRet.i32 %1598, 2
  %1608 = extractvalue %dx.types.CBufRet.i32 %1598, 3
  %1609 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1607)  ; LegacyF16ToF32(value)
  %1610 = lshr i32 %1607, 16
  %1611 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1610)  ; LegacyF16ToF32(value)
  %1612 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1608)  ; LegacyF16ToF32(value)
  %1613 = lshr i32 %1608, 16
  %1614 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1613)  ; LegacyF16ToF32(value)
  %1615 = or i32 %1597, 1
  %1616 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %1615)  ; CBufferLoadLegacy(handle,regIndex)
  %1617 = extractvalue %dx.types.CBufRet.f32 %1616, 0
  %1618 = extractvalue %dx.types.CBufRet.f32 %1616, 1
  %1619 = extractvalue %dx.types.CBufRet.f32 %1616, 2
  %1620 = extractvalue %dx.types.CBufRet.f32 %1616, 3
  %1621 = or i32 %1597, 2
  %1622 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %1621)  ; CBufferLoadLegacy(handle,regIndex)
  %1623 = extractvalue %dx.types.CBufRet.f32 %1622, 0
  %1624 = extractvalue %dx.types.CBufRet.f32 %1622, 1
  %1625 = extractvalue %dx.types.CBufRet.f32 %1622, 2
  %1626 = or i32 %1597, 3
  %1627 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %1626)  ; CBufferLoadLegacy(handle,regIndex)
  %1628 = extractvalue %dx.types.CBufRet.i32 %1627, 3
  %1629 = icmp eq i32 %1628, 0
  %1630 = fsub fast float %1077, %1617
  %1631 = fsub fast float %1078, %1618
  %1632 = fsub fast float %1079, %1619
  %1633 = fsub fast float %1623, %1617
  %1634 = fsub fast float %1624, %1618
  %1635 = fsub fast float %1625, %1619
  %1636 = call float @dx.op.dot3.f32(i32 55, float %1630, float %1631, float %1632, float %1633, float %1634, float %1635)  ; Dot3(ax,ay,az,bx,by,bz)
  %1637 = call float @dx.op.dot3.f32(i32 55, float %1633, float %1634, float %1635, float %1633, float %1634, float %1635)  ; Dot3(ax,ay,az,bx,by,bz)
  %1638 = fdiv fast float %1636, %1637
  %1639 = fmul fast float %1638, %1633
  %1640 = fmul fast float %1638, %1634
  %1641 = fmul fast float %1638, %1635
  %1642 = fsub fast float %1617, %1077
  %1643 = fadd fast float %1642, %1639
  %1644 = fsub fast float %1618, %1078
  %1645 = fadd fast float %1644, %1640
  %1646 = fsub fast float %1619, %1079
  %1647 = fadd fast float %1646, %1641
  %1648 = call float @dx.op.dot3.f32(i32 55, float %1643, float %1645, float %1647, float %1643, float %1645, float %1647)  ; Dot3(ax,ay,az,bx,by,bz)
  %1649 = fmul fast float %1620, %1620
  %1650 = fcmp fast ole float %1648, %1649
  %1651 = call float @dx.op.dot4.f32(i32 56, float %1609, float %1611, float %1612, float %1614, float %1077, float %1078, float %1079, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  br i1 %1629, label %1652, label %1682, !dx.controlflow.hints !59

; <label>:1652                                    ; preds = %1595
  %1653 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %1626)  ; CBufferLoadLegacy(handle,regIndex)
  %1654 = call float @dx.op.dot4.f32(i32 56, float %1601, float %1603, float %1604, float %1606, float %1077, float %1078, float %1079, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1655 = fcmp fast ogt float %1654, 0.000000e+00
  %1656 = and i1 %1650, %1655
  %1657 = fcmp fast ogt float %1651, 0.000000e+00
  %1658 = and i1 %1656, %1657
  br i1 %1658, label %1659, label %1720

; <label>:1659                                    ; preds = %1652
  %1660 = extractvalue %dx.types.CBufRet.f32 %1653, 0
  %1661 = extractvalue %dx.types.CBufRet.f32 %1653, 1
  %1662 = extractvalue %dx.types.CBufRet.f32 %1653, 2
  %1663 = call float @dx.op.dot4.f32(i32 56, float %1077, float %1078, float %1079, float 1.000000e+00, float %1601, float %1603, float %1604, float %1606)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1664 = fmul fast float %1601, %1663
  %1665 = fsub fast float -0.000000e+00, %1664
  %1666 = fmul fast float %1603, %1663
  %1667 = fsub fast float -0.000000e+00, %1666
  %1668 = fmul fast float %1604, %1663
  %1669 = fsub fast float -0.000000e+00, %1668
  %1670 = call float @dx.op.dot3.f32(i32 55, float %1665, float %1667, float %1669, float %1665, float %1667, float %1669)  ; Dot3(ax,ay,az,bx,by,bz)
  %1671 = fmul fast float %1670, 0x408F3FFFE0000000
  %1672 = call float @dx.op.unary.f32(i32 7, float %1671)  ; Saturate(value)
  %1673 = fsub fast float %1660, %1588
  %1674 = fsub fast float %1661, %1589
  %1675 = fsub fast float %1662, %1590
  %1676 = fmul fast float %1672, %1673
  %1677 = fmul fast float %1672, %1674
  %1678 = fmul fast float %1672, %1675
  %1679 = fadd fast float %1676, %1588
  %1680 = fadd fast float %1677, %1589
  %1681 = fadd fast float %1678, %1590
  br label %1724

; <label>:1682                                    ; preds = %1595
  %1683 = fcmp fast oge float %1651, 0.000000e+00
  %1684 = and i1 %1650, %1683
  br i1 %1684, label %1685, label %1720

; <label>:1685                                    ; preds = %1682
  %1686 = fadd fast float %1639, %1617
  %1687 = fadd fast float %1640, %1618
  %1688 = fadd fast float %1641, %1619
  %1689 = call float @dx.op.dot4.f32(i32 56, float %1077, float %1078, float %1079, float 1.000000e+00, float %1601, float %1603, float %1604, float %1606)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1690 = fmul fast float %1689, %1601
  %1691 = fmul fast float %1689, %1603
  %1692 = fmul fast float %1689, %1604
  %1693 = fsub fast float %1077, %1690
  %1694 = fsub fast float %1078, %1691
  %1695 = fsub fast float %1079, %1692
  %1696 = fsub fast float %1693, %1686
  %1697 = fsub fast float %1694, %1687
  %1698 = fsub fast float %1695, %1688
  %1699 = call float @dx.op.dot3.f32(i32 55, float %1696, float %1697, float %1698, float %1696, float %1697, float %1698)  ; Dot3(ax,ay,az,bx,by,bz)
  %1700 = call float @dx.op.unary.f32(i32 25, float %1699)  ; Rsqrt(value)
  %1701 = fmul fast float %1700, %1620
  %1702 = fmul fast float %1701, %1696
  %1703 = fmul fast float %1701, %1697
  %1704 = fmul fast float %1701, %1698
  %1705 = fadd fast float %1702, %1686
  %1706 = fadd fast float %1703, %1687
  %1707 = fadd fast float %1704, %1688
  %1708 = fmul fast float %1705, %1488
  %1709 = call float @dx.op.tertiary.f32(i32 46, float %1706, float %1491, float %1708)  ; FMad(a,b,c)
  %1710 = call float @dx.op.tertiary.f32(i32 46, float %1707, float %1494, float %1709)  ; FMad(a,b,c)
  %1711 = fadd fast float %1710, %1497
  %1712 = fmul fast float %1705, %1489
  %1713 = call float @dx.op.tertiary.f32(i32 46, float %1706, float %1492, float %1712)  ; FMad(a,b,c)
  %1714 = call float @dx.op.tertiary.f32(i32 46, float %1707, float %1495, float %1713)  ; FMad(a,b,c)
  %1715 = fadd fast float %1714, %1498
  %1716 = fmul fast float %1705, %1490
  %1717 = call float @dx.op.tertiary.f32(i32 46, float %1706, float %1493, float %1716)  ; FMad(a,b,c)
  %1718 = call float @dx.op.tertiary.f32(i32 46, float %1707, float %1496, float %1717)  ; FMad(a,b,c)
  %1719 = fadd fast float %1718, %1499
  br label %1724

; <label>:1720                                    ; preds = %1682, %1652
  %1721 = add nuw i32 %1596, 1
  %1722 = icmp ult i32 %1721, %110
  br i1 %1722, label %1595, label %1723, !llvm.loop !60

; <label>:1723                                    ; preds = %1720
  br label %1724

; <label>:1724                                    ; preds = %1723, %1685, %1659, %1587
  %1725 = phi float [ %1588, %1587 ], [ %1679, %1659 ], [ %1711, %1685 ], [ %1588, %1723 ]
  %1726 = phi float [ %1589, %1587 ], [ %1680, %1659 ], [ %1715, %1685 ], [ %1589, %1723 ]
  %1727 = phi float [ %1590, %1587 ], [ %1681, %1659 ], [ %1719, %1685 ], [ %1590, %1723 ]
  %1728 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1729 = extractvalue %dx.types.CBufRet.f32 %1728, 0
  %1730 = extractvalue %dx.types.CBufRet.f32 %1728, 1
  %1731 = extractvalue %dx.types.CBufRet.f32 %1728, 2
  %1732 = extractvalue %dx.types.CBufRet.f32 %1728, 3
  %1733 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1734 = extractvalue %dx.types.CBufRet.f32 %1733, 0
  %1735 = extractvalue %dx.types.CBufRet.f32 %1733, 1
  %1736 = extractvalue %dx.types.CBufRet.f32 %1733, 2
  %1737 = extractvalue %dx.types.CBufRet.f32 %1733, 3
  %1738 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %1739 = extractvalue %dx.types.CBufRet.f32 %1738, 0
  %1740 = extractvalue %dx.types.CBufRet.f32 %1738, 1
  %1741 = extractvalue %dx.types.CBufRet.f32 %1738, 2
  %1742 = extractvalue %dx.types.CBufRet.f32 %1738, 3
  %1743 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %7, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %1744 = extractvalue %dx.types.CBufRet.i32 %1743, 0
  %1745 = extractvalue %dx.types.CBufRet.i32 %1743, 1
  %1746 = extractvalue %dx.types.CBufRet.i32 %1743, 2
  %1747 = bitcast float %1732 to i32
  %1748 = bitcast float %1737 to i32
  %1749 = bitcast float %1742 to i32
  %1750 = sub i32 %1747, %1744
  %1751 = sub i32 %1748, %1745
  %1752 = sub i32 %1749, %1746
  %1753 = sitofp i32 %1750 to float
  %1754 = sitofp i32 %1751 to float
  %1755 = sitofp i32 %1752 to float
  %1756 = fmul fast float %1753, 0x3EE0000000000000
  %1757 = fmul fast float %1754, 0x3EE0000000000000
  %1758 = fmul fast float %1755, 0x3EE0000000000000
  %1759 = fmul fast float %1729, %1725
  %1760 = call float @dx.op.tertiary.f32(i32 46, float %1730, float %1726, float %1759)  ; FMad(a,b,c)
  %1761 = call float @dx.op.tertiary.f32(i32 46, float %1731, float %1727, float %1760)  ; FMad(a,b,c)
  %1762 = fadd fast float %1756, %1761
  %1763 = fmul fast float %1734, %1725
  %1764 = call float @dx.op.tertiary.f32(i32 46, float %1735, float %1726, float %1763)  ; FMad(a,b,c)
  %1765 = call float @dx.op.tertiary.f32(i32 46, float %1736, float %1727, float %1764)  ; FMad(a,b,c)
  %1766 = fadd fast float %1757, %1765
  %1767 = fmul fast float %1739, %1725
  %1768 = call float @dx.op.tertiary.f32(i32 46, float %1740, float %1726, float %1767)  ; FMad(a,b,c)
  %1769 = call float @dx.op.tertiary.f32(i32 46, float %1741, float %1727, float %1768)  ; FMad(a,b,c)
  %1770 = fadd fast float %1769, %1758
  %1771 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %1772 = extractvalue %dx.types.CBufRet.f32 %1771, 0
  %1773 = extractvalue %dx.types.CBufRet.f32 %1771, 1
  %1774 = extractvalue %dx.types.CBufRet.f32 %1771, 2
  %1775 = extractvalue %dx.types.CBufRet.f32 %1771, 3
  %1776 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %1777 = extractvalue %dx.types.CBufRet.f32 %1776, 0
  %1778 = extractvalue %dx.types.CBufRet.f32 %1776, 1
  %1779 = extractvalue %dx.types.CBufRet.f32 %1776, 2
  %1780 = extractvalue %dx.types.CBufRet.f32 %1776, 3
  %1781 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 18)  ; CBufferLoadLegacy(handle,regIndex)
  %1782 = extractvalue %dx.types.CBufRet.f32 %1781, 0
  %1783 = extractvalue %dx.types.CBufRet.f32 %1781, 1
  %1784 = extractvalue %dx.types.CBufRet.f32 %1781, 2
  %1785 = extractvalue %dx.types.CBufRet.f32 %1781, 3
  %1786 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %1787 = extractvalue %dx.types.CBufRet.f32 %1786, 0
  %1788 = extractvalue %dx.types.CBufRet.f32 %1786, 1
  %1789 = extractvalue %dx.types.CBufRet.f32 %1786, 2
  %1790 = extractvalue %dx.types.CBufRet.f32 %1786, 3
  %1791 = fmul fast float %1772, %1762
  %1792 = call float @dx.op.tertiary.f32(i32 46, float %1766, float %1773, float %1791)  ; FMad(a,b,c)
  %1793 = call float @dx.op.tertiary.f32(i32 46, float %1770, float %1774, float %1792)  ; FMad(a,b,c)
  %1794 = fadd fast float %1793, %1775
  %1795 = fmul fast float %1777, %1762
  %1796 = call float @dx.op.tertiary.f32(i32 46, float %1766, float %1778, float %1795)  ; FMad(a,b,c)
  %1797 = call float @dx.op.tertiary.f32(i32 46, float %1770, float %1779, float %1796)  ; FMad(a,b,c)
  %1798 = fadd fast float %1797, %1780
  %1799 = fmul fast float %1782, %1762
  %1800 = call float @dx.op.tertiary.f32(i32 46, float %1766, float %1783, float %1799)  ; FMad(a,b,c)
  %1801 = call float @dx.op.tertiary.f32(i32 46, float %1770, float %1784, float %1800)  ; FMad(a,b,c)
  %1802 = fadd fast float %1801, %1785
  %1803 = fmul fast float %1787, %1762
  %1804 = call float @dx.op.tertiary.f32(i32 46, float %1766, float %1788, float %1803)  ; FMad(a,b,c)
  %1805 = call float @dx.op.tertiary.f32(i32 46, float %1770, float %1789, float %1804)  ; FMad(a,b,c)
  %1806 = fadd fast float %1805, %1790
  %1807 = fmul fast float %696, %48
  %1808 = call float @dx.op.tertiary.f32(i32 46, float %697, float %49, float %1807)  ; FMad(a,b,c)
  %1809 = call float @dx.op.tertiary.f32(i32 46, float %698, float %50, float %1808)  ; FMad(a,b,c)
  %1810 = fmul fast float %696, %52
  %1811 = call float @dx.op.tertiary.f32(i32 46, float %697, float %53, float %1810)  ; FMad(a,b,c)
  %1812 = call float @dx.op.tertiary.f32(i32 46, float %698, float %54, float %1811)  ; FMad(a,b,c)
  %1813 = fmul fast float %696, %56
  %1814 = call float @dx.op.tertiary.f32(i32 46, float %697, float %57, float %1813)  ; FMad(a,b,c)
  %1815 = call float @dx.op.tertiary.f32(i32 46, float %698, float %58, float %1814)  ; FMad(a,b,c)
  %1816 = fmul fast float %699, %48
  %1817 = call float @dx.op.tertiary.f32(i32 46, float %700, float %49, float %1816)  ; FMad(a,b,c)
  %1818 = call float @dx.op.tertiary.f32(i32 46, float %701, float %50, float %1817)  ; FMad(a,b,c)
  %1819 = fmul fast float %699, %52
  %1820 = call float @dx.op.tertiary.f32(i32 46, float %700, float %53, float %1819)  ; FMad(a,b,c)
  %1821 = call float @dx.op.tertiary.f32(i32 46, float %701, float %54, float %1820)  ; FMad(a,b,c)
  %1822 = fmul fast float %699, %56
  %1823 = call float @dx.op.tertiary.f32(i32 46, float %700, float %57, float %1822)  ; FMad(a,b,c)
  %1824 = call float @dx.op.tertiary.f32(i32 46, float %701, float %58, float %1823)  ; FMad(a,b,c)
  %1825 = fmul fast float %702, %48
  %1826 = call float @dx.op.tertiary.f32(i32 46, float %703, float %49, float %1825)  ; FMad(a,b,c)
  %1827 = call float @dx.op.tertiary.f32(i32 46, float %704, float %50, float %1826)  ; FMad(a,b,c)
  %1828 = fmul fast float %702, %52
  %1829 = call float @dx.op.tertiary.f32(i32 46, float %703, float %53, float %1828)  ; FMad(a,b,c)
  %1830 = call float @dx.op.tertiary.f32(i32 46, float %704, float %54, float %1829)  ; FMad(a,b,c)
  %1831 = fmul fast float %702, %56
  %1832 = call float @dx.op.tertiary.f32(i32 46, float %703, float %57, float %1831)  ; FMad(a,b,c)
  %1833 = call float @dx.op.tertiary.f32(i32 46, float %704, float %58, float %1832)  ; FMad(a,b,c)
  %1834 = fmul fast float %24, 2.000000e+00
  %1835 = fmul fast float %25, 2.000000e+00
  %1836 = fmul fast float %26, 2.000000e+00
  %1837 = fadd fast float %1834, -1.000000e+00
  %1838 = fadd fast float %1835, -1.000000e+00
  %1839 = fadd fast float %1836, -1.000000e+00
  %1840 = fmul fast float %20, 2.000000e+00
  %1841 = fmul fast float %21, 2.000000e+00
  %1842 = fmul fast float %22, 2.000000e+00
  %1843 = fadd fast float %1840, -1.000000e+00
  %1844 = fadd fast float %1841, -1.000000e+00
  %1845 = fadd fast float %1842, -1.000000e+00
  %1846 = fmul fast float %23, 2.000000e+00
  %1847 = fadd fast float %1846, -1.000000e+00
  %1848 = fmul fast float %1838, %1845
  %1849 = fmul fast float %1839, %1844
  %1850 = fsub fast float %1848, %1849
  %1851 = fmul fast float %1839, %1843
  %1852 = fmul fast float %1837, %1845
  %1853 = fsub fast float %1851, %1852
  %1854 = fmul fast float %1837, %1844
  %1855 = fmul fast float %1838, %1843
  %1856 = fsub fast float %1854, %1855
  %1857 = fmul fast float %1850, %1847
  %1858 = fmul fast float %1853, %1847
  %1859 = fmul fast float %1856, %1847
  %1860 = fmul fast float %1809, %1843
  %1861 = call float @dx.op.tertiary.f32(i32 46, float %1844, float %1818, float %1860)  ; FMad(a,b,c)
  %1862 = call float @dx.op.tertiary.f32(i32 46, float %1845, float %1827, float %1861)  ; FMad(a,b,c)
  %1863 = fmul fast float %1812, %1843
  %1864 = call float @dx.op.tertiary.f32(i32 46, float %1844, float %1821, float %1863)  ; FMad(a,b,c)
  %1865 = call float @dx.op.tertiary.f32(i32 46, float %1845, float %1830, float %1864)  ; FMad(a,b,c)
  %1866 = fmul fast float %1815, %1843
  %1867 = call float @dx.op.tertiary.f32(i32 46, float %1844, float %1824, float %1866)  ; FMad(a,b,c)
  %1868 = call float @dx.op.tertiary.f32(i32 46, float %1845, float %1833, float %1867)  ; FMad(a,b,c)
  %1869 = fmul fast float %1809, %1857
  %1870 = call float @dx.op.tertiary.f32(i32 46, float %1858, float %1818, float %1869)  ; FMad(a,b,c)
  %1871 = call float @dx.op.tertiary.f32(i32 46, float %1859, float %1827, float %1870)  ; FMad(a,b,c)
  %1872 = fmul fast float %1812, %1857
  %1873 = call float @dx.op.tertiary.f32(i32 46, float %1858, float %1821, float %1872)  ; FMad(a,b,c)
  %1874 = call float @dx.op.tertiary.f32(i32 46, float %1859, float %1830, float %1873)  ; FMad(a,b,c)
  %1875 = fmul fast float %1815, %1857
  %1876 = call float @dx.op.tertiary.f32(i32 46, float %1858, float %1824, float %1875)  ; FMad(a,b,c)
  %1877 = call float @dx.op.tertiary.f32(i32 46, float %1859, float %1833, float %1876)  ; FMad(a,b,c)
  %1878 = fmul fast float %1809, %1837
  %1879 = call float @dx.op.tertiary.f32(i32 46, float %1838, float %1818, float %1878)  ; FMad(a,b,c)
  %1880 = call float @dx.op.tertiary.f32(i32 46, float %1839, float %1827, float %1879)  ; FMad(a,b,c)
  %1881 = fmul fast float %1812, %1837
  %1882 = call float @dx.op.tertiary.f32(i32 46, float %1838, float %1821, float %1881)  ; FMad(a,b,c)
  %1883 = call float @dx.op.tertiary.f32(i32 46, float %1839, float %1830, float %1882)  ; FMad(a,b,c)
  %1884 = fmul fast float %1815, %1837
  %1885 = call float @dx.op.tertiary.f32(i32 46, float %1838, float %1824, float %1884)  ; FMad(a,b,c)
  %1886 = call float @dx.op.tertiary.f32(i32 46, float %1839, float %1833, float %1885)  ; FMad(a,b,c)
  %1887 = call float @dx.op.dot3.f32(i32 55, float %1880, float %1883, float %1886, float %1880, float %1883, float %1886)  ; Dot3(ax,ay,az,bx,by,bz)
  %1888 = call float @dx.op.unary.f32(i32 25, float %1887)  ; Rsqrt(value)
  %1889 = fmul fast float %1888, %1880
  %1890 = fmul fast float %1888, %1883
  %1891 = fmul fast float %1888, %1886
  %1892 = call float @dx.op.dot3.f32(i32 55, float %1871, float %1874, float %1877, float %1871, float %1874, float %1877)  ; Dot3(ax,ay,az,bx,by,bz)
  %1893 = call float @dx.op.unary.f32(i32 25, float %1892)  ; Rsqrt(value)
  %1894 = fmul fast float %1893, %1871
  %1895 = fmul fast float %1893, %1874
  %1896 = fmul fast float %1893, %1877
  %1897 = call float @dx.op.dot3.f32(i32 55, float %1862, float %1865, float %1868, float %1862, float %1865, float %1868)  ; Dot3(ax,ay,az,bx,by,bz)
  %1898 = call float @dx.op.unary.f32(i32 25, float %1897)  ; Rsqrt(value)
  %1899 = fmul fast float %1898, %1862
  %1900 = fmul fast float %1898, %1865
  %1901 = fmul fast float %1898, %1868
  %1902 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %1903 = extractvalue %dx.types.CBufRet.f32 %1902, 1
  %1904 = fptosi float %1903 to i32
  %1905 = icmp sgt i32 %1904, 0
  br i1 %1905, label %1906, label %1993

; <label>:1906                                    ; preds = %1724
  br label %1907

; <label>:1907                                    ; preds = %1978, %1906
  %1908 = phi float [ %1986, %1978 ], [ 0.000000e+00, %1906 ]
  %1909 = phi float [ %1989, %1978 ], [ 0.000000e+00, %1906 ]
  %1910 = phi i32 [ %1990, %1978 ], [ 0, %1906 ]
  %1911 = mul i32 %1910, 9
  %1912 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %6, i32 %1911)  ; CBufferLoadLegacy(handle,regIndex)
  %1913 = extractvalue %dx.types.CBufRet.i32 %1912, 0
  %1914 = icmp eq i32 %1913, 0
  br i1 %1914, label %1978, label %1915

; <label>:1915                                    ; preds = %1907
  br label %1916

; <label>:1916                                    ; preds = %1969, %1915
  %1917 = phi float [ %1972, %1969 ], [ 0.000000e+00, %1915 ]
  %1918 = phi i32 [ %1973, %1969 ], [ 0, %1915 ]
  %1919 = add i32 %1911, 5
  %1920 = add i32 %1919, %1918
  %1921 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 %1920)  ; CBufferLoadLegacy(handle,regIndex)
  %1922 = extractvalue %dx.types.CBufRet.f32 %1921, 0
  %1923 = extractvalue %dx.types.CBufRet.f32 %1921, 1
  %1924 = extractvalue %dx.types.CBufRet.f32 %1921, 2
  %1925 = extractvalue %dx.types.CBufRet.f32 %1921, 3
  %1926 = add i32 %1911, 1
  %1927 = add i32 %1926, %1918
  %1928 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 %1927)  ; CBufferLoadLegacy(handle,regIndex)
  %1929 = extractvalue %dx.types.CBufRet.f32 %1928, 0
  %1930 = extractvalue %dx.types.CBufRet.f32 %1928, 1
  %1931 = extractvalue %dx.types.CBufRet.f32 %1928, 2
  %1932 = extractvalue %dx.types.CBufRet.f32 %1928, 3
  %1933 = fcmp fast olt float %27, %1922
  %1934 = fcmp fast ogt float %27, %1924
  %1935 = or i1 %1933, %1934
  br i1 %1935, label %1950, label %1936

; <label>:1936                                    ; preds = %1916
  %1937 = fcmp fast oge float %27, %1929
  %1938 = fcmp fast ole float %27, %1931
  %1939 = and i1 %1937, %1938
  br i1 %1939, label %1950, label %1940

; <label>:1940                                    ; preds = %1936
  %1941 = fcmp fast olt float %27, %1929
  br i1 %1941, label %1942, label %1946

; <label>:1942                                    ; preds = %1940
  %1943 = fsub fast float %27, %1922
  %1944 = fsub fast float %1929, %1922
  %1945 = fdiv fast float %1943, %1944
  br label %1950

; <label>:1946                                    ; preds = %1940
  %1947 = fsub fast float %1924, %27
  %1948 = fsub fast float %1924, %1931
  %1949 = fdiv fast float %1947, %1948
  br label %1950

; <label>:1950                                    ; preds = %1946, %1942, %1936, %1916
  %1951 = phi float [ 0.000000e+00, %1916 ], [ %1945, %1942 ], [ %1949, %1946 ], [ 1.000000e+00, %1936 ]
  %1952 = fcmp fast olt float %28, %1923
  %1953 = fcmp fast ogt float %28, %1925
  %1954 = or i1 %1952, %1953
  br i1 %1954, label %1969, label %1955

; <label>:1955                                    ; preds = %1950
  %1956 = fcmp fast oge float %28, %1930
  %1957 = fcmp fast ole float %28, %1932
  %1958 = and i1 %1956, %1957
  br i1 %1958, label %1969, label %1959

; <label>:1959                                    ; preds = %1955
  %1960 = fcmp fast olt float %28, %1930
  br i1 %1960, label %1961, label %1965

; <label>:1961                                    ; preds = %1959
  %1962 = fsub fast float %28, %1923
  %1963 = fsub fast float %1930, %1923
  %1964 = fdiv fast float %1962, %1963
  br label %1969

; <label>:1965                                    ; preds = %1959
  %1966 = fsub fast float %1925, %28
  %1967 = fsub fast float %1925, %1932
  %1968 = fdiv fast float %1966, %1967
  br label %1969

; <label>:1969                                    ; preds = %1965, %1961, %1955, %1950
  %1970 = phi float [ 0.000000e+00, %1950 ], [ %1964, %1961 ], [ %1968, %1965 ], [ 1.000000e+00, %1955 ]
  %1971 = fmul fast float %1970, %1951
  %1972 = call float @dx.op.binary.f32(i32 35, float %1917, float %1971)  ; FMax(a,b)
  %1973 = add i32 %1918, 1
  %1974 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %6, i32 %1911)  ; CBufferLoadLegacy(handle,regIndex)
  %1975 = extractvalue %dx.types.CBufRet.i32 %1974, 0
  %1976 = icmp ult i32 %1973, %1975
  br i1 %1976, label %1916, label %1977

; <label>:1977                                    ; preds = %1969
  br label %1978

; <label>:1978                                    ; preds = %1977, %1907
  %1979 = phi float [ 0.000000e+00, %1907 ], [ %1972, %1977 ]
  %1980 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 %1910)  ; CBufferLoadLegacy(handle,regIndex)
  %1981 = extractvalue %dx.types.CBufRet.f32 %1980, 0
  %1982 = fmul fast float %1981, %1979
  %1983 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 %1911)  ; CBufferLoadLegacy(handle,regIndex)
  %1984 = extractvalue %dx.types.CBufRet.f32 %1983, 1
  %1985 = fmul fast float %1982, %1984
  %1986 = fadd fast float %1985, %1908
  %1987 = extractvalue %dx.types.CBufRet.f32 %1983, 2
  %1988 = fmul fast float %1982, %1987
  %1989 = fadd fast float %1988, %1909
  %1990 = add nuw nsw i32 %1910, 1
  %1991 = icmp eq i32 %1990, %1904
  br i1 %1991, label %1992, label %1907

; <label>:1992                                    ; preds = %1978
  br label %1993

; <label>:1993                                    ; preds = %1992, %1724
  %1994 = phi float [ 0.000000e+00, %1724 ], [ %1986, %1992 ]
  %1995 = phi float [ 0.000000e+00, %1724 ], [ %1989, %1992 ]
  %1996 = call float @dx.op.unary.f32(i32 7, float %1994)  ; Saturate(value)
  %1997 = call float @dx.op.unary.f32(i32 7, float %1995)  ; Saturate(value)
  %1998 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %1999 = extractvalue %dx.types.CBufRet.f32 %1998, 0
  %2000 = extractvalue %dx.types.CBufRet.f32 %1998, 1
  %2001 = fmul fast float %1999, %1000
  %2002 = fmul fast float %2000, %1000
  %2003 = fsub fast float %988, %2001
  %2004 = fsub fast float %992, %2002
  %2005 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %2006 = extractvalue %dx.types.CBufRet.f32 %2005, 0
  %2007 = extractvalue %dx.types.CBufRet.f32 %2005, 1
  %2008 = extractvalue %dx.types.CBufRet.f32 %2005, 2
  %2009 = extractvalue %dx.types.CBufRet.f32 %2005, 3
  %2010 = call float @dx.op.dot4.f32(i32 56, float %2006, float %2007, float %2008, float %2009, float %962, float %963, float %964, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %988)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %992)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %996)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %1000)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %1889)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %1890)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %1891)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %1894)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %1895)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %1896)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %1899)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float %1900)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %1901)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %27)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %28)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %962)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %963)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float %964)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float %16)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float %17)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 0, float %18)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 1, float %19)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 2, float %957)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 3, float %1996)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 0, float %1997)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 1, float %2003)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 2, float %2004)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 3, float %996)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 0, float %1000)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 1, float %1794)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 2, float %1798)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 3, float %1802)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 8, i32 0, i8 0, float %1806)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 8, i32 0, i8 1, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 9, i32 0, i8 0, float %2010)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!16}
!dx.entryPoints = !{!17}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{!5, null, !9, null}
!5 = !{!6, !7}
!6 = !{i32 0, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 10, i32 1, i32 11, i32 0, null}
!7 = !{i32 1, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 77, i32 1, i32 2, i32 0, !8}
!8 = !{i32 0, i32 9}
!9 = !{!10, !11, !12, !13, !14, !15}
!10 = !{i32 0, %MaterialModifiersConsts* undef, !"", i32 0, i32 7, i32 1, i32 496, null}
!11 = !{i32 1, %hostlayout.CameraShaderConsts* undef, !"", i32 0, i32 1, i32 1, i32 848, null}
!12 = !{i32 2, %TextureRegionsCB* undef, !"", i32 0, i32 9, i32 1, i32 5760, null}
!13 = !{i32 3, %FloatTracksDataCB* undef, !"", i32 0, i32 10, i32 1, i32 640, null}
!14 = !{i32 4, %hostlayout.FrequentVertexConsts* undef, !"", i32 0, i32 5, i32 1, i32 112, null}
!15 = !{i32 5, %CullObjectsCB* undef, !"", i32 0, i32 8, i32 1, i32 512, null}
!16 = !{[124 x i32] [i32 61, i32 37, i32 -29130737, i32 17, i32 -29130737, i32 17, i32 -29130737, i32 17, i32 0, i32 0, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 25174016, i32 0, i32 25182208, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1008, i32 0, i32 1008, i32 0, i32 1008, i32 0, i32 0, i32 0, i32 8064, i32 0, i32 8064, i32 0, i32 8064, i32 0, i32 896, i32 0, i32 262144, i32 0, i32 524288, i32 0, i32 1048576, i32 0, i32 2097152, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 507551743, i32 16, i32 507551743, i32 16, i32 507551743, i32 16, i32 507543567, i32 16, i32 507584511, i32 16, i32 507584511, i32 16, i32 507584511, i32 16, i32 507576335, i32 16, i32 507650047, i32 16, i32 507650047, i32 16, i32 507650047, i32 16, i32 507641871, i32 16, i32 507748351, i32 16, i32 -29122561, i32 17, i32 -536870912, i32 1, i32 0, i32 0, i32 -29130737, i32 17, i32 -29130737, i32 17, i32 -29130737, i32 17, i32 0, i32 0, i32 -29130737, i32 17]}
!17 = !{void ()* @vs_main_, !"vs_main_", !18, !4, !58}
!18 = !{!19, !41, null}
!19 = !{!20, !23, !25, !26, !28, !29, !31, !32, !33, !34, !35, !37, !38, !39}
!20 = !{i32 0, !"POSITION", i8 9, i8 0, !21, i8 0, i32 1, i8 3, i32 0, i8 0, !22}
!21 = !{i32 0}
!22 = !{i32 3, i32 7}
!23 = !{i32 1, !"BLENDINDICES", i8 5, i8 0, !21, i8 0, i32 1, i8 4, i32 1, i8 0, !24}
!24 = !{i32 3, i32 15}
!25 = !{i32 2, !"BLENDWEIGHT", i8 9, i8 0, !21, i8 0, i32 1, i8 4, i32 2, i8 0, !24}
!26 = !{i32 3, !"BLENDINDICES", i8 5, i8 0, !27, i8 0, i32 1, i8 4, i32 3, i8 0, !24}
!27 = !{i32 1}
!28 = !{i32 4, !"BLENDWEIGHT", i8 9, i8 0, !27, i8 0, i32 1, i8 4, i32 4, i8 0, !24}
!29 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !21, i8 0, i32 1, i8 2, i32 5, i8 0, !30}
!30 = !{i32 3, i32 3}
!31 = !{i32 6, !"NORMAL", i8 9, i8 0, !21, i8 0, i32 1, i8 3, i32 6, i8 0, !22}
!32 = !{i32 7, !"TANGENT", i8 9, i8 0, !21, i8 0, i32 1, i8 4, i32 7, i8 0, !24}
!33 = !{i32 8, !"COLOR", i8 9, i8 0, !21, i8 0, i32 1, i8 4, i32 8, i8 0, !24}
!34 = !{i32 9, !"TEXCOORD", i8 9, i8 0, !27, i8 0, i32 1, i8 2, i32 9, i8 0, null}
!35 = !{i32 10, !"INSTANCE_TRANSFORM", i8 9, i8 0, !36, i8 0, i32 3, i8 4, i32 10, i8 0, !24}
!36 = !{i32 0, i32 1, i32 2}
!37 = !{i32 11, !"INSTANCE_SKINNING_DATA", i8 5, i8 0, !21, i8 0, i32 1, i8 4, i32 13, i8 0, !22}
!38 = !{i32 12, !"EXTRA_DATA", i8 9, i8 0, !21, i8 0, i32 1, i8 3, i32 14, i8 0, !22}
!39 = !{i32 13, !"SV_VertexID", i8 5, i8 1, !21, i8 0, i32 1, i8 1, i32 15, i8 0, !40}
!40 = !{i32 3, i32 1}
!41 = !{!42, !43, !44, !45, !47, !49, !51, !53, !55, !57}
!42 = !{i32 0, !"SV_Position", i8 9, i8 3, !21, i8 4, i32 1, i8 4, i32 0, i8 0, !24}
!43 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !21, i8 2, i32 1, i8 4, i32 1, i8 0, !24}
!44 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !27, i8 2, i32 1, i8 4, i32 2, i8 0, !24}
!45 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !46, i8 2, i32 1, i8 4, i32 3, i8 0, !24}
!46 = !{i32 2}
!47 = !{i32 4, !"TEXCOORD", i8 9, i8 0, !48, i8 2, i32 1, i8 4, i32 4, i8 0, !24}
!48 = !{i32 3}
!49 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !50, i8 2, i32 1, i8 4, i32 5, i8 0, !24}
!50 = !{i32 4}
!51 = !{i32 6, !"TEXCOORD", i8 9, i8 0, !52, i8 2, i32 1, i8 4, i32 6, i8 0, !24}
!52 = !{i32 5}
!53 = !{i32 7, !"TEXCOORD", i8 9, i8 0, !54, i8 2, i32 1, i8 4, i32 7, i8 0, !24}
!54 = !{i32 6}
!55 = !{i32 8, !"TEXCOORD", i8 9, i8 0, !56, i8 2, i32 1, i8 2, i32 8, i8 0, !30}
!56 = !{i32 7}
!57 = !{i32 9, !"SV_ClipDistance", i8 9, i8 6, !21, i8 2, i32 1, i8 1, i32 9, i8 0, !40}
!58 = !{i32 0, i64 16}
!59 = distinct !{!59, !"dx.controlflow.hints", i32 1}
!60 = distinct !{!60, !61}
!61 = !{!"llvm.loop.unroll.disable"}
 