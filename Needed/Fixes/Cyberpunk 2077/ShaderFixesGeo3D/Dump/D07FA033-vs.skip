;
; Note: shader requires additional functionality:
;       Wave level operations
;
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_VertexID              0   x           0   VERTID    uint   x   
; SV_InstanceID            0   x           1   INSTID    uint   x   
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; TEXCOORD                 0   xyzw        1     NONE   float   xyzw
; TEXCOORD                 1   xyzw        2     NONE   float   xyzw
; TEXCOORD                 2   xyzw        3     NONE   float   xyzw
;
; shader hash: 49d073fc93c073b1af1d61813be9a867
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_VertexID              0                              
; SV_InstanceID            0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; TEXCOORD                 0        nointerpolation       
; TEXCOORD                 1        nointerpolation       
; TEXCOORD                 2                 linear       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [848 x i8] (type annotation not present)
;
; }
;
; Resource bind info for 
; {
;
;   [28 x i8] (type annotation not present)
; }
;
; Resource bind info for 
; {
;
;   [24 x i8] (type annotation not present)
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb1     1
;                                   texture  struct         r/o      T0            t37     1
;                                   texture  struct         r/o      T1             t0     1
;
;
; ViewId state:
;
; Number of inputs: 5, outputs: 16
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 4 }
;   output 1 depends on inputs: { 0, 4 }
;   output 2 depends on inputs: { 0, 4 }
;   output 3 depends on inputs: { 0, 4 }
;   output 4 depends on inputs: { 4 }
;   output 5 depends on inputs: { 4 }
;   output 6 depends on inputs: { 4 }
;   output 7 depends on inputs: { 4 }
;   output 8 depends on inputs: { 4 }
;   output 9 depends on inputs: { 4 }
;   output 10 depends on inputs: { 4 }
;   output 11 depends on inputs: { 4 }
;   output 12 depends on inputs: { 4 }
;   output 13 depends on inputs: { 4 }
;   output 14 depends on inputs: { 4 }
;   output 15 depends on inputs: { 4 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%"class.StructuredBuffer<FrameExposureData>" = type { %struct.FrameExposureData }
%struct.FrameExposureData = type { float, float, float, float, float, float, float }
%"class.StructuredBuffer<DistantLight>" = type { %struct.DistantLight }
%struct.DistantLight = type { i32, float, i32, i32, i32, i32 }
%hostlayout.CameraShaderConsts = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, i32, i32, <2 x i32>, float, float }

define void @vs_main_() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 37, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call i32 @dx.op.loadInput.i32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %4, i32 0)  ; BufferLoad(srv,index,wot)
  %7 = extractvalue %dx.types.ResRet.i32 %6, 0
  %8 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1, i32 %4, i32 4)  ; BufferLoad(srv,index,wot)
  %9 = extractvalue %dx.types.ResRet.f32 %8, 0
  %10 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %4, i32 8)  ; BufferLoad(srv,index,wot)
  %11 = extractvalue %dx.types.ResRet.i32 %10, 0
  %12 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %4, i32 12)  ; BufferLoad(srv,index,wot)
  %13 = extractvalue %dx.types.ResRet.i32 %12, 0
  %14 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %4, i32 16)  ; BufferLoad(srv,index,wot)
  %15 = extractvalue %dx.types.ResRet.i32 %14, 0
  %16 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %4, i32 20)  ; BufferLoad(srv,index,wot)
  %17 = extractvalue %dx.types.ResRet.i32 %16, 0
  %18 = call float @dx.op.legacyF16ToF32(i32 131, i32 %11)  ; LegacyF16ToF32(value)
  %19 = and i32 %15, 1048575
  %20 = and i32 %17, 1048575
  %21 = add nsw i32 %19, -524288
  %22 = add nsw i32 %20, -524288
  %23 = sitofp i32 %21 to float
  %24 = sitofp i32 %22 to float
  %25 = fmul fast float %23, 0x3F947AE140000000
  %26 = fmul fast float %24, 0x3F947AE140000000
  %27 = lshr i32 %15, 20
  %28 = uitofp i32 %27 to float
  %29 = fmul fast float %28, %28
  %30 = fmul fast float %29, 0x3F0A935280000000
  %31 = fadd fast float %30, -5.000000e+01
  %32 = fdiv fast float 1.000000e+00, %18
  %33 = lshr i32 %17, 24
  %34 = uitofp i32 %33 to float
  %35 = fmul fast float %34, 0x3FE69696A0000000
  %36 = and i32 %7, 255
  %37 = uitofp i32 %36 to float
  %38 = lshr i32 %7, 8
  %39 = and i32 %38, 255
  %40 = uitofp i32 %39 to float
  %41 = lshr i32 %7, 16
  %42 = and i32 %41, 255
  %43 = uitofp i32 %42 to float
  %44 = fmul fast float %37, 0x3F70101020000000
  %45 = fmul fast float %40, 0x3F70101020000000
  %46 = fmul fast float %43, 0x3F70101020000000
  %47 = call float @dx.op.unary.f32(i32 23, float %44)  ; Log(value)
  %48 = call float @dx.op.unary.f32(i32 23, float %45)  ; Log(value)
  %49 = call float @dx.op.unary.f32(i32 23, float %46)  ; Log(value)
  %50 = fmul fast float %47, 0x40019999A0000000
  %51 = fmul fast float %48, 0x40019999A0000000
  %52 = fmul fast float %49, 0x40019999A0000000
  %53 = call float @dx.op.unary.f32(i32 21, float %50)  ; Exp(value)
  %54 = call float @dx.op.unary.f32(i32 21, float %51)  ; Exp(value)
  %55 = call float @dx.op.unary.f32(i32 21, float %52)  ; Exp(value)
  %56 = fmul fast float %53, %9
  %57 = fmul fast float %54, %9
  %58 = fmul fast float %55, %9
  %59 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %2, i32 0, i32 0)  ; BufferLoad(srv,index,wot)
  %60 = extractvalue %dx.types.ResRet.f32 %59, 0
  %61 = call float @dx.op.waveReadLaneFirst.f32(i32 118, float %60)  ; WaveReadLaneFirst(value)
  %62 = fmul fast float %56, %61
  %63 = fmul fast float %57, %61
  %64 = fmul fast float %58, %61
  %65 = and i32 %17, 2097152
  %66 = icmp ne i32 %65, 0
  %67 = uitofp i1 %66 to float
  %68 = fcmp fast ogt float %35, 0.000000e+00
  br i1 %68, label %69, label %111

; <label>:69                                      ; preds = %0
  %70 = lshr i32 %13, 16
  %71 = and i32 %70, 255
  %72 = uitofp i32 %71 to float
  %73 = lshr i32 %13, 24
  %74 = uitofp i32 %73 to float
  %75 = fmul fast float %72, 0x3F80204080000000
  %76 = fmul fast float %74, 0x3F80204080000000
  %77 = fadd fast float %75, -1.000000e+00
  %78 = fadd fast float %76, -1.000000e+00
  %79 = call float @dx.op.dot2.f32(i32 54, float %77, float %78, float %77, float %78)  ; Dot2(ax,ay,bx,by)
  %80 = fsub fast float 1.000000e+00, %79
  %81 = call float @dx.op.binary.f32(i32 35, float %80, float 0.000000e+00)  ; FMax(a,b)
  %82 = call float @dx.op.unary.f32(i32 24, float %81)  ; Sqrt(value)
  %83 = and i32 %17, 1048576
  %84 = icmp ne i32 %83, 0
  %85 = fsub fast float -0.000000e+00, %82
  %86 = select i1 %84, float %85, float %82
  %87 = fmul fast float %34, 0x3F793B36A0000000
  %88 = call float @dx.op.unary.f32(i32 12, float %87)  ; Cos(value)
  %89 = call float @dx.op.binary.f32(i32 36, float 1.800000e+02, float %35)  ; FMin(a,b)
  %90 = fmul fast float %89, 0x3F81DF46C0000000
  %91 = call float @dx.op.unary.f32(i32 13, float %90)  ; Sin(value)
  %92 = fsub fast float -0.000000e+00, %91
  %93 = fcmp fast olt float %86, 0.000000e+00
  %94 = select i1 %93, float -1.000000e+00, float 1.000000e+00
  %95 = fadd fast float %94, %86
  %96 = fdiv fast float -1.000000e+00, %95
  %97 = fmul fast float %77, %77
  %98 = fmul fast float %97, %94
  %99 = fmul fast float %98, %96
  %100 = fadd fast float %99, 1.000000e+00
  %101 = fmul fast float %77, %78
  %102 = fmul fast float %101, %94
  %103 = fmul fast float %102, %96
  %104 = fmul fast float %77, %94
  %105 = fsub fast float -0.000000e+00, %104
  %106 = fmul fast float %101, %96
  %107 = fmul fast float %78, %78
  %108 = fmul fast float %107, %96
  %109 = fadd fast float %108, %94
  %110 = fsub fast float -0.000000e+00, %78
  br label %111

; <label>:111                                     ; preds = %69, %0
  %112 = phi float [ %77, %69 ], [ 0.000000e+00, %0 ]
  %113 = phi float [ %78, %69 ], [ 0.000000e+00, %0 ]
  %114 = phi float [ %86, %69 ], [ 0.000000e+00, %0 ]
  %115 = phi float [ %88, %69 ], [ -1.000000e+03, %0 ]
  %116 = phi float [ %92, %69 ], [ -1.000000e+00, %0 ]
  %117 = phi float [ 0.000000e+00, %69 ], [ -1.000000e+00, %0 ]
  %118 = phi float [ %91, %69 ], [ 1.000000e+00, %0 ]
  %119 = phi float [ %106, %69 ], [ 1.000000e+00, %0 ]
  %120 = phi float [ %109, %69 ], [ 0.000000e+00, %0 ]
  %121 = phi float [ %110, %69 ], [ 0.000000e+00, %0 ]
  %122 = phi float [ %78, %69 ], [ 1.000000e+00, %0 ]
  %123 = phi float [ %100, %69 ], [ 0.000000e+00, %0 ]
  %124 = phi float [ %103, %69 ], [ 0.000000e+00, %0 ]
  %125 = phi float [ %105, %69 ], [ 1.000000e+00, %0 ]
  %126 = and i32 %5, 1
  %127 = icmp eq i32 %126, 0
  %128 = select i1 %127, float %116, float %118
  %129 = fmul fast float %119, %128
  %130 = fmul fast float %120, %128
  %131 = fmul fast float %121, %128
  %132 = and i32 %5, 2
  %133 = icmp eq i32 %132, 0
  %134 = select i1 %133, float %117, float 1.000000e+00
  %135 = fmul fast float %134, %112
  %136 = fmul fast float %122, %134
  %137 = fmul fast float %134, %114
  %138 = fadd fast float %129, %135
  %139 = fadd fast float %136, %130
  %140 = fadd fast float %131, %137
  %141 = and i32 %5, 4
  %142 = icmp eq i32 %141, 0
  %143 = select i1 %142, float %116, float %118
  %144 = fmul fast float %123, %143
  %145 = fmul fast float %124, %143
  %146 = fmul fast float %125, %143
  %147 = fadd fast float %138, %144
  %148 = fadd fast float %139, %145
  %149 = fadd fast float %140, %146
  %150 = fmul fast float %147, %18
  %151 = fmul fast float %148, %18
  %152 = fmul fast float %149, %18
  %153 = fadd fast float %150, %25
  %154 = fadd fast float %151, %26
  %155 = fadd fast float %152, %31
  %156 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %157 = extractvalue %dx.types.CBufRet.f32 %156, 0
  %158 = extractvalue %dx.types.CBufRet.f32 %156, 1
  %159 = extractvalue %dx.types.CBufRet.f32 %156, 2
  %160 = extractvalue %dx.types.CBufRet.f32 %156, 3
  %161 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %162 = extractvalue %dx.types.CBufRet.f32 %161, 0
  %163 = extractvalue %dx.types.CBufRet.f32 %161, 1
  %164 = extractvalue %dx.types.CBufRet.f32 %161, 2
  %165 = extractvalue %dx.types.CBufRet.f32 %161, 3
  %166 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %167 = extractvalue %dx.types.CBufRet.f32 %166, 0
  %168 = extractvalue %dx.types.CBufRet.f32 %166, 1
  %169 = extractvalue %dx.types.CBufRet.f32 %166, 2
  %170 = extractvalue %dx.types.CBufRet.f32 %166, 3
  %171 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %172 = extractvalue %dx.types.CBufRet.f32 %171, 0
  %173 = extractvalue %dx.types.CBufRet.f32 %171, 1
  %174 = extractvalue %dx.types.CBufRet.f32 %171, 2
  %175 = extractvalue %dx.types.CBufRet.f32 %171, 3
  %176 = fmul fast float %153, %157
  %177 = call float @dx.op.tertiary.f32(i32 46, float %154, float %158, float %176)  ; FMad(a,b,c)
  %178 = call float @dx.op.tertiary.f32(i32 46, float %155, float %159, float %177)  ; FMad(a,b,c)
  %179 = fadd fast float %178, %160
  %180 = fmul fast float %162, %153
  %181 = call float @dx.op.tertiary.f32(i32 46, float %154, float %163, float %180)  ; FMad(a,b,c)
  %182 = call float @dx.op.tertiary.f32(i32 46, float %155, float %164, float %181)  ; FMad(a,b,c)
  %183 = fadd fast float %182, %165
  %184 = fmul fast float %167, %153
  %185 = call float @dx.op.tertiary.f32(i32 46, float %154, float %168, float %184)  ; FMad(a,b,c)
  %186 = call float @dx.op.tertiary.f32(i32 46, float %155, float %169, float %185)  ; FMad(a,b,c)
  %187 = fadd fast float %186, %170
  %188 = fmul fast float %172, %153
  %189 = call float @dx.op.tertiary.f32(i32 46, float %154, float %173, float %188)  ; FMad(a,b,c)
  %190 = call float @dx.op.tertiary.f32(i32 46, float %155, float %174, float %189)  ; FMad(a,b,c)
  %191 = fadd fast float %190, %175
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %179)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %183)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %187)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %191)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %25)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %26)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %31)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %32)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %62)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %63)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %64)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float %67)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %112)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %113)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %114)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %115)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind
declare float @dx.op.waveReadLaneFirst.f32(i32, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32, %dx.types.Handle, i32, i32) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!12}
!dx.entryPoints = !{!13}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{!5, null, !10, null}
!5 = !{!6, !8}
!6 = !{i32 0, %"class.StructuredBuffer<FrameExposureData>"* undef, !"", i32 0, i32 37, i32 1, i32 12, i32 0, !7}
!7 = !{i32 1, i32 28}
!8 = !{i32 1, %"class.StructuredBuffer<DistantLight>"* undef, !"", i32 0, i32 0, i32 1, i32 12, i32 0, !9}
!9 = !{i32 1, i32 24}
!10 = !{!11}
!11 = !{i32 0, %hostlayout.CameraShaderConsts* undef, !"", i32 0, i32 1, i32 1, i32 848, null}
!12 = !{[7 x i32] [i32 5, i32 16, i32 15, i32 0, i32 0, i32 0, i32 65535]}
!13 = !{void ()* @vs_main_, !"vs_main_", !14, !4, !28}
!14 = !{!15, !20, null}
!15 = !{!16, !19}
!16 = !{i32 0, !"SV_VertexID", i8 5, i8 1, !17, i8 0, i32 1, i8 1, i32 0, i8 0, !18}
!17 = !{i32 0}
!18 = !{i32 3, i32 1}
!19 = !{i32 1, !"SV_InstanceID", i8 5, i8 2, !17, i8 0, i32 1, i8 1, i32 1, i8 0, !18}
!20 = !{!21, !23, !24, !26}
!21 = !{i32 0, !"SV_Position", i8 9, i8 3, !17, i8 4, i32 1, i8 4, i32 0, i8 0, !22}
!22 = !{i32 3, i32 15}
!23 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !17, i8 1, i32 1, i8 4, i32 1, i8 0, !22}
!24 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !25, i8 1, i32 1, i8 4, i32 2, i8 0, !22}
!25 = !{i32 1}
!26 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !27, i8 2, i32 1, i8 4, i32 3, i8 0, !22}
!27 = !{i32 2}
!28 = !{i32 0, i64 524304}
 