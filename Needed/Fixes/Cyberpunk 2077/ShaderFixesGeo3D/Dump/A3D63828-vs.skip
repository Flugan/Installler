;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; POSITION                 0   xyz         0     NONE   float   xyz 
; BLENDINDICES             0   xyzw        1     NONE    uint   xyzw
; BLENDWEIGHT              0   xyzw        2     NONE   float   xyzw
; TEXCOORD                 0   xy          3     NONE   float   xy  
; NORMAL                   0   xyz         4     NONE   float   xyz 
; TANGENT                  0   xyzw        5     NONE   float   xyzw
; COLOR                    0   xyzw        6     NONE   float       
; TEXCOORD                 1   xy          7     NONE   float       
; INSTANCE_TRANSFORM       0   xyzw        8     NONE   float   xyzw
; INSTANCE_TRANSFORM       1   xyzw        9     NONE   float   xyzw
; INSTANCE_TRANSFORM       2   xyzw       10     NONE   float   xyzw
; INSTANCE_SKINNING_DATA     0   xyzw       11     NONE    uint   xy  
; EXTRA_DATA               0   xyz        12     NONE   float   xyz 
; SV_VertexID              0   x          13   VERTID    uint   x   
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; TEXCOORD                 0   xyzw        1     NONE   float   xyzw
; TEXCOORD                 1   xyzw        2     NONE   float   xyzw
; TEXCOORD                 2   xyzw        3     NONE   float   xyzw
; TEXCOORD                 3   xyzw        4     NONE   float   xyzw
; TEXCOORD                 4   x           5     NONE   float   x   
;
; shader hash: c3e498f6704e98b6ebdec316ef0e39e0
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; POSITION                 0                              
; BLENDINDICES             0                              
; BLENDWEIGHT              0                              
; TEXCOORD                 0                              
; NORMAL                   0                              
; TANGENT                  0                              
; COLOR                    0                              
; TEXCOORD                 1                              
; INSTANCE_TRANSFORM       0                              
; INSTANCE_SKINNING_DATA     0                              
; EXTRA_DATA               0                              
; SV_VertexID              0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; TEXCOORD                 3                 linear       
; TEXCOORD                 4                 linear       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [496 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [848 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [112 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [512 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb7     1
;                                   cbuffer      NA          NA     CB1            cb1     1
;                                   cbuffer      NA          NA     CB2            cb5     1
;                                   cbuffer      NA          NA     CB3            cb8     1
;                                   texture    byte         r/o      T0            t10     1
;                                   texture     f32          2d      T1            t77     1
;
;
; ViewId state:
;
; Number of inputs: 53, outputs: 21
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;   output 1 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;   output 2 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;   output 3 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;   output 4 depends on inputs: { 12 }
;   output 5 depends on inputs: { 13 }
;   output 6 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 7 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 8 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 9 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 20, 21, 22, 23, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 10 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 20, 21, 22, 23, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 11 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 20, 21, 22, 23, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 12 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 20, 21, 22, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 13 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 20, 21, 22, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 14 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 20, 21, 22, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 15 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%MaterialModifiersConsts = type { [31 x <4 x float>] }
%hostlayout.CameraShaderConsts = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, i32, i32, <2 x i32>, float, float }
%hostlayout.FrequentVertexConsts = type { [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float> }
%CullObjectsCB = type { [8 x %struct.CullObjectPacked] }
%struct.CullObjectPacked = type { <2 x i32>, <2 x i32>, <3 x float>, float, <3 x float>, float, <3 x float>, i32 }

define void @vs_main_() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 77, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 10, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 3, i32 8, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 2, i32 5, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 7, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %7 = call i32 @dx.op.loadInput.i32(i32 4, i32 11, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call i32 @dx.op.loadInput.i32(i32 4, i32 9, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call i32 @dx.op.loadInput.i32(i32 4, i32 9, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %20 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %21 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %22 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %23 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %24 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %25 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %26 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %27 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %28 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %29 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %30 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %31 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %32 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %33 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %34 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %35 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %36 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %37 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 1, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %38 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 1, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %39 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 1, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %40 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 1, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %41 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 2, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %42 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 2, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %43 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 2, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %44 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 2, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %45 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %46 = extractvalue %dx.types.CBufRet.i32 %45, 0
  %47 = extractvalue %dx.types.CBufRet.i32 %45, 1
  %48 = extractvalue %dx.types.CBufRet.i32 %45, 2
  %49 = bitcast float %36 to i32
  %50 = bitcast float %40 to i32
  %51 = bitcast float %44 to i32
  %52 = sub i32 %49, %46
  %53 = sub i32 %50, %47
  %54 = sub i32 %51, %48
  %55 = sitofp i32 %52 to float
  %56 = sitofp i32 %53 to float
  %57 = sitofp i32 %54 to float
  %58 = fmul fast float %55, 0x3EE0000000000000
  %59 = fmul fast float %56, 0x3EE0000000000000
  %60 = fmul fast float %57, 0x3EE0000000000000
  %61 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %62 = extractvalue %dx.types.CBufRet.f32 %61, 0
  %63 = extractvalue %dx.types.CBufRet.f32 %61, 1
  %64 = extractvalue %dx.types.CBufRet.f32 %61, 2
  %65 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %66 = extractvalue %dx.types.CBufRet.f32 %65, 0
  %67 = extractvalue %dx.types.CBufRet.f32 %65, 1
  %68 = extractvalue %dx.types.CBufRet.f32 %65, 2
  %69 = fmul fast float %66, %30
  %70 = fmul fast float %67, %31
  %71 = fmul fast float %68, %32
  %72 = fadd fast float %69, %62
  %73 = fadd fast float %70, %63
  %74 = fadd fast float %71, %64
  %75 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %76 = extractvalue %dx.types.CBufRet.f32 %75, 0
  %77 = fcmp fast ogt float %76, 5.000000e-01
  br i1 %77, label %78, label %84

; <label>:78                                      ; preds = %0
  %79 = and i32 %7, 255
  %80 = lshr i32 %7, 8
  %81 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1, i32 0, i32 %79, i32 %80, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %82 = extractvalue %dx.types.ResRet.f32 %81, 0
  %83 = fmul float %82, 2.500000e+00
  br label %84

; <label>:84                                      ; preds = %78, %0
  %85 = phi float [ %83, %78 ], [ 0.000000e+00, %0 ]
  %86 = fmul fast float %85, %8
  %87 = fmul fast float %85, %9
  %88 = fmul fast float %85, %10
  %89 = fadd fast float %72, %86
  %90 = fadd fast float %73, %87
  %91 = fadd fast float %74, %88
  %92 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %93 = extractvalue %dx.types.CBufRet.f32 %92, 0
  %94 = fptoui float %93 to i32
  %95 = call i32 @dx.op.binary.i32(i32 40, i32 %94, i32 8)  ; UMin(a,b)
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %162, label %97

; <label>:97                                      ; preds = %84
  br label %98

; <label>:98                                      ; preds = %98, %97
  %99 = phi float [ %158, %98 ], [ 0.000000e+00, %97 ]
  %100 = phi i32 [ %159, %98 ], [ 0, %97 ]
  %101 = shl i32 %100, 2
  %102 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %101)  ; CBufferLoadLegacy(handle,regIndex)
  %103 = extractvalue %dx.types.CBufRet.i32 %102, 0
  %104 = extractvalue %dx.types.CBufRet.i32 %102, 1
  %105 = call float @dx.op.legacyF16ToF32(i32 131, i32 %103)  ; LegacyF16ToF32(value)
  %106 = lshr i32 %103, 16
  %107 = call float @dx.op.legacyF16ToF32(i32 131, i32 %106)  ; LegacyF16ToF32(value)
  %108 = call float @dx.op.legacyF16ToF32(i32 131, i32 %104)  ; LegacyF16ToF32(value)
  %109 = lshr i32 %104, 16
  %110 = call float @dx.op.legacyF16ToF32(i32 131, i32 %109)  ; LegacyF16ToF32(value)
  %111 = or i32 %101, 1
  %112 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %111)  ; CBufferLoadLegacy(handle,regIndex)
  %113 = extractvalue %dx.types.CBufRet.f32 %112, 0
  %114 = extractvalue %dx.types.CBufRet.f32 %112, 1
  %115 = extractvalue %dx.types.CBufRet.f32 %112, 2
  %116 = extractvalue %dx.types.CBufRet.f32 %112, 3
  %117 = or i32 %101, 2
  %118 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %117)  ; CBufferLoadLegacy(handle,regIndex)
  %119 = extractvalue %dx.types.CBufRet.f32 %118, 0
  %120 = extractvalue %dx.types.CBufRet.f32 %118, 1
  %121 = extractvalue %dx.types.CBufRet.f32 %118, 2
  %122 = extractvalue %dx.types.CBufRet.f32 %118, 3
  %123 = call float @dx.op.dot4.f32(i32 56, float %105, float %107, float %108, float %110, float %89, float %90, float %91, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %124 = fmul fast float %123, -1.000000e+01
  %125 = call float @dx.op.unary.f32(i32 7, float %124)  ; Saturate(value)
  %126 = fsub fast float 1.000000e+00, %125
  %127 = fsub fast float %89, %113
  %128 = fsub fast float %90, %114
  %129 = fsub fast float %91, %115
  %130 = fsub fast float %119, %113
  %131 = fsub fast float %120, %114
  %132 = fsub fast float %121, %115
  %133 = call float @dx.op.dot3.f32(i32 55, float %127, float %128, float %129, float %130, float %131, float %132)  ; Dot3(ax,ay,az,bx,by,bz)
  %134 = call float @dx.op.dot3.f32(i32 55, float %130, float %131, float %132, float %130, float %131, float %132)  ; Dot3(ax,ay,az,bx,by,bz)
  %135 = fdiv fast float %133, %134
  %136 = fmul fast float %135, %130
  %137 = fmul fast float %135, %131
  %138 = fmul fast float %135, %132
  %139 = fsub fast float %113, %89
  %140 = fadd fast float %139, %136
  %141 = fsub fast float %114, %90
  %142 = fadd fast float %141, %137
  %143 = fsub fast float %115, %91
  %144 = fadd fast float %143, %138
  %145 = call float @dx.op.dot3.f32(i32 55, float %140, float %142, float %144, float %140, float %142, float %144)  ; Dot3(ax,ay,az,bx,by,bz)
  %146 = call float @dx.op.unary.f32(i32 24, float %145)  ; Sqrt(value)
  %147 = fmul fast float %116, 5.000000e-01
  %148 = fsub fast float %146, %147
  %149 = fdiv fast float %148, %147
  %150 = call float @dx.op.unary.f32(i32 7, float %149)  ; Saturate(value)
  %151 = fmul fast float %150, 2.000000e+00
  %152 = fsub fast float 3.000000e+00, %151
  %153 = fmul fast float %150, %150
  %154 = fmul fast float %153, %152
  %155 = fsub fast float 1.000000e+00, %154
  %156 = fmul fast float %126, %122
  %157 = fmul fast float %156, %155
  %158 = call float @dx.op.binary.f32(i32 35, float %157, float %99)  ; FMax(a,b)
  %159 = add nuw i32 %100, 1
  %160 = icmp eq i32 %159, %95
  br i1 %160, label %161, label %98

; <label>:161                                     ; preds = %98
  br label %162

; <label>:162                                     ; preds = %161, %84
  %163 = phi float [ 0.000000e+00, %84 ], [ %158, %161 ]
  %164 = call float @dx.op.unary.f32(i32 7, float %163)  ; Saturate(value)
  %165 = fmul fast float %164, %8
  %166 = fmul fast float %164, %9
  %167 = fmul fast float %164, %10
  %168 = fadd fast float %165, %89
  %169 = fadd fast float %166, %90
  %170 = fadd fast float %167, %91
  %171 = extractvalue %dx.types.CBufRet.f32 %92, 2
  %172 = fcmp fast ogt float %171, 5.000000e-01
  br i1 %172, label %248, label %173

; <label>:173                                     ; preds = %162
  br i1 %96, label %239, label %174

; <label>:174                                     ; preds = %173
  br label %175

; <label>:175                                     ; preds = %175, %174
  %176 = phi float [ %235, %175 ], [ 0.000000e+00, %174 ]
  %177 = phi i32 [ %236, %175 ], [ 0, %174 ]
  %178 = shl i32 %177, 2
  %179 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %178)  ; CBufferLoadLegacy(handle,regIndex)
  %180 = extractvalue %dx.types.CBufRet.i32 %179, 0
  %181 = extractvalue %dx.types.CBufRet.i32 %179, 1
  %182 = call float @dx.op.legacyF16ToF32(i32 131, i32 %180)  ; LegacyF16ToF32(value)
  %183 = lshr i32 %180, 16
  %184 = call float @dx.op.legacyF16ToF32(i32 131, i32 %183)  ; LegacyF16ToF32(value)
  %185 = call float @dx.op.legacyF16ToF32(i32 131, i32 %181)  ; LegacyF16ToF32(value)
  %186 = lshr i32 %181, 16
  %187 = call float @dx.op.legacyF16ToF32(i32 131, i32 %186)  ; LegacyF16ToF32(value)
  %188 = or i32 %178, 1
  %189 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %188)  ; CBufferLoadLegacy(handle,regIndex)
  %190 = extractvalue %dx.types.CBufRet.f32 %189, 0
  %191 = extractvalue %dx.types.CBufRet.f32 %189, 1
  %192 = extractvalue %dx.types.CBufRet.f32 %189, 2
  %193 = extractvalue %dx.types.CBufRet.f32 %189, 3
  %194 = or i32 %178, 2
  %195 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %194)  ; CBufferLoadLegacy(handle,regIndex)
  %196 = extractvalue %dx.types.CBufRet.f32 %195, 0
  %197 = extractvalue %dx.types.CBufRet.f32 %195, 1
  %198 = extractvalue %dx.types.CBufRet.f32 %195, 2
  %199 = extractvalue %dx.types.CBufRet.f32 %195, 3
  %200 = call float @dx.op.dot4.f32(i32 56, float %182, float %184, float %185, float %187, float %168, float %169, float %170, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %201 = fmul fast float %200, -1.000000e+01
  %202 = call float @dx.op.unary.f32(i32 7, float %201)  ; Saturate(value)
  %203 = fsub fast float 1.000000e+00, %202
  %204 = fsub fast float %168, %190
  %205 = fsub fast float %169, %191
  %206 = fsub fast float %170, %192
  %207 = fsub fast float %196, %190
  %208 = fsub fast float %197, %191
  %209 = fsub fast float %198, %192
  %210 = call float @dx.op.dot3.f32(i32 55, float %204, float %205, float %206, float %207, float %208, float %209)  ; Dot3(ax,ay,az,bx,by,bz)
  %211 = call float @dx.op.dot3.f32(i32 55, float %207, float %208, float %209, float %207, float %208, float %209)  ; Dot3(ax,ay,az,bx,by,bz)
  %212 = fdiv fast float %210, %211
  %213 = fmul fast float %212, %207
  %214 = fmul fast float %212, %208
  %215 = fmul fast float %212, %209
  %216 = fsub fast float %190, %168
  %217 = fadd fast float %216, %213
  %218 = fsub fast float %191, %169
  %219 = fadd fast float %218, %214
  %220 = fsub fast float %192, %170
  %221 = fadd fast float %220, %215
  %222 = call float @dx.op.dot3.f32(i32 55, float %217, float %219, float %221, float %217, float %219, float %221)  ; Dot3(ax,ay,az,bx,by,bz)
  %223 = call float @dx.op.unary.f32(i32 24, float %222)  ; Sqrt(value)
  %224 = fmul fast float %193, 5.000000e-01
  %225 = fsub fast float %223, %224
  %226 = fdiv fast float %225, %224
  %227 = call float @dx.op.unary.f32(i32 7, float %226)  ; Saturate(value)
  %228 = fmul fast float %227, 2.000000e+00
  %229 = fsub fast float 3.000000e+00, %228
  %230 = fmul fast float %227, %227
  %231 = fmul fast float %230, %229
  %232 = fsub fast float 1.000000e+00, %231
  %233 = fmul fast float %203, %199
  %234 = fmul fast float %233, %232
  %235 = call float @dx.op.binary.f32(i32 35, float %234, float %176)  ; FMax(a,b)
  %236 = add nuw i32 %177, 1
  %237 = icmp eq i32 %236, %95
  br i1 %237, label %238, label %175

; <label>:238                                     ; preds = %175
  br label %239

; <label>:239                                     ; preds = %238, %173
  %240 = phi float [ 0.000000e+00, %173 ], [ %235, %238 ]
  %241 = call float @dx.op.unary.f32(i32 7, float %240)  ; Saturate(value)
  %242 = fmul fast float %241, %8
  %243 = fmul fast float %241, %9
  %244 = fmul fast float %241, %10
  %245 = fadd fast float %242, %168
  %246 = fadd fast float %243, %169
  %247 = fadd fast float %244, %170
  br label %248

; <label>:248                                     ; preds = %239, %162
  %249 = phi float [ %168, %162 ], [ %245, %239 ]
  %250 = phi float [ %169, %162 ], [ %246, %239 ]
  %251 = phi float [ %170, %162 ], [ %247, %239 ]
  %252 = call float @dx.op.dot4.f32(i32 56, float %22, float %23, float %24, float %25, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %253 = call float @dx.op.binary.f32(i32 35, float 0x3EE4F8B580000000, float %252)  ; FMax(a,b)
  %254 = fdiv fast float %22, %253
  %255 = fdiv fast float %23, %253
  %256 = fdiv fast float %24, %253
  %257 = fdiv fast float %25, %253
  %258 = mul i32 %26, %12
  %259 = add i32 %258, %11
  %260 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %259, i32 undef)  ; BufferLoad(srv,index,wot)
  %261 = extractvalue %dx.types.ResRet.i32 %260, 0
  %262 = extractvalue %dx.types.ResRet.i32 %260, 1
  %263 = extractvalue %dx.types.ResRet.i32 %260, 2
  %264 = extractvalue %dx.types.ResRet.i32 %260, 3
  %265 = bitcast i32 %261 to float
  %266 = bitcast i32 %262 to float
  %267 = bitcast i32 %263 to float
  %268 = bitcast i32 %264 to float
  %269 = add i32 %259, 16
  %270 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %269, i32 undef)  ; BufferLoad(srv,index,wot)
  %271 = extractvalue %dx.types.ResRet.i32 %270, 0
  %272 = extractvalue %dx.types.ResRet.i32 %270, 1
  %273 = extractvalue %dx.types.ResRet.i32 %270, 2
  %274 = extractvalue %dx.types.ResRet.i32 %270, 3
  %275 = bitcast i32 %271 to float
  %276 = bitcast i32 %272 to float
  %277 = bitcast i32 %273 to float
  %278 = bitcast i32 %274 to float
  %279 = add i32 %259, 32
  %280 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %279, i32 undef)  ; BufferLoad(srv,index,wot)
  %281 = extractvalue %dx.types.ResRet.i32 %280, 0
  %282 = extractvalue %dx.types.ResRet.i32 %280, 1
  %283 = extractvalue %dx.types.ResRet.i32 %280, 2
  %284 = extractvalue %dx.types.ResRet.i32 %280, 3
  %285 = bitcast i32 %281 to float
  %286 = bitcast i32 %282 to float
  %287 = bitcast i32 %283 to float
  %288 = bitcast i32 %284 to float
  %289 = fmul fast float %265, %254
  %290 = fmul fast float %275, %254
  %291 = fmul fast float %285, %254
  %292 = fmul fast float %266, %254
  %293 = fmul fast float %276, %254
  %294 = fmul fast float %286, %254
  %295 = fmul fast float %267, %254
  %296 = fmul fast float %277, %254
  %297 = fmul fast float %287, %254
  %298 = fmul fast float %268, %254
  %299 = fmul fast float %278, %254
  %300 = fmul fast float %288, %254
  %301 = mul i32 %27, %12
  %302 = add i32 %301, %11
  %303 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %302, i32 undef)  ; BufferLoad(srv,index,wot)
  %304 = extractvalue %dx.types.ResRet.i32 %303, 0
  %305 = extractvalue %dx.types.ResRet.i32 %303, 1
  %306 = extractvalue %dx.types.ResRet.i32 %303, 2
  %307 = extractvalue %dx.types.ResRet.i32 %303, 3
  %308 = bitcast i32 %304 to float
  %309 = bitcast i32 %305 to float
  %310 = bitcast i32 %306 to float
  %311 = bitcast i32 %307 to float
  %312 = add i32 %302, 16
  %313 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %312, i32 undef)  ; BufferLoad(srv,index,wot)
  %314 = extractvalue %dx.types.ResRet.i32 %313, 0
  %315 = extractvalue %dx.types.ResRet.i32 %313, 1
  %316 = extractvalue %dx.types.ResRet.i32 %313, 2
  %317 = extractvalue %dx.types.ResRet.i32 %313, 3
  %318 = bitcast i32 %314 to float
  %319 = bitcast i32 %315 to float
  %320 = bitcast i32 %316 to float
  %321 = bitcast i32 %317 to float
  %322 = add i32 %302, 32
  %323 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %322, i32 undef)  ; BufferLoad(srv,index,wot)
  %324 = extractvalue %dx.types.ResRet.i32 %323, 0
  %325 = extractvalue %dx.types.ResRet.i32 %323, 1
  %326 = extractvalue %dx.types.ResRet.i32 %323, 2
  %327 = extractvalue %dx.types.ResRet.i32 %323, 3
  %328 = bitcast i32 %324 to float
  %329 = bitcast i32 %325 to float
  %330 = bitcast i32 %326 to float
  %331 = bitcast i32 %327 to float
  %332 = fmul fast float %308, %255
  %333 = fmul fast float %318, %255
  %334 = fmul fast float %328, %255
  %335 = fmul fast float %309, %255
  %336 = fmul fast float %319, %255
  %337 = fmul fast float %329, %255
  %338 = fmul fast float %310, %255
  %339 = fmul fast float %320, %255
  %340 = fmul fast float %330, %255
  %341 = fmul fast float %311, %255
  %342 = fmul fast float %321, %255
  %343 = fmul fast float %331, %255
  %344 = fadd fast float %332, %289
  %345 = fadd fast float %333, %290
  %346 = fadd fast float %334, %291
  %347 = fadd fast float %335, %292
  %348 = fadd fast float %336, %293
  %349 = fadd fast float %337, %294
  %350 = fadd fast float %338, %295
  %351 = fadd fast float %339, %296
  %352 = fadd fast float %340, %297
  %353 = fadd fast float %341, %298
  %354 = fadd fast float %342, %299
  %355 = fadd fast float %343, %300
  %356 = mul i32 %28, %12
  %357 = add i32 %356, %11
  %358 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %357, i32 undef)  ; BufferLoad(srv,index,wot)
  %359 = extractvalue %dx.types.ResRet.i32 %358, 0
  %360 = extractvalue %dx.types.ResRet.i32 %358, 1
  %361 = extractvalue %dx.types.ResRet.i32 %358, 2
  %362 = extractvalue %dx.types.ResRet.i32 %358, 3
  %363 = bitcast i32 %359 to float
  %364 = bitcast i32 %360 to float
  %365 = bitcast i32 %361 to float
  %366 = bitcast i32 %362 to float
  %367 = add i32 %357, 16
  %368 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %367, i32 undef)  ; BufferLoad(srv,index,wot)
  %369 = extractvalue %dx.types.ResRet.i32 %368, 0
  %370 = extractvalue %dx.types.ResRet.i32 %368, 1
  %371 = extractvalue %dx.types.ResRet.i32 %368, 2
  %372 = extractvalue %dx.types.ResRet.i32 %368, 3
  %373 = bitcast i32 %369 to float
  %374 = bitcast i32 %370 to float
  %375 = bitcast i32 %371 to float
  %376 = bitcast i32 %372 to float
  %377 = add i32 %357, 32
  %378 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %377, i32 undef)  ; BufferLoad(srv,index,wot)
  %379 = extractvalue %dx.types.ResRet.i32 %378, 0
  %380 = extractvalue %dx.types.ResRet.i32 %378, 1
  %381 = extractvalue %dx.types.ResRet.i32 %378, 2
  %382 = extractvalue %dx.types.ResRet.i32 %378, 3
  %383 = bitcast i32 %379 to float
  %384 = bitcast i32 %380 to float
  %385 = bitcast i32 %381 to float
  %386 = bitcast i32 %382 to float
  %387 = fmul fast float %363, %256
  %388 = fmul fast float %373, %256
  %389 = fmul fast float %383, %256
  %390 = fmul fast float %364, %256
  %391 = fmul fast float %374, %256
  %392 = fmul fast float %384, %256
  %393 = fmul fast float %365, %256
  %394 = fmul fast float %375, %256
  %395 = fmul fast float %385, %256
  %396 = fmul fast float %366, %256
  %397 = fmul fast float %376, %256
  %398 = fmul fast float %386, %256
  %399 = fadd fast float %344, %387
  %400 = fadd fast float %345, %388
  %401 = fadd fast float %346, %389
  %402 = fadd fast float %347, %390
  %403 = fadd fast float %348, %391
  %404 = fadd fast float %349, %392
  %405 = fadd fast float %350, %393
  %406 = fadd fast float %351, %394
  %407 = fadd fast float %352, %395
  %408 = fadd fast float %353, %396
  %409 = fadd fast float %354, %397
  %410 = fadd fast float %355, %398
  %411 = mul i32 %29, %12
  %412 = add i32 %411, %11
  %413 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %412, i32 undef)  ; BufferLoad(srv,index,wot)
  %414 = extractvalue %dx.types.ResRet.i32 %413, 0
  %415 = extractvalue %dx.types.ResRet.i32 %413, 1
  %416 = extractvalue %dx.types.ResRet.i32 %413, 2
  %417 = extractvalue %dx.types.ResRet.i32 %413, 3
  %418 = bitcast i32 %414 to float
  %419 = bitcast i32 %415 to float
  %420 = bitcast i32 %416 to float
  %421 = bitcast i32 %417 to float
  %422 = add i32 %412, 16
  %423 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %422, i32 undef)  ; BufferLoad(srv,index,wot)
  %424 = extractvalue %dx.types.ResRet.i32 %423, 0
  %425 = extractvalue %dx.types.ResRet.i32 %423, 1
  %426 = extractvalue %dx.types.ResRet.i32 %423, 2
  %427 = extractvalue %dx.types.ResRet.i32 %423, 3
  %428 = bitcast i32 %424 to float
  %429 = bitcast i32 %425 to float
  %430 = bitcast i32 %426 to float
  %431 = bitcast i32 %427 to float
  %432 = add i32 %412, 32
  %433 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %432, i32 undef)  ; BufferLoad(srv,index,wot)
  %434 = extractvalue %dx.types.ResRet.i32 %433, 0
  %435 = extractvalue %dx.types.ResRet.i32 %433, 1
  %436 = extractvalue %dx.types.ResRet.i32 %433, 2
  %437 = extractvalue %dx.types.ResRet.i32 %433, 3
  %438 = bitcast i32 %434 to float
  %439 = bitcast i32 %435 to float
  %440 = bitcast i32 %436 to float
  %441 = bitcast i32 %437 to float
  %442 = fmul fast float %418, %257
  %443 = fmul fast float %428, %257
  %444 = fmul fast float %438, %257
  %445 = fmul fast float %419, %257
  %446 = fmul fast float %429, %257
  %447 = fmul fast float %439, %257
  %448 = fmul fast float %420, %257
  %449 = fmul fast float %430, %257
  %450 = fmul fast float %440, %257
  %451 = fmul fast float %421, %257
  %452 = fmul fast float %431, %257
  %453 = fmul fast float %441, %257
  %454 = fadd fast float %399, %442
  %455 = fadd fast float %400, %443
  %456 = fadd fast float %401, %444
  %457 = fadd fast float %402, %445
  %458 = fadd fast float %403, %446
  %459 = fadd fast float %404, %447
  %460 = fadd fast float %405, %448
  %461 = fadd fast float %406, %449
  %462 = fadd fast float %407, %450
  %463 = fadd fast float %408, %451
  %464 = fadd fast float %409, %452
  %465 = fadd fast float %410, %453
  %466 = fmul fast float %454, %249
  %467 = call float @dx.op.tertiary.f32(i32 46, float %250, float %457, float %466)  ; FMad(a,b,c)
  %468 = call float @dx.op.tertiary.f32(i32 46, float %251, float %460, float %467)  ; FMad(a,b,c)
  %469 = fadd fast float %463, %468
  %470 = fmul fast float %455, %249
  %471 = call float @dx.op.tertiary.f32(i32 46, float %250, float %458, float %470)  ; FMad(a,b,c)
  %472 = call float @dx.op.tertiary.f32(i32 46, float %251, float %461, float %471)  ; FMad(a,b,c)
  %473 = fadd fast float %464, %472
  %474 = fmul fast float %456, %249
  %475 = call float @dx.op.tertiary.f32(i32 46, float %250, float %459, float %474)  ; FMad(a,b,c)
  %476 = call float @dx.op.tertiary.f32(i32 46, float %251, float %462, float %475)  ; FMad(a,b,c)
  %477 = fadd fast float %465, %476
  br i1 %172, label %478, label %553

; <label>:478                                     ; preds = %248
  br i1 %96, label %544, label %479

; <label>:479                                     ; preds = %478
  br label %480

; <label>:480                                     ; preds = %480, %479
  %481 = phi float [ %540, %480 ], [ 0.000000e+00, %479 ]
  %482 = phi i32 [ %541, %480 ], [ 0, %479 ]
  %483 = shl i32 %482, 2
  %484 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %483)  ; CBufferLoadLegacy(handle,regIndex)
  %485 = extractvalue %dx.types.CBufRet.i32 %484, 0
  %486 = extractvalue %dx.types.CBufRet.i32 %484, 1
  %487 = call float @dx.op.legacyF16ToF32(i32 131, i32 %485)  ; LegacyF16ToF32(value)
  %488 = lshr i32 %485, 16
  %489 = call float @dx.op.legacyF16ToF32(i32 131, i32 %488)  ; LegacyF16ToF32(value)
  %490 = call float @dx.op.legacyF16ToF32(i32 131, i32 %486)  ; LegacyF16ToF32(value)
  %491 = lshr i32 %486, 16
  %492 = call float @dx.op.legacyF16ToF32(i32 131, i32 %491)  ; LegacyF16ToF32(value)
  %493 = or i32 %483, 1
  %494 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %493)  ; CBufferLoadLegacy(handle,regIndex)
  %495 = extractvalue %dx.types.CBufRet.f32 %494, 0
  %496 = extractvalue %dx.types.CBufRet.f32 %494, 1
  %497 = extractvalue %dx.types.CBufRet.f32 %494, 2
  %498 = extractvalue %dx.types.CBufRet.f32 %494, 3
  %499 = or i32 %483, 2
  %500 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %499)  ; CBufferLoadLegacy(handle,regIndex)
  %501 = extractvalue %dx.types.CBufRet.f32 %500, 0
  %502 = extractvalue %dx.types.CBufRet.f32 %500, 1
  %503 = extractvalue %dx.types.CBufRet.f32 %500, 2
  %504 = extractvalue %dx.types.CBufRet.f32 %500, 3
  %505 = call float @dx.op.dot4.f32(i32 56, float %487, float %489, float %490, float %492, float %469, float %473, float %477, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %506 = fmul fast float %505, -1.000000e+01
  %507 = call float @dx.op.unary.f32(i32 7, float %506)  ; Saturate(value)
  %508 = fsub fast float 1.000000e+00, %507
  %509 = fsub fast float %469, %495
  %510 = fsub fast float %473, %496
  %511 = fsub fast float %477, %497
  %512 = fsub fast float %501, %495
  %513 = fsub fast float %502, %496
  %514 = fsub fast float %503, %497
  %515 = call float @dx.op.dot3.f32(i32 55, float %509, float %510, float %511, float %512, float %513, float %514)  ; Dot3(ax,ay,az,bx,by,bz)
  %516 = call float @dx.op.dot3.f32(i32 55, float %512, float %513, float %514, float %512, float %513, float %514)  ; Dot3(ax,ay,az,bx,by,bz)
  %517 = fdiv fast float %515, %516
  %518 = fmul fast float %517, %512
  %519 = fmul fast float %517, %513
  %520 = fmul fast float %517, %514
  %521 = fsub fast float %495, %469
  %522 = fadd fast float %521, %518
  %523 = fsub fast float %496, %473
  %524 = fadd fast float %523, %519
  %525 = fsub fast float %497, %477
  %526 = fadd fast float %525, %520
  %527 = call float @dx.op.dot3.f32(i32 55, float %522, float %524, float %526, float %522, float %524, float %526)  ; Dot3(ax,ay,az,bx,by,bz)
  %528 = call float @dx.op.unary.f32(i32 24, float %527)  ; Sqrt(value)
  %529 = fmul fast float %498, 5.000000e-01
  %530 = fsub fast float %528, %529
  %531 = fdiv fast float %530, %529
  %532 = call float @dx.op.unary.f32(i32 7, float %531)  ; Saturate(value)
  %533 = fmul fast float %532, 2.000000e+00
  %534 = fsub fast float 3.000000e+00, %533
  %535 = fmul fast float %532, %532
  %536 = fmul fast float %535, %534
  %537 = fsub fast float 1.000000e+00, %536
  %538 = fmul fast float %508, %504
  %539 = fmul fast float %538, %537
  %540 = call float @dx.op.binary.f32(i32 35, float %539, float %481)  ; FMax(a,b)
  %541 = add nuw i32 %482, 1
  %542 = icmp eq i32 %541, %95
  br i1 %542, label %543, label %480

; <label>:543                                     ; preds = %480
  br label %544

; <label>:544                                     ; preds = %543, %478
  %545 = phi float [ 0.000000e+00, %478 ], [ %540, %543 ]
  %546 = call float @dx.op.unary.f32(i32 7, float %545)  ; Saturate(value)
  %547 = fmul fast float %546, %8
  %548 = fmul fast float %546, %9
  %549 = fmul fast float %546, %10
  %550 = fadd fast float %547, %469
  %551 = fadd fast float %548, %473
  %552 = fadd fast float %549, %477
  br label %553

; <label>:553                                     ; preds = %544, %248
  %554 = phi float [ %550, %544 ], [ %469, %248 ]
  %555 = phi float [ %551, %544 ], [ %473, %248 ]
  %556 = phi float [ %552, %544 ], [ %477, %248 ]
  %557 = fmul fast float %554, %33
  %558 = call float @dx.op.tertiary.f32(i32 46, float %555, float %34, float %557)  ; FMad(a,b,c)
  %559 = call float @dx.op.tertiary.f32(i32 46, float %556, float %35, float %558)  ; FMad(a,b,c)
  %560 = fadd fast float %559, %58
  %561 = fmul fast float %554, %37
  %562 = call float @dx.op.tertiary.f32(i32 46, float %555, float %38, float %561)  ; FMad(a,b,c)
  %563 = call float @dx.op.tertiary.f32(i32 46, float %556, float %39, float %562)  ; FMad(a,b,c)
  %564 = fadd fast float %563, %59
  %565 = fmul fast float %554, %41
  %566 = call float @dx.op.tertiary.f32(i32 46, float %555, float %42, float %565)  ; FMad(a,b,c)
  %567 = call float @dx.op.tertiary.f32(i32 46, float %556, float %43, float %566)  ; FMad(a,b,c)
  %568 = fadd fast float %567, %60
  %569 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %570 = extractvalue %dx.types.CBufRet.f32 %569, 0
  %571 = extractvalue %dx.types.CBufRet.f32 %569, 1
  %572 = extractvalue %dx.types.CBufRet.f32 %569, 2
  %573 = extractvalue %dx.types.CBufRet.f32 %569, 3
  %574 = fmul fast float %570, %560
  %575 = call float @dx.op.tertiary.f32(i32 46, float %564, float %571, float %574)  ; FMad(a,b,c)
  %576 = call float @dx.op.tertiary.f32(i32 46, float %568, float %572, float %575)  ; FMad(a,b,c)
  %577 = fadd fast float %576, %573
  %578 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %579 = extractvalue %dx.types.CBufRet.f32 %578, 0
  %580 = extractvalue %dx.types.CBufRet.f32 %578, 1
  %581 = extractvalue %dx.types.CBufRet.f32 %578, 2
  %582 = extractvalue %dx.types.CBufRet.f32 %578, 3
  %583 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %584 = extractvalue %dx.types.CBufRet.f32 %583, 0
  %585 = extractvalue %dx.types.CBufRet.f32 %583, 1
  %586 = extractvalue %dx.types.CBufRet.f32 %583, 2
  %587 = extractvalue %dx.types.CBufRet.f32 %583, 3
  %588 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %589 = extractvalue %dx.types.CBufRet.f32 %588, 0
  %590 = extractvalue %dx.types.CBufRet.f32 %588, 1
  %591 = extractvalue %dx.types.CBufRet.f32 %588, 2
  %592 = extractvalue %dx.types.CBufRet.f32 %588, 3
  %593 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %594 = extractvalue %dx.types.CBufRet.f32 %593, 0
  %595 = extractvalue %dx.types.CBufRet.f32 %593, 1
  %596 = extractvalue %dx.types.CBufRet.f32 %593, 2
  %597 = extractvalue %dx.types.CBufRet.f32 %593, 3
  %598 = fmul fast float %579, %560
  %599 = call float @dx.op.tertiary.f32(i32 46, float %564, float %580, float %598)  ; FMad(a,b,c)
  %600 = call float @dx.op.tertiary.f32(i32 46, float %568, float %581, float %599)  ; FMad(a,b,c)
  %601 = fadd fast float %600, %582
  %602 = fmul fast float %584, %560
  %603 = call float @dx.op.tertiary.f32(i32 46, float %564, float %585, float %602)  ; FMad(a,b,c)
  %604 = call float @dx.op.tertiary.f32(i32 46, float %568, float %586, float %603)  ; FMad(a,b,c)
  %605 = fadd fast float %604, %587
  %606 = fmul fast float %589, %560
  %607 = call float @dx.op.tertiary.f32(i32 46, float %564, float %590, float %606)  ; FMad(a,b,c)
  %608 = call float @dx.op.tertiary.f32(i32 46, float %568, float %591, float %607)  ; FMad(a,b,c)
  %609 = fadd fast float %608, %592
  %610 = fmul fast float %594, %560
  %611 = call float @dx.op.tertiary.f32(i32 46, float %564, float %595, float %610)  ; FMad(a,b,c)
  %612 = call float @dx.op.tertiary.f32(i32 46, float %568, float %596, float %611)  ; FMad(a,b,c)
  %613 = fadd fast float %612, %597
  %614 = fmul fast float %454, %33
  %615 = call float @dx.op.tertiary.f32(i32 46, float %455, float %34, float %614)  ; FMad(a,b,c)
  %616 = call float @dx.op.tertiary.f32(i32 46, float %456, float %35, float %615)  ; FMad(a,b,c)
  %617 = fmul fast float %454, %37
  %618 = call float @dx.op.tertiary.f32(i32 46, float %455, float %38, float %617)  ; FMad(a,b,c)
  %619 = call float @dx.op.tertiary.f32(i32 46, float %456, float %39, float %618)  ; FMad(a,b,c)
  %620 = fmul fast float %454, %41
  %621 = call float @dx.op.tertiary.f32(i32 46, float %455, float %42, float %620)  ; FMad(a,b,c)
  %622 = call float @dx.op.tertiary.f32(i32 46, float %456, float %43, float %621)  ; FMad(a,b,c)
  %623 = fmul fast float %457, %33
  %624 = call float @dx.op.tertiary.f32(i32 46, float %458, float %34, float %623)  ; FMad(a,b,c)
  %625 = call float @dx.op.tertiary.f32(i32 46, float %459, float %35, float %624)  ; FMad(a,b,c)
  %626 = fmul fast float %457, %37
  %627 = call float @dx.op.tertiary.f32(i32 46, float %458, float %38, float %626)  ; FMad(a,b,c)
  %628 = call float @dx.op.tertiary.f32(i32 46, float %459, float %39, float %627)  ; FMad(a,b,c)
  %629 = fmul fast float %457, %41
  %630 = call float @dx.op.tertiary.f32(i32 46, float %458, float %42, float %629)  ; FMad(a,b,c)
  %631 = call float @dx.op.tertiary.f32(i32 46, float %459, float %43, float %630)  ; FMad(a,b,c)
  %632 = fmul fast float %460, %33
  %633 = call float @dx.op.tertiary.f32(i32 46, float %461, float %34, float %632)  ; FMad(a,b,c)
  %634 = call float @dx.op.tertiary.f32(i32 46, float %462, float %35, float %633)  ; FMad(a,b,c)
  %635 = fmul fast float %460, %37
  %636 = call float @dx.op.tertiary.f32(i32 46, float %461, float %38, float %635)  ; FMad(a,b,c)
  %637 = call float @dx.op.tertiary.f32(i32 46, float %462, float %39, float %636)  ; FMad(a,b,c)
  %638 = fmul fast float %460, %41
  %639 = call float @dx.op.tertiary.f32(i32 46, float %461, float %42, float %638)  ; FMad(a,b,c)
  %640 = call float @dx.op.tertiary.f32(i32 46, float %462, float %43, float %639)  ; FMad(a,b,c)
  %641 = fmul fast float %17, 2.000000e+00
  %642 = fmul fast float %18, 2.000000e+00
  %643 = fmul fast float %19, 2.000000e+00
  %644 = fadd fast float %641, -1.000000e+00
  %645 = fadd fast float %642, -1.000000e+00
  %646 = fadd fast float %643, -1.000000e+00
  %647 = fmul fast float %13, 2.000000e+00
  %648 = fmul fast float %14, 2.000000e+00
  %649 = fmul fast float %15, 2.000000e+00
  %650 = fadd fast float %647, -1.000000e+00
  %651 = fadd fast float %648, -1.000000e+00
  %652 = fadd fast float %649, -1.000000e+00
  %653 = fmul fast float %16, 2.000000e+00
  %654 = fadd fast float %653, -1.000000e+00
  %655 = fmul fast float %645, %652
  %656 = fmul fast float %646, %651
  %657 = fsub fast float %655, %656
  %658 = fmul fast float %646, %650
  %659 = fmul fast float %644, %652
  %660 = fsub fast float %658, %659
  %661 = fmul fast float %644, %651
  %662 = fmul fast float %645, %650
  %663 = fsub fast float %661, %662
  %664 = fmul fast float %657, %654
  %665 = fmul fast float %660, %654
  %666 = fmul fast float %663, %654
  %667 = fmul fast float %616, %650
  %668 = call float @dx.op.tertiary.f32(i32 46, float %651, float %625, float %667)  ; FMad(a,b,c)
  %669 = call float @dx.op.tertiary.f32(i32 46, float %652, float %634, float %668)  ; FMad(a,b,c)
  %670 = fmul fast float %619, %650
  %671 = call float @dx.op.tertiary.f32(i32 46, float %651, float %628, float %670)  ; FMad(a,b,c)
  %672 = call float @dx.op.tertiary.f32(i32 46, float %652, float %637, float %671)  ; FMad(a,b,c)
  %673 = fmul fast float %622, %650
  %674 = call float @dx.op.tertiary.f32(i32 46, float %651, float %631, float %673)  ; FMad(a,b,c)
  %675 = call float @dx.op.tertiary.f32(i32 46, float %652, float %640, float %674)  ; FMad(a,b,c)
  %676 = fmul fast float %616, %664
  %677 = call float @dx.op.tertiary.f32(i32 46, float %665, float %625, float %676)  ; FMad(a,b,c)
  %678 = call float @dx.op.tertiary.f32(i32 46, float %666, float %634, float %677)  ; FMad(a,b,c)
  %679 = fmul fast float %619, %664
  %680 = call float @dx.op.tertiary.f32(i32 46, float %665, float %628, float %679)  ; FMad(a,b,c)
  %681 = call float @dx.op.tertiary.f32(i32 46, float %666, float %637, float %680)  ; FMad(a,b,c)
  %682 = fmul fast float %622, %664
  %683 = call float @dx.op.tertiary.f32(i32 46, float %665, float %631, float %682)  ; FMad(a,b,c)
  %684 = call float @dx.op.tertiary.f32(i32 46, float %666, float %640, float %683)  ; FMad(a,b,c)
  %685 = fmul fast float %616, %644
  %686 = call float @dx.op.tertiary.f32(i32 46, float %645, float %625, float %685)  ; FMad(a,b,c)
  %687 = call float @dx.op.tertiary.f32(i32 46, float %646, float %634, float %686)  ; FMad(a,b,c)
  %688 = fmul fast float %619, %644
  %689 = call float @dx.op.tertiary.f32(i32 46, float %645, float %628, float %688)  ; FMad(a,b,c)
  %690 = call float @dx.op.tertiary.f32(i32 46, float %646, float %637, float %689)  ; FMad(a,b,c)
  %691 = fmul fast float %622, %644
  %692 = call float @dx.op.tertiary.f32(i32 46, float %645, float %631, float %691)  ; FMad(a,b,c)
  %693 = call float @dx.op.tertiary.f32(i32 46, float %646, float %640, float %692)  ; FMad(a,b,c)
  %694 = call float @dx.op.dot3.f32(i32 55, float %687, float %690, float %693, float %687, float %690, float %693)  ; Dot3(ax,ay,az,bx,by,bz)
  %695 = call float @dx.op.unary.f32(i32 25, float %694)  ; Rsqrt(value)
  %696 = fmul fast float %695, %687
  %697 = fmul fast float %695, %690
  %698 = fmul fast float %695, %693
  %699 = call float @dx.op.dot3.f32(i32 55, float %678, float %681, float %684, float %678, float %681, float %684)  ; Dot3(ax,ay,az,bx,by,bz)
  %700 = call float @dx.op.unary.f32(i32 25, float %699)  ; Rsqrt(value)
  %701 = fmul fast float %700, %678
  %702 = fmul fast float %700, %681
  %703 = fmul fast float %700, %684
  %704 = call float @dx.op.dot3.f32(i32 55, float %669, float %672, float %675, float %669, float %672, float %675)  ; Dot3(ax,ay,az,bx,by,bz)
  %705 = call float @dx.op.unary.f32(i32 25, float %704)  ; Rsqrt(value)
  %706 = fmul fast float %705, %669
  %707 = fmul fast float %705, %672
  %708 = fmul fast float %705, %675
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %601)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %605)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %609)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %613)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %20)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %21)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %696)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %697)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %698)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %701)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %702)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float %703)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %706)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %707)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %708)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %577)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 0, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!14}
!dx.entryPoints = !{!15}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{!5, null, !9, null}
!5 = !{!6, !7}
!6 = !{i32 0, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 10, i32 1, i32 11, i32 0, null}
!7 = !{i32 1, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 77, i32 1, i32 2, i32 0, !8}
!8 = !{i32 0, i32 9}
!9 = !{!10, !11, !12, !13}
!10 = !{i32 0, %MaterialModifiersConsts* undef, !"", i32 0, i32 7, i32 1, i32 496, null}
!11 = !{i32 1, %hostlayout.CameraShaderConsts* undef, !"", i32 0, i32 1, i32 1, i32 848, null}
!12 = !{i32 2, %hostlayout.FrequentVertexConsts* undef, !"", i32 0, i32 5, i32 1, i32 112, null}
!13 = !{i32 3, %CullObjectsCB* undef, !"", i32 0, i32 8, i32 1, i32 512, null}
!14 = !{[55 x i32] [i32 53, i32 21, i32 32783, i32 32783, i32 32783, i32 0, i32 65487, i32 65487, i32 65487, i32 65487, i32 65487, i32 65487, i32 65487, i32 65487, i32 16, i32 32, i32 0, i32 0, i32 4032, i32 4032, i32 4032, i32 0, i32 32256, i32 32256, i32 32256, i32 3584, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 65487, i32 65487, i32 65487, i32 32783, i32 65487, i32 65487, i32 65487, i32 32783, i32 65487, i32 65487, i32 65487, i32 32783, i32 65487, i32 65487, i32 0, i32 0, i32 32783, i32 32783, i32 32783, i32 0, i32 32783]}
!15 = !{void ()* @vs_main_, !"vs_main_", !16, !4, !47}
!16 = !{!17, !37, null}
!17 = !{!18, !21, !23, !24, !26, !27, !28, !29, !31, !33, !34, !35}
!18 = !{i32 0, !"POSITION", i8 9, i8 0, !19, i8 0, i32 1, i8 3, i32 0, i8 0, !20}
!19 = !{i32 0}
!20 = !{i32 3, i32 7}
!21 = !{i32 1, !"BLENDINDICES", i8 5, i8 0, !19, i8 0, i32 1, i8 4, i32 1, i8 0, !22}
!22 = !{i32 3, i32 15}
!23 = !{i32 2, !"BLENDWEIGHT", i8 9, i8 0, !19, i8 0, i32 1, i8 4, i32 2, i8 0, !22}
!24 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !19, i8 0, i32 1, i8 2, i32 3, i8 0, !25}
!25 = !{i32 3, i32 3}
!26 = !{i32 4, !"NORMAL", i8 9, i8 0, !19, i8 0, i32 1, i8 3, i32 4, i8 0, !20}
!27 = !{i32 5, !"TANGENT", i8 9, i8 0, !19, i8 0, i32 1, i8 4, i32 5, i8 0, !22}
!28 = !{i32 6, !"COLOR", i8 9, i8 0, !19, i8 0, i32 1, i8 4, i32 6, i8 0, null}
!29 = !{i32 7, !"TEXCOORD", i8 9, i8 0, !30, i8 0, i32 1, i8 2, i32 7, i8 0, null}
!30 = !{i32 1}
!31 = !{i32 8, !"INSTANCE_TRANSFORM", i8 9, i8 0, !32, i8 0, i32 3, i8 4, i32 8, i8 0, !22}
!32 = !{i32 0, i32 1, i32 2}
!33 = !{i32 9, !"INSTANCE_SKINNING_DATA", i8 5, i8 0, !19, i8 0, i32 1, i8 4, i32 11, i8 0, !25}
!34 = !{i32 10, !"EXTRA_DATA", i8 9, i8 0, !19, i8 0, i32 1, i8 3, i32 12, i8 0, !20}
!35 = !{i32 11, !"SV_VertexID", i8 5, i8 1, !19, i8 0, i32 1, i8 1, i32 13, i8 0, !36}
!36 = !{i32 3, i32 1}
!37 = !{!38, !39, !40, !41, !43, !45}
!38 = !{i32 0, !"SV_Position", i8 9, i8 3, !19, i8 4, i32 1, i8 4, i32 0, i8 0, !22}
!39 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !19, i8 2, i32 1, i8 4, i32 1, i8 0, !22}
!40 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !30, i8 2, i32 1, i8 4, i32 2, i8 0, !22}
!41 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !42, i8 2, i32 1, i8 4, i32 3, i8 0, !22}
!42 = !{i32 2}
!43 = !{i32 4, !"TEXCOORD", i8 9, i8 0, !44, i8 2, i32 1, i8 4, i32 4, i8 0, !22}
!44 = !{i32 3}
!45 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !46, i8 2, i32 1, i8 1, i32 5, i8 0, !36}
!46 = !{i32 4}
!47 = !{i32 0, i64 16}
 