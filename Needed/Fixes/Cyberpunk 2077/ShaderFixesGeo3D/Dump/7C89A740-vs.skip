;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; POSITION                 0   xyz         0     NONE   float   xyz 
; BLENDINDICES             0   xyzw        1     NONE    uint   xyzw
; BLENDWEIGHT              0   xyzw        2     NONE   float   xyzw
; TEXCOORD                 0   xy          3     NONE   float   xy  
; NORMAL                   0   xyz         4     NONE   float   xyz 
; TANGENT                  0   xyzw        5     NONE   float   xyzw
; COLOR                    0   xyzw        6     NONE   float   xyzw
; TEXCOORD                 1   xy          7     NONE   float       
; INSTANCE_TRANSFORM       0   xyzw        8     NONE   float   xyzw
; INSTANCE_TRANSFORM       1   xyzw        9     NONE   float   xyzw
; INSTANCE_TRANSFORM       2   xyzw       10     NONE   float   xyzw
; INSTANCE_SKINNING_DATA     0   xyzw       11     NONE    uint   xyz 
; SV_VertexID              0   x          12   VERTID    uint       
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; TEXCOORD                 0   xyzw        1     NONE   float   xyzw
; TEXCOORD                 1   xyzw        2     NONE   float   xyzw
; TEXCOORD                 2   xyzw        3     NONE   float   xyzw
; TEXCOORD                 3   xyzw        4     NONE   float   xyzw
; TEXCOORD                 4   xyzw        5     NONE   float   xyzw
; TEXCOORD                 5   xyzw        6     NONE   float   xyzw
; TEXCOORD                 6   xyzw        7     NONE   float   xyzw
; TEXCOORD                 7   xy          8     NONE   float   xy  
; SV_ClipDistance          0   x           9  CLIPDST   float   x   
;
; shader hash: 8f9f1422a69d6e27e6a7929df20225c5
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; POSITION                 0                              
; BLENDINDICES             0                              
; BLENDWEIGHT              0                              
; TEXCOORD                 0                              
; NORMAL                   0                              
; TANGENT                  0                              
; COLOR                    0                              
; TEXCOORD                 1                              
; INSTANCE_TRANSFORM       0                              
; INSTANCE_SKINNING_DATA     0                              
; SV_VertexID              0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; TEXCOORD                 3                 linear       
; TEXCOORD                 4                 linear       
; TEXCOORD                 5                 linear       
; TEXCOORD                 6                 linear       
; TEXCOORD                 7                 linear       
; SV_ClipDistance          0                 linear       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [496 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [848 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [5760 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [640 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [112 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb7     1
;                                   cbuffer      NA          NA     CB1            cb1     1
;                                   cbuffer      NA          NA     CB2            cb8     1
;                                   cbuffer      NA          NA     CB3            cb9     1
;                                   cbuffer      NA          NA     CB4            cb5     1
;                                   texture    byte         r/o      T0            t10     1
;
;
; ViewId state:
;
; Number of inputs: 49, outputs: 37
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
;   output 1 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
;   output 2 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
;   output 3 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
;   output 4 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 5 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 6 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 7 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 20, 21, 22, 23, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 8 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 20, 21, 22, 23, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 9 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 20, 21, 22, 23, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 10 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 20, 21, 22, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 11 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 20, 21, 22, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 12 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 20, 21, 22, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 13 depends on inputs: { 12 }
;   output 14 depends on inputs: { 13 }
;   output 15 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 44, 45 }
;   output 16 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 36, 37, 38, 39, 44, 45 }
;   output 17 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 40, 41, 42, 43, 44, 45 }
;   output 18 depends on inputs: { 24 }
;   output 19 depends on inputs: { 25 }
;   output 20 depends on inputs: { 26 }
;   output 21 depends on inputs: { 27 }
;   output 22 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
;   output 23 depends on inputs: { 12, 13 }
;   output 24 depends on inputs: { 12, 13 }
;   output 25 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
;   output 26 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
;   output 27 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
;   output 28 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
;   output 29 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 45, 46 }
;   output 30 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 45, 46 }
;   output 31 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 45, 46 }
;   output 32 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 45, 46 }
;   output 36 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%struct.ByteAddressBuffer = type { i32 }
%MaterialModifiersConsts = type { [31 x <4 x float>] }
%hostlayout.CameraShaderConsts = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, i32, i32, <2 x i32>, float, float }
%TextureRegionsCB = type { [40 x %struct.SRegion] }
%struct.SRegion = type { i32, float, float, [4 x <4 x float>], [4 x <4 x float>] }
%FloatTracksDataCB = type { [40 x <4 x float>] }
%hostlayout.FrequentVertexConsts = type { [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float> }

define void @vs_main_() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 10, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 4, i32 5, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 3, i32 9, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 2, i32 8, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 7, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %7 = call i32 @dx.op.loadInput.i32(i32 4, i32 9, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call i32 @dx.op.loadInput.i32(i32 4, i32 9, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call i32 @dx.op.loadInput.i32(i32 4, i32 9, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %20 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %21 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %22 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %23 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %24 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %25 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %26 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %27 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %28 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %29 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %30 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %31 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %32 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %33 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %34 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %35 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %36 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %37 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %38 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 1, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %39 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 1, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %40 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 1, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %41 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 1, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %42 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 2, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %43 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 2, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %44 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 2, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %45 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 2, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %46 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %47 = extractvalue %dx.types.CBufRet.i32 %46, 0
  %48 = extractvalue %dx.types.CBufRet.i32 %46, 1
  %49 = extractvalue %dx.types.CBufRet.i32 %46, 2
  %50 = bitcast float %37 to i32
  %51 = bitcast float %41 to i32
  %52 = bitcast float %45 to i32
  %53 = sub i32 %50, %47
  %54 = sub i32 %51, %48
  %55 = sub i32 %52, %49
  %56 = sitofp i32 %53 to float
  %57 = sitofp i32 %54 to float
  %58 = sitofp i32 %55 to float
  %59 = fmul fast float %56, 0x3EE0000000000000
  %60 = fmul fast float %57, 0x3EE0000000000000
  %61 = fmul fast float %58, 0x3EE0000000000000
  %62 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %63 = extractvalue %dx.types.CBufRet.f32 %62, 0
  %64 = extractvalue %dx.types.CBufRet.f32 %62, 1
  %65 = extractvalue %dx.types.CBufRet.f32 %62, 2
  %66 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %67 = extractvalue %dx.types.CBufRet.f32 %66, 0
  %68 = extractvalue %dx.types.CBufRet.f32 %66, 1
  %69 = extractvalue %dx.types.CBufRet.f32 %66, 2
  %70 = fmul fast float %67, %31
  %71 = fmul fast float %68, %32
  %72 = fmul fast float %69, %33
  %73 = fadd fast float %70, %63
  %74 = fadd fast float %71, %64
  %75 = fadd fast float %72, %65
  %76 = call float @dx.op.dot4.f32(i32 56, float %23, float %24, float %25, float %26, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %77 = call float @dx.op.binary.f32(i32 35, float 0x3EE4F8B580000000, float %76)  ; FMax(a,b)
  %78 = fdiv fast float %23, %77
  %79 = fdiv fast float %24, %77
  %80 = fdiv fast float %25, %77
  %81 = fdiv fast float %26, %77
  %82 = mul i32 %27, %8
  %83 = add i32 %82, %7
  %84 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %83, i32 undef)  ; BufferLoad(srv,index,wot)
  %85 = extractvalue %dx.types.ResRet.i32 %84, 0
  %86 = extractvalue %dx.types.ResRet.i32 %84, 1
  %87 = extractvalue %dx.types.ResRet.i32 %84, 2
  %88 = extractvalue %dx.types.ResRet.i32 %84, 3
  %89 = bitcast i32 %85 to float
  %90 = bitcast i32 %86 to float
  %91 = bitcast i32 %87 to float
  %92 = bitcast i32 %88 to float
  %93 = add i32 %83, 16
  %94 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %93, i32 undef)  ; BufferLoad(srv,index,wot)
  %95 = extractvalue %dx.types.ResRet.i32 %94, 0
  %96 = extractvalue %dx.types.ResRet.i32 %94, 1
  %97 = extractvalue %dx.types.ResRet.i32 %94, 2
  %98 = extractvalue %dx.types.ResRet.i32 %94, 3
  %99 = bitcast i32 %95 to float
  %100 = bitcast i32 %96 to float
  %101 = bitcast i32 %97 to float
  %102 = bitcast i32 %98 to float
  %103 = add i32 %83, 32
  %104 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %103, i32 undef)  ; BufferLoad(srv,index,wot)
  %105 = extractvalue %dx.types.ResRet.i32 %104, 0
  %106 = extractvalue %dx.types.ResRet.i32 %104, 1
  %107 = extractvalue %dx.types.ResRet.i32 %104, 2
  %108 = extractvalue %dx.types.ResRet.i32 %104, 3
  %109 = bitcast i32 %105 to float
  %110 = bitcast i32 %106 to float
  %111 = bitcast i32 %107 to float
  %112 = bitcast i32 %108 to float
  %113 = fmul fast float %89, %78
  %114 = fmul fast float %99, %78
  %115 = fmul fast float %109, %78
  %116 = fmul fast float %90, %78
  %117 = fmul fast float %100, %78
  %118 = fmul fast float %110, %78
  %119 = fmul fast float %91, %78
  %120 = fmul fast float %101, %78
  %121 = fmul fast float %111, %78
  %122 = fmul fast float %92, %78
  %123 = fmul fast float %102, %78
  %124 = fmul fast float %112, %78
  %125 = mul i32 %28, %8
  %126 = add i32 %125, %7
  %127 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %126, i32 undef)  ; BufferLoad(srv,index,wot)
  %128 = extractvalue %dx.types.ResRet.i32 %127, 0
  %129 = extractvalue %dx.types.ResRet.i32 %127, 1
  %130 = extractvalue %dx.types.ResRet.i32 %127, 2
  %131 = extractvalue %dx.types.ResRet.i32 %127, 3
  %132 = bitcast i32 %128 to float
  %133 = bitcast i32 %129 to float
  %134 = bitcast i32 %130 to float
  %135 = bitcast i32 %131 to float
  %136 = add i32 %126, 16
  %137 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %136, i32 undef)  ; BufferLoad(srv,index,wot)
  %138 = extractvalue %dx.types.ResRet.i32 %137, 0
  %139 = extractvalue %dx.types.ResRet.i32 %137, 1
  %140 = extractvalue %dx.types.ResRet.i32 %137, 2
  %141 = extractvalue %dx.types.ResRet.i32 %137, 3
  %142 = bitcast i32 %138 to float
  %143 = bitcast i32 %139 to float
  %144 = bitcast i32 %140 to float
  %145 = bitcast i32 %141 to float
  %146 = add i32 %126, 32
  %147 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %146, i32 undef)  ; BufferLoad(srv,index,wot)
  %148 = extractvalue %dx.types.ResRet.i32 %147, 0
  %149 = extractvalue %dx.types.ResRet.i32 %147, 1
  %150 = extractvalue %dx.types.ResRet.i32 %147, 2
  %151 = extractvalue %dx.types.ResRet.i32 %147, 3
  %152 = bitcast i32 %148 to float
  %153 = bitcast i32 %149 to float
  %154 = bitcast i32 %150 to float
  %155 = bitcast i32 %151 to float
  %156 = fmul fast float %132, %79
  %157 = fmul fast float %142, %79
  %158 = fmul fast float %152, %79
  %159 = fmul fast float %133, %79
  %160 = fmul fast float %143, %79
  %161 = fmul fast float %153, %79
  %162 = fmul fast float %134, %79
  %163 = fmul fast float %144, %79
  %164 = fmul fast float %154, %79
  %165 = fmul fast float %135, %79
  %166 = fmul fast float %145, %79
  %167 = fmul fast float %155, %79
  %168 = fadd fast float %156, %113
  %169 = fadd fast float %157, %114
  %170 = fadd fast float %158, %115
  %171 = fadd fast float %159, %116
  %172 = fadd fast float %160, %117
  %173 = fadd fast float %161, %118
  %174 = fadd fast float %162, %119
  %175 = fadd fast float %163, %120
  %176 = fadd fast float %164, %121
  %177 = fadd fast float %165, %122
  %178 = fadd fast float %166, %123
  %179 = fadd fast float %167, %124
  %180 = mul i32 %29, %8
  %181 = add i32 %180, %7
  %182 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %181, i32 undef)  ; BufferLoad(srv,index,wot)
  %183 = extractvalue %dx.types.ResRet.i32 %182, 0
  %184 = extractvalue %dx.types.ResRet.i32 %182, 1
  %185 = extractvalue %dx.types.ResRet.i32 %182, 2
  %186 = extractvalue %dx.types.ResRet.i32 %182, 3
  %187 = bitcast i32 %183 to float
  %188 = bitcast i32 %184 to float
  %189 = bitcast i32 %185 to float
  %190 = bitcast i32 %186 to float
  %191 = add i32 %181, 16
  %192 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %191, i32 undef)  ; BufferLoad(srv,index,wot)
  %193 = extractvalue %dx.types.ResRet.i32 %192, 0
  %194 = extractvalue %dx.types.ResRet.i32 %192, 1
  %195 = extractvalue %dx.types.ResRet.i32 %192, 2
  %196 = extractvalue %dx.types.ResRet.i32 %192, 3
  %197 = bitcast i32 %193 to float
  %198 = bitcast i32 %194 to float
  %199 = bitcast i32 %195 to float
  %200 = bitcast i32 %196 to float
  %201 = add i32 %181, 32
  %202 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %201, i32 undef)  ; BufferLoad(srv,index,wot)
  %203 = extractvalue %dx.types.ResRet.i32 %202, 0
  %204 = extractvalue %dx.types.ResRet.i32 %202, 1
  %205 = extractvalue %dx.types.ResRet.i32 %202, 2
  %206 = extractvalue %dx.types.ResRet.i32 %202, 3
  %207 = bitcast i32 %203 to float
  %208 = bitcast i32 %204 to float
  %209 = bitcast i32 %205 to float
  %210 = bitcast i32 %206 to float
  %211 = fmul fast float %187, %80
  %212 = fmul fast float %197, %80
  %213 = fmul fast float %207, %80
  %214 = fmul fast float %188, %80
  %215 = fmul fast float %198, %80
  %216 = fmul fast float %208, %80
  %217 = fmul fast float %189, %80
  %218 = fmul fast float %199, %80
  %219 = fmul fast float %209, %80
  %220 = fmul fast float %190, %80
  %221 = fmul fast float %200, %80
  %222 = fmul fast float %210, %80
  %223 = fadd fast float %168, %211
  %224 = fadd fast float %169, %212
  %225 = fadd fast float %170, %213
  %226 = fadd fast float %171, %214
  %227 = fadd fast float %172, %215
  %228 = fadd fast float %173, %216
  %229 = fadd fast float %174, %217
  %230 = fadd fast float %175, %218
  %231 = fadd fast float %176, %219
  %232 = fadd fast float %177, %220
  %233 = fadd fast float %178, %221
  %234 = fadd fast float %179, %222
  %235 = mul i32 %30, %8
  %236 = add i32 %235, %7
  %237 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %236, i32 undef)  ; BufferLoad(srv,index,wot)
  %238 = extractvalue %dx.types.ResRet.i32 %237, 0
  %239 = extractvalue %dx.types.ResRet.i32 %237, 1
  %240 = extractvalue %dx.types.ResRet.i32 %237, 2
  %241 = extractvalue %dx.types.ResRet.i32 %237, 3
  %242 = bitcast i32 %238 to float
  %243 = bitcast i32 %239 to float
  %244 = bitcast i32 %240 to float
  %245 = bitcast i32 %241 to float
  %246 = add i32 %236, 16
  %247 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %246, i32 undef)  ; BufferLoad(srv,index,wot)
  %248 = extractvalue %dx.types.ResRet.i32 %247, 0
  %249 = extractvalue %dx.types.ResRet.i32 %247, 1
  %250 = extractvalue %dx.types.ResRet.i32 %247, 2
  %251 = extractvalue %dx.types.ResRet.i32 %247, 3
  %252 = bitcast i32 %248 to float
  %253 = bitcast i32 %249 to float
  %254 = bitcast i32 %250 to float
  %255 = bitcast i32 %251 to float
  %256 = add i32 %236, 32
  %257 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %256, i32 undef)  ; BufferLoad(srv,index,wot)
  %258 = extractvalue %dx.types.ResRet.i32 %257, 0
  %259 = extractvalue %dx.types.ResRet.i32 %257, 1
  %260 = extractvalue %dx.types.ResRet.i32 %257, 2
  %261 = extractvalue %dx.types.ResRet.i32 %257, 3
  %262 = bitcast i32 %258 to float
  %263 = bitcast i32 %259 to float
  %264 = bitcast i32 %260 to float
  %265 = bitcast i32 %261 to float
  %266 = fmul fast float %242, %81
  %267 = fmul fast float %252, %81
  %268 = fmul fast float %262, %81
  %269 = fmul fast float %243, %81
  %270 = fmul fast float %253, %81
  %271 = fmul fast float %263, %81
  %272 = fmul fast float %244, %81
  %273 = fmul fast float %254, %81
  %274 = fmul fast float %264, %81
  %275 = fmul fast float %245, %81
  %276 = fmul fast float %255, %81
  %277 = fmul fast float %265, %81
  %278 = fadd fast float %223, %266
  %279 = fadd fast float %224, %267
  %280 = fadd fast float %225, %268
  %281 = fadd fast float %226, %269
  %282 = fadd fast float %227, %270
  %283 = fadd fast float %228, %271
  %284 = fadd fast float %229, %272
  %285 = fadd fast float %230, %273
  %286 = fadd fast float %231, %274
  %287 = fadd fast float %232, %275
  %288 = fadd fast float %233, %276
  %289 = fadd fast float %234, %277
  %290 = fmul fast float %278, %73
  %291 = call float @dx.op.tertiary.f32(i32 46, float %74, float %281, float %290)  ; FMad(a,b,c)
  %292 = call float @dx.op.tertiary.f32(i32 46, float %75, float %284, float %291)  ; FMad(a,b,c)
  %293 = fadd fast float %287, %292
  %294 = fmul fast float %279, %73
  %295 = call float @dx.op.tertiary.f32(i32 46, float %74, float %282, float %294)  ; FMad(a,b,c)
  %296 = call float @dx.op.tertiary.f32(i32 46, float %75, float %285, float %295)  ; FMad(a,b,c)
  %297 = fadd fast float %288, %296
  %298 = fmul fast float %280, %73
  %299 = call float @dx.op.tertiary.f32(i32 46, float %74, float %283, float %298)  ; FMad(a,b,c)
  %300 = call float @dx.op.tertiary.f32(i32 46, float %75, float %286, float %299)  ; FMad(a,b,c)
  %301 = fadd fast float %289, %300
  %302 = fmul fast float %293, %34
  %303 = call float @dx.op.tertiary.f32(i32 46, float %297, float %35, float %302)  ; FMad(a,b,c)
  %304 = call float @dx.op.tertiary.f32(i32 46, float %301, float %36, float %303)  ; FMad(a,b,c)
  %305 = fadd fast float %304, %59
  %306 = fmul fast float %293, %38
  %307 = call float @dx.op.tertiary.f32(i32 46, float %297, float %39, float %306)  ; FMad(a,b,c)
  %308 = call float @dx.op.tertiary.f32(i32 46, float %301, float %40, float %307)  ; FMad(a,b,c)
  %309 = fadd fast float %308, %60
  %310 = fmul fast float %293, %42
  %311 = call float @dx.op.tertiary.f32(i32 46, float %297, float %43, float %310)  ; FMad(a,b,c)
  %312 = call float @dx.op.tertiary.f32(i32 46, float %301, float %44, float %311)  ; FMad(a,b,c)
  %313 = fadd fast float %312, %61
  %314 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %315 = extractvalue %dx.types.CBufRet.f32 %314, 0
  %316 = extractvalue %dx.types.CBufRet.f32 %314, 1
  %317 = extractvalue %dx.types.CBufRet.f32 %314, 2
  %318 = extractvalue %dx.types.CBufRet.f32 %314, 3
  %319 = fmul fast float %315, %305
  %320 = call float @dx.op.tertiary.f32(i32 46, float %309, float %316, float %319)  ; FMad(a,b,c)
  %321 = call float @dx.op.tertiary.f32(i32 46, float %313, float %317, float %320)  ; FMad(a,b,c)
  %322 = fadd fast float %321, %318
  %323 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 37)  ; CBufferLoadLegacy(handle,regIndex)
  %324 = extractvalue %dx.types.CBufRet.f32 %323, 0
  %325 = extractvalue %dx.types.CBufRet.f32 %323, 1
  %326 = extractvalue %dx.types.CBufRet.f32 %323, 2
  %327 = fadd fast float %324, %305
  %328 = fadd fast float %325, %309
  %329 = fadd fast float %326, %313
  %330 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %331 = extractvalue %dx.types.CBufRet.f32 %330, 0
  %332 = extractvalue %dx.types.CBufRet.f32 %330, 1
  %333 = extractvalue %dx.types.CBufRet.f32 %330, 2
  %334 = extractvalue %dx.types.CBufRet.f32 %330, 3
  %335 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %336 = extractvalue %dx.types.CBufRet.f32 %335, 0
  %337 = extractvalue %dx.types.CBufRet.f32 %335, 1
  %338 = extractvalue %dx.types.CBufRet.f32 %335, 2
  %339 = extractvalue %dx.types.CBufRet.f32 %335, 3
  %340 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %341 = extractvalue %dx.types.CBufRet.f32 %340, 0
  %342 = extractvalue %dx.types.CBufRet.f32 %340, 1
  %343 = extractvalue %dx.types.CBufRet.f32 %340, 2
  %344 = extractvalue %dx.types.CBufRet.f32 %340, 3
  %345 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %346 = extractvalue %dx.types.CBufRet.f32 %345, 0
  %347 = extractvalue %dx.types.CBufRet.f32 %345, 1
  %348 = extractvalue %dx.types.CBufRet.f32 %345, 2
  %349 = extractvalue %dx.types.CBufRet.f32 %345, 3
  %350 = fmul fast float %331, %305
  %351 = call float @dx.op.tertiary.f32(i32 46, float %309, float %332, float %350)  ; FMad(a,b,c)
  %352 = call float @dx.op.tertiary.f32(i32 46, float %313, float %333, float %351)  ; FMad(a,b,c)
  %353 = fadd fast float %352, %334
  %354 = fmul fast float %336, %305
  %355 = call float @dx.op.tertiary.f32(i32 46, float %309, float %337, float %354)  ; FMad(a,b,c)
  %356 = call float @dx.op.tertiary.f32(i32 46, float %313, float %338, float %355)  ; FMad(a,b,c)
  %357 = fadd fast float %356, %339
  %358 = fmul fast float %341, %305
  %359 = call float @dx.op.tertiary.f32(i32 46, float %309, float %342, float %358)  ; FMad(a,b,c)
  %360 = call float @dx.op.tertiary.f32(i32 46, float %313, float %343, float %359)  ; FMad(a,b,c)
  %361 = fadd fast float %360, %344
  %362 = fmul fast float %346, %305
  %363 = call float @dx.op.tertiary.f32(i32 46, float %309, float %347, float %362)  ; FMad(a,b,c)
  %364 = call float @dx.op.tertiary.f32(i32 46, float %313, float %348, float %363)  ; FMad(a,b,c)
  %365 = fadd fast float %364, %349
  %366 = add i32 %82, %9
  %367 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %366, i32 undef)  ; BufferLoad(srv,index,wot)
  %368 = extractvalue %dx.types.ResRet.i32 %367, 0
  %369 = extractvalue %dx.types.ResRet.i32 %367, 1
  %370 = extractvalue %dx.types.ResRet.i32 %367, 2
  %371 = extractvalue %dx.types.ResRet.i32 %367, 3
  %372 = bitcast i32 %368 to float
  %373 = bitcast i32 %369 to float
  %374 = bitcast i32 %370 to float
  %375 = bitcast i32 %371 to float
  %376 = add i32 %366, 16
  %377 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %376, i32 undef)  ; BufferLoad(srv,index,wot)
  %378 = extractvalue %dx.types.ResRet.i32 %377, 0
  %379 = extractvalue %dx.types.ResRet.i32 %377, 1
  %380 = extractvalue %dx.types.ResRet.i32 %377, 2
  %381 = extractvalue %dx.types.ResRet.i32 %377, 3
  %382 = bitcast i32 %378 to float
  %383 = bitcast i32 %379 to float
  %384 = bitcast i32 %380 to float
  %385 = bitcast i32 %381 to float
  %386 = add i32 %366, 32
  %387 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %386, i32 undef)  ; BufferLoad(srv,index,wot)
  %388 = extractvalue %dx.types.ResRet.i32 %387, 0
  %389 = extractvalue %dx.types.ResRet.i32 %387, 1
  %390 = extractvalue %dx.types.ResRet.i32 %387, 2
  %391 = extractvalue %dx.types.ResRet.i32 %387, 3
  %392 = bitcast i32 %388 to float
  %393 = bitcast i32 %389 to float
  %394 = bitcast i32 %390 to float
  %395 = bitcast i32 %391 to float
  %396 = fmul fast float %372, %78
  %397 = fmul fast float %382, %78
  %398 = fmul fast float %392, %78
  %399 = fmul fast float %373, %78
  %400 = fmul fast float %383, %78
  %401 = fmul fast float %393, %78
  %402 = fmul fast float %374, %78
  %403 = fmul fast float %384, %78
  %404 = fmul fast float %394, %78
  %405 = fmul fast float %375, %78
  %406 = fmul fast float %385, %78
  %407 = fmul fast float %395, %78
  %408 = add i32 %125, %9
  %409 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %408, i32 undef)  ; BufferLoad(srv,index,wot)
  %410 = extractvalue %dx.types.ResRet.i32 %409, 0
  %411 = extractvalue %dx.types.ResRet.i32 %409, 1
  %412 = extractvalue %dx.types.ResRet.i32 %409, 2
  %413 = extractvalue %dx.types.ResRet.i32 %409, 3
  %414 = bitcast i32 %410 to float
  %415 = bitcast i32 %411 to float
  %416 = bitcast i32 %412 to float
  %417 = bitcast i32 %413 to float
  %418 = add i32 %408, 16
  %419 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %418, i32 undef)  ; BufferLoad(srv,index,wot)
  %420 = extractvalue %dx.types.ResRet.i32 %419, 0
  %421 = extractvalue %dx.types.ResRet.i32 %419, 1
  %422 = extractvalue %dx.types.ResRet.i32 %419, 2
  %423 = extractvalue %dx.types.ResRet.i32 %419, 3
  %424 = bitcast i32 %420 to float
  %425 = bitcast i32 %421 to float
  %426 = bitcast i32 %422 to float
  %427 = bitcast i32 %423 to float
  %428 = add i32 %408, 32
  %429 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %428, i32 undef)  ; BufferLoad(srv,index,wot)
  %430 = extractvalue %dx.types.ResRet.i32 %429, 0
  %431 = extractvalue %dx.types.ResRet.i32 %429, 1
  %432 = extractvalue %dx.types.ResRet.i32 %429, 2
  %433 = extractvalue %dx.types.ResRet.i32 %429, 3
  %434 = bitcast i32 %430 to float
  %435 = bitcast i32 %431 to float
  %436 = bitcast i32 %432 to float
  %437 = bitcast i32 %433 to float
  %438 = fmul fast float %414, %79
  %439 = fmul fast float %424, %79
  %440 = fmul fast float %434, %79
  %441 = fmul fast float %415, %79
  %442 = fmul fast float %425, %79
  %443 = fmul fast float %435, %79
  %444 = fmul fast float %416, %79
  %445 = fmul fast float %426, %79
  %446 = fmul fast float %436, %79
  %447 = fmul fast float %417, %79
  %448 = fmul fast float %427, %79
  %449 = fmul fast float %437, %79
  %450 = fadd fast float %438, %396
  %451 = fadd fast float %439, %397
  %452 = fadd fast float %440, %398
  %453 = fadd fast float %441, %399
  %454 = fadd fast float %442, %400
  %455 = fadd fast float %443, %401
  %456 = fadd fast float %444, %402
  %457 = fadd fast float %445, %403
  %458 = fadd fast float %446, %404
  %459 = fadd fast float %447, %405
  %460 = fadd fast float %448, %406
  %461 = fadd fast float %449, %407
  %462 = add i32 %180, %9
  %463 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %462, i32 undef)  ; BufferLoad(srv,index,wot)
  %464 = extractvalue %dx.types.ResRet.i32 %463, 0
  %465 = extractvalue %dx.types.ResRet.i32 %463, 1
  %466 = extractvalue %dx.types.ResRet.i32 %463, 2
  %467 = extractvalue %dx.types.ResRet.i32 %463, 3
  %468 = bitcast i32 %464 to float
  %469 = bitcast i32 %465 to float
  %470 = bitcast i32 %466 to float
  %471 = bitcast i32 %467 to float
  %472 = add i32 %462, 16
  %473 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %472, i32 undef)  ; BufferLoad(srv,index,wot)
  %474 = extractvalue %dx.types.ResRet.i32 %473, 0
  %475 = extractvalue %dx.types.ResRet.i32 %473, 1
  %476 = extractvalue %dx.types.ResRet.i32 %473, 2
  %477 = extractvalue %dx.types.ResRet.i32 %473, 3
  %478 = bitcast i32 %474 to float
  %479 = bitcast i32 %475 to float
  %480 = bitcast i32 %476 to float
  %481 = bitcast i32 %477 to float
  %482 = add i32 %462, 32
  %483 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %482, i32 undef)  ; BufferLoad(srv,index,wot)
  %484 = extractvalue %dx.types.ResRet.i32 %483, 0
  %485 = extractvalue %dx.types.ResRet.i32 %483, 1
  %486 = extractvalue %dx.types.ResRet.i32 %483, 2
  %487 = extractvalue %dx.types.ResRet.i32 %483, 3
  %488 = bitcast i32 %484 to float
  %489 = bitcast i32 %485 to float
  %490 = bitcast i32 %486 to float
  %491 = bitcast i32 %487 to float
  %492 = fmul fast float %468, %80
  %493 = fmul fast float %478, %80
  %494 = fmul fast float %488, %80
  %495 = fmul fast float %469, %80
  %496 = fmul fast float %479, %80
  %497 = fmul fast float %489, %80
  %498 = fmul fast float %470, %80
  %499 = fmul fast float %480, %80
  %500 = fmul fast float %490, %80
  %501 = fmul fast float %471, %80
  %502 = fmul fast float %481, %80
  %503 = fmul fast float %491, %80
  %504 = fadd fast float %450, %492
  %505 = fadd fast float %451, %493
  %506 = fadd fast float %452, %494
  %507 = fadd fast float %453, %495
  %508 = fadd fast float %454, %496
  %509 = fadd fast float %455, %497
  %510 = fadd fast float %456, %498
  %511 = fadd fast float %457, %499
  %512 = fadd fast float %458, %500
  %513 = fadd fast float %459, %501
  %514 = fadd fast float %460, %502
  %515 = fadd fast float %461, %503
  %516 = add i32 %235, %9
  %517 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %516, i32 undef)  ; BufferLoad(srv,index,wot)
  %518 = extractvalue %dx.types.ResRet.i32 %517, 0
  %519 = extractvalue %dx.types.ResRet.i32 %517, 1
  %520 = extractvalue %dx.types.ResRet.i32 %517, 2
  %521 = extractvalue %dx.types.ResRet.i32 %517, 3
  %522 = bitcast i32 %518 to float
  %523 = bitcast i32 %519 to float
  %524 = bitcast i32 %520 to float
  %525 = bitcast i32 %521 to float
  %526 = add i32 %516, 16
  %527 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %526, i32 undef)  ; BufferLoad(srv,index,wot)
  %528 = extractvalue %dx.types.ResRet.i32 %527, 0
  %529 = extractvalue %dx.types.ResRet.i32 %527, 1
  %530 = extractvalue %dx.types.ResRet.i32 %527, 2
  %531 = extractvalue %dx.types.ResRet.i32 %527, 3
  %532 = bitcast i32 %528 to float
  %533 = bitcast i32 %529 to float
  %534 = bitcast i32 %530 to float
  %535 = bitcast i32 %531 to float
  %536 = add i32 %516, 32
  %537 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %536, i32 undef)  ; BufferLoad(srv,index,wot)
  %538 = extractvalue %dx.types.ResRet.i32 %537, 0
  %539 = extractvalue %dx.types.ResRet.i32 %537, 1
  %540 = extractvalue %dx.types.ResRet.i32 %537, 2
  %541 = extractvalue %dx.types.ResRet.i32 %537, 3
  %542 = bitcast i32 %538 to float
  %543 = bitcast i32 %539 to float
  %544 = bitcast i32 %540 to float
  %545 = bitcast i32 %541 to float
  %546 = fmul fast float %522, %81
  %547 = fmul fast float %532, %81
  %548 = fmul fast float %542, %81
  %549 = fmul fast float %523, %81
  %550 = fmul fast float %533, %81
  %551 = fmul fast float %543, %81
  %552 = fmul fast float %524, %81
  %553 = fmul fast float %534, %81
  %554 = fmul fast float %544, %81
  %555 = fmul fast float %525, %81
  %556 = fmul fast float %535, %81
  %557 = fmul fast float %545, %81
  %558 = fadd fast float %504, %546
  %559 = fadd fast float %505, %547
  %560 = fadd fast float %506, %548
  %561 = fadd fast float %507, %549
  %562 = fadd fast float %508, %550
  %563 = fadd fast float %509, %551
  %564 = fadd fast float %510, %552
  %565 = fadd fast float %511, %553
  %566 = fadd fast float %512, %554
  %567 = fadd fast float %513, %555
  %568 = fadd fast float %514, %556
  %569 = fadd fast float %515, %557
  %570 = fmul fast float %558, %73
  %571 = call float @dx.op.tertiary.f32(i32 46, float %74, float %561, float %570)  ; FMad(a,b,c)
  %572 = call float @dx.op.tertiary.f32(i32 46, float %75, float %564, float %571)  ; FMad(a,b,c)
  %573 = fadd fast float %567, %572
  %574 = fmul fast float %559, %73
  %575 = call float @dx.op.tertiary.f32(i32 46, float %74, float %562, float %574)  ; FMad(a,b,c)
  %576 = call float @dx.op.tertiary.f32(i32 46, float %75, float %565, float %575)  ; FMad(a,b,c)
  %577 = fadd fast float %568, %576
  %578 = fmul fast float %560, %73
  %579 = call float @dx.op.tertiary.f32(i32 46, float %74, float %563, float %578)  ; FMad(a,b,c)
  %580 = call float @dx.op.tertiary.f32(i32 46, float %75, float %566, float %579)  ; FMad(a,b,c)
  %581 = fadd fast float %569, %580
  %582 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %583 = extractvalue %dx.types.CBufRet.f32 %582, 0
  %584 = extractvalue %dx.types.CBufRet.f32 %582, 1
  %585 = extractvalue %dx.types.CBufRet.f32 %582, 2
  %586 = extractvalue %dx.types.CBufRet.f32 %582, 3
  %587 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %588 = extractvalue %dx.types.CBufRet.f32 %587, 0
  %589 = extractvalue %dx.types.CBufRet.f32 %587, 1
  %590 = extractvalue %dx.types.CBufRet.f32 %587, 2
  %591 = extractvalue %dx.types.CBufRet.f32 %587, 3
  %592 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %593 = extractvalue %dx.types.CBufRet.f32 %592, 0
  %594 = extractvalue %dx.types.CBufRet.f32 %592, 1
  %595 = extractvalue %dx.types.CBufRet.f32 %592, 2
  %596 = extractvalue %dx.types.CBufRet.f32 %592, 3
  %597 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %598 = extractvalue %dx.types.CBufRet.i32 %597, 0
  %599 = extractvalue %dx.types.CBufRet.i32 %597, 1
  %600 = extractvalue %dx.types.CBufRet.i32 %597, 2
  %601 = bitcast float %586 to i32
  %602 = bitcast float %591 to i32
  %603 = bitcast float %596 to i32
  %604 = sub i32 %601, %598
  %605 = sub i32 %602, %599
  %606 = sub i32 %603, %600
  %607 = sitofp i32 %604 to float
  %608 = sitofp i32 %605 to float
  %609 = sitofp i32 %606 to float
  %610 = fmul fast float %607, 0x3EE0000000000000
  %611 = fmul fast float %608, 0x3EE0000000000000
  %612 = fmul fast float %609, 0x3EE0000000000000
  %613 = fmul fast float %583, %573
  %614 = call float @dx.op.tertiary.f32(i32 46, float %584, float %577, float %613)  ; FMad(a,b,c)
  %615 = call float @dx.op.tertiary.f32(i32 46, float %585, float %581, float %614)  ; FMad(a,b,c)
  %616 = fadd fast float %610, %615
  %617 = fmul fast float %588, %573
  %618 = call float @dx.op.tertiary.f32(i32 46, float %589, float %577, float %617)  ; FMad(a,b,c)
  %619 = call float @dx.op.tertiary.f32(i32 46, float %590, float %581, float %618)  ; FMad(a,b,c)
  %620 = fadd fast float %611, %619
  %621 = fmul fast float %593, %573
  %622 = call float @dx.op.tertiary.f32(i32 46, float %594, float %577, float %621)  ; FMad(a,b,c)
  %623 = call float @dx.op.tertiary.f32(i32 46, float %595, float %581, float %622)  ; FMad(a,b,c)
  %624 = fadd fast float %623, %612
  %625 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %626 = extractvalue %dx.types.CBufRet.f32 %625, 0
  %627 = extractvalue %dx.types.CBufRet.f32 %625, 1
  %628 = extractvalue %dx.types.CBufRet.f32 %625, 2
  %629 = extractvalue %dx.types.CBufRet.f32 %625, 3
  %630 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %631 = extractvalue %dx.types.CBufRet.f32 %630, 0
  %632 = extractvalue %dx.types.CBufRet.f32 %630, 1
  %633 = extractvalue %dx.types.CBufRet.f32 %630, 2
  %634 = extractvalue %dx.types.CBufRet.f32 %630, 3
  %635 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 18)  ; CBufferLoadLegacy(handle,regIndex)
  %636 = extractvalue %dx.types.CBufRet.f32 %635, 0
  %637 = extractvalue %dx.types.CBufRet.f32 %635, 1
  %638 = extractvalue %dx.types.CBufRet.f32 %635, 2
  %639 = extractvalue %dx.types.CBufRet.f32 %635, 3
  %640 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %641 = extractvalue %dx.types.CBufRet.f32 %640, 0
  %642 = extractvalue %dx.types.CBufRet.f32 %640, 1
  %643 = extractvalue %dx.types.CBufRet.f32 %640, 2
  %644 = extractvalue %dx.types.CBufRet.f32 %640, 3
  %645 = fmul fast float %626, %616
  %646 = call float @dx.op.tertiary.f32(i32 46, float %620, float %627, float %645)  ; FMad(a,b,c)
  %647 = call float @dx.op.tertiary.f32(i32 46, float %624, float %628, float %646)  ; FMad(a,b,c)
  %648 = fadd fast float %647, %629
  %649 = fmul fast float %631, %616
  %650 = call float @dx.op.tertiary.f32(i32 46, float %620, float %632, float %649)  ; FMad(a,b,c)
  %651 = call float @dx.op.tertiary.f32(i32 46, float %624, float %633, float %650)  ; FMad(a,b,c)
  %652 = fadd fast float %651, %634
  %653 = fmul fast float %636, %616
  %654 = call float @dx.op.tertiary.f32(i32 46, float %620, float %637, float %653)  ; FMad(a,b,c)
  %655 = call float @dx.op.tertiary.f32(i32 46, float %624, float %638, float %654)  ; FMad(a,b,c)
  %656 = fadd fast float %655, %639
  %657 = fmul fast float %641, %616
  %658 = call float @dx.op.tertiary.f32(i32 46, float %620, float %642, float %657)  ; FMad(a,b,c)
  %659 = call float @dx.op.tertiary.f32(i32 46, float %624, float %643, float %658)  ; FMad(a,b,c)
  %660 = fadd fast float %659, %644
  %661 = fmul fast float %278, %34
  %662 = call float @dx.op.tertiary.f32(i32 46, float %279, float %35, float %661)  ; FMad(a,b,c)
  %663 = call float @dx.op.tertiary.f32(i32 46, float %280, float %36, float %662)  ; FMad(a,b,c)
  %664 = fmul fast float %278, %38
  %665 = call float @dx.op.tertiary.f32(i32 46, float %279, float %39, float %664)  ; FMad(a,b,c)
  %666 = call float @dx.op.tertiary.f32(i32 46, float %280, float %40, float %665)  ; FMad(a,b,c)
  %667 = fmul fast float %278, %42
  %668 = call float @dx.op.tertiary.f32(i32 46, float %279, float %43, float %667)  ; FMad(a,b,c)
  %669 = call float @dx.op.tertiary.f32(i32 46, float %280, float %44, float %668)  ; FMad(a,b,c)
  %670 = fmul fast float %281, %34
  %671 = call float @dx.op.tertiary.f32(i32 46, float %282, float %35, float %670)  ; FMad(a,b,c)
  %672 = call float @dx.op.tertiary.f32(i32 46, float %283, float %36, float %671)  ; FMad(a,b,c)
  %673 = fmul fast float %281, %38
  %674 = call float @dx.op.tertiary.f32(i32 46, float %282, float %39, float %673)  ; FMad(a,b,c)
  %675 = call float @dx.op.tertiary.f32(i32 46, float %283, float %40, float %674)  ; FMad(a,b,c)
  %676 = fmul fast float %281, %42
  %677 = call float @dx.op.tertiary.f32(i32 46, float %282, float %43, float %676)  ; FMad(a,b,c)
  %678 = call float @dx.op.tertiary.f32(i32 46, float %283, float %44, float %677)  ; FMad(a,b,c)
  %679 = fmul fast float %284, %34
  %680 = call float @dx.op.tertiary.f32(i32 46, float %285, float %35, float %679)  ; FMad(a,b,c)
  %681 = call float @dx.op.tertiary.f32(i32 46, float %286, float %36, float %680)  ; FMad(a,b,c)
  %682 = fmul fast float %284, %38
  %683 = call float @dx.op.tertiary.f32(i32 46, float %285, float %39, float %682)  ; FMad(a,b,c)
  %684 = call float @dx.op.tertiary.f32(i32 46, float %286, float %40, float %683)  ; FMad(a,b,c)
  %685 = fmul fast float %284, %42
  %686 = call float @dx.op.tertiary.f32(i32 46, float %285, float %43, float %685)  ; FMad(a,b,c)
  %687 = call float @dx.op.tertiary.f32(i32 46, float %286, float %44, float %686)  ; FMad(a,b,c)
  %688 = fmul fast float %18, 2.000000e+00
  %689 = fmul fast float %19, 2.000000e+00
  %690 = fmul fast float %20, 2.000000e+00
  %691 = fadd fast float %688, -1.000000e+00
  %692 = fadd fast float %689, -1.000000e+00
  %693 = fadd fast float %690, -1.000000e+00
  %694 = fmul fast float %14, 2.000000e+00
  %695 = fmul fast float %15, 2.000000e+00
  %696 = fmul fast float %16, 2.000000e+00
  %697 = fadd fast float %694, -1.000000e+00
  %698 = fadd fast float %695, -1.000000e+00
  %699 = fadd fast float %696, -1.000000e+00
  %700 = fmul fast float %17, 2.000000e+00
  %701 = fadd fast float %700, -1.000000e+00
  %702 = fmul fast float %692, %699
  %703 = fmul fast float %693, %698
  %704 = fsub fast float %702, %703
  %705 = fmul fast float %693, %697
  %706 = fmul fast float %691, %699
  %707 = fsub fast float %705, %706
  %708 = fmul fast float %691, %698
  %709 = fmul fast float %692, %697
  %710 = fsub fast float %708, %709
  %711 = fmul fast float %704, %701
  %712 = fmul fast float %707, %701
  %713 = fmul fast float %710, %701
  %714 = fmul fast float %663, %697
  %715 = call float @dx.op.tertiary.f32(i32 46, float %698, float %672, float %714)  ; FMad(a,b,c)
  %716 = call float @dx.op.tertiary.f32(i32 46, float %699, float %681, float %715)  ; FMad(a,b,c)
  %717 = fmul fast float %666, %697
  %718 = call float @dx.op.tertiary.f32(i32 46, float %698, float %675, float %717)  ; FMad(a,b,c)
  %719 = call float @dx.op.tertiary.f32(i32 46, float %699, float %684, float %718)  ; FMad(a,b,c)
  %720 = fmul fast float %669, %697
  %721 = call float @dx.op.tertiary.f32(i32 46, float %698, float %678, float %720)  ; FMad(a,b,c)
  %722 = call float @dx.op.tertiary.f32(i32 46, float %699, float %687, float %721)  ; FMad(a,b,c)
  %723 = fmul fast float %663, %711
  %724 = call float @dx.op.tertiary.f32(i32 46, float %712, float %672, float %723)  ; FMad(a,b,c)
  %725 = call float @dx.op.tertiary.f32(i32 46, float %713, float %681, float %724)  ; FMad(a,b,c)
  %726 = fmul fast float %666, %711
  %727 = call float @dx.op.tertiary.f32(i32 46, float %712, float %675, float %726)  ; FMad(a,b,c)
  %728 = call float @dx.op.tertiary.f32(i32 46, float %713, float %684, float %727)  ; FMad(a,b,c)
  %729 = fmul fast float %669, %711
  %730 = call float @dx.op.tertiary.f32(i32 46, float %712, float %678, float %729)  ; FMad(a,b,c)
  %731 = call float @dx.op.tertiary.f32(i32 46, float %713, float %687, float %730)  ; FMad(a,b,c)
  %732 = fmul fast float %663, %691
  %733 = call float @dx.op.tertiary.f32(i32 46, float %692, float %672, float %732)  ; FMad(a,b,c)
  %734 = call float @dx.op.tertiary.f32(i32 46, float %693, float %681, float %733)  ; FMad(a,b,c)
  %735 = fmul fast float %666, %691
  %736 = call float @dx.op.tertiary.f32(i32 46, float %692, float %675, float %735)  ; FMad(a,b,c)
  %737 = call float @dx.op.tertiary.f32(i32 46, float %693, float %684, float %736)  ; FMad(a,b,c)
  %738 = fmul fast float %669, %691
  %739 = call float @dx.op.tertiary.f32(i32 46, float %692, float %678, float %738)  ; FMad(a,b,c)
  %740 = call float @dx.op.tertiary.f32(i32 46, float %693, float %687, float %739)  ; FMad(a,b,c)
  %741 = call float @dx.op.dot3.f32(i32 55, float %734, float %737, float %740, float %734, float %737, float %740)  ; Dot3(ax,ay,az,bx,by,bz)
  %742 = call float @dx.op.unary.f32(i32 25, float %741)  ; Rsqrt(value)
  %743 = fmul fast float %742, %734
  %744 = fmul fast float %742, %737
  %745 = fmul fast float %742, %740
  %746 = call float @dx.op.dot3.f32(i32 55, float %725, float %728, float %731, float %725, float %728, float %731)  ; Dot3(ax,ay,az,bx,by,bz)
  %747 = call float @dx.op.unary.f32(i32 25, float %746)  ; Rsqrt(value)
  %748 = fmul fast float %747, %725
  %749 = fmul fast float %747, %728
  %750 = fmul fast float %747, %731
  %751 = call float @dx.op.dot3.f32(i32 55, float %716, float %719, float %722, float %716, float %719, float %722)  ; Dot3(ax,ay,az,bx,by,bz)
  %752 = call float @dx.op.unary.f32(i32 25, float %751)  ; Rsqrt(value)
  %753 = fmul fast float %752, %716
  %754 = fmul fast float %752, %719
  %755 = fmul fast float %752, %722
  %756 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %757 = extractvalue %dx.types.CBufRet.f32 %756, 1
  %758 = fptosi float %757 to i32
  %759 = icmp sgt i32 %758, 0
  br i1 %759, label %760, label %847

; <label>:760                                     ; preds = %0
  br label %761

; <label>:761                                     ; preds = %832, %760
  %762 = phi float [ %840, %832 ], [ 0.000000e+00, %760 ]
  %763 = phi float [ %843, %832 ], [ 0.000000e+00, %760 ]
  %764 = phi i32 [ %844, %832 ], [ 0, %760 ]
  %765 = mul i32 %764, 9
  %766 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 %765)  ; CBufferLoadLegacy(handle,regIndex)
  %767 = extractvalue %dx.types.CBufRet.i32 %766, 0
  %768 = icmp eq i32 %767, 0
  br i1 %768, label %832, label %769

; <label>:769                                     ; preds = %761
  br label %770

; <label>:770                                     ; preds = %823, %769
  %771 = phi float [ %826, %823 ], [ 0.000000e+00, %769 ]
  %772 = phi i32 [ %827, %823 ], [ 0, %769 ]
  %773 = add i32 %765, 5
  %774 = add i32 %773, %772
  %775 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 %774)  ; CBufferLoadLegacy(handle,regIndex)
  %776 = extractvalue %dx.types.CBufRet.f32 %775, 0
  %777 = extractvalue %dx.types.CBufRet.f32 %775, 1
  %778 = extractvalue %dx.types.CBufRet.f32 %775, 2
  %779 = extractvalue %dx.types.CBufRet.f32 %775, 3
  %780 = add i32 %765, 1
  %781 = add i32 %780, %772
  %782 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 %781)  ; CBufferLoadLegacy(handle,regIndex)
  %783 = extractvalue %dx.types.CBufRet.f32 %782, 0
  %784 = extractvalue %dx.types.CBufRet.f32 %782, 1
  %785 = extractvalue %dx.types.CBufRet.f32 %782, 2
  %786 = extractvalue %dx.types.CBufRet.f32 %782, 3
  %787 = fcmp fast olt float %21, %776
  %788 = fcmp fast ogt float %21, %778
  %789 = or i1 %787, %788
  br i1 %789, label %804, label %790

; <label>:790                                     ; preds = %770
  %791 = fcmp fast oge float %21, %783
  %792 = fcmp fast ole float %21, %785
  %793 = and i1 %791, %792
  br i1 %793, label %804, label %794

; <label>:794                                     ; preds = %790
  %795 = fcmp fast olt float %21, %783
  br i1 %795, label %796, label %800

; <label>:796                                     ; preds = %794
  %797 = fsub fast float %21, %776
  %798 = fsub fast float %783, %776
  %799 = fdiv fast float %797, %798
  br label %804

; <label>:800                                     ; preds = %794
  %801 = fsub fast float %778, %21
  %802 = fsub fast float %778, %785
  %803 = fdiv fast float %801, %802
  br label %804

; <label>:804                                     ; preds = %800, %796, %790, %770
  %805 = phi float [ 0.000000e+00, %770 ], [ %799, %796 ], [ %803, %800 ], [ 1.000000e+00, %790 ]
  %806 = fcmp fast olt float %22, %777
  %807 = fcmp fast ogt float %22, %779
  %808 = or i1 %806, %807
  br i1 %808, label %823, label %809

; <label>:809                                     ; preds = %804
  %810 = fcmp fast oge float %22, %784
  %811 = fcmp fast ole float %22, %786
  %812 = and i1 %810, %811
  br i1 %812, label %823, label %813

; <label>:813                                     ; preds = %809
  %814 = fcmp fast olt float %22, %784
  br i1 %814, label %815, label %819

; <label>:815                                     ; preds = %813
  %816 = fsub fast float %22, %777
  %817 = fsub fast float %784, %777
  %818 = fdiv fast float %816, %817
  br label %823

; <label>:819                                     ; preds = %813
  %820 = fsub fast float %779, %22
  %821 = fsub fast float %779, %786
  %822 = fdiv fast float %820, %821
  br label %823

; <label>:823                                     ; preds = %819, %815, %809, %804
  %824 = phi float [ 0.000000e+00, %804 ], [ %818, %815 ], [ %822, %819 ], [ 1.000000e+00, %809 ]
  %825 = fmul fast float %824, %805
  %826 = call float @dx.op.binary.f32(i32 35, float %771, float %825)  ; FMax(a,b)
  %827 = add i32 %772, 1
  %828 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 %765)  ; CBufferLoadLegacy(handle,regIndex)
  %829 = extractvalue %dx.types.CBufRet.i32 %828, 0
  %830 = icmp ult i32 %827, %829
  br i1 %830, label %770, label %831

; <label>:831                                     ; preds = %823
  br label %832

; <label>:832                                     ; preds = %831, %761
  %833 = phi float [ 0.000000e+00, %761 ], [ %826, %831 ]
  %834 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %764)  ; CBufferLoadLegacy(handle,regIndex)
  %835 = extractvalue %dx.types.CBufRet.f32 %834, 0
  %836 = fmul fast float %835, %833
  %837 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 %765)  ; CBufferLoadLegacy(handle,regIndex)
  %838 = extractvalue %dx.types.CBufRet.f32 %837, 1
  %839 = fmul fast float %836, %838
  %840 = fadd fast float %839, %762
  %841 = extractvalue %dx.types.CBufRet.f32 %837, 2
  %842 = fmul fast float %836, %841
  %843 = fadd fast float %842, %763
  %844 = add nuw nsw i32 %764, 1
  %845 = icmp eq i32 %844, %758
  br i1 %845, label %846, label %761

; <label>:846                                     ; preds = %832
  br label %847

; <label>:847                                     ; preds = %846, %0
  %848 = phi float [ 0.000000e+00, %0 ], [ %840, %846 ]
  %849 = phi float [ 0.000000e+00, %0 ], [ %843, %846 ]
  %850 = call float @dx.op.unary.f32(i32 7, float %848)  ; Saturate(value)
  %851 = call float @dx.op.unary.f32(i32 7, float %849)  ; Saturate(value)
  %852 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %853 = extractvalue %dx.types.CBufRet.f32 %852, 0
  %854 = extractvalue %dx.types.CBufRet.f32 %852, 1
  %855 = fmul fast float %853, %365
  %856 = fmul fast float %854, %365
  %857 = fsub fast float %353, %855
  %858 = fsub fast float %357, %856
  %859 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %860 = extractvalue %dx.types.CBufRet.f32 %859, 0
  %861 = extractvalue %dx.types.CBufRet.f32 %859, 1
  %862 = extractvalue %dx.types.CBufRet.f32 %859, 2
  %863 = extractvalue %dx.types.CBufRet.f32 %859, 3
  %864 = call float @dx.op.dot4.f32(i32 56, float %860, float %861, float %862, float %863, float %327, float %328, float %329, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %353)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %357)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %361)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %365)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %743)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %744)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %745)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %748)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %749)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %750)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %753)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float %754)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %755)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %21)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %22)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %327)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %328)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float %329)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float %10)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float %11)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 0, float %12)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 1, float %13)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 2, float %322)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 3, float %850)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 0, float %851)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 1, float %857)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 2, float %858)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 3, float %361)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 0, float %365)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 1, float %648)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 2, float %652)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 3, float %656)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 8, i32 0, i8 0, float %660)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 8, i32 0, i8 1, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 9, i32 0, i8 0, float %864)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!13}
!dx.entryPoints = !{!14}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{!5, null, !7, null}
!5 = !{!6}
!6 = !{i32 0, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 10, i32 1, i32 11, i32 0, null}
!7 = !{!8, !9, !10, !11, !12}
!8 = !{i32 0, %MaterialModifiersConsts* undef, !"", i32 0, i32 7, i32 1, i32 496, null}
!9 = !{i32 1, %hostlayout.CameraShaderConsts* undef, !"", i32 0, i32 1, i32 1, i32 848, null}
!10 = !{i32 2, %TextureRegionsCB* undef, !"", i32 0, i32 8, i32 1, i32 5760, null}
!11 = !{i32 3, %FloatTracksDataCB* undef, !"", i32 0, i32 9, i32 1, i32 640, null}
!12 = !{i32 4, %hostlayout.FrequentVertexConsts* undef, !"", i32 0, i32 5, i32 1, i32 112, null}
!13 = !{[100 x i32] [i32 49, i32 37, i32 -29130737, i32 17, i32 -29130737, i32 17, i32 -29130737, i32 17, i32 0, i32 0, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 25174016, i32 0, i32 25182208, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1008, i32 0, i32 1008, i32 0, i32 1008, i32 0, i32 0, i32 0, i32 8064, i32 0, i32 8064, i32 0, i32 8064, i32 0, i32 896, i32 0, i32 262144, i32 0, i32 524288, i32 0, i32 1048576, i32 0, i32 2097152, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 507551743, i32 16, i32 507551743, i32 16, i32 507551743, i32 16, i32 507543567, i32 16, i32 507584511, i32 16, i32 507584511, i32 16, i32 507584511, i32 16, i32 507576335, i32 16, i32 507650047, i32 16, i32 507650047, i32 16, i32 507650047, i32 16, i32 507641871, i32 16, i32 507748351, i32 16, i32 -29122561, i32 17, i32 -536870912, i32 1, i32 0, i32 0, i32 0, i32 0]}
!14 = !{void ()* @vs_main_, !"vs_main_", !15, !4, !52}
!15 = !{!16, !34, null}
!16 = !{!17, !20, !22, !23, !25, !26, !27, !28, !30, !32, !33}
!17 = !{i32 0, !"POSITION", i8 9, i8 0, !18, i8 0, i32 1, i8 3, i32 0, i8 0, !19}
!18 = !{i32 0}
!19 = !{i32 3, i32 7}
!20 = !{i32 1, !"BLENDINDICES", i8 5, i8 0, !18, i8 0, i32 1, i8 4, i32 1, i8 0, !21}
!21 = !{i32 3, i32 15}
!22 = !{i32 2, !"BLENDWEIGHT", i8 9, i8 0, !18, i8 0, i32 1, i8 4, i32 2, i8 0, !21}
!23 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !18, i8 0, i32 1, i8 2, i32 3, i8 0, !24}
!24 = !{i32 3, i32 3}
!25 = !{i32 4, !"NORMAL", i8 9, i8 0, !18, i8 0, i32 1, i8 3, i32 4, i8 0, !19}
!26 = !{i32 5, !"TANGENT", i8 9, i8 0, !18, i8 0, i32 1, i8 4, i32 5, i8 0, !21}
!27 = !{i32 6, !"COLOR", i8 9, i8 0, !18, i8 0, i32 1, i8 4, i32 6, i8 0, !21}
!28 = !{i32 7, !"TEXCOORD", i8 9, i8 0, !29, i8 0, i32 1, i8 2, i32 7, i8 0, null}
!29 = !{i32 1}
!30 = !{i32 8, !"INSTANCE_TRANSFORM", i8 9, i8 0, !31, i8 0, i32 3, i8 4, i32 8, i8 0, !21}
!31 = !{i32 0, i32 1, i32 2}
!32 = !{i32 9, !"INSTANCE_SKINNING_DATA", i8 5, i8 0, !18, i8 0, i32 1, i8 4, i32 11, i8 0, !19}
!33 = !{i32 10, !"SV_VertexID", i8 5, i8 1, !18, i8 0, i32 1, i8 1, i32 12, i8 0, null}
!34 = !{!35, !36, !37, !38, !40, !42, !44, !46, !48, !50}
!35 = !{i32 0, !"SV_Position", i8 9, i8 3, !18, i8 4, i32 1, i8 4, i32 0, i8 0, !21}
!36 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !18, i8 2, i32 1, i8 4, i32 1, i8 0, !21}
!37 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !29, i8 2, i32 1, i8 4, i32 2, i8 0, !21}
!38 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !39, i8 2, i32 1, i8 4, i32 3, i8 0, !21}
!39 = !{i32 2}
!40 = !{i32 4, !"TEXCOORD", i8 9, i8 0, !41, i8 2, i32 1, i8 4, i32 4, i8 0, !21}
!41 = !{i32 3}
!42 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !43, i8 2, i32 1, i8 4, i32 5, i8 0, !21}
!43 = !{i32 4}
!44 = !{i32 6, !"TEXCOORD", i8 9, i8 0, !45, i8 2, i32 1, i8 4, i32 6, i8 0, !21}
!45 = !{i32 5}
!46 = !{i32 7, !"TEXCOORD", i8 9, i8 0, !47, i8 2, i32 1, i8 4, i32 7, i8 0, !21}
!47 = !{i32 6}
!48 = !{i32 8, !"TEXCOORD", i8 9, i8 0, !49, i8 2, i32 1, i8 2, i32 8, i8 0, !24}
!49 = !{i32 7}
!50 = !{i32 9, !"SV_ClipDistance", i8 9, i8 6, !18, i8 2, i32 1, i8 1, i32 9, i8 0, !51}
!51 = !{i32 3, i32 1}
!52 = !{i32 0, i64 16}
 