;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; POSITION                 0   xyz         0     NONE   float   xyz 
; BLENDINDICES             0   xyzw        1     NONE    uint   xyzw
; BLENDWEIGHT              0   xyzw        2     NONE   float   xyzw
; BLENDINDICES             1   xyzw        3     NONE    uint   xyzw
; BLENDWEIGHT              1   xyzw        4     NONE   float   xyzw
; TEXCOORD                 0   xy          5     NONE   float   xy  
; NORMAL                   0   xyz         6     NONE   float   xyz 
; TANGENT                  0   xyzw        7     NONE   float   xyzw
; COLOR                    0   xyzw        8     NONE   float       
; TEXCOORD                 1   xy          9     NONE   float       
; INSTANCE_TRANSFORM       0   xyzw       10     NONE   float   xyzw
; INSTANCE_TRANSFORM       1   xyzw       11     NONE   float   xyzw
; INSTANCE_TRANSFORM       2   xyzw       12     NONE   float   xyzw
; INSTANCE_SKINNING_DATA     0   xyzw       13     NONE    uint   xyz 
; SV_VertexID              0   x          14   VERTID    uint       
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; TEXCOORD                 0   xyzw        1     NONE   float   xyzw
; TEXCOORD                 1   xyzw        2     NONE   float   xyzw
; TEXCOORD                 2   xyzw        3     NONE   float   xyzw
; TEXCOORD                 3   xyzw        4     NONE   float   xyzw
; TEXCOORD                 4   xyzw        5     NONE   float   xyzw
; TEXCOORD                 5   xyzw        6     NONE   float   xyzw
; TEXCOORD                 6   xyzw        7     NONE   float   xyzw
; TEXCOORD                 7   xyz         8     NONE   float   xyz 
; SV_ClipDistance          0   x           9  CLIPDST   float   x   
;
; shader hash: 2b7dacf32580c360290fa8af4bcc6bdf
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; POSITION                 0                              
; BLENDINDICES             0                              
; BLENDWEIGHT              0                              
; BLENDINDICES             1                              
; BLENDWEIGHT              1                              
; TEXCOORD                 0                              
; NORMAL                   0                              
; TANGENT                  0                              
; COLOR                    0                              
; TEXCOORD                 1                              
; INSTANCE_TRANSFORM       0                              
; INSTANCE_SKINNING_DATA     0                              
; SV_VertexID              0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; TEXCOORD                 3                 linear       
; TEXCOORD                 4                 linear       
; TEXCOORD                 5                 linear       
; TEXCOORD                 6                 linear       
; TEXCOORD                 7                 linear       
; SV_ClipDistance          0                 linear       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [496 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [848 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [112 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb7     1
;                                   cbuffer      NA          NA     CB1            cb1     1
;                                   cbuffer      NA          NA     CB2            cb5     1
;                                   texture    byte         r/o      T0            t10     1
;
;
; ViewId state:
;
; Number of inputs: 57, outputs: 37
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 1 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 2 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 3 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 4 depends on inputs: { 20 }
;   output 5 depends on inputs: { 21 }
;   output 6 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 7 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 8 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 9 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 28, 29, 30, 31, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 10 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 28, 29, 30, 31, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 11 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 28, 29, 30, 31, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 12 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 13 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 14 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 15 depends on inputs: { 24 }
;   output 16 depends on inputs: { 25 }
;   output 17 depends on inputs: { 26 }
;   output 18 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 52, 53 }
;   output 19 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 44, 45, 46, 47, 52, 53 }
;   output 20 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 48, 49, 50, 51, 52, 53 }
;   output 21 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 22 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 23 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 24 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 25 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 26 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 53, 54 }
;   output 27 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 53, 54 }
;   output 28 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 53, 54 }
;   output 29 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 53, 54 }
;   output 36 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%struct.ByteAddressBuffer = type { i32 }
%MaterialModifiersConsts = type { [31 x <4 x float>] }
%hostlayout.CameraShaderConsts = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, i32, i32, <2 x i32>, float, float }
%hostlayout.FrequentVertexConsts = type { [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float> }

define void @vs_main_() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 10, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 2, i32 5, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 7, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call i32 @dx.op.loadInput.i32(i32 4, i32 11, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call i32 @dx.op.loadInput.i32(i32 4, i32 11, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call i32 @dx.op.loadInput.i32(i32 4, i32 11, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %20 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %21 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %22 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %23 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %24 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %25 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %26 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %27 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %28 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %29 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %30 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %31 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %32 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %33 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %34 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %35 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %36 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %37 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %38 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %39 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %40 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %41 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %42 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %43 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %44 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %45 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %46 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %47 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %48 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %49 = extractvalue %dx.types.CBufRet.i32 %48, 0
  %50 = extractvalue %dx.types.CBufRet.i32 %48, 1
  %51 = extractvalue %dx.types.CBufRet.i32 %48, 2
  %52 = bitcast float %39 to i32
  %53 = bitcast float %43 to i32
  %54 = bitcast float %47 to i32
  %55 = sub i32 %52, %49
  %56 = sub i32 %53, %50
  %57 = sub i32 %54, %51
  %58 = sitofp i32 %55 to float
  %59 = sitofp i32 %56 to float
  %60 = sitofp i32 %57 to float
  %61 = fmul fast float %58, 0x3EE0000000000000
  %62 = fmul fast float %59, 0x3EE0000000000000
  %63 = fmul fast float %60, 0x3EE0000000000000
  %64 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %65 = extractvalue %dx.types.CBufRet.f32 %64, 0
  %66 = extractvalue %dx.types.CBufRet.f32 %64, 1
  %67 = extractvalue %dx.types.CBufRet.f32 %64, 2
  %68 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %69 = extractvalue %dx.types.CBufRet.f32 %68, 0
  %70 = extractvalue %dx.types.CBufRet.f32 %68, 1
  %71 = extractvalue %dx.types.CBufRet.f32 %68, 2
  %72 = fmul fast float %69, %33
  %73 = fmul fast float %70, %34
  %74 = fmul fast float %71, %35
  %75 = fadd fast float %72, %65
  %76 = fadd fast float %73, %66
  %77 = fadd fast float %74, %67
  %78 = call float @dx.op.dot4.f32(i32 56, float %25, float %26, float %27, float %28, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %79 = call float @dx.op.dot4.f32(i32 56, float %17, float %18, float %19, float %20, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %80 = fadd fast float %79, %78
  %81 = call float @dx.op.binary.f32(i32 35, float 0x3EE4F8B580000000, float %80)  ; FMax(a,b)
  %82 = fdiv fast float %25, %81
  %83 = fdiv fast float %26, %81
  %84 = fdiv fast float %27, %81
  %85 = fdiv fast float %28, %81
  %86 = fdiv fast float %17, %81
  %87 = fdiv fast float %18, %81
  %88 = fdiv fast float %19, %81
  %89 = fdiv fast float %20, %81
  %90 = mul i32 %29, %6
  %91 = add i32 %90, %5
  %92 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %91, i32 undef)  ; BufferLoad(srv,index,wot)
  %93 = extractvalue %dx.types.ResRet.i32 %92, 0
  %94 = extractvalue %dx.types.ResRet.i32 %92, 1
  %95 = extractvalue %dx.types.ResRet.i32 %92, 2
  %96 = extractvalue %dx.types.ResRet.i32 %92, 3
  %97 = bitcast i32 %93 to float
  %98 = bitcast i32 %94 to float
  %99 = bitcast i32 %95 to float
  %100 = bitcast i32 %96 to float
  %101 = add i32 %91, 16
  %102 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %101, i32 undef)  ; BufferLoad(srv,index,wot)
  %103 = extractvalue %dx.types.ResRet.i32 %102, 0
  %104 = extractvalue %dx.types.ResRet.i32 %102, 1
  %105 = extractvalue %dx.types.ResRet.i32 %102, 2
  %106 = extractvalue %dx.types.ResRet.i32 %102, 3
  %107 = bitcast i32 %103 to float
  %108 = bitcast i32 %104 to float
  %109 = bitcast i32 %105 to float
  %110 = bitcast i32 %106 to float
  %111 = add i32 %91, 32
  %112 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %111, i32 undef)  ; BufferLoad(srv,index,wot)
  %113 = extractvalue %dx.types.ResRet.i32 %112, 0
  %114 = extractvalue %dx.types.ResRet.i32 %112, 1
  %115 = extractvalue %dx.types.ResRet.i32 %112, 2
  %116 = extractvalue %dx.types.ResRet.i32 %112, 3
  %117 = bitcast i32 %113 to float
  %118 = bitcast i32 %114 to float
  %119 = bitcast i32 %115 to float
  %120 = bitcast i32 %116 to float
  %121 = mul i32 %21, %6
  %122 = add i32 %121, %5
  %123 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %122, i32 undef)  ; BufferLoad(srv,index,wot)
  %124 = extractvalue %dx.types.ResRet.i32 %123, 0
  %125 = extractvalue %dx.types.ResRet.i32 %123, 1
  %126 = extractvalue %dx.types.ResRet.i32 %123, 2
  %127 = extractvalue %dx.types.ResRet.i32 %123, 3
  %128 = bitcast i32 %124 to float
  %129 = bitcast i32 %125 to float
  %130 = bitcast i32 %126 to float
  %131 = bitcast i32 %127 to float
  %132 = add i32 %122, 16
  %133 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %132, i32 undef)  ; BufferLoad(srv,index,wot)
  %134 = extractvalue %dx.types.ResRet.i32 %133, 0
  %135 = extractvalue %dx.types.ResRet.i32 %133, 1
  %136 = extractvalue %dx.types.ResRet.i32 %133, 2
  %137 = extractvalue %dx.types.ResRet.i32 %133, 3
  %138 = bitcast i32 %134 to float
  %139 = bitcast i32 %135 to float
  %140 = bitcast i32 %136 to float
  %141 = bitcast i32 %137 to float
  %142 = add i32 %122, 32
  %143 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %142, i32 undef)  ; BufferLoad(srv,index,wot)
  %144 = extractvalue %dx.types.ResRet.i32 %143, 0
  %145 = extractvalue %dx.types.ResRet.i32 %143, 1
  %146 = extractvalue %dx.types.ResRet.i32 %143, 2
  %147 = extractvalue %dx.types.ResRet.i32 %143, 3
  %148 = bitcast i32 %144 to float
  %149 = bitcast i32 %145 to float
  %150 = bitcast i32 %146 to float
  %151 = bitcast i32 %147 to float
  %152 = fmul fast float %97, %82
  %153 = fmul fast float %107, %82
  %154 = fmul fast float %117, %82
  %155 = fmul fast float %98, %82
  %156 = fmul fast float %108, %82
  %157 = fmul fast float %118, %82
  %158 = fmul fast float %99, %82
  %159 = fmul fast float %109, %82
  %160 = fmul fast float %119, %82
  %161 = fmul fast float %100, %82
  %162 = fmul fast float %110, %82
  %163 = fmul fast float %120, %82
  %164 = fmul fast float %128, %86
  %165 = fmul fast float %138, %86
  %166 = fmul fast float %148, %86
  %167 = fmul fast float %129, %86
  %168 = fmul fast float %139, %86
  %169 = fmul fast float %149, %86
  %170 = fmul fast float %130, %86
  %171 = fmul fast float %140, %86
  %172 = fmul fast float %150, %86
  %173 = fmul fast float %131, %86
  %174 = fmul fast float %141, %86
  %175 = fmul fast float %151, %86
  %176 = fadd fast float %164, %152
  %177 = fadd fast float %165, %153
  %178 = fadd fast float %166, %154
  %179 = fadd fast float %167, %155
  %180 = fadd fast float %168, %156
  %181 = fadd fast float %169, %157
  %182 = fadd fast float %170, %158
  %183 = fadd fast float %171, %159
  %184 = fadd fast float %172, %160
  %185 = fadd fast float %173, %161
  %186 = fadd fast float %174, %162
  %187 = fadd fast float %175, %163
  %188 = mul i32 %30, %6
  %189 = add i32 %188, %5
  %190 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %189, i32 undef)  ; BufferLoad(srv,index,wot)
  %191 = extractvalue %dx.types.ResRet.i32 %190, 0
  %192 = extractvalue %dx.types.ResRet.i32 %190, 1
  %193 = extractvalue %dx.types.ResRet.i32 %190, 2
  %194 = extractvalue %dx.types.ResRet.i32 %190, 3
  %195 = bitcast i32 %191 to float
  %196 = bitcast i32 %192 to float
  %197 = bitcast i32 %193 to float
  %198 = bitcast i32 %194 to float
  %199 = add i32 %189, 16
  %200 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %199, i32 undef)  ; BufferLoad(srv,index,wot)
  %201 = extractvalue %dx.types.ResRet.i32 %200, 0
  %202 = extractvalue %dx.types.ResRet.i32 %200, 1
  %203 = extractvalue %dx.types.ResRet.i32 %200, 2
  %204 = extractvalue %dx.types.ResRet.i32 %200, 3
  %205 = bitcast i32 %201 to float
  %206 = bitcast i32 %202 to float
  %207 = bitcast i32 %203 to float
  %208 = bitcast i32 %204 to float
  %209 = add i32 %189, 32
  %210 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %209, i32 undef)  ; BufferLoad(srv,index,wot)
  %211 = extractvalue %dx.types.ResRet.i32 %210, 0
  %212 = extractvalue %dx.types.ResRet.i32 %210, 1
  %213 = extractvalue %dx.types.ResRet.i32 %210, 2
  %214 = extractvalue %dx.types.ResRet.i32 %210, 3
  %215 = bitcast i32 %211 to float
  %216 = bitcast i32 %212 to float
  %217 = bitcast i32 %213 to float
  %218 = bitcast i32 %214 to float
  %219 = mul i32 %22, %6
  %220 = add i32 %219, %5
  %221 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %220, i32 undef)  ; BufferLoad(srv,index,wot)
  %222 = extractvalue %dx.types.ResRet.i32 %221, 0
  %223 = extractvalue %dx.types.ResRet.i32 %221, 1
  %224 = extractvalue %dx.types.ResRet.i32 %221, 2
  %225 = extractvalue %dx.types.ResRet.i32 %221, 3
  %226 = bitcast i32 %222 to float
  %227 = bitcast i32 %223 to float
  %228 = bitcast i32 %224 to float
  %229 = bitcast i32 %225 to float
  %230 = add i32 %220, 16
  %231 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %230, i32 undef)  ; BufferLoad(srv,index,wot)
  %232 = extractvalue %dx.types.ResRet.i32 %231, 0
  %233 = extractvalue %dx.types.ResRet.i32 %231, 1
  %234 = extractvalue %dx.types.ResRet.i32 %231, 2
  %235 = extractvalue %dx.types.ResRet.i32 %231, 3
  %236 = bitcast i32 %232 to float
  %237 = bitcast i32 %233 to float
  %238 = bitcast i32 %234 to float
  %239 = bitcast i32 %235 to float
  %240 = add i32 %220, 32
  %241 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %240, i32 undef)  ; BufferLoad(srv,index,wot)
  %242 = extractvalue %dx.types.ResRet.i32 %241, 0
  %243 = extractvalue %dx.types.ResRet.i32 %241, 1
  %244 = extractvalue %dx.types.ResRet.i32 %241, 2
  %245 = extractvalue %dx.types.ResRet.i32 %241, 3
  %246 = bitcast i32 %242 to float
  %247 = bitcast i32 %243 to float
  %248 = bitcast i32 %244 to float
  %249 = bitcast i32 %245 to float
  %250 = fmul fast float %195, %83
  %251 = fmul fast float %205, %83
  %252 = fmul fast float %215, %83
  %253 = fmul fast float %196, %83
  %254 = fmul fast float %206, %83
  %255 = fmul fast float %216, %83
  %256 = fmul fast float %197, %83
  %257 = fmul fast float %207, %83
  %258 = fmul fast float %217, %83
  %259 = fmul fast float %198, %83
  %260 = fmul fast float %208, %83
  %261 = fmul fast float %218, %83
  %262 = fadd fast float %176, %250
  %263 = fadd fast float %177, %251
  %264 = fadd fast float %178, %252
  %265 = fadd fast float %179, %253
  %266 = fadd fast float %180, %254
  %267 = fadd fast float %181, %255
  %268 = fadd fast float %182, %256
  %269 = fadd fast float %183, %257
  %270 = fadd fast float %184, %258
  %271 = fadd fast float %185, %259
  %272 = fadd fast float %186, %260
  %273 = fadd fast float %187, %261
  %274 = fmul fast float %226, %87
  %275 = fmul fast float %236, %87
  %276 = fmul fast float %246, %87
  %277 = fmul fast float %227, %87
  %278 = fmul fast float %237, %87
  %279 = fmul fast float %247, %87
  %280 = fmul fast float %228, %87
  %281 = fmul fast float %238, %87
  %282 = fmul fast float %248, %87
  %283 = fmul fast float %229, %87
  %284 = fmul fast float %239, %87
  %285 = fmul fast float %249, %87
  %286 = fadd fast float %262, %274
  %287 = fadd fast float %263, %275
  %288 = fadd fast float %264, %276
  %289 = fadd fast float %265, %277
  %290 = fadd fast float %266, %278
  %291 = fadd fast float %267, %279
  %292 = fadd fast float %268, %280
  %293 = fadd fast float %269, %281
  %294 = fadd fast float %270, %282
  %295 = fadd fast float %271, %283
  %296 = fadd fast float %272, %284
  %297 = fadd fast float %273, %285
  %298 = mul i32 %31, %6
  %299 = add i32 %298, %5
  %300 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %299, i32 undef)  ; BufferLoad(srv,index,wot)
  %301 = extractvalue %dx.types.ResRet.i32 %300, 0
  %302 = extractvalue %dx.types.ResRet.i32 %300, 1
  %303 = extractvalue %dx.types.ResRet.i32 %300, 2
  %304 = extractvalue %dx.types.ResRet.i32 %300, 3
  %305 = bitcast i32 %301 to float
  %306 = bitcast i32 %302 to float
  %307 = bitcast i32 %303 to float
  %308 = bitcast i32 %304 to float
  %309 = add i32 %299, 16
  %310 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %309, i32 undef)  ; BufferLoad(srv,index,wot)
  %311 = extractvalue %dx.types.ResRet.i32 %310, 0
  %312 = extractvalue %dx.types.ResRet.i32 %310, 1
  %313 = extractvalue %dx.types.ResRet.i32 %310, 2
  %314 = extractvalue %dx.types.ResRet.i32 %310, 3
  %315 = bitcast i32 %311 to float
  %316 = bitcast i32 %312 to float
  %317 = bitcast i32 %313 to float
  %318 = bitcast i32 %314 to float
  %319 = add i32 %299, 32
  %320 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %319, i32 undef)  ; BufferLoad(srv,index,wot)
  %321 = extractvalue %dx.types.ResRet.i32 %320, 0
  %322 = extractvalue %dx.types.ResRet.i32 %320, 1
  %323 = extractvalue %dx.types.ResRet.i32 %320, 2
  %324 = extractvalue %dx.types.ResRet.i32 %320, 3
  %325 = bitcast i32 %321 to float
  %326 = bitcast i32 %322 to float
  %327 = bitcast i32 %323 to float
  %328 = bitcast i32 %324 to float
  %329 = mul i32 %23, %6
  %330 = add i32 %329, %5
  %331 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %330, i32 undef)  ; BufferLoad(srv,index,wot)
  %332 = extractvalue %dx.types.ResRet.i32 %331, 0
  %333 = extractvalue %dx.types.ResRet.i32 %331, 1
  %334 = extractvalue %dx.types.ResRet.i32 %331, 2
  %335 = extractvalue %dx.types.ResRet.i32 %331, 3
  %336 = bitcast i32 %332 to float
  %337 = bitcast i32 %333 to float
  %338 = bitcast i32 %334 to float
  %339 = bitcast i32 %335 to float
  %340 = add i32 %330, 16
  %341 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %340, i32 undef)  ; BufferLoad(srv,index,wot)
  %342 = extractvalue %dx.types.ResRet.i32 %341, 0
  %343 = extractvalue %dx.types.ResRet.i32 %341, 1
  %344 = extractvalue %dx.types.ResRet.i32 %341, 2
  %345 = extractvalue %dx.types.ResRet.i32 %341, 3
  %346 = bitcast i32 %342 to float
  %347 = bitcast i32 %343 to float
  %348 = bitcast i32 %344 to float
  %349 = bitcast i32 %345 to float
  %350 = add i32 %330, 32
  %351 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %350, i32 undef)  ; BufferLoad(srv,index,wot)
  %352 = extractvalue %dx.types.ResRet.i32 %351, 0
  %353 = extractvalue %dx.types.ResRet.i32 %351, 1
  %354 = extractvalue %dx.types.ResRet.i32 %351, 2
  %355 = extractvalue %dx.types.ResRet.i32 %351, 3
  %356 = bitcast i32 %352 to float
  %357 = bitcast i32 %353 to float
  %358 = bitcast i32 %354 to float
  %359 = bitcast i32 %355 to float
  %360 = fmul fast float %305, %84
  %361 = fmul fast float %315, %84
  %362 = fmul fast float %325, %84
  %363 = fmul fast float %306, %84
  %364 = fmul fast float %316, %84
  %365 = fmul fast float %326, %84
  %366 = fmul fast float %307, %84
  %367 = fmul fast float %317, %84
  %368 = fmul fast float %327, %84
  %369 = fmul fast float %308, %84
  %370 = fmul fast float %318, %84
  %371 = fmul fast float %328, %84
  %372 = fadd fast float %286, %360
  %373 = fadd fast float %287, %361
  %374 = fadd fast float %288, %362
  %375 = fadd fast float %289, %363
  %376 = fadd fast float %290, %364
  %377 = fadd fast float %291, %365
  %378 = fadd fast float %292, %366
  %379 = fadd fast float %293, %367
  %380 = fadd fast float %294, %368
  %381 = fadd fast float %295, %369
  %382 = fadd fast float %296, %370
  %383 = fadd fast float %297, %371
  %384 = fmul fast float %336, %88
  %385 = fmul fast float %346, %88
  %386 = fmul fast float %356, %88
  %387 = fmul fast float %337, %88
  %388 = fmul fast float %347, %88
  %389 = fmul fast float %357, %88
  %390 = fmul fast float %338, %88
  %391 = fmul fast float %348, %88
  %392 = fmul fast float %358, %88
  %393 = fmul fast float %339, %88
  %394 = fmul fast float %349, %88
  %395 = fmul fast float %359, %88
  %396 = fadd fast float %372, %384
  %397 = fadd fast float %373, %385
  %398 = fadd fast float %374, %386
  %399 = fadd fast float %375, %387
  %400 = fadd fast float %376, %388
  %401 = fadd fast float %377, %389
  %402 = fadd fast float %378, %390
  %403 = fadd fast float %379, %391
  %404 = fadd fast float %380, %392
  %405 = fadd fast float %381, %393
  %406 = fadd fast float %382, %394
  %407 = fadd fast float %383, %395
  %408 = mul i32 %32, %6
  %409 = add i32 %408, %5
  %410 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %409, i32 undef)  ; BufferLoad(srv,index,wot)
  %411 = extractvalue %dx.types.ResRet.i32 %410, 0
  %412 = extractvalue %dx.types.ResRet.i32 %410, 1
  %413 = extractvalue %dx.types.ResRet.i32 %410, 2
  %414 = extractvalue %dx.types.ResRet.i32 %410, 3
  %415 = bitcast i32 %411 to float
  %416 = bitcast i32 %412 to float
  %417 = bitcast i32 %413 to float
  %418 = bitcast i32 %414 to float
  %419 = add i32 %409, 16
  %420 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %419, i32 undef)  ; BufferLoad(srv,index,wot)
  %421 = extractvalue %dx.types.ResRet.i32 %420, 0
  %422 = extractvalue %dx.types.ResRet.i32 %420, 1
  %423 = extractvalue %dx.types.ResRet.i32 %420, 2
  %424 = extractvalue %dx.types.ResRet.i32 %420, 3
  %425 = bitcast i32 %421 to float
  %426 = bitcast i32 %422 to float
  %427 = bitcast i32 %423 to float
  %428 = bitcast i32 %424 to float
  %429 = add i32 %409, 32
  %430 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %429, i32 undef)  ; BufferLoad(srv,index,wot)
  %431 = extractvalue %dx.types.ResRet.i32 %430, 0
  %432 = extractvalue %dx.types.ResRet.i32 %430, 1
  %433 = extractvalue %dx.types.ResRet.i32 %430, 2
  %434 = extractvalue %dx.types.ResRet.i32 %430, 3
  %435 = bitcast i32 %431 to float
  %436 = bitcast i32 %432 to float
  %437 = bitcast i32 %433 to float
  %438 = bitcast i32 %434 to float
  %439 = mul i32 %24, %6
  %440 = add i32 %439, %5
  %441 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %440, i32 undef)  ; BufferLoad(srv,index,wot)
  %442 = extractvalue %dx.types.ResRet.i32 %441, 0
  %443 = extractvalue %dx.types.ResRet.i32 %441, 1
  %444 = extractvalue %dx.types.ResRet.i32 %441, 2
  %445 = extractvalue %dx.types.ResRet.i32 %441, 3
  %446 = bitcast i32 %442 to float
  %447 = bitcast i32 %443 to float
  %448 = bitcast i32 %444 to float
  %449 = bitcast i32 %445 to float
  %450 = add i32 %440, 16
  %451 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %450, i32 undef)  ; BufferLoad(srv,index,wot)
  %452 = extractvalue %dx.types.ResRet.i32 %451, 0
  %453 = extractvalue %dx.types.ResRet.i32 %451, 1
  %454 = extractvalue %dx.types.ResRet.i32 %451, 2
  %455 = extractvalue %dx.types.ResRet.i32 %451, 3
  %456 = bitcast i32 %452 to float
  %457 = bitcast i32 %453 to float
  %458 = bitcast i32 %454 to float
  %459 = bitcast i32 %455 to float
  %460 = add i32 %440, 32
  %461 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %460, i32 undef)  ; BufferLoad(srv,index,wot)
  %462 = extractvalue %dx.types.ResRet.i32 %461, 0
  %463 = extractvalue %dx.types.ResRet.i32 %461, 1
  %464 = extractvalue %dx.types.ResRet.i32 %461, 2
  %465 = extractvalue %dx.types.ResRet.i32 %461, 3
  %466 = bitcast i32 %462 to float
  %467 = bitcast i32 %463 to float
  %468 = bitcast i32 %464 to float
  %469 = bitcast i32 %465 to float
  %470 = fmul fast float %415, %85
  %471 = fmul fast float %425, %85
  %472 = fmul fast float %435, %85
  %473 = fmul fast float %416, %85
  %474 = fmul fast float %426, %85
  %475 = fmul fast float %436, %85
  %476 = fmul fast float %417, %85
  %477 = fmul fast float %427, %85
  %478 = fmul fast float %437, %85
  %479 = fmul fast float %418, %85
  %480 = fmul fast float %428, %85
  %481 = fmul fast float %438, %85
  %482 = fadd fast float %396, %470
  %483 = fadd fast float %397, %471
  %484 = fadd fast float %398, %472
  %485 = fadd fast float %399, %473
  %486 = fadd fast float %400, %474
  %487 = fadd fast float %401, %475
  %488 = fadd fast float %402, %476
  %489 = fadd fast float %403, %477
  %490 = fadd fast float %404, %478
  %491 = fadd fast float %405, %479
  %492 = fadd fast float %406, %480
  %493 = fadd fast float %407, %481
  %494 = fmul fast float %446, %89
  %495 = fmul fast float %456, %89
  %496 = fmul fast float %466, %89
  %497 = fmul fast float %447, %89
  %498 = fmul fast float %457, %89
  %499 = fmul fast float %467, %89
  %500 = fmul fast float %448, %89
  %501 = fmul fast float %458, %89
  %502 = fmul fast float %468, %89
  %503 = fmul fast float %449, %89
  %504 = fmul fast float %459, %89
  %505 = fmul fast float %469, %89
  %506 = fadd fast float %482, %494
  %507 = fadd fast float %483, %495
  %508 = fadd fast float %484, %496
  %509 = fadd fast float %485, %497
  %510 = fadd fast float %486, %498
  %511 = fadd fast float %487, %499
  %512 = fadd fast float %488, %500
  %513 = fadd fast float %489, %501
  %514 = fadd fast float %490, %502
  %515 = fadd fast float %491, %503
  %516 = fadd fast float %492, %504
  %517 = fadd fast float %493, %505
  %518 = fmul fast float %506, %75
  %519 = call float @dx.op.tertiary.f32(i32 46, float %76, float %509, float %518)  ; FMad(a,b,c)
  %520 = call float @dx.op.tertiary.f32(i32 46, float %77, float %512, float %519)  ; FMad(a,b,c)
  %521 = fadd fast float %515, %520
  %522 = fmul fast float %507, %75
  %523 = call float @dx.op.tertiary.f32(i32 46, float %76, float %510, float %522)  ; FMad(a,b,c)
  %524 = call float @dx.op.tertiary.f32(i32 46, float %77, float %513, float %523)  ; FMad(a,b,c)
  %525 = fadd fast float %516, %524
  %526 = fmul fast float %508, %75
  %527 = call float @dx.op.tertiary.f32(i32 46, float %76, float %511, float %526)  ; FMad(a,b,c)
  %528 = call float @dx.op.tertiary.f32(i32 46, float %77, float %514, float %527)  ; FMad(a,b,c)
  %529 = fadd fast float %517, %528
  %530 = fmul fast float %521, %36
  %531 = call float @dx.op.tertiary.f32(i32 46, float %525, float %37, float %530)  ; FMad(a,b,c)
  %532 = call float @dx.op.tertiary.f32(i32 46, float %529, float %38, float %531)  ; FMad(a,b,c)
  %533 = fadd fast float %532, %61
  %534 = fmul fast float %521, %40
  %535 = call float @dx.op.tertiary.f32(i32 46, float %525, float %41, float %534)  ; FMad(a,b,c)
  %536 = call float @dx.op.tertiary.f32(i32 46, float %529, float %42, float %535)  ; FMad(a,b,c)
  %537 = fadd fast float %536, %62
  %538 = fmul fast float %521, %44
  %539 = call float @dx.op.tertiary.f32(i32 46, float %525, float %45, float %538)  ; FMad(a,b,c)
  %540 = call float @dx.op.tertiary.f32(i32 46, float %529, float %46, float %539)  ; FMad(a,b,c)
  %541 = fadd fast float %540, %63
  %542 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %543 = extractvalue %dx.types.CBufRet.f32 %542, 0
  %544 = extractvalue %dx.types.CBufRet.f32 %542, 1
  %545 = extractvalue %dx.types.CBufRet.f32 %542, 2
  %546 = extractvalue %dx.types.CBufRet.f32 %542, 3
  %547 = fmul fast float %543, %533
  %548 = call float @dx.op.tertiary.f32(i32 46, float %537, float %544, float %547)  ; FMad(a,b,c)
  %549 = call float @dx.op.tertiary.f32(i32 46, float %541, float %545, float %548)  ; FMad(a,b,c)
  %550 = fadd fast float %549, %546
  %551 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 37)  ; CBufferLoadLegacy(handle,regIndex)
  %552 = extractvalue %dx.types.CBufRet.f32 %551, 0
  %553 = extractvalue %dx.types.CBufRet.f32 %551, 1
  %554 = extractvalue %dx.types.CBufRet.f32 %551, 2
  %555 = fadd fast float %552, %533
  %556 = fadd fast float %553, %537
  %557 = fadd fast float %554, %541
  %558 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %559 = extractvalue %dx.types.CBufRet.f32 %558, 0
  %560 = extractvalue %dx.types.CBufRet.f32 %558, 1
  %561 = extractvalue %dx.types.CBufRet.f32 %558, 2
  %562 = extractvalue %dx.types.CBufRet.f32 %558, 3
  %563 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %564 = extractvalue %dx.types.CBufRet.f32 %563, 0
  %565 = extractvalue %dx.types.CBufRet.f32 %563, 1
  %566 = extractvalue %dx.types.CBufRet.f32 %563, 2
  %567 = extractvalue %dx.types.CBufRet.f32 %563, 3
  %568 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %569 = extractvalue %dx.types.CBufRet.f32 %568, 0
  %570 = extractvalue %dx.types.CBufRet.f32 %568, 1
  %571 = extractvalue %dx.types.CBufRet.f32 %568, 2
  %572 = extractvalue %dx.types.CBufRet.f32 %568, 3
  %573 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %574 = extractvalue %dx.types.CBufRet.f32 %573, 0
  %575 = extractvalue %dx.types.CBufRet.f32 %573, 1
  %576 = extractvalue %dx.types.CBufRet.f32 %573, 2
  %577 = extractvalue %dx.types.CBufRet.f32 %573, 3
  %578 = fmul fast float %559, %533
  %579 = call float @dx.op.tertiary.f32(i32 46, float %537, float %560, float %578)  ; FMad(a,b,c)
  %580 = call float @dx.op.tertiary.f32(i32 46, float %541, float %561, float %579)  ; FMad(a,b,c)
  %581 = fadd fast float %580, %562
  %582 = fmul fast float %564, %533
  %583 = call float @dx.op.tertiary.f32(i32 46, float %537, float %565, float %582)  ; FMad(a,b,c)
  %584 = call float @dx.op.tertiary.f32(i32 46, float %541, float %566, float %583)  ; FMad(a,b,c)
  %585 = fadd fast float %584, %567
  %586 = fmul fast float %569, %533
  %587 = call float @dx.op.tertiary.f32(i32 46, float %537, float %570, float %586)  ; FMad(a,b,c)
  %588 = call float @dx.op.tertiary.f32(i32 46, float %541, float %571, float %587)  ; FMad(a,b,c)
  %589 = fadd fast float %588, %572
  %590 = fmul fast float %574, %533
  %591 = call float @dx.op.tertiary.f32(i32 46, float %537, float %575, float %590)  ; FMad(a,b,c)
  %592 = call float @dx.op.tertiary.f32(i32 46, float %541, float %576, float %591)  ; FMad(a,b,c)
  %593 = fadd fast float %592, %577
  %594 = add i32 %90, %7
  %595 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %594, i32 undef)  ; BufferLoad(srv,index,wot)
  %596 = extractvalue %dx.types.ResRet.i32 %595, 0
  %597 = extractvalue %dx.types.ResRet.i32 %595, 1
  %598 = extractvalue %dx.types.ResRet.i32 %595, 2
  %599 = extractvalue %dx.types.ResRet.i32 %595, 3
  %600 = bitcast i32 %596 to float
  %601 = bitcast i32 %597 to float
  %602 = bitcast i32 %598 to float
  %603 = bitcast i32 %599 to float
  %604 = add i32 %594, 16
  %605 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %604, i32 undef)  ; BufferLoad(srv,index,wot)
  %606 = extractvalue %dx.types.ResRet.i32 %605, 0
  %607 = extractvalue %dx.types.ResRet.i32 %605, 1
  %608 = extractvalue %dx.types.ResRet.i32 %605, 2
  %609 = extractvalue %dx.types.ResRet.i32 %605, 3
  %610 = bitcast i32 %606 to float
  %611 = bitcast i32 %607 to float
  %612 = bitcast i32 %608 to float
  %613 = bitcast i32 %609 to float
  %614 = add i32 %594, 32
  %615 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %614, i32 undef)  ; BufferLoad(srv,index,wot)
  %616 = extractvalue %dx.types.ResRet.i32 %615, 0
  %617 = extractvalue %dx.types.ResRet.i32 %615, 1
  %618 = extractvalue %dx.types.ResRet.i32 %615, 2
  %619 = extractvalue %dx.types.ResRet.i32 %615, 3
  %620 = bitcast i32 %616 to float
  %621 = bitcast i32 %617 to float
  %622 = bitcast i32 %618 to float
  %623 = bitcast i32 %619 to float
  %624 = add i32 %121, %7
  %625 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %624, i32 undef)  ; BufferLoad(srv,index,wot)
  %626 = extractvalue %dx.types.ResRet.i32 %625, 0
  %627 = extractvalue %dx.types.ResRet.i32 %625, 1
  %628 = extractvalue %dx.types.ResRet.i32 %625, 2
  %629 = extractvalue %dx.types.ResRet.i32 %625, 3
  %630 = bitcast i32 %626 to float
  %631 = bitcast i32 %627 to float
  %632 = bitcast i32 %628 to float
  %633 = bitcast i32 %629 to float
  %634 = add i32 %624, 16
  %635 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %634, i32 undef)  ; BufferLoad(srv,index,wot)
  %636 = extractvalue %dx.types.ResRet.i32 %635, 0
  %637 = extractvalue %dx.types.ResRet.i32 %635, 1
  %638 = extractvalue %dx.types.ResRet.i32 %635, 2
  %639 = extractvalue %dx.types.ResRet.i32 %635, 3
  %640 = bitcast i32 %636 to float
  %641 = bitcast i32 %637 to float
  %642 = bitcast i32 %638 to float
  %643 = bitcast i32 %639 to float
  %644 = add i32 %624, 32
  %645 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %644, i32 undef)  ; BufferLoad(srv,index,wot)
  %646 = extractvalue %dx.types.ResRet.i32 %645, 0
  %647 = extractvalue %dx.types.ResRet.i32 %645, 1
  %648 = extractvalue %dx.types.ResRet.i32 %645, 2
  %649 = extractvalue %dx.types.ResRet.i32 %645, 3
  %650 = bitcast i32 %646 to float
  %651 = bitcast i32 %647 to float
  %652 = bitcast i32 %648 to float
  %653 = bitcast i32 %649 to float
  %654 = fmul fast float %600, %82
  %655 = fmul fast float %610, %82
  %656 = fmul fast float %620, %82
  %657 = fmul fast float %601, %82
  %658 = fmul fast float %611, %82
  %659 = fmul fast float %621, %82
  %660 = fmul fast float %602, %82
  %661 = fmul fast float %612, %82
  %662 = fmul fast float %622, %82
  %663 = fmul fast float %603, %82
  %664 = fmul fast float %613, %82
  %665 = fmul fast float %623, %82
  %666 = fmul fast float %630, %86
  %667 = fmul fast float %640, %86
  %668 = fmul fast float %650, %86
  %669 = fmul fast float %631, %86
  %670 = fmul fast float %641, %86
  %671 = fmul fast float %651, %86
  %672 = fmul fast float %632, %86
  %673 = fmul fast float %642, %86
  %674 = fmul fast float %652, %86
  %675 = fmul fast float %633, %86
  %676 = fmul fast float %643, %86
  %677 = fmul fast float %653, %86
  %678 = fadd fast float %666, %654
  %679 = fadd fast float %667, %655
  %680 = fadd fast float %668, %656
  %681 = fadd fast float %669, %657
  %682 = fadd fast float %670, %658
  %683 = fadd fast float %671, %659
  %684 = fadd fast float %672, %660
  %685 = fadd fast float %673, %661
  %686 = fadd fast float %674, %662
  %687 = fadd fast float %675, %663
  %688 = fadd fast float %676, %664
  %689 = fadd fast float %677, %665
  %690 = add i32 %188, %7
  %691 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %690, i32 undef)  ; BufferLoad(srv,index,wot)
  %692 = extractvalue %dx.types.ResRet.i32 %691, 0
  %693 = extractvalue %dx.types.ResRet.i32 %691, 1
  %694 = extractvalue %dx.types.ResRet.i32 %691, 2
  %695 = extractvalue %dx.types.ResRet.i32 %691, 3
  %696 = bitcast i32 %692 to float
  %697 = bitcast i32 %693 to float
  %698 = bitcast i32 %694 to float
  %699 = bitcast i32 %695 to float
  %700 = add i32 %690, 16
  %701 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %700, i32 undef)  ; BufferLoad(srv,index,wot)
  %702 = extractvalue %dx.types.ResRet.i32 %701, 0
  %703 = extractvalue %dx.types.ResRet.i32 %701, 1
  %704 = extractvalue %dx.types.ResRet.i32 %701, 2
  %705 = extractvalue %dx.types.ResRet.i32 %701, 3
  %706 = bitcast i32 %702 to float
  %707 = bitcast i32 %703 to float
  %708 = bitcast i32 %704 to float
  %709 = bitcast i32 %705 to float
  %710 = add i32 %690, 32
  %711 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %710, i32 undef)  ; BufferLoad(srv,index,wot)
  %712 = extractvalue %dx.types.ResRet.i32 %711, 0
  %713 = extractvalue %dx.types.ResRet.i32 %711, 1
  %714 = extractvalue %dx.types.ResRet.i32 %711, 2
  %715 = extractvalue %dx.types.ResRet.i32 %711, 3
  %716 = bitcast i32 %712 to float
  %717 = bitcast i32 %713 to float
  %718 = bitcast i32 %714 to float
  %719 = bitcast i32 %715 to float
  %720 = add i32 %219, %7
  %721 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %720, i32 undef)  ; BufferLoad(srv,index,wot)
  %722 = extractvalue %dx.types.ResRet.i32 %721, 0
  %723 = extractvalue %dx.types.ResRet.i32 %721, 1
  %724 = extractvalue %dx.types.ResRet.i32 %721, 2
  %725 = extractvalue %dx.types.ResRet.i32 %721, 3
  %726 = bitcast i32 %722 to float
  %727 = bitcast i32 %723 to float
  %728 = bitcast i32 %724 to float
  %729 = bitcast i32 %725 to float
  %730 = add i32 %720, 16
  %731 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %730, i32 undef)  ; BufferLoad(srv,index,wot)
  %732 = extractvalue %dx.types.ResRet.i32 %731, 0
  %733 = extractvalue %dx.types.ResRet.i32 %731, 1
  %734 = extractvalue %dx.types.ResRet.i32 %731, 2
  %735 = extractvalue %dx.types.ResRet.i32 %731, 3
  %736 = bitcast i32 %732 to float
  %737 = bitcast i32 %733 to float
  %738 = bitcast i32 %734 to float
  %739 = bitcast i32 %735 to float
  %740 = add i32 %720, 32
  %741 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %740, i32 undef)  ; BufferLoad(srv,index,wot)
  %742 = extractvalue %dx.types.ResRet.i32 %741, 0
  %743 = extractvalue %dx.types.ResRet.i32 %741, 1
  %744 = extractvalue %dx.types.ResRet.i32 %741, 2
  %745 = extractvalue %dx.types.ResRet.i32 %741, 3
  %746 = bitcast i32 %742 to float
  %747 = bitcast i32 %743 to float
  %748 = bitcast i32 %744 to float
  %749 = bitcast i32 %745 to float
  %750 = fmul fast float %696, %83
  %751 = fmul fast float %706, %83
  %752 = fmul fast float %716, %83
  %753 = fmul fast float %697, %83
  %754 = fmul fast float %707, %83
  %755 = fmul fast float %717, %83
  %756 = fmul fast float %698, %83
  %757 = fmul fast float %708, %83
  %758 = fmul fast float %718, %83
  %759 = fmul fast float %699, %83
  %760 = fmul fast float %709, %83
  %761 = fmul fast float %719, %83
  %762 = fadd fast float %678, %750
  %763 = fadd fast float %679, %751
  %764 = fadd fast float %680, %752
  %765 = fadd fast float %681, %753
  %766 = fadd fast float %682, %754
  %767 = fadd fast float %683, %755
  %768 = fadd fast float %684, %756
  %769 = fadd fast float %685, %757
  %770 = fadd fast float %686, %758
  %771 = fadd fast float %687, %759
  %772 = fadd fast float %688, %760
  %773 = fadd fast float %689, %761
  %774 = fmul fast float %726, %87
  %775 = fmul fast float %736, %87
  %776 = fmul fast float %746, %87
  %777 = fmul fast float %727, %87
  %778 = fmul fast float %737, %87
  %779 = fmul fast float %747, %87
  %780 = fmul fast float %728, %87
  %781 = fmul fast float %738, %87
  %782 = fmul fast float %748, %87
  %783 = fmul fast float %729, %87
  %784 = fmul fast float %739, %87
  %785 = fmul fast float %749, %87
  %786 = fadd fast float %762, %774
  %787 = fadd fast float %763, %775
  %788 = fadd fast float %764, %776
  %789 = fadd fast float %765, %777
  %790 = fadd fast float %766, %778
  %791 = fadd fast float %767, %779
  %792 = fadd fast float %768, %780
  %793 = fadd fast float %769, %781
  %794 = fadd fast float %770, %782
  %795 = fadd fast float %771, %783
  %796 = fadd fast float %772, %784
  %797 = fadd fast float %773, %785
  %798 = add i32 %298, %7
  %799 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %798, i32 undef)  ; BufferLoad(srv,index,wot)
  %800 = extractvalue %dx.types.ResRet.i32 %799, 0
  %801 = extractvalue %dx.types.ResRet.i32 %799, 1
  %802 = extractvalue %dx.types.ResRet.i32 %799, 2
  %803 = extractvalue %dx.types.ResRet.i32 %799, 3
  %804 = bitcast i32 %800 to float
  %805 = bitcast i32 %801 to float
  %806 = bitcast i32 %802 to float
  %807 = bitcast i32 %803 to float
  %808 = add i32 %798, 16
  %809 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %808, i32 undef)  ; BufferLoad(srv,index,wot)
  %810 = extractvalue %dx.types.ResRet.i32 %809, 0
  %811 = extractvalue %dx.types.ResRet.i32 %809, 1
  %812 = extractvalue %dx.types.ResRet.i32 %809, 2
  %813 = extractvalue %dx.types.ResRet.i32 %809, 3
  %814 = bitcast i32 %810 to float
  %815 = bitcast i32 %811 to float
  %816 = bitcast i32 %812 to float
  %817 = bitcast i32 %813 to float
  %818 = add i32 %798, 32
  %819 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %818, i32 undef)  ; BufferLoad(srv,index,wot)
  %820 = extractvalue %dx.types.ResRet.i32 %819, 0
  %821 = extractvalue %dx.types.ResRet.i32 %819, 1
  %822 = extractvalue %dx.types.ResRet.i32 %819, 2
  %823 = extractvalue %dx.types.ResRet.i32 %819, 3
  %824 = bitcast i32 %820 to float
  %825 = bitcast i32 %821 to float
  %826 = bitcast i32 %822 to float
  %827 = bitcast i32 %823 to float
  %828 = add i32 %329, %7
  %829 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %828, i32 undef)  ; BufferLoad(srv,index,wot)
  %830 = extractvalue %dx.types.ResRet.i32 %829, 0
  %831 = extractvalue %dx.types.ResRet.i32 %829, 1
  %832 = extractvalue %dx.types.ResRet.i32 %829, 2
  %833 = extractvalue %dx.types.ResRet.i32 %829, 3
  %834 = bitcast i32 %830 to float
  %835 = bitcast i32 %831 to float
  %836 = bitcast i32 %832 to float
  %837 = bitcast i32 %833 to float
  %838 = add i32 %828, 16
  %839 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %838, i32 undef)  ; BufferLoad(srv,index,wot)
  %840 = extractvalue %dx.types.ResRet.i32 %839, 0
  %841 = extractvalue %dx.types.ResRet.i32 %839, 1
  %842 = extractvalue %dx.types.ResRet.i32 %839, 2
  %843 = extractvalue %dx.types.ResRet.i32 %839, 3
  %844 = bitcast i32 %840 to float
  %845 = bitcast i32 %841 to float
  %846 = bitcast i32 %842 to float
  %847 = bitcast i32 %843 to float
  %848 = add i32 %828, 32
  %849 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %848, i32 undef)  ; BufferLoad(srv,index,wot)
  %850 = extractvalue %dx.types.ResRet.i32 %849, 0
  %851 = extractvalue %dx.types.ResRet.i32 %849, 1
  %852 = extractvalue %dx.types.ResRet.i32 %849, 2
  %853 = extractvalue %dx.types.ResRet.i32 %849, 3
  %854 = bitcast i32 %850 to float
  %855 = bitcast i32 %851 to float
  %856 = bitcast i32 %852 to float
  %857 = bitcast i32 %853 to float
  %858 = fmul fast float %804, %84
  %859 = fmul fast float %814, %84
  %860 = fmul fast float %824, %84
  %861 = fmul fast float %805, %84
  %862 = fmul fast float %815, %84
  %863 = fmul fast float %825, %84
  %864 = fmul fast float %806, %84
  %865 = fmul fast float %816, %84
  %866 = fmul fast float %826, %84
  %867 = fmul fast float %807, %84
  %868 = fmul fast float %817, %84
  %869 = fmul fast float %827, %84
  %870 = fadd fast float %786, %858
  %871 = fadd fast float %787, %859
  %872 = fadd fast float %788, %860
  %873 = fadd fast float %789, %861
  %874 = fadd fast float %790, %862
  %875 = fadd fast float %791, %863
  %876 = fadd fast float %792, %864
  %877 = fadd fast float %793, %865
  %878 = fadd fast float %794, %866
  %879 = fadd fast float %795, %867
  %880 = fadd fast float %796, %868
  %881 = fadd fast float %797, %869
  %882 = fmul fast float %834, %88
  %883 = fmul fast float %844, %88
  %884 = fmul fast float %854, %88
  %885 = fmul fast float %835, %88
  %886 = fmul fast float %845, %88
  %887 = fmul fast float %855, %88
  %888 = fmul fast float %836, %88
  %889 = fmul fast float %846, %88
  %890 = fmul fast float %856, %88
  %891 = fmul fast float %837, %88
  %892 = fmul fast float %847, %88
  %893 = fmul fast float %857, %88
  %894 = fadd fast float %870, %882
  %895 = fadd fast float %871, %883
  %896 = fadd fast float %872, %884
  %897 = fadd fast float %873, %885
  %898 = fadd fast float %874, %886
  %899 = fadd fast float %875, %887
  %900 = fadd fast float %876, %888
  %901 = fadd fast float %877, %889
  %902 = fadd fast float %878, %890
  %903 = fadd fast float %879, %891
  %904 = fadd fast float %880, %892
  %905 = fadd fast float %881, %893
  %906 = add i32 %408, %7
  %907 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %906, i32 undef)  ; BufferLoad(srv,index,wot)
  %908 = extractvalue %dx.types.ResRet.i32 %907, 0
  %909 = extractvalue %dx.types.ResRet.i32 %907, 1
  %910 = extractvalue %dx.types.ResRet.i32 %907, 2
  %911 = extractvalue %dx.types.ResRet.i32 %907, 3
  %912 = bitcast i32 %908 to float
  %913 = bitcast i32 %909 to float
  %914 = bitcast i32 %910 to float
  %915 = bitcast i32 %911 to float
  %916 = add i32 %906, 16
  %917 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %916, i32 undef)  ; BufferLoad(srv,index,wot)
  %918 = extractvalue %dx.types.ResRet.i32 %917, 0
  %919 = extractvalue %dx.types.ResRet.i32 %917, 1
  %920 = extractvalue %dx.types.ResRet.i32 %917, 2
  %921 = extractvalue %dx.types.ResRet.i32 %917, 3
  %922 = bitcast i32 %918 to float
  %923 = bitcast i32 %919 to float
  %924 = bitcast i32 %920 to float
  %925 = bitcast i32 %921 to float
  %926 = add i32 %906, 32
  %927 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %926, i32 undef)  ; BufferLoad(srv,index,wot)
  %928 = extractvalue %dx.types.ResRet.i32 %927, 0
  %929 = extractvalue %dx.types.ResRet.i32 %927, 1
  %930 = extractvalue %dx.types.ResRet.i32 %927, 2
  %931 = extractvalue %dx.types.ResRet.i32 %927, 3
  %932 = bitcast i32 %928 to float
  %933 = bitcast i32 %929 to float
  %934 = bitcast i32 %930 to float
  %935 = bitcast i32 %931 to float
  %936 = add i32 %439, %7
  %937 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %936, i32 undef)  ; BufferLoad(srv,index,wot)
  %938 = extractvalue %dx.types.ResRet.i32 %937, 0
  %939 = extractvalue %dx.types.ResRet.i32 %937, 1
  %940 = extractvalue %dx.types.ResRet.i32 %937, 2
  %941 = extractvalue %dx.types.ResRet.i32 %937, 3
  %942 = bitcast i32 %938 to float
  %943 = bitcast i32 %939 to float
  %944 = bitcast i32 %940 to float
  %945 = bitcast i32 %941 to float
  %946 = add i32 %936, 16
  %947 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %946, i32 undef)  ; BufferLoad(srv,index,wot)
  %948 = extractvalue %dx.types.ResRet.i32 %947, 0
  %949 = extractvalue %dx.types.ResRet.i32 %947, 1
  %950 = extractvalue %dx.types.ResRet.i32 %947, 2
  %951 = extractvalue %dx.types.ResRet.i32 %947, 3
  %952 = bitcast i32 %948 to float
  %953 = bitcast i32 %949 to float
  %954 = bitcast i32 %950 to float
  %955 = bitcast i32 %951 to float
  %956 = add i32 %936, 32
  %957 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %956, i32 undef)  ; BufferLoad(srv,index,wot)
  %958 = extractvalue %dx.types.ResRet.i32 %957, 0
  %959 = extractvalue %dx.types.ResRet.i32 %957, 1
  %960 = extractvalue %dx.types.ResRet.i32 %957, 2
  %961 = extractvalue %dx.types.ResRet.i32 %957, 3
  %962 = bitcast i32 %958 to float
  %963 = bitcast i32 %959 to float
  %964 = bitcast i32 %960 to float
  %965 = bitcast i32 %961 to float
  %966 = fmul fast float %912, %85
  %967 = fmul fast float %922, %85
  %968 = fmul fast float %932, %85
  %969 = fmul fast float %913, %85
  %970 = fmul fast float %923, %85
  %971 = fmul fast float %933, %85
  %972 = fmul fast float %914, %85
  %973 = fmul fast float %924, %85
  %974 = fmul fast float %934, %85
  %975 = fmul fast float %915, %85
  %976 = fmul fast float %925, %85
  %977 = fmul fast float %935, %85
  %978 = fadd fast float %894, %966
  %979 = fadd fast float %895, %967
  %980 = fadd fast float %896, %968
  %981 = fadd fast float %897, %969
  %982 = fadd fast float %898, %970
  %983 = fadd fast float %899, %971
  %984 = fadd fast float %900, %972
  %985 = fadd fast float %901, %973
  %986 = fadd fast float %902, %974
  %987 = fadd fast float %903, %975
  %988 = fadd fast float %904, %976
  %989 = fadd fast float %905, %977
  %990 = fmul fast float %942, %89
  %991 = fmul fast float %952, %89
  %992 = fmul fast float %962, %89
  %993 = fmul fast float %943, %89
  %994 = fmul fast float %953, %89
  %995 = fmul fast float %963, %89
  %996 = fmul fast float %944, %89
  %997 = fmul fast float %954, %89
  %998 = fmul fast float %964, %89
  %999 = fmul fast float %945, %89
  %1000 = fmul fast float %955, %89
  %1001 = fmul fast float %965, %89
  %1002 = fadd fast float %978, %990
  %1003 = fadd fast float %979, %991
  %1004 = fadd fast float %980, %992
  %1005 = fadd fast float %981, %993
  %1006 = fadd fast float %982, %994
  %1007 = fadd fast float %983, %995
  %1008 = fadd fast float %984, %996
  %1009 = fadd fast float %985, %997
  %1010 = fadd fast float %986, %998
  %1011 = fadd fast float %987, %999
  %1012 = fadd fast float %988, %1000
  %1013 = fadd fast float %989, %1001
  %1014 = fmul fast float %1002, %75
  %1015 = call float @dx.op.tertiary.f32(i32 46, float %76, float %1005, float %1014)  ; FMad(a,b,c)
  %1016 = call float @dx.op.tertiary.f32(i32 46, float %77, float %1008, float %1015)  ; FMad(a,b,c)
  %1017 = fadd fast float %1011, %1016
  %1018 = fmul fast float %1003, %75
  %1019 = call float @dx.op.tertiary.f32(i32 46, float %76, float %1006, float %1018)  ; FMad(a,b,c)
  %1020 = call float @dx.op.tertiary.f32(i32 46, float %77, float %1009, float %1019)  ; FMad(a,b,c)
  %1021 = fadd fast float %1012, %1020
  %1022 = fmul fast float %1004, %75
  %1023 = call float @dx.op.tertiary.f32(i32 46, float %76, float %1007, float %1022)  ; FMad(a,b,c)
  %1024 = call float @dx.op.tertiary.f32(i32 46, float %77, float %1010, float %1023)  ; FMad(a,b,c)
  %1025 = fadd fast float %1013, %1024
  %1026 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1027 = extractvalue %dx.types.CBufRet.f32 %1026, 0
  %1028 = extractvalue %dx.types.CBufRet.f32 %1026, 1
  %1029 = extractvalue %dx.types.CBufRet.f32 %1026, 2
  %1030 = extractvalue %dx.types.CBufRet.f32 %1026, 3
  %1031 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1032 = extractvalue %dx.types.CBufRet.f32 %1031, 0
  %1033 = extractvalue %dx.types.CBufRet.f32 %1031, 1
  %1034 = extractvalue %dx.types.CBufRet.f32 %1031, 2
  %1035 = extractvalue %dx.types.CBufRet.f32 %1031, 3
  %1036 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1037 = extractvalue %dx.types.CBufRet.f32 %1036, 0
  %1038 = extractvalue %dx.types.CBufRet.f32 %1036, 1
  %1039 = extractvalue %dx.types.CBufRet.f32 %1036, 2
  %1040 = extractvalue %dx.types.CBufRet.f32 %1036, 3
  %1041 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %1042 = extractvalue %dx.types.CBufRet.i32 %1041, 0
  %1043 = extractvalue %dx.types.CBufRet.i32 %1041, 1
  %1044 = extractvalue %dx.types.CBufRet.i32 %1041, 2
  %1045 = bitcast float %1030 to i32
  %1046 = bitcast float %1035 to i32
  %1047 = bitcast float %1040 to i32
  %1048 = sub i32 %1045, %1042
  %1049 = sub i32 %1046, %1043
  %1050 = sub i32 %1047, %1044
  %1051 = sitofp i32 %1048 to float
  %1052 = sitofp i32 %1049 to float
  %1053 = sitofp i32 %1050 to float
  %1054 = fmul fast float %1051, 0x3EE0000000000000
  %1055 = fmul fast float %1052, 0x3EE0000000000000
  %1056 = fmul fast float %1053, 0x3EE0000000000000
  %1057 = fmul fast float %1027, %1017
  %1058 = call float @dx.op.tertiary.f32(i32 46, float %1028, float %1021, float %1057)  ; FMad(a,b,c)
  %1059 = call float @dx.op.tertiary.f32(i32 46, float %1029, float %1025, float %1058)  ; FMad(a,b,c)
  %1060 = fadd fast float %1054, %1059
  %1061 = fmul fast float %1032, %1017
  %1062 = call float @dx.op.tertiary.f32(i32 46, float %1033, float %1021, float %1061)  ; FMad(a,b,c)
  %1063 = call float @dx.op.tertiary.f32(i32 46, float %1034, float %1025, float %1062)  ; FMad(a,b,c)
  %1064 = fadd fast float %1055, %1063
  %1065 = fmul fast float %1037, %1017
  %1066 = call float @dx.op.tertiary.f32(i32 46, float %1038, float %1021, float %1065)  ; FMad(a,b,c)
  %1067 = call float @dx.op.tertiary.f32(i32 46, float %1039, float %1025, float %1066)  ; FMad(a,b,c)
  %1068 = fadd fast float %1067, %1056
  %1069 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %1070 = extractvalue %dx.types.CBufRet.f32 %1069, 0
  %1071 = extractvalue %dx.types.CBufRet.f32 %1069, 1
  %1072 = extractvalue %dx.types.CBufRet.f32 %1069, 2
  %1073 = extractvalue %dx.types.CBufRet.f32 %1069, 3
  %1074 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %1075 = extractvalue %dx.types.CBufRet.f32 %1074, 0
  %1076 = extractvalue %dx.types.CBufRet.f32 %1074, 1
  %1077 = extractvalue %dx.types.CBufRet.f32 %1074, 2
  %1078 = extractvalue %dx.types.CBufRet.f32 %1074, 3
  %1079 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 18)  ; CBufferLoadLegacy(handle,regIndex)
  %1080 = extractvalue %dx.types.CBufRet.f32 %1079, 0
  %1081 = extractvalue %dx.types.CBufRet.f32 %1079, 1
  %1082 = extractvalue %dx.types.CBufRet.f32 %1079, 2
  %1083 = extractvalue %dx.types.CBufRet.f32 %1079, 3
  %1084 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %1085 = extractvalue %dx.types.CBufRet.f32 %1084, 0
  %1086 = extractvalue %dx.types.CBufRet.f32 %1084, 1
  %1087 = extractvalue %dx.types.CBufRet.f32 %1084, 2
  %1088 = extractvalue %dx.types.CBufRet.f32 %1084, 3
  %1089 = fmul fast float %1070, %1060
  %1090 = call float @dx.op.tertiary.f32(i32 46, float %1064, float %1071, float %1089)  ; FMad(a,b,c)
  %1091 = call float @dx.op.tertiary.f32(i32 46, float %1068, float %1072, float %1090)  ; FMad(a,b,c)
  %1092 = fadd fast float %1091, %1073
  %1093 = fmul fast float %1075, %1060
  %1094 = call float @dx.op.tertiary.f32(i32 46, float %1064, float %1076, float %1093)  ; FMad(a,b,c)
  %1095 = call float @dx.op.tertiary.f32(i32 46, float %1068, float %1077, float %1094)  ; FMad(a,b,c)
  %1096 = fadd fast float %1095, %1078
  %1097 = fmul fast float %1080, %1060
  %1098 = call float @dx.op.tertiary.f32(i32 46, float %1064, float %1081, float %1097)  ; FMad(a,b,c)
  %1099 = call float @dx.op.tertiary.f32(i32 46, float %1068, float %1082, float %1098)  ; FMad(a,b,c)
  %1100 = fadd fast float %1099, %1083
  %1101 = fmul fast float %1085, %1060
  %1102 = call float @dx.op.tertiary.f32(i32 46, float %1064, float %1086, float %1101)  ; FMad(a,b,c)
  %1103 = call float @dx.op.tertiary.f32(i32 46, float %1068, float %1087, float %1102)  ; FMad(a,b,c)
  %1104 = fadd fast float %1103, %1088
  %1105 = fmul fast float %506, %36
  %1106 = call float @dx.op.tertiary.f32(i32 46, float %507, float %37, float %1105)  ; FMad(a,b,c)
  %1107 = call float @dx.op.tertiary.f32(i32 46, float %508, float %38, float %1106)  ; FMad(a,b,c)
  %1108 = fmul fast float %506, %40
  %1109 = call float @dx.op.tertiary.f32(i32 46, float %507, float %41, float %1108)  ; FMad(a,b,c)
  %1110 = call float @dx.op.tertiary.f32(i32 46, float %508, float %42, float %1109)  ; FMad(a,b,c)
  %1111 = fmul fast float %506, %44
  %1112 = call float @dx.op.tertiary.f32(i32 46, float %507, float %45, float %1111)  ; FMad(a,b,c)
  %1113 = call float @dx.op.tertiary.f32(i32 46, float %508, float %46, float %1112)  ; FMad(a,b,c)
  %1114 = fmul fast float %509, %36
  %1115 = call float @dx.op.tertiary.f32(i32 46, float %510, float %37, float %1114)  ; FMad(a,b,c)
  %1116 = call float @dx.op.tertiary.f32(i32 46, float %511, float %38, float %1115)  ; FMad(a,b,c)
  %1117 = fmul fast float %509, %40
  %1118 = call float @dx.op.tertiary.f32(i32 46, float %510, float %41, float %1117)  ; FMad(a,b,c)
  %1119 = call float @dx.op.tertiary.f32(i32 46, float %511, float %42, float %1118)  ; FMad(a,b,c)
  %1120 = fmul fast float %509, %44
  %1121 = call float @dx.op.tertiary.f32(i32 46, float %510, float %45, float %1120)  ; FMad(a,b,c)
  %1122 = call float @dx.op.tertiary.f32(i32 46, float %511, float %46, float %1121)  ; FMad(a,b,c)
  %1123 = fmul fast float %512, %36
  %1124 = call float @dx.op.tertiary.f32(i32 46, float %513, float %37, float %1123)  ; FMad(a,b,c)
  %1125 = call float @dx.op.tertiary.f32(i32 46, float %514, float %38, float %1124)  ; FMad(a,b,c)
  %1126 = fmul fast float %512, %40
  %1127 = call float @dx.op.tertiary.f32(i32 46, float %513, float %41, float %1126)  ; FMad(a,b,c)
  %1128 = call float @dx.op.tertiary.f32(i32 46, float %514, float %42, float %1127)  ; FMad(a,b,c)
  %1129 = fmul fast float %512, %44
  %1130 = call float @dx.op.tertiary.f32(i32 46, float %513, float %45, float %1129)  ; FMad(a,b,c)
  %1131 = call float @dx.op.tertiary.f32(i32 46, float %514, float %46, float %1130)  ; FMad(a,b,c)
  %1132 = fmul fast float %12, 2.000000e+00
  %1133 = fmul fast float %13, 2.000000e+00
  %1134 = fmul fast float %14, 2.000000e+00
  %1135 = fadd fast float %1132, -1.000000e+00
  %1136 = fadd fast float %1133, -1.000000e+00
  %1137 = fadd fast float %1134, -1.000000e+00
  %1138 = fmul fast float %8, 2.000000e+00
  %1139 = fmul fast float %9, 2.000000e+00
  %1140 = fmul fast float %10, 2.000000e+00
  %1141 = fadd fast float %1138, -1.000000e+00
  %1142 = fadd fast float %1139, -1.000000e+00
  %1143 = fadd fast float %1140, -1.000000e+00
  %1144 = fmul fast float %11, 2.000000e+00
  %1145 = fadd fast float %1144, -1.000000e+00
  %1146 = fmul fast float %1136, %1143
  %1147 = fmul fast float %1137, %1142
  %1148 = fsub fast float %1146, %1147
  %1149 = fmul fast float %1137, %1141
  %1150 = fmul fast float %1135, %1143
  %1151 = fsub fast float %1149, %1150
  %1152 = fmul fast float %1135, %1142
  %1153 = fmul fast float %1136, %1141
  %1154 = fsub fast float %1152, %1153
  %1155 = fmul fast float %1148, %1145
  %1156 = fmul fast float %1151, %1145
  %1157 = fmul fast float %1154, %1145
  %1158 = fmul fast float %1107, %1141
  %1159 = call float @dx.op.tertiary.f32(i32 46, float %1142, float %1116, float %1158)  ; FMad(a,b,c)
  %1160 = call float @dx.op.tertiary.f32(i32 46, float %1143, float %1125, float %1159)  ; FMad(a,b,c)
  %1161 = fmul fast float %1110, %1141
  %1162 = call float @dx.op.tertiary.f32(i32 46, float %1142, float %1119, float %1161)  ; FMad(a,b,c)
  %1163 = call float @dx.op.tertiary.f32(i32 46, float %1143, float %1128, float %1162)  ; FMad(a,b,c)
  %1164 = fmul fast float %1113, %1141
  %1165 = call float @dx.op.tertiary.f32(i32 46, float %1142, float %1122, float %1164)  ; FMad(a,b,c)
  %1166 = call float @dx.op.tertiary.f32(i32 46, float %1143, float %1131, float %1165)  ; FMad(a,b,c)
  %1167 = fmul fast float %1107, %1155
  %1168 = call float @dx.op.tertiary.f32(i32 46, float %1156, float %1116, float %1167)  ; FMad(a,b,c)
  %1169 = call float @dx.op.tertiary.f32(i32 46, float %1157, float %1125, float %1168)  ; FMad(a,b,c)
  %1170 = fmul fast float %1110, %1155
  %1171 = call float @dx.op.tertiary.f32(i32 46, float %1156, float %1119, float %1170)  ; FMad(a,b,c)
  %1172 = call float @dx.op.tertiary.f32(i32 46, float %1157, float %1128, float %1171)  ; FMad(a,b,c)
  %1173 = fmul fast float %1113, %1155
  %1174 = call float @dx.op.tertiary.f32(i32 46, float %1156, float %1122, float %1173)  ; FMad(a,b,c)
  %1175 = call float @dx.op.tertiary.f32(i32 46, float %1157, float %1131, float %1174)  ; FMad(a,b,c)
  %1176 = fmul fast float %1107, %1135
  %1177 = call float @dx.op.tertiary.f32(i32 46, float %1136, float %1116, float %1176)  ; FMad(a,b,c)
  %1178 = call float @dx.op.tertiary.f32(i32 46, float %1137, float %1125, float %1177)  ; FMad(a,b,c)
  %1179 = fmul fast float %1110, %1135
  %1180 = call float @dx.op.tertiary.f32(i32 46, float %1136, float %1119, float %1179)  ; FMad(a,b,c)
  %1181 = call float @dx.op.tertiary.f32(i32 46, float %1137, float %1128, float %1180)  ; FMad(a,b,c)
  %1182 = fmul fast float %1113, %1135
  %1183 = call float @dx.op.tertiary.f32(i32 46, float %1136, float %1122, float %1182)  ; FMad(a,b,c)
  %1184 = call float @dx.op.tertiary.f32(i32 46, float %1137, float %1131, float %1183)  ; FMad(a,b,c)
  %1185 = call float @dx.op.dot3.f32(i32 55, float %1178, float %1181, float %1184, float %1178, float %1181, float %1184)  ; Dot3(ax,ay,az,bx,by,bz)
  %1186 = call float @dx.op.unary.f32(i32 25, float %1185)  ; Rsqrt(value)
  %1187 = fmul fast float %1186, %1178
  %1188 = fmul fast float %1186, %1181
  %1189 = fmul fast float %1186, %1184
  %1190 = call float @dx.op.dot3.f32(i32 55, float %1169, float %1172, float %1175, float %1169, float %1172, float %1175)  ; Dot3(ax,ay,az,bx,by,bz)
  %1191 = call float @dx.op.unary.f32(i32 25, float %1190)  ; Rsqrt(value)
  %1192 = fmul fast float %1191, %1169
  %1193 = fmul fast float %1191, %1172
  %1194 = fmul fast float %1191, %1175
  %1195 = call float @dx.op.dot3.f32(i32 55, float %1160, float %1163, float %1166, float %1160, float %1163, float %1166)  ; Dot3(ax,ay,az,bx,by,bz)
  %1196 = call float @dx.op.unary.f32(i32 25, float %1195)  ; Rsqrt(value)
  %1197 = fmul fast float %1196, %1160
  %1198 = fmul fast float %1196, %1163
  %1199 = fmul fast float %1196, %1166
  %1200 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %1201 = extractvalue %dx.types.CBufRet.f32 %1200, 0
  %1202 = extractvalue %dx.types.CBufRet.f32 %1200, 1
  %1203 = fmul fast float %1201, %593
  %1204 = fmul fast float %1202, %593
  %1205 = fsub fast float %581, %1203
  %1206 = fsub fast float %585, %1204
  %1207 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %1208 = extractvalue %dx.types.CBufRet.f32 %1207, 0
  %1209 = extractvalue %dx.types.CBufRet.f32 %1207, 1
  %1210 = extractvalue %dx.types.CBufRet.f32 %1207, 2
  %1211 = extractvalue %dx.types.CBufRet.f32 %1207, 3
  %1212 = call float @dx.op.dot4.f32(i32 56, float %1208, float %1209, float %1210, float %1211, float %555, float %556, float %557, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %581)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %585)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %589)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %593)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %15)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %16)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %1187)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %1188)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %1189)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %1192)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %1193)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float %1194)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %1197)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %1198)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %1199)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %1135)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %1136)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float %1137)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float %555)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float %556)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 0, float %557)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 1, float %550)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 2, float %1205)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 3, float %1206)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 0, float %589)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 1, float %593)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 2, float %1092)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 3, float %1096)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 0, float %1100)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 1, float %1104)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 2, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 3, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 8, i32 0, i8 0, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 8, i32 0, i8 1, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 8, i32 0, i8 2, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 9, i32 0, i8 0, float %1212)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!11}
!dx.entryPoints = !{!12}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{!5, null, !7, null}
!5 = !{!6}
!6 = !{i32 0, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 10, i32 1, i32 11, i32 0, null}
!7 = !{!8, !9, !10}
!8 = !{i32 0, %MaterialModifiersConsts* undef, !"", i32 0, i32 7, i32 1, i32 496, null}
!9 = !{i32 1, %hostlayout.CameraShaderConsts* undef, !"", i32 0, i32 1, i32 1, i32 848, null}
!10 = !{i32 2, %hostlayout.FrequentVertexConsts* undef, !"", i32 0, i32 5, i32 1, i32 112, null}
!11 = !{[116 x i32] [i32 57, i32 37, i32 1073479695, i32 16, i32 1073479695, i32 16, i32 1073479695, i32 16, i32 0, i32 0, i32 1073512399, i32 16, i32 1073512399, i32 16, i32 1073512399, i32 16, i32 1073512399, i32 16, i32 1073512399, i32 16, i32 1073512399, i32 16, i32 1073512399, i32 16, i32 1073512399, i32 16, i32 1073512399, i32 16, i32 1073512399, i32 16, i32 1073512399, i32 16, i32 1073512399, i32 16, i32 1073512399, i32 16, i32 1073512399, i32 16, i32 1073512399, i32 16, i32 1073512399, i32 16, i32 16, i32 0, i32 32, i32 0, i32 0, i32 0, i32 0, i32 0, i32 36800, i32 0, i32 69568, i32 0, i32 135104, i32 0, i32 0, i32 0, i32 32256, i32 0, i32 32256, i32 0, i32 32256, i32 0, i32 3584, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 65306575, i32 16, i32 65306575, i32 16, i32 65306575, i32 16, i32 65273871, i32 16, i32 65568719, i32 16, i32 65568719, i32 16, i32 65568719, i32 16, i32 65536015, i32 16, i32 66093007, i32 16, i32 66093007, i32 16, i32 66093007, i32 16, i32 66060303, i32 16, i32 66879439, i32 16, i32 1073512399, i32 16, i32 1006632960, i32 0, i32 0, i32 0, i32 0, i32 0]}
!12 = !{void ()* @vs_main_, !"vs_main_", !13, !4, !52}
!13 = !{!14, !34, null}
!14 = !{!15, !18, !20, !21, !23, !24, !26, !27, !28, !29, !30, !32, !33}
!15 = !{i32 0, !"POSITION", i8 9, i8 0, !16, i8 0, i32 1, i8 3, i32 0, i8 0, !17}
!16 = !{i32 0}
!17 = !{i32 3, i32 7}
!18 = !{i32 1, !"BLENDINDICES", i8 5, i8 0, !16, i8 0, i32 1, i8 4, i32 1, i8 0, !19}
!19 = !{i32 3, i32 15}
!20 = !{i32 2, !"BLENDWEIGHT", i8 9, i8 0, !16, i8 0, i32 1, i8 4, i32 2, i8 0, !19}
!21 = !{i32 3, !"BLENDINDICES", i8 5, i8 0, !22, i8 0, i32 1, i8 4, i32 3, i8 0, !19}
!22 = !{i32 1}
!23 = !{i32 4, !"BLENDWEIGHT", i8 9, i8 0, !22, i8 0, i32 1, i8 4, i32 4, i8 0, !19}
!24 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !16, i8 0, i32 1, i8 2, i32 5, i8 0, !25}
!25 = !{i32 3, i32 3}
!26 = !{i32 6, !"NORMAL", i8 9, i8 0, !16, i8 0, i32 1, i8 3, i32 6, i8 0, !17}
!27 = !{i32 7, !"TANGENT", i8 9, i8 0, !16, i8 0, i32 1, i8 4, i32 7, i8 0, !19}
!28 = !{i32 8, !"COLOR", i8 9, i8 0, !16, i8 0, i32 1, i8 4, i32 8, i8 0, null}
!29 = !{i32 9, !"TEXCOORD", i8 9, i8 0, !22, i8 0, i32 1, i8 2, i32 9, i8 0, null}
!30 = !{i32 10, !"INSTANCE_TRANSFORM", i8 9, i8 0, !31, i8 0, i32 3, i8 4, i32 10, i8 0, !19}
!31 = !{i32 0, i32 1, i32 2}
!32 = !{i32 11, !"INSTANCE_SKINNING_DATA", i8 5, i8 0, !16, i8 0, i32 1, i8 4, i32 13, i8 0, !17}
!33 = !{i32 12, !"SV_VertexID", i8 5, i8 1, !16, i8 0, i32 1, i8 1, i32 14, i8 0, null}
!34 = !{!35, !36, !37, !38, !40, !42, !44, !46, !48, !50}
!35 = !{i32 0, !"SV_Position", i8 9, i8 3, !16, i8 4, i32 1, i8 4, i32 0, i8 0, !19}
!36 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !16, i8 2, i32 1, i8 4, i32 1, i8 0, !19}
!37 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !22, i8 2, i32 1, i8 4, i32 2, i8 0, !19}
!38 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !39, i8 2, i32 1, i8 4, i32 3, i8 0, !19}
!39 = !{i32 2}
!40 = !{i32 4, !"TEXCOORD", i8 9, i8 0, !41, i8 2, i32 1, i8 4, i32 4, i8 0, !19}
!41 = !{i32 3}
!42 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !43, i8 2, i32 1, i8 4, i32 5, i8 0, !19}
!43 = !{i32 4}
!44 = !{i32 6, !"TEXCOORD", i8 9, i8 0, !45, i8 2, i32 1, i8 4, i32 6, i8 0, !19}
!45 = !{i32 5}
!46 = !{i32 7, !"TEXCOORD", i8 9, i8 0, !47, i8 2, i32 1, i8 4, i32 7, i8 0, !19}
!47 = !{i32 6}
!48 = !{i32 8, !"TEXCOORD", i8 9, i8 0, !49, i8 2, i32 1, i8 3, i32 8, i8 0, !17}
!49 = !{i32 7}
!50 = !{i32 9, !"SV_ClipDistance", i8 9, i8 6, !16, i8 2, i32 1, i8 1, i32 9, i8 0, !51}
!51 = !{i32 3, i32 1}
!52 = !{i32 0, i64 16}
 