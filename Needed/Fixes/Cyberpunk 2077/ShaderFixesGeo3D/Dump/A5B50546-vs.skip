;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; POSITION                 0   xyz         0     NONE   float   xyz 
; BLENDINDICES             0   xyzw        1     NONE    uint   xyzw
; BLENDWEIGHT              0   xyzw        2     NONE   float   xyzw
; BLENDINDICES             1   xyzw        3     NONE    uint   xyzw
; BLENDWEIGHT              1   xyzw        4     NONE   float   xyzw
; TEXCOORD                 0   xy          5     NONE   float   xy  
; NORMAL                   0   xyz         6     NONE   float   xyz 
; TANGENT                  0   xyzw        7     NONE   float   xyzw
; COLOR                    0   xyzw        8     NONE   float   xyzw
; TEXCOORD                 1   xy          9     NONE   float       
; INSTANCE_TRANSFORM       0   xyzw       10     NONE   float   xyzw
; INSTANCE_TRANSFORM       1   xyzw       11     NONE   float   xyzw
; INSTANCE_TRANSFORM       2   xyzw       12     NONE   float   xyzw
; INSTANCE_SKINNING_DATA     0   xyzw       13     NONE    uint   xy  
; SV_VertexID              0   x          14   VERTID    uint       
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; TEXCOORD                 0   xyzw        1     NONE   float   xyzw
; TEXCOORD                 1   xyzw        2     NONE   float   xyzw
; TEXCOORD                 2   xyzw        3     NONE   float   xyzw
; TEXCOORD                 3   xyzw        4     NONE   float   xyzw
; TEXCOORD                 4   xy          5     NONE   float   xy  
; SV_ClipDistance          0   x           6  CLIPDST   float   x   
;
; shader hash: 06bdbea8504a58f9a95c152c300d4c77
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; POSITION                 0                              
; BLENDINDICES             0                              
; BLENDWEIGHT              0                              
; BLENDINDICES             1                              
; BLENDWEIGHT              1                              
; TEXCOORD                 0                              
; NORMAL                   0                              
; TANGENT                  0                              
; COLOR                    0                              
; TEXCOORD                 1                              
; INSTANCE_TRANSFORM       0                              
; INSTANCE_SKINNING_DATA     0                              
; SV_VertexID              0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; TEXCOORD                 3                 linear       
; TEXCOORD                 4                 linear       
; SV_ClipDistance          0                 linear       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [476 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [848 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [36 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [112 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;                                   cbuffer      NA          NA     CB1            cb1     1
;                                   cbuffer      NA          NA     CB2            cb4     1
;                                   cbuffer      NA          NA     CB3            cb5     1
;                                   sampler      NA          NA      S0             s0     1
;                                   texture     f32          2d      T0      t0,space1 32768
;                                   texture    byte         r/o      T1            t10     1
;
;
; ViewId state:
;
; Number of inputs: 57, outputs: 25
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 28, 29, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 1 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 28, 29, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 2 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 28, 29, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 3 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 28, 29, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 4 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 28, 29, 30, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 5 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 28, 29, 30, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 52, 53 }
;   output 6 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 51, 52, 53 }
;   output 7 depends on inputs: { 20 }
;   output 8 depends on inputs: { 21 }
;   output 9 depends on inputs: { 32 }
;   output 10 depends on inputs: { 33 }
;   output 11 depends on inputs: { 34 }
;   output 12 depends on inputs: { 35 }
;   output 13 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 14 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 15 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 16 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 28, 29, 30, 31, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 17 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 28, 29, 30, 31, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 18 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 28, 29, 30, 31, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 19 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 20 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 21 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 24 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 28, 29, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%struct.ByteAddressBuffer = type { i32 }
%GlobalShaderConsts = type { <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, float, float, float, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, i32, float, [6 x <4 x float>], <4 x float>, <2 x i32>, i32, i32, float, i32, i32 }
%hostlayout.CameraShaderConsts = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, i32, i32, <2 x i32>, float, float }
%ShaderSpecificConstants = type { i32, float, float }
%hostlayout.FrequentVertexConsts = type { [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float> }
%struct.SamplerState = type { i32 }

define void @vs_main_() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 10, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 3, i32 5, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 2, i32 4, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %7 = call i32 @dx.op.loadInput.i32(i32 4, i32 11, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call i32 @dx.op.loadInput.i32(i32 4, i32 11, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %20 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %21 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %22 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %23 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %24 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %25 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %26 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %27 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %28 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %29 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %30 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %31 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %32 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %33 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %34 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %35 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %36 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %37 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %38 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %39 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %40 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %41 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %42 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %43 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %44 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %45 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %46 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %47 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %48 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %49 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %50 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %51 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %52 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %53 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %54 = extractvalue %dx.types.CBufRet.i32 %53, 0
  %55 = extractvalue %dx.types.CBufRet.i32 %53, 1
  %56 = extractvalue %dx.types.CBufRet.i32 %53, 2
  %57 = bitcast float %44 to i32
  %58 = bitcast float %48 to i32
  %59 = bitcast float %52 to i32
  %60 = sub i32 %57, %54
  %61 = sub i32 %58, %55
  %62 = sub i32 %59, %56
  %63 = sitofp i32 %60 to float
  %64 = sitofp i32 %61 to float
  %65 = sitofp i32 %62 to float
  %66 = fmul fast float %63, 0x3EE0000000000000
  %67 = fmul fast float %64, 0x3EE0000000000000
  %68 = fmul fast float %65, 0x3EE0000000000000
  %69 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %70 = extractvalue %dx.types.CBufRet.f32 %69, 0
  %71 = extractvalue %dx.types.CBufRet.f32 %69, 1
  %72 = extractvalue %dx.types.CBufRet.f32 %69, 2
  %73 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %74 = extractvalue %dx.types.CBufRet.f32 %73, 0
  %75 = extractvalue %dx.types.CBufRet.f32 %73, 1
  %76 = extractvalue %dx.types.CBufRet.f32 %73, 2
  %77 = fmul fast float %74, %38
  %78 = fmul fast float %75, %39
  %79 = fmul fast float %76, %40
  %80 = call float @dx.op.dot4.f32(i32 56, float %30, float %31, float %32, float %33, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %81 = call float @dx.op.dot4.f32(i32 56, float %22, float %23, float %24, float %25, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %82 = fadd fast float %81, %80
  %83 = call float @dx.op.binary.f32(i32 35, float 0x3EE4F8B580000000, float %82)  ; FMax(a,b)
  %84 = fdiv fast float %30, %83
  %85 = fdiv fast float %31, %83
  %86 = fdiv fast float %32, %83
  %87 = fdiv fast float %33, %83
  %88 = fdiv fast float %22, %83
  %89 = fdiv fast float %23, %83
  %90 = fdiv fast float %24, %83
  %91 = fdiv fast float %25, %83
  %92 = mul i32 %34, %8
  %93 = add i32 %92, %7
  %94 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %93, i32 undef)  ; BufferLoad(srv,index,wot)
  %95 = extractvalue %dx.types.ResRet.i32 %94, 0
  %96 = extractvalue %dx.types.ResRet.i32 %94, 1
  %97 = extractvalue %dx.types.ResRet.i32 %94, 2
  %98 = extractvalue %dx.types.ResRet.i32 %94, 3
  %99 = bitcast i32 %95 to float
  %100 = bitcast i32 %96 to float
  %101 = bitcast i32 %97 to float
  %102 = bitcast i32 %98 to float
  %103 = add i32 %93, 16
  %104 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %103, i32 undef)  ; BufferLoad(srv,index,wot)
  %105 = extractvalue %dx.types.ResRet.i32 %104, 0
  %106 = extractvalue %dx.types.ResRet.i32 %104, 1
  %107 = extractvalue %dx.types.ResRet.i32 %104, 2
  %108 = extractvalue %dx.types.ResRet.i32 %104, 3
  %109 = bitcast i32 %105 to float
  %110 = bitcast i32 %106 to float
  %111 = bitcast i32 %107 to float
  %112 = bitcast i32 %108 to float
  %113 = add i32 %93, 32
  %114 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %113, i32 undef)  ; BufferLoad(srv,index,wot)
  %115 = extractvalue %dx.types.ResRet.i32 %114, 0
  %116 = extractvalue %dx.types.ResRet.i32 %114, 1
  %117 = extractvalue %dx.types.ResRet.i32 %114, 2
  %118 = extractvalue %dx.types.ResRet.i32 %114, 3
  %119 = bitcast i32 %115 to float
  %120 = bitcast i32 %116 to float
  %121 = bitcast i32 %117 to float
  %122 = bitcast i32 %118 to float
  %123 = mul i32 %26, %8
  %124 = add i32 %123, %7
  %125 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %124, i32 undef)  ; BufferLoad(srv,index,wot)
  %126 = extractvalue %dx.types.ResRet.i32 %125, 0
  %127 = extractvalue %dx.types.ResRet.i32 %125, 1
  %128 = extractvalue %dx.types.ResRet.i32 %125, 2
  %129 = extractvalue %dx.types.ResRet.i32 %125, 3
  %130 = bitcast i32 %126 to float
  %131 = bitcast i32 %127 to float
  %132 = bitcast i32 %128 to float
  %133 = bitcast i32 %129 to float
  %134 = add i32 %124, 16
  %135 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %134, i32 undef)  ; BufferLoad(srv,index,wot)
  %136 = extractvalue %dx.types.ResRet.i32 %135, 0
  %137 = extractvalue %dx.types.ResRet.i32 %135, 1
  %138 = extractvalue %dx.types.ResRet.i32 %135, 2
  %139 = extractvalue %dx.types.ResRet.i32 %135, 3
  %140 = bitcast i32 %136 to float
  %141 = bitcast i32 %137 to float
  %142 = bitcast i32 %138 to float
  %143 = bitcast i32 %139 to float
  %144 = add i32 %124, 32
  %145 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %144, i32 undef)  ; BufferLoad(srv,index,wot)
  %146 = extractvalue %dx.types.ResRet.i32 %145, 0
  %147 = extractvalue %dx.types.ResRet.i32 %145, 1
  %148 = extractvalue %dx.types.ResRet.i32 %145, 2
  %149 = extractvalue %dx.types.ResRet.i32 %145, 3
  %150 = bitcast i32 %146 to float
  %151 = bitcast i32 %147 to float
  %152 = bitcast i32 %148 to float
  %153 = bitcast i32 %149 to float
  %154 = fmul fast float %99, %84
  %155 = fmul fast float %109, %84
  %156 = fmul fast float %119, %84
  %157 = fmul fast float %100, %84
  %158 = fmul fast float %110, %84
  %159 = fmul fast float %120, %84
  %160 = fmul fast float %101, %84
  %161 = fmul fast float %111, %84
  %162 = fmul fast float %121, %84
  %163 = fmul fast float %102, %84
  %164 = fmul fast float %112, %84
  %165 = fmul fast float %122, %84
  %166 = fmul fast float %130, %88
  %167 = fmul fast float %140, %88
  %168 = fmul fast float %150, %88
  %169 = fmul fast float %131, %88
  %170 = fmul fast float %141, %88
  %171 = fmul fast float %151, %88
  %172 = fmul fast float %132, %88
  %173 = fmul fast float %142, %88
  %174 = fmul fast float %152, %88
  %175 = fmul fast float %133, %88
  %176 = fmul fast float %143, %88
  %177 = fmul fast float %153, %88
  %178 = fadd fast float %166, %154
  %179 = fadd fast float %167, %155
  %180 = fadd fast float %168, %156
  %181 = fadd fast float %169, %157
  %182 = fadd fast float %170, %158
  %183 = fadd fast float %171, %159
  %184 = fadd fast float %172, %160
  %185 = fadd fast float %173, %161
  %186 = fadd fast float %174, %162
  %187 = fadd fast float %175, %163
  %188 = fadd fast float %176, %164
  %189 = fadd fast float %177, %165
  %190 = mul i32 %35, %8
  %191 = add i32 %190, %7
  %192 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %191, i32 undef)  ; BufferLoad(srv,index,wot)
  %193 = extractvalue %dx.types.ResRet.i32 %192, 0
  %194 = extractvalue %dx.types.ResRet.i32 %192, 1
  %195 = extractvalue %dx.types.ResRet.i32 %192, 2
  %196 = extractvalue %dx.types.ResRet.i32 %192, 3
  %197 = bitcast i32 %193 to float
  %198 = bitcast i32 %194 to float
  %199 = bitcast i32 %195 to float
  %200 = bitcast i32 %196 to float
  %201 = add i32 %191, 16
  %202 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %201, i32 undef)  ; BufferLoad(srv,index,wot)
  %203 = extractvalue %dx.types.ResRet.i32 %202, 0
  %204 = extractvalue %dx.types.ResRet.i32 %202, 1
  %205 = extractvalue %dx.types.ResRet.i32 %202, 2
  %206 = extractvalue %dx.types.ResRet.i32 %202, 3
  %207 = bitcast i32 %203 to float
  %208 = bitcast i32 %204 to float
  %209 = bitcast i32 %205 to float
  %210 = bitcast i32 %206 to float
  %211 = add i32 %191, 32
  %212 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %211, i32 undef)  ; BufferLoad(srv,index,wot)
  %213 = extractvalue %dx.types.ResRet.i32 %212, 0
  %214 = extractvalue %dx.types.ResRet.i32 %212, 1
  %215 = extractvalue %dx.types.ResRet.i32 %212, 2
  %216 = extractvalue %dx.types.ResRet.i32 %212, 3
  %217 = bitcast i32 %213 to float
  %218 = bitcast i32 %214 to float
  %219 = bitcast i32 %215 to float
  %220 = bitcast i32 %216 to float
  %221 = mul i32 %27, %8
  %222 = add i32 %221, %7
  %223 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %222, i32 undef)  ; BufferLoad(srv,index,wot)
  %224 = extractvalue %dx.types.ResRet.i32 %223, 0
  %225 = extractvalue %dx.types.ResRet.i32 %223, 1
  %226 = extractvalue %dx.types.ResRet.i32 %223, 2
  %227 = extractvalue %dx.types.ResRet.i32 %223, 3
  %228 = bitcast i32 %224 to float
  %229 = bitcast i32 %225 to float
  %230 = bitcast i32 %226 to float
  %231 = bitcast i32 %227 to float
  %232 = add i32 %222, 16
  %233 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %232, i32 undef)  ; BufferLoad(srv,index,wot)
  %234 = extractvalue %dx.types.ResRet.i32 %233, 0
  %235 = extractvalue %dx.types.ResRet.i32 %233, 1
  %236 = extractvalue %dx.types.ResRet.i32 %233, 2
  %237 = extractvalue %dx.types.ResRet.i32 %233, 3
  %238 = bitcast i32 %234 to float
  %239 = bitcast i32 %235 to float
  %240 = bitcast i32 %236 to float
  %241 = bitcast i32 %237 to float
  %242 = add i32 %222, 32
  %243 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %242, i32 undef)  ; BufferLoad(srv,index,wot)
  %244 = extractvalue %dx.types.ResRet.i32 %243, 0
  %245 = extractvalue %dx.types.ResRet.i32 %243, 1
  %246 = extractvalue %dx.types.ResRet.i32 %243, 2
  %247 = extractvalue %dx.types.ResRet.i32 %243, 3
  %248 = bitcast i32 %244 to float
  %249 = bitcast i32 %245 to float
  %250 = bitcast i32 %246 to float
  %251 = bitcast i32 %247 to float
  %252 = fmul fast float %197, %85
  %253 = fmul fast float %207, %85
  %254 = fmul fast float %217, %85
  %255 = fmul fast float %198, %85
  %256 = fmul fast float %208, %85
  %257 = fmul fast float %218, %85
  %258 = fmul fast float %199, %85
  %259 = fmul fast float %209, %85
  %260 = fmul fast float %219, %85
  %261 = fmul fast float %200, %85
  %262 = fmul fast float %210, %85
  %263 = fmul fast float %220, %85
  %264 = fadd fast float %178, %252
  %265 = fadd fast float %179, %253
  %266 = fadd fast float %180, %254
  %267 = fadd fast float %181, %255
  %268 = fadd fast float %182, %256
  %269 = fadd fast float %183, %257
  %270 = fadd fast float %184, %258
  %271 = fadd fast float %185, %259
  %272 = fadd fast float %186, %260
  %273 = fadd fast float %187, %261
  %274 = fadd fast float %188, %262
  %275 = fadd fast float %189, %263
  %276 = fmul fast float %228, %89
  %277 = fmul fast float %238, %89
  %278 = fmul fast float %248, %89
  %279 = fmul fast float %229, %89
  %280 = fmul fast float %239, %89
  %281 = fmul fast float %249, %89
  %282 = fmul fast float %230, %89
  %283 = fmul fast float %240, %89
  %284 = fmul fast float %250, %89
  %285 = fmul fast float %231, %89
  %286 = fmul fast float %241, %89
  %287 = fmul fast float %251, %89
  %288 = fadd fast float %264, %276
  %289 = fadd fast float %265, %277
  %290 = fadd fast float %266, %278
  %291 = fadd fast float %267, %279
  %292 = fadd fast float %268, %280
  %293 = fadd fast float %269, %281
  %294 = fadd fast float %270, %282
  %295 = fadd fast float %271, %283
  %296 = fadd fast float %272, %284
  %297 = fadd fast float %273, %285
  %298 = fadd fast float %274, %286
  %299 = fadd fast float %275, %287
  %300 = mul i32 %36, %8
  %301 = add i32 %300, %7
  %302 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %301, i32 undef)  ; BufferLoad(srv,index,wot)
  %303 = extractvalue %dx.types.ResRet.i32 %302, 0
  %304 = extractvalue %dx.types.ResRet.i32 %302, 1
  %305 = extractvalue %dx.types.ResRet.i32 %302, 2
  %306 = extractvalue %dx.types.ResRet.i32 %302, 3
  %307 = bitcast i32 %303 to float
  %308 = bitcast i32 %304 to float
  %309 = bitcast i32 %305 to float
  %310 = bitcast i32 %306 to float
  %311 = add i32 %301, 16
  %312 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %311, i32 undef)  ; BufferLoad(srv,index,wot)
  %313 = extractvalue %dx.types.ResRet.i32 %312, 0
  %314 = extractvalue %dx.types.ResRet.i32 %312, 1
  %315 = extractvalue %dx.types.ResRet.i32 %312, 2
  %316 = extractvalue %dx.types.ResRet.i32 %312, 3
  %317 = bitcast i32 %313 to float
  %318 = bitcast i32 %314 to float
  %319 = bitcast i32 %315 to float
  %320 = bitcast i32 %316 to float
  %321 = add i32 %301, 32
  %322 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %321, i32 undef)  ; BufferLoad(srv,index,wot)
  %323 = extractvalue %dx.types.ResRet.i32 %322, 0
  %324 = extractvalue %dx.types.ResRet.i32 %322, 1
  %325 = extractvalue %dx.types.ResRet.i32 %322, 2
  %326 = extractvalue %dx.types.ResRet.i32 %322, 3
  %327 = bitcast i32 %323 to float
  %328 = bitcast i32 %324 to float
  %329 = bitcast i32 %325 to float
  %330 = bitcast i32 %326 to float
  %331 = mul i32 %28, %8
  %332 = add i32 %331, %7
  %333 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %332, i32 undef)  ; BufferLoad(srv,index,wot)
  %334 = extractvalue %dx.types.ResRet.i32 %333, 0
  %335 = extractvalue %dx.types.ResRet.i32 %333, 1
  %336 = extractvalue %dx.types.ResRet.i32 %333, 2
  %337 = extractvalue %dx.types.ResRet.i32 %333, 3
  %338 = bitcast i32 %334 to float
  %339 = bitcast i32 %335 to float
  %340 = bitcast i32 %336 to float
  %341 = bitcast i32 %337 to float
  %342 = add i32 %332, 16
  %343 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %342, i32 undef)  ; BufferLoad(srv,index,wot)
  %344 = extractvalue %dx.types.ResRet.i32 %343, 0
  %345 = extractvalue %dx.types.ResRet.i32 %343, 1
  %346 = extractvalue %dx.types.ResRet.i32 %343, 2
  %347 = extractvalue %dx.types.ResRet.i32 %343, 3
  %348 = bitcast i32 %344 to float
  %349 = bitcast i32 %345 to float
  %350 = bitcast i32 %346 to float
  %351 = bitcast i32 %347 to float
  %352 = add i32 %332, 32
  %353 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %352, i32 undef)  ; BufferLoad(srv,index,wot)
  %354 = extractvalue %dx.types.ResRet.i32 %353, 0
  %355 = extractvalue %dx.types.ResRet.i32 %353, 1
  %356 = extractvalue %dx.types.ResRet.i32 %353, 2
  %357 = extractvalue %dx.types.ResRet.i32 %353, 3
  %358 = bitcast i32 %354 to float
  %359 = bitcast i32 %355 to float
  %360 = bitcast i32 %356 to float
  %361 = bitcast i32 %357 to float
  %362 = fmul fast float %307, %86
  %363 = fmul fast float %317, %86
  %364 = fmul fast float %327, %86
  %365 = fmul fast float %308, %86
  %366 = fmul fast float %318, %86
  %367 = fmul fast float %328, %86
  %368 = fmul fast float %309, %86
  %369 = fmul fast float %319, %86
  %370 = fmul fast float %329, %86
  %371 = fmul fast float %310, %86
  %372 = fmul fast float %320, %86
  %373 = fmul fast float %330, %86
  %374 = fadd fast float %288, %362
  %375 = fadd fast float %289, %363
  %376 = fadd fast float %290, %364
  %377 = fadd fast float %291, %365
  %378 = fadd fast float %292, %366
  %379 = fadd fast float %293, %367
  %380 = fadd fast float %294, %368
  %381 = fadd fast float %295, %369
  %382 = fadd fast float %296, %370
  %383 = fadd fast float %297, %371
  %384 = fadd fast float %298, %372
  %385 = fadd fast float %299, %373
  %386 = fmul fast float %338, %90
  %387 = fmul fast float %348, %90
  %388 = fmul fast float %358, %90
  %389 = fmul fast float %339, %90
  %390 = fmul fast float %349, %90
  %391 = fmul fast float %359, %90
  %392 = fmul fast float %340, %90
  %393 = fmul fast float %350, %90
  %394 = fmul fast float %360, %90
  %395 = fmul fast float %341, %90
  %396 = fmul fast float %351, %90
  %397 = fmul fast float %361, %90
  %398 = fadd fast float %374, %386
  %399 = fadd fast float %375, %387
  %400 = fadd fast float %376, %388
  %401 = fadd fast float %377, %389
  %402 = fadd fast float %378, %390
  %403 = fadd fast float %379, %391
  %404 = fadd fast float %380, %392
  %405 = fadd fast float %381, %393
  %406 = fadd fast float %382, %394
  %407 = fadd fast float %383, %395
  %408 = fadd fast float %384, %396
  %409 = fadd fast float %385, %397
  %410 = mul i32 %37, %8
  %411 = add i32 %410, %7
  %412 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %411, i32 undef)  ; BufferLoad(srv,index,wot)
  %413 = extractvalue %dx.types.ResRet.i32 %412, 0
  %414 = extractvalue %dx.types.ResRet.i32 %412, 1
  %415 = extractvalue %dx.types.ResRet.i32 %412, 2
  %416 = extractvalue %dx.types.ResRet.i32 %412, 3
  %417 = bitcast i32 %413 to float
  %418 = bitcast i32 %414 to float
  %419 = bitcast i32 %415 to float
  %420 = bitcast i32 %416 to float
  %421 = add i32 %411, 16
  %422 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %421, i32 undef)  ; BufferLoad(srv,index,wot)
  %423 = extractvalue %dx.types.ResRet.i32 %422, 0
  %424 = extractvalue %dx.types.ResRet.i32 %422, 1
  %425 = extractvalue %dx.types.ResRet.i32 %422, 2
  %426 = extractvalue %dx.types.ResRet.i32 %422, 3
  %427 = bitcast i32 %423 to float
  %428 = bitcast i32 %424 to float
  %429 = bitcast i32 %425 to float
  %430 = bitcast i32 %426 to float
  %431 = add i32 %411, 32
  %432 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %431, i32 undef)  ; BufferLoad(srv,index,wot)
  %433 = extractvalue %dx.types.ResRet.i32 %432, 0
  %434 = extractvalue %dx.types.ResRet.i32 %432, 1
  %435 = extractvalue %dx.types.ResRet.i32 %432, 2
  %436 = extractvalue %dx.types.ResRet.i32 %432, 3
  %437 = bitcast i32 %433 to float
  %438 = bitcast i32 %434 to float
  %439 = bitcast i32 %435 to float
  %440 = bitcast i32 %436 to float
  %441 = mul i32 %29, %8
  %442 = add i32 %441, %7
  %443 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %442, i32 undef)  ; BufferLoad(srv,index,wot)
  %444 = extractvalue %dx.types.ResRet.i32 %443, 0
  %445 = extractvalue %dx.types.ResRet.i32 %443, 1
  %446 = extractvalue %dx.types.ResRet.i32 %443, 2
  %447 = extractvalue %dx.types.ResRet.i32 %443, 3
  %448 = bitcast i32 %444 to float
  %449 = bitcast i32 %445 to float
  %450 = bitcast i32 %446 to float
  %451 = bitcast i32 %447 to float
  %452 = add i32 %442, 16
  %453 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %452, i32 undef)  ; BufferLoad(srv,index,wot)
  %454 = extractvalue %dx.types.ResRet.i32 %453, 0
  %455 = extractvalue %dx.types.ResRet.i32 %453, 1
  %456 = extractvalue %dx.types.ResRet.i32 %453, 2
  %457 = extractvalue %dx.types.ResRet.i32 %453, 3
  %458 = bitcast i32 %454 to float
  %459 = bitcast i32 %455 to float
  %460 = bitcast i32 %456 to float
  %461 = bitcast i32 %457 to float
  %462 = add i32 %442, 32
  %463 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %462, i32 undef)  ; BufferLoad(srv,index,wot)
  %464 = extractvalue %dx.types.ResRet.i32 %463, 0
  %465 = extractvalue %dx.types.ResRet.i32 %463, 1
  %466 = extractvalue %dx.types.ResRet.i32 %463, 2
  %467 = extractvalue %dx.types.ResRet.i32 %463, 3
  %468 = bitcast i32 %464 to float
  %469 = bitcast i32 %465 to float
  %470 = bitcast i32 %466 to float
  %471 = bitcast i32 %467 to float
  %472 = fmul fast float %417, %87
  %473 = fmul fast float %427, %87
  %474 = fmul fast float %437, %87
  %475 = fmul fast float %418, %87
  %476 = fmul fast float %428, %87
  %477 = fmul fast float %438, %87
  %478 = fmul fast float %419, %87
  %479 = fmul fast float %429, %87
  %480 = fmul fast float %439, %87
  %481 = fmul fast float %420, %87
  %482 = fmul fast float %430, %87
  %483 = fmul fast float %440, %87
  %484 = fadd fast float %398, %472
  %485 = fadd fast float %399, %473
  %486 = fadd fast float %400, %474
  %487 = fadd fast float %401, %475
  %488 = fadd fast float %402, %476
  %489 = fadd fast float %403, %477
  %490 = fadd fast float %404, %478
  %491 = fadd fast float %405, %479
  %492 = fadd fast float %406, %480
  %493 = fadd fast float %407, %481
  %494 = fadd fast float %408, %482
  %495 = fadd fast float %409, %483
  %496 = fmul fast float %448, %91
  %497 = fmul fast float %458, %91
  %498 = fmul fast float %468, %91
  %499 = fmul fast float %449, %91
  %500 = fmul fast float %459, %91
  %501 = fmul fast float %469, %91
  %502 = fmul fast float %450, %91
  %503 = fmul fast float %460, %91
  %504 = fmul fast float %470, %91
  %505 = fmul fast float %451, %91
  %506 = fmul fast float %461, %91
  %507 = fmul fast float %471, %91
  %508 = fadd fast float %484, %496
  %509 = fadd fast float %485, %497
  %510 = fadd fast float %486, %498
  %511 = fadd fast float %487, %499
  %512 = fadd fast float %488, %500
  %513 = fadd fast float %489, %501
  %514 = fadd fast float %490, %502
  %515 = fadd fast float %491, %503
  %516 = fadd fast float %492, %504
  %517 = fadd fast float %493, %505
  %518 = fadd fast float %494, %506
  %519 = fadd fast float %495, %507
  %520 = fadd fast float %23, %22
  %521 = fadd fast float %520, %24
  %522 = fadd fast float %521, %25
  %523 = fadd fast float %522, %30
  %524 = fadd fast float %523, %31
  %525 = fadd fast float %524, %32
  %526 = fadd fast float %525, %33
  %527 = fdiv fast float %526, %83
  %528 = fmul fast float %508, %41
  %529 = call float @dx.op.tertiary.f32(i32 46, float %509, float %42, float %528)  ; FMad(a,b,c)
  %530 = call float @dx.op.tertiary.f32(i32 46, float %510, float %43, float %529)  ; FMad(a,b,c)
  %531 = fmul fast float %508, %45
  %532 = call float @dx.op.tertiary.f32(i32 46, float %509, float %46, float %531)  ; FMad(a,b,c)
  %533 = call float @dx.op.tertiary.f32(i32 46, float %510, float %47, float %532)  ; FMad(a,b,c)
  %534 = fmul fast float %508, %49
  %535 = call float @dx.op.tertiary.f32(i32 46, float %509, float %50, float %534)  ; FMad(a,b,c)
  %536 = call float @dx.op.tertiary.f32(i32 46, float %510, float %51, float %535)  ; FMad(a,b,c)
  %537 = fmul fast float %511, %41
  %538 = call float @dx.op.tertiary.f32(i32 46, float %512, float %42, float %537)  ; FMad(a,b,c)
  %539 = call float @dx.op.tertiary.f32(i32 46, float %513, float %43, float %538)  ; FMad(a,b,c)
  %540 = fmul fast float %511, %45
  %541 = call float @dx.op.tertiary.f32(i32 46, float %512, float %46, float %540)  ; FMad(a,b,c)
  %542 = call float @dx.op.tertiary.f32(i32 46, float %513, float %47, float %541)  ; FMad(a,b,c)
  %543 = fmul fast float %511, %49
  %544 = call float @dx.op.tertiary.f32(i32 46, float %512, float %50, float %543)  ; FMad(a,b,c)
  %545 = call float @dx.op.tertiary.f32(i32 46, float %513, float %51, float %544)  ; FMad(a,b,c)
  %546 = fmul fast float %514, %41
  %547 = call float @dx.op.tertiary.f32(i32 46, float %515, float %42, float %546)  ; FMad(a,b,c)
  %548 = call float @dx.op.tertiary.f32(i32 46, float %516, float %43, float %547)  ; FMad(a,b,c)
  %549 = fmul fast float %514, %45
  %550 = call float @dx.op.tertiary.f32(i32 46, float %515, float %46, float %549)  ; FMad(a,b,c)
  %551 = call float @dx.op.tertiary.f32(i32 46, float %516, float %47, float %550)  ; FMad(a,b,c)
  %552 = fmul fast float %514, %49
  %553 = call float @dx.op.tertiary.f32(i32 46, float %515, float %50, float %552)  ; FMad(a,b,c)
  %554 = call float @dx.op.tertiary.f32(i32 46, float %516, float %51, float %553)  ; FMad(a,b,c)
  %555 = fmul fast float %517, %41
  %556 = call float @dx.op.tertiary.f32(i32 46, float %518, float %42, float %555)  ; FMad(a,b,c)
  %557 = call float @dx.op.tertiary.f32(i32 46, float %519, float %43, float %556)  ; FMad(a,b,c)
  %558 = call float @dx.op.tertiary.f32(i32 46, float %527, float %66, float %557)  ; FMad(a,b,c)
  %559 = fmul fast float %517, %45
  %560 = call float @dx.op.tertiary.f32(i32 46, float %518, float %46, float %559)  ; FMad(a,b,c)
  %561 = call float @dx.op.tertiary.f32(i32 46, float %519, float %47, float %560)  ; FMad(a,b,c)
  %562 = call float @dx.op.tertiary.f32(i32 46, float %527, float %67, float %561)  ; FMad(a,b,c)
  %563 = fmul fast float %517, %49
  %564 = call float @dx.op.tertiary.f32(i32 46, float %518, float %50, float %563)  ; FMad(a,b,c)
  %565 = call float @dx.op.tertiary.f32(i32 46, float %519, float %51, float %564)  ; FMad(a,b,c)
  %566 = call float @dx.op.tertiary.f32(i32 46, float %527, float %68, float %565)  ; FMad(a,b,c)
  %567 = fmul fast float %17, 2.000000e+00
  %568 = fmul fast float %18, 2.000000e+00
  %569 = fmul fast float %19, 2.000000e+00
  %570 = fadd fast float %567, -1.000000e+00
  %571 = fadd fast float %568, -1.000000e+00
  %572 = fadd fast float %569, -1.000000e+00
  %573 = fmul fast float %13, 2.000000e+00
  %574 = fmul fast float %14, 2.000000e+00
  %575 = fmul fast float %15, 2.000000e+00
  %576 = fadd fast float %573, -1.000000e+00
  %577 = fadd fast float %574, -1.000000e+00
  %578 = fadd fast float %575, -1.000000e+00
  %579 = fmul fast float %16, 2.000000e+00
  %580 = fadd fast float %579, -1.000000e+00
  %581 = fmul fast float %571, %578
  %582 = fmul fast float %572, %577
  %583 = fsub fast float %581, %582
  %584 = fmul fast float %572, %576
  %585 = fmul fast float %570, %578
  %586 = fsub fast float %584, %585
  %587 = fmul fast float %570, %577
  %588 = fmul fast float %571, %576
  %589 = fsub fast float %587, %588
  %590 = fmul fast float %583, %580
  %591 = fmul fast float %586, %580
  %592 = fmul fast float %589, %580
  %593 = fmul fast float %530, %576
  %594 = call float @dx.op.tertiary.f32(i32 46, float %577, float %539, float %593)  ; FMad(a,b,c)
  %595 = call float @dx.op.tertiary.f32(i32 46, float %578, float %548, float %594)  ; FMad(a,b,c)
  %596 = fmul fast float %533, %576
  %597 = call float @dx.op.tertiary.f32(i32 46, float %577, float %542, float %596)  ; FMad(a,b,c)
  %598 = call float @dx.op.tertiary.f32(i32 46, float %578, float %551, float %597)  ; FMad(a,b,c)
  %599 = fmul fast float %536, %576
  %600 = call float @dx.op.tertiary.f32(i32 46, float %577, float %545, float %599)  ; FMad(a,b,c)
  %601 = call float @dx.op.tertiary.f32(i32 46, float %578, float %554, float %600)  ; FMad(a,b,c)
  %602 = fmul fast float %530, %590
  %603 = call float @dx.op.tertiary.f32(i32 46, float %591, float %539, float %602)  ; FMad(a,b,c)
  %604 = call float @dx.op.tertiary.f32(i32 46, float %592, float %548, float %603)  ; FMad(a,b,c)
  %605 = fmul fast float %533, %590
  %606 = call float @dx.op.tertiary.f32(i32 46, float %591, float %542, float %605)  ; FMad(a,b,c)
  %607 = call float @dx.op.tertiary.f32(i32 46, float %592, float %551, float %606)  ; FMad(a,b,c)
  %608 = fmul fast float %536, %590
  %609 = call float @dx.op.tertiary.f32(i32 46, float %591, float %545, float %608)  ; FMad(a,b,c)
  %610 = call float @dx.op.tertiary.f32(i32 46, float %592, float %554, float %609)  ; FMad(a,b,c)
  %611 = fmul fast float %530, %570
  %612 = call float @dx.op.tertiary.f32(i32 46, float %571, float %539, float %611)  ; FMad(a,b,c)
  %613 = call float @dx.op.tertiary.f32(i32 46, float %572, float %548, float %612)  ; FMad(a,b,c)
  %614 = fmul fast float %533, %570
  %615 = call float @dx.op.tertiary.f32(i32 46, float %571, float %542, float %614)  ; FMad(a,b,c)
  %616 = call float @dx.op.tertiary.f32(i32 46, float %572, float %551, float %615)  ; FMad(a,b,c)
  %617 = fmul fast float %536, %570
  %618 = call float @dx.op.tertiary.f32(i32 46, float %571, float %545, float %617)  ; FMad(a,b,c)
  %619 = call float @dx.op.tertiary.f32(i32 46, float %572, float %554, float %618)  ; FMad(a,b,c)
  %620 = call float @dx.op.dot3.f32(i32 55, float %613, float %616, float %619, float %613, float %616, float %619)  ; Dot3(ax,ay,az,bx,by,bz)
  %621 = call float @dx.op.unary.f32(i32 25, float %620)  ; Rsqrt(value)
  %622 = fmul fast float %621, %613
  %623 = fmul fast float %621, %616
  %624 = fmul fast float %621, %619
  %625 = call float @dx.op.dot3.f32(i32 55, float %604, float %607, float %610, float %604, float %607, float %610)  ; Dot3(ax,ay,az,bx,by,bz)
  %626 = call float @dx.op.unary.f32(i32 25, float %625)  ; Rsqrt(value)
  %627 = fmul fast float %626, %604
  %628 = fmul fast float %626, %607
  %629 = fmul fast float %626, %610
  %630 = call float @dx.op.dot3.f32(i32 55, float %595, float %598, float %601, float %595, float %598, float %601)  ; Dot3(ax,ay,az,bx,by,bz)
  %631 = call float @dx.op.unary.f32(i32 25, float %630)  ; Rsqrt(value)
  %632 = fmul fast float %631, %595
  %633 = fmul fast float %631, %598
  %634 = fmul fast float %631, %601
  %635 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %636 = extractvalue %dx.types.CBufRet.i32 %635, 0
  %637 = add i32 %636, 0
  %638 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 %637, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %639 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %638, %dx.types.Handle %2, float %20, float %21, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %640 = extractvalue %dx.types.ResRet.f32 %639, 0
  %641 = call float @dx.op.unary.f32(i32 7, float %640)  ; Saturate(value)
  %642 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %643 = extractvalue %dx.types.CBufRet.f32 %642, 0
  %644 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %645 = extractvalue %dx.types.CBufRet.f32 %644, 0
  %646 = fmul fast float %643, %641
  %647 = fmul fast float %646, %645
  %648 = fmul fast float %647, 5.000000e-01
  %649 = fadd fast float %647, 5.000000e-01
  %650 = call float @dx.op.unary.f32(i32 22, float %649)  ; Frc(value)
  %651 = fmul fast float %650, 2.000000e+00
  %652 = fadd fast float %651, -1.000000e+00
  %653 = call float @dx.op.unary.f32(i32 6, float %652)  ; FAbs(value)
  %654 = fmul fast float %653, 2.000000e+00
  %655 = fsub fast float 3.000000e+00, %654
  %656 = fmul fast float %653, %653
  %657 = fmul fast float %656, 2.000000e+00
  %658 = fmul fast float %657, %655
  %659 = fadd fast float %658, -1.000000e+00
  %660 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %661 = extractvalue %dx.types.CBufRet.f32 %660, 0
  %662 = fmul fast float %641, 0x3F1A36E2E0000000
  %663 = fmul fast float %662, %661
  %664 = fmul fast float %663, %659
  %665 = fadd fast float %648, 0x400090FDC0000000
  %666 = call float @dx.op.unary.f32(i32 22, float %665)  ; Frc(value)
  %667 = fmul fast float %666, 2.000000e+00
  %668 = fadd fast float %667, -1.000000e+00
  %669 = call float @dx.op.unary.f32(i32 6, float %668)  ; FAbs(value)
  %670 = fmul fast float %669, 2.000000e+00
  %671 = fsub fast float 3.000000e+00, %670
  %672 = fmul fast float %669, %669
  %673 = fmul fast float %672, 2.000000e+00
  %674 = fmul fast float %673, %671
  %675 = fadd fast float %674, -1.000000e+00
  %676 = fmul fast float %663, %675
  %677 = call float @dx.op.dot3.f32(i32 55, float %622, float %623, float %624, float %622, float %623, float %624)  ; Dot3(ax,ay,az,bx,by,bz)
  %678 = call float @dx.op.unary.f32(i32 25, float %677)  ; Rsqrt(value)
  %679 = fmul fast float %678, %622
  %680 = fmul fast float %678, %623
  %681 = fmul fast float %678, %624
  %682 = fmul fast float %679, %664
  %683 = fmul fast float %680, %664
  %684 = fmul fast float %681, %664
  %685 = call float @dx.op.dot3.f32(i32 55, float %632, float %633, float %634, float %632, float %633, float %634)  ; Dot3(ax,ay,az,bx,by,bz)
  %686 = call float @dx.op.unary.f32(i32 25, float %685)  ; Rsqrt(value)
  %687 = fmul fast float %686, %632
  %688 = fmul fast float %686, %633
  %689 = fmul fast float %686, %634
  %690 = fmul fast float %687, %676
  %691 = fmul fast float %688, %676
  %692 = fmul fast float %689, %676
  %693 = fadd fast float %77, %70
  %694 = fadd fast float %693, %682
  %695 = fadd fast float %694, %690
  %696 = fadd fast float %78, %71
  %697 = fadd fast float %696, %683
  %698 = fadd fast float %697, %691
  %699 = fadd fast float %79, %72
  %700 = fadd fast float %699, %684
  %701 = fadd fast float %700, %692
  %702 = fmul fast float %695, %530
  %703 = call float @dx.op.tertiary.f32(i32 46, float %698, float %539, float %702)  ; FMad(a,b,c)
  %704 = call float @dx.op.tertiary.f32(i32 46, float %701, float %548, float %703)  ; FMad(a,b,c)
  %705 = fadd fast float %704, %558
  %706 = fmul fast float %695, %533
  %707 = call float @dx.op.tertiary.f32(i32 46, float %698, float %542, float %706)  ; FMad(a,b,c)
  %708 = call float @dx.op.tertiary.f32(i32 46, float %701, float %551, float %707)  ; FMad(a,b,c)
  %709 = fadd fast float %708, %562
  %710 = fmul fast float %695, %536
  %711 = call float @dx.op.tertiary.f32(i32 46, float %698, float %545, float %710)  ; FMad(a,b,c)
  %712 = call float @dx.op.tertiary.f32(i32 46, float %701, float %554, float %711)  ; FMad(a,b,c)
  %713 = fadd fast float %712, %566
  %714 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 37)  ; CBufferLoadLegacy(handle,regIndex)
  %715 = extractvalue %dx.types.CBufRet.f32 %714, 0
  %716 = extractvalue %dx.types.CBufRet.f32 %714, 1
  %717 = extractvalue %dx.types.CBufRet.f32 %714, 2
  %718 = fadd fast float %715, %705
  %719 = fadd fast float %716, %709
  %720 = fadd fast float %717, %713
  %721 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %722 = extractvalue %dx.types.CBufRet.f32 %721, 0
  %723 = extractvalue %dx.types.CBufRet.f32 %721, 1
  %724 = extractvalue %dx.types.CBufRet.f32 %721, 2
  %725 = extractvalue %dx.types.CBufRet.f32 %721, 3
  %726 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %727 = extractvalue %dx.types.CBufRet.f32 %726, 0
  %728 = extractvalue %dx.types.CBufRet.f32 %726, 1
  %729 = extractvalue %dx.types.CBufRet.f32 %726, 2
  %730 = extractvalue %dx.types.CBufRet.f32 %726, 3
  %731 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %732 = extractvalue %dx.types.CBufRet.f32 %731, 0
  %733 = extractvalue %dx.types.CBufRet.f32 %731, 1
  %734 = extractvalue %dx.types.CBufRet.f32 %731, 2
  %735 = extractvalue %dx.types.CBufRet.f32 %731, 3
  %736 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %737 = extractvalue %dx.types.CBufRet.f32 %736, 0
  %738 = extractvalue %dx.types.CBufRet.f32 %736, 1
  %739 = extractvalue %dx.types.CBufRet.f32 %736, 2
  %740 = extractvalue %dx.types.CBufRet.f32 %736, 3
  %741 = fmul fast float %722, %705
  %742 = call float @dx.op.tertiary.f32(i32 46, float %709, float %723, float %741)  ; FMad(a,b,c)
  %743 = call float @dx.op.tertiary.f32(i32 46, float %713, float %724, float %742)  ; FMad(a,b,c)
  %744 = fadd fast float %743, %725
  %745 = fmul fast float %727, %705
  %746 = call float @dx.op.tertiary.f32(i32 46, float %709, float %728, float %745)  ; FMad(a,b,c)
  %747 = call float @dx.op.tertiary.f32(i32 46, float %713, float %729, float %746)  ; FMad(a,b,c)
  %748 = fadd fast float %747, %730
  %749 = fmul fast float %732, %705
  %750 = call float @dx.op.tertiary.f32(i32 46, float %709, float %733, float %749)  ; FMad(a,b,c)
  %751 = call float @dx.op.tertiary.f32(i32 46, float %713, float %734, float %750)  ; FMad(a,b,c)
  %752 = fadd fast float %751, %735
  %753 = fmul fast float %737, %705
  %754 = call float @dx.op.tertiary.f32(i32 46, float %709, float %738, float %753)  ; FMad(a,b,c)
  %755 = call float @dx.op.tertiary.f32(i32 46, float %713, float %739, float %754)  ; FMad(a,b,c)
  %756 = fadd fast float %755, %740
  %757 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %758 = extractvalue %dx.types.CBufRet.f32 %757, 0
  %759 = extractvalue %dx.types.CBufRet.f32 %757, 1
  %760 = extractvalue %dx.types.CBufRet.f32 %757, 2
  %761 = extractvalue %dx.types.CBufRet.f32 %757, 3
  %762 = call float @dx.op.dot4.f32(i32 56, float %758, float %759, float %760, float %761, float %718, float %719, float %720, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %744)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %748)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %752)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %756)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %718)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %719)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %720)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %20)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %21)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %9)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %10)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float %11)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %12)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %622)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %623)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %624)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %627)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float %628)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float %629)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float %632)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 0, float %633)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 1, float %634)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 0, float %762)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!16}
!dx.entryPoints = !{!17}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{!5, null, !9, !14}
!5 = !{!6, !8}
!6 = !{i32 0, [32768 x %"class.Texture2D<vector<float, 4> >"]* undef, !"", i32 1, i32 0, i32 32768, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 10, i32 1, i32 11, i32 0, null}
!9 = !{!10, !11, !12, !13}
!10 = !{i32 0, %GlobalShaderConsts* undef, !"", i32 0, i32 0, i32 1, i32 476, null}
!11 = !{i32 1, %hostlayout.CameraShaderConsts* undef, !"", i32 0, i32 1, i32 1, i32 848, null}
!12 = !{i32 2, %ShaderSpecificConstants* undef, !"", i32 0, i32 4, i32 1, i32 36, null}
!13 = !{i32 3, %hostlayout.FrequentVertexConsts* undef, !"", i32 0, i32 5, i32 1, i32 112, null}
!14 = !{!15}
!15 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!16 = !{[59 x i32] [i32 57, i32 25, i32 16777343, i32 16777343, i32 16777343, i32 0, i32 20963455, i32 20963455, i32 20963455, i32 20963455, i32 20963455, i32 20963455, i32 20963455, i32 20963455, i32 20963455, i32 20963455, i32 20963455, i32 20963455, i32 20963455, i32 20963455, i32 20963455, i32 20963455, i32 16777471, i32 16777599, i32 0, i32 0, i32 17293439, i32 17293439, i32 17293439, i32 0, i32 20906111, i32 20906111, i32 20906111, i32 458752, i32 512, i32 1024, i32 2048, i32 4096, i32 0, i32 0, i32 0, i32 0, i32 20963455, i32 20963455, i32 20963455, i32 16777247, i32 20963455, i32 20963455, i32 20963455, i32 16777263, i32 20963455, i32 20963455, i32 20963455, i32 16777295, i32 20963455, i32 20963455, i32 0, i32 0, i32 0]}
!17 = !{void ()* @vs_main_, !"vs_main_", !18, !4, !51}
!18 = !{!19, !39, null}
!19 = !{!20, !23, !25, !26, !28, !29, !31, !32, !33, !34, !35, !37, !38}
!20 = !{i32 0, !"POSITION", i8 9, i8 0, !21, i8 0, i32 1, i8 3, i32 0, i8 0, !22}
!21 = !{i32 0}
!22 = !{i32 3, i32 7}
!23 = !{i32 1, !"BLENDINDICES", i8 5, i8 0, !21, i8 0, i32 1, i8 4, i32 1, i8 0, !24}
!24 = !{i32 3, i32 15}
!25 = !{i32 2, !"BLENDWEIGHT", i8 9, i8 0, !21, i8 0, i32 1, i8 4, i32 2, i8 0, !24}
!26 = !{i32 3, !"BLENDINDICES", i8 5, i8 0, !27, i8 0, i32 1, i8 4, i32 3, i8 0, !24}
!27 = !{i32 1}
!28 = !{i32 4, !"BLENDWEIGHT", i8 9, i8 0, !27, i8 0, i32 1, i8 4, i32 4, i8 0, !24}
!29 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !21, i8 0, i32 1, i8 2, i32 5, i8 0, !30}
!30 = !{i32 3, i32 3}
!31 = !{i32 6, !"NORMAL", i8 9, i8 0, !21, i8 0, i32 1, i8 3, i32 6, i8 0, !22}
!32 = !{i32 7, !"TANGENT", i8 9, i8 0, !21, i8 0, i32 1, i8 4, i32 7, i8 0, !24}
!33 = !{i32 8, !"COLOR", i8 9, i8 0, !21, i8 0, i32 1, i8 4, i32 8, i8 0, !24}
!34 = !{i32 9, !"TEXCOORD", i8 9, i8 0, !27, i8 0, i32 1, i8 2, i32 9, i8 0, null}
!35 = !{i32 10, !"INSTANCE_TRANSFORM", i8 9, i8 0, !36, i8 0, i32 3, i8 4, i32 10, i8 0, !24}
!36 = !{i32 0, i32 1, i32 2}
!37 = !{i32 11, !"INSTANCE_SKINNING_DATA", i8 5, i8 0, !21, i8 0, i32 1, i8 4, i32 13, i8 0, !30}
!38 = !{i32 12, !"SV_VertexID", i8 5, i8 1, !21, i8 0, i32 1, i8 1, i32 14, i8 0, null}
!39 = !{!40, !41, !42, !43, !45, !47, !49}
!40 = !{i32 0, !"SV_Position", i8 9, i8 3, !21, i8 4, i32 1, i8 4, i32 0, i8 0, !24}
!41 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !21, i8 2, i32 1, i8 4, i32 1, i8 0, !24}
!42 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !27, i8 2, i32 1, i8 4, i32 2, i8 0, !24}
!43 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !44, i8 2, i32 1, i8 4, i32 3, i8 0, !24}
!44 = !{i32 2}
!45 = !{i32 4, !"TEXCOORD", i8 9, i8 0, !46, i8 2, i32 1, i8 4, i32 4, i8 0, !24}
!46 = !{i32 3}
!47 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !48, i8 2, i32 1, i8 2, i32 5, i8 0, !30}
!48 = !{i32 4}
!49 = !{i32 6, !"SV_ClipDistance", i8 9, i8 6, !21, i8 2, i32 1, i8 1, i32 6, i8 0, !50}
!50 = !{i32 3, i32 1}
!51 = !{i32 0, i64 16}
 