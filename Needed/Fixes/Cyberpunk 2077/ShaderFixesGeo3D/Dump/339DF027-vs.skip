;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; POSITION                 0   xyz         0     NONE   float   xyz 
; TEXCOORD                 0   xy          1     NONE   float   xy  
; NORMAL                   0   xyz         2     NONE   float   xyz 
; TANGENT                  0   xyzw        3     NONE   float   xyzw
; COLOR                    0   xyzw        4     NONE   float       
; TEXCOORD                 1   xy          5     NONE   float       
; EXTRA_DATA               0   xyzw        6     NONE   float       
; EXTRA_DATA               1   xyzw        7     NONE   float       
; EXTRA_DATA               2   xyzw        8     NONE   float       
; INSTANCE_TRANSFORM       0   xyzw        9     NONE   float   xyzw
; INSTANCE_TRANSFORM       1   xyzw       10     NONE   float   xyzw
; INSTANCE_TRANSFORM       2   xyzw       11     NONE   float   xyzw
; SV_InstanceID            0   x          12   INSTID    uint       
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; TEXCOORD                 0   xyzw        1     NONE   float   xyzw
; TEXCOORD                 1   xyzw        2     NONE   float   xyzw
; TEXCOORD                 2   xyzw        3     NONE   float   xyzw
; TEXCOORD                 3   xyz         4     NONE   float   xyz 
; TEXCOORD                 4   xyz         5     NONE   float   xyz 
;
; shader hash: baba53e30a2835d2bd715300a8260d46
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; POSITION                 0                              
; TEXCOORD                 0                              
; NORMAL                   0                              
; TANGENT                  0                              
; COLOR                    0                              
; TEXCOORD                 1                              
; EXTRA_DATA               0                              
; EXTRA_DATA               1                              
; EXTRA_DATA               2                              
; INSTANCE_TRANSFORM       0                              
; SV_InstanceID            0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; TEXCOORD                 3                 linear       
; TEXCOORD                 4        nointerpolation       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [848 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [112 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [84 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb1     1
;                                   cbuffer      NA          NA     CB1            cb5     1
;                                   cbuffer      NA          NA     CB2            cb4     1
;
;
; ViewId state:
;
; Number of inputs: 49, outputs: 23
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2, 8, 9, 10, 12, 13, 14, 15, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 }
;   output 1 depends on inputs: { 0, 1, 2, 8, 9, 10, 12, 13, 14, 15, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 }
;   output 2 depends on inputs: { 0, 1, 2, 8, 9, 10, 12, 13, 14, 15, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 }
;   output 3 depends on inputs: { 0, 1, 2, 8, 9, 10, 12, 13, 14, 15, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 }
;   output 4 depends on inputs: { 4 }
;   output 5 depends on inputs: { 5 }
;   output 6 depends on inputs: { 8, 9, 10, 36, 37, 38, 40, 41, 42, 44, 45, 46 }
;   output 7 depends on inputs: { 8, 9, 10, 36, 37, 38, 40, 41, 42, 44, 45, 46 }
;   output 8 depends on inputs: { 8, 9, 10, 36, 37, 38, 40, 41, 42, 44, 45, 46 }
;   output 9 depends on inputs: { 8, 9, 10, 12, 13, 14, 15, 36, 37, 38, 40, 41, 42, 44, 45, 46 }
;   output 10 depends on inputs: { 8, 9, 10, 12, 13, 14, 15, 36, 37, 38, 40, 41, 42, 44, 45, 46 }
;   output 11 depends on inputs: { 8, 9, 10, 12, 13, 14, 15, 36, 37, 38, 40, 41, 42, 44, 45, 46 }
;   output 12 depends on inputs: { 12, 13, 14, 36, 37, 38, 40, 41, 42, 44, 45, 46 }
;   output 13 depends on inputs: { 12, 13, 14, 36, 37, 38, 40, 41, 42, 44, 45, 46 }
;   output 14 depends on inputs: { 12, 13, 14, 36, 37, 38, 40, 41, 42, 44, 45, 46 }
;   output 15 depends on inputs: { 0, 1, 2, 8, 9, 10, 12, 13, 14, 15, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 }
;   output 16 depends on inputs: { 0, 1, 2, 8, 9, 10, 12, 13, 14, 15, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 }
;   output 17 depends on inputs: { 0, 1, 2, 8, 9, 10, 12, 13, 14, 15, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 }
;   output 18 depends on inputs: { 8, 9, 10, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 }
;   output 20 depends on inputs: { 39 }
;   output 21 depends on inputs: { 43 }
;   output 22 depends on inputs: { 47 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%hostlayout.CameraShaderConsts = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, i32, i32, <2 x i32>, float, float }
%hostlayout.FrequentVertexConsts = type { [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float> }
%ShaderSpecificConstants = type { i32, float, float, float, float, float }

define void @vs_main_() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 2, i32 4, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 1, i32 5, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 9, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 9, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 9, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call float @dx.op.loadInput.f32(i32 4, i32 9, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %20 = call float @dx.op.loadInput.f32(i32 4, i32 9, i32 1, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %21 = call float @dx.op.loadInput.f32(i32 4, i32 9, i32 1, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %22 = call float @dx.op.loadInput.f32(i32 4, i32 9, i32 1, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %23 = call float @dx.op.loadInput.f32(i32 4, i32 9, i32 1, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %24 = call float @dx.op.loadInput.f32(i32 4, i32 9, i32 2, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %25 = call float @dx.op.loadInput.f32(i32 4, i32 9, i32 2, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %26 = call float @dx.op.loadInput.f32(i32 4, i32 9, i32 2, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %27 = call float @dx.op.loadInput.f32(i32 4, i32 9, i32 2, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %28 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %29 = extractvalue %dx.types.CBufRet.i32 %28, 0
  %30 = extractvalue %dx.types.CBufRet.i32 %28, 1
  %31 = extractvalue %dx.types.CBufRet.i32 %28, 2
  %32 = bitcast float %19 to i32
  %33 = bitcast float %23 to i32
  %34 = bitcast float %27 to i32
  %35 = sub i32 %32, %29
  %36 = sub i32 %33, %30
  %37 = sub i32 %34, %31
  %38 = sitofp i32 %35 to float
  %39 = sitofp i32 %36 to float
  %40 = sitofp i32 %37 to float
  %41 = fmul fast float %38, 0x3EE0000000000000
  %42 = fmul fast float %39, 0x3EE0000000000000
  %43 = fmul fast float %40, 0x3EE0000000000000
  %44 = fmul fast float %8, 2.000000e+00
  %45 = fmul fast float %9, 2.000000e+00
  %46 = fmul fast float %10, 2.000000e+00
  %47 = fadd fast float %44, -1.000000e+00
  %48 = fadd fast float %45, -1.000000e+00
  %49 = fadd fast float %46, -1.000000e+00
  %50 = fmul fast float %4, 2.000000e+00
  %51 = fmul fast float %5, 2.000000e+00
  %52 = fmul fast float %6, 2.000000e+00
  %53 = fadd fast float %50, -1.000000e+00
  %54 = fadd fast float %51, -1.000000e+00
  %55 = fadd fast float %52, -1.000000e+00
  %56 = fmul fast float %7, 2.000000e+00
  %57 = fadd fast float %56, -1.000000e+00
  %58 = fmul fast float %48, %55
  %59 = fmul fast float %49, %54
  %60 = fsub fast float %58, %59
  %61 = fmul fast float %49, %53
  %62 = fmul fast float %47, %55
  %63 = fsub fast float %61, %62
  %64 = fmul fast float %47, %54
  %65 = fmul fast float %48, %53
  %66 = fsub fast float %64, %65
  %67 = fmul fast float %60, %57
  %68 = fmul fast float %63, %57
  %69 = fmul fast float %66, %57
  %70 = call float @dx.op.dot3.f32(i32 55, float %67, float %68, float %69, float %67, float %68, float %69)  ; Dot3(ax,ay,az,bx,by,bz)
  %71 = call float @dx.op.unary.f32(i32 25, float %70)  ; Rsqrt(value)
  %72 = fmul fast float %71, %67
  %73 = fmul fast float %71, %68
  %74 = fmul fast float %71, %69
  %75 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %76 = extractvalue %dx.types.CBufRet.f32 %75, 0
  %77 = extractvalue %dx.types.CBufRet.f32 %75, 1
  %78 = extractvalue %dx.types.CBufRet.f32 %75, 2
  %79 = fmul fast float %76, %13
  %80 = fmul fast float %77, %14
  %81 = fmul fast float %78, %15
  %82 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %83 = extractvalue %dx.types.CBufRet.f32 %82, 0
  %84 = extractvalue %dx.types.CBufRet.f32 %82, 1
  %85 = extractvalue %dx.types.CBufRet.f32 %82, 2
  %86 = fadd fast float %79, %83
  %87 = fadd fast float %80, %84
  %88 = fadd fast float %81, %85
  %89 = fmul fast float %16, %47
  %90 = call float @dx.op.tertiary.f32(i32 46, float %48, float %17, float %89)  ; FMad(a,b,c)
  %91 = call float @dx.op.tertiary.f32(i32 46, float %49, float %18, float %90)  ; FMad(a,b,c)
  %92 = fmul fast float %20, %47
  %93 = call float @dx.op.tertiary.f32(i32 46, float %48, float %21, float %92)  ; FMad(a,b,c)
  %94 = call float @dx.op.tertiary.f32(i32 46, float %49, float %22, float %93)  ; FMad(a,b,c)
  %95 = fmul fast float %24, %47
  %96 = call float @dx.op.tertiary.f32(i32 46, float %48, float %25, float %95)  ; FMad(a,b,c)
  %97 = call float @dx.op.tertiary.f32(i32 46, float %49, float %26, float %96)  ; FMad(a,b,c)
  %98 = call float @dx.op.dot3.f32(i32 55, float %91, float %94, float %97, float %91, float %94, float %97)  ; Dot3(ax,ay,az,bx,by,bz)
  %99 = call float @dx.op.unary.f32(i32 25, float %98)  ; Rsqrt(value)
  %100 = fmul fast float %99, %91
  %101 = fmul fast float %99, %94
  %102 = fmul fast float %99, %97
  %103 = fmul fast float %72, %16
  %104 = call float @dx.op.tertiary.f32(i32 46, float %73, float %17, float %103)  ; FMad(a,b,c)
  %105 = call float @dx.op.tertiary.f32(i32 46, float %74, float %18, float %104)  ; FMad(a,b,c)
  %106 = fmul fast float %72, %20
  %107 = call float @dx.op.tertiary.f32(i32 46, float %73, float %21, float %106)  ; FMad(a,b,c)
  %108 = call float @dx.op.tertiary.f32(i32 46, float %74, float %22, float %107)  ; FMad(a,b,c)
  %109 = fmul fast float %72, %24
  %110 = call float @dx.op.tertiary.f32(i32 46, float %73, float %25, float %109)  ; FMad(a,b,c)
  %111 = call float @dx.op.tertiary.f32(i32 46, float %74, float %26, float %110)  ; FMad(a,b,c)
  %112 = call float @dx.op.dot3.f32(i32 55, float %105, float %108, float %111, float %105, float %108, float %111)  ; Dot3(ax,ay,az,bx,by,bz)
  %113 = call float @dx.op.unary.f32(i32 25, float %112)  ; Rsqrt(value)
  %114 = fmul fast float %113, %105
  %115 = fmul fast float %113, %108
  %116 = fmul fast float %113, %111
  %117 = fmul fast float %16, %53
  %118 = call float @dx.op.tertiary.f32(i32 46, float %54, float %17, float %117)  ; FMad(a,b,c)
  %119 = call float @dx.op.tertiary.f32(i32 46, float %55, float %18, float %118)  ; FMad(a,b,c)
  %120 = fmul fast float %20, %53
  %121 = call float @dx.op.tertiary.f32(i32 46, float %54, float %21, float %120)  ; FMad(a,b,c)
  %122 = call float @dx.op.tertiary.f32(i32 46, float %55, float %22, float %121)  ; FMad(a,b,c)
  %123 = fmul fast float %24, %53
  %124 = call float @dx.op.tertiary.f32(i32 46, float %54, float %25, float %123)  ; FMad(a,b,c)
  %125 = call float @dx.op.tertiary.f32(i32 46, float %55, float %26, float %124)  ; FMad(a,b,c)
  %126 = call float @dx.op.dot3.f32(i32 55, float %119, float %122, float %125, float %119, float %122, float %125)  ; Dot3(ax,ay,az,bx,by,bz)
  %127 = call float @dx.op.unary.f32(i32 25, float %126)  ; Rsqrt(value)
  %128 = fmul fast float %127, %119
  %129 = fmul fast float %127, %122
  %130 = fmul fast float %127, %125
  %131 = call float @dx.op.dot3.f32(i32 55, float %100, float %101, float %102, float %100, float %101, float %102)  ; Dot3(ax,ay,az,bx,by,bz)
  %132 = call float @dx.op.unary.f32(i32 25, float %131)  ; Rsqrt(value)
  %133 = fmul fast float %132, %100
  %134 = fmul fast float %132, %101
  %135 = fmul fast float %132, %102
  %136 = call float @dx.op.dot3.f32(i32 55, float %128, float %129, float %130, float %128, float %129, float %130)  ; Dot3(ax,ay,az,bx,by,bz)
  %137 = call float @dx.op.unary.f32(i32 25, float %136)  ; Rsqrt(value)
  %138 = fmul fast float %137, %128
  %139 = fmul fast float %137, %129
  %140 = fmul fast float %137, %130
  %141 = call float @dx.op.dot3.f32(i32 55, float %114, float %115, float %116, float %114, float %115, float %116)  ; Dot3(ax,ay,az,bx,by,bz)
  %142 = call float @dx.op.unary.f32(i32 25, float %141)  ; Rsqrt(value)
  %143 = fmul fast float %142, %114
  %144 = fmul fast float %142, %115
  %145 = fmul fast float %142, %116
  %146 = sitofp i32 %32 to float
  %147 = sitofp i32 %33 to float
  %148 = sitofp i32 %34 to float
  %149 = fmul fast float %146, 0x3EE0000000000000
  %150 = fmul fast float %147, 0x3EE0000000000000
  %151 = fmul fast float %148, 0x3EE0000000000000
  %152 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 39)  ; CBufferLoadLegacy(handle,regIndex)
  %153 = extractvalue %dx.types.CBufRet.f32 %152, 3
  %154 = fcmp fast ogt float %153, 5.000000e-01
  %155 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 48)  ; CBufferLoadLegacy(handle,regIndex)
  %156 = extractvalue %dx.types.CBufRet.f32 %155, 0
  %157 = fcmp fast olt float %156, 5.000000e-01
  %158 = extractvalue %dx.types.CBufRet.f32 %152, 0
  %159 = extractvalue %dx.types.CBufRet.f32 %152, 1
  %160 = extractvalue %dx.types.CBufRet.f32 %152, 2
  %161 = fsub fast float -0.000000e+00, %158
  %162 = fsub fast float -0.000000e+00, %159
  %163 = fsub fast float -0.000000e+00, %160
  %164 = or i1 %154, %157
  %165 = select i1 %164, float %158, float %161
  %166 = or i1 %154, %157
  %167 = select i1 %166, float %159, float %162
  %168 = or i1 %154, %157
  %169 = select i1 %168, float %160, float %163
  %170 = uitofp i1 %154 to float
  %171 = fmul fast float %170, %149
  %172 = fmul fast float %170, %150
  %173 = fmul fast float %170, %151
  %174 = fsub fast float %165, %171
  %175 = fsub fast float %167, %172
  %176 = fsub fast float %169, %173
  %177 = call float @dx.op.dot3.f32(i32 55, float %174, float %175, float %176, float %174, float %175, float %176)  ; Dot3(ax,ay,az,bx,by,bz)
  %178 = call float @dx.op.unary.f32(i32 25, float %177)  ; Rsqrt(value)
  %179 = fmul fast float %174, %178
  %180 = fmul fast float %175, %178
  %181 = fcmp fast ogt float %135, 5.000000e-01
  br i1 %181, label %252, label %182

; <label>:182                                     ; preds = %0
  %183 = call float @dx.op.dot3.f32(i32 55, float %179, float %180, float 0.000000e+00, float %179, float %180, float 0.000000e+00)  ; Dot3(ax,ay,az,bx,by,bz)
  %184 = call float @dx.op.unary.f32(i32 25, float %183)  ; Rsqrt(value)
  %185 = fmul fast float %184, %179
  %186 = fmul fast float %184, %180
  %187 = fsub fast float -0.000000e+00, %186
  %188 = call float @dx.op.tertiary.f32(i32 46, float %143, float -1.000000e+00, float 0.000000e+00)  ; FMad(a,b,c)
  %189 = call float @dx.op.tertiary.f32(i32 46, float %144, float -1.000000e+00, float 0.000000e+00)  ; FMad(a,b,c)
  %190 = call float @dx.op.tertiary.f32(i32 46, float %145, float -1.000000e+00, float 0.000000e+00)  ; FMad(a,b,c)
  %191 = fmul fast float %138, %16
  %192 = call float @dx.op.tertiary.f32(i32 46, float %133, float %20, float %191)  ; FMad(a,b,c)
  %193 = call float @dx.op.tertiary.f32(i32 46, float %188, float %24, float %192)  ; FMad(a,b,c)
  %194 = fmul fast float %138, %17
  %195 = call float @dx.op.tertiary.f32(i32 46, float %133, float %21, float %194)  ; FMad(a,b,c)
  %196 = call float @dx.op.tertiary.f32(i32 46, float %188, float %25, float %195)  ; FMad(a,b,c)
  %197 = fmul fast float %138, %18
  %198 = call float @dx.op.tertiary.f32(i32 46, float %133, float %22, float %197)  ; FMad(a,b,c)
  %199 = call float @dx.op.tertiary.f32(i32 46, float %188, float %26, float %198)  ; FMad(a,b,c)
  %200 = fmul fast float %139, %16
  %201 = call float @dx.op.tertiary.f32(i32 46, float %134, float %20, float %200)  ; FMad(a,b,c)
  %202 = call float @dx.op.tertiary.f32(i32 46, float %189, float %24, float %201)  ; FMad(a,b,c)
  %203 = fmul fast float %139, %17
  %204 = call float @dx.op.tertiary.f32(i32 46, float %134, float %21, float %203)  ; FMad(a,b,c)
  %205 = call float @dx.op.tertiary.f32(i32 46, float %189, float %25, float %204)  ; FMad(a,b,c)
  %206 = fmul fast float %139, %18
  %207 = call float @dx.op.tertiary.f32(i32 46, float %134, float %22, float %206)  ; FMad(a,b,c)
  %208 = call float @dx.op.tertiary.f32(i32 46, float %189, float %26, float %207)  ; FMad(a,b,c)
  %209 = fmul fast float %140, %16
  %210 = call float @dx.op.tertiary.f32(i32 46, float %135, float %20, float %209)  ; FMad(a,b,c)
  %211 = call float @dx.op.tertiary.f32(i32 46, float %190, float %24, float %210)  ; FMad(a,b,c)
  %212 = fmul fast float %140, %17
  %213 = call float @dx.op.tertiary.f32(i32 46, float %135, float %21, float %212)  ; FMad(a,b,c)
  %214 = call float @dx.op.tertiary.f32(i32 46, float %190, float %25, float %213)  ; FMad(a,b,c)
  %215 = fmul fast float %140, %18
  %216 = call float @dx.op.tertiary.f32(i32 46, float %135, float %22, float %215)  ; FMad(a,b,c)
  %217 = call float @dx.op.tertiary.f32(i32 46, float %190, float %26, float %216)  ; FMad(a,b,c)
  %218 = fmul fast float %193, %187
  %219 = call float @dx.op.tertiary.f32(i32 46, float %196, float %185, float %218)  ; FMad(a,b,c)
  %220 = fmul fast float %193, %185
  %221 = call float @dx.op.tertiary.f32(i32 46, float %196, float %186, float %220)  ; FMad(a,b,c)
  %222 = fmul fast float %202, %187
  %223 = call float @dx.op.tertiary.f32(i32 46, float %205, float %185, float %222)  ; FMad(a,b,c)
  %224 = fmul fast float %202, %185
  %225 = call float @dx.op.tertiary.f32(i32 46, float %205, float %186, float %224)  ; FMad(a,b,c)
  %226 = fmul fast float %211, %187
  %227 = call float @dx.op.tertiary.f32(i32 46, float %214, float %185, float %226)  ; FMad(a,b,c)
  %228 = fmul fast float %211, %185
  %229 = call float @dx.op.tertiary.f32(i32 46, float %214, float %186, float %228)  ; FMad(a,b,c)
  %230 = call float @dx.op.dot3.f32(i32 55, float %133, float %134, float 0.000000e+00, float %133, float %134, float 0.000000e+00)  ; Dot3(ax,ay,az,bx,by,bz)
  %231 = call float @dx.op.unary.f32(i32 25, float %230)  ; Rsqrt(value)
  %232 = fmul fast float %231, %133
  %233 = fmul fast float %231, %134
  %234 = call float @dx.op.dot3.f32(i32 55, float %232, float %233, float 0.000000e+00, float %185, float %186, float 0.000000e+00)  ; Dot3(ax,ay,az,bx,by,bz)
  %235 = call float @dx.op.unary.f32(i32 15, float %234)  ; Acos(value)
  %236 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %237 = extractvalue %dx.types.CBufRet.f32 %236, 0
  %238 = fdiv fast float 0x400921FB60000000, %237
  %239 = fadd fast float %238, 0xBFC1DF46C0000000
  %240 = fadd fast float %238, 0x3FC1DF46C0000000
  %241 = fcmp fast oge float %235, %239
  %242 = fcmp fast ole float %235, %240
  %243 = and i1 %241, %242
  br i1 %243, label %244, label %249

; <label>:244                                     ; preds = %182
  %245 = fsub fast float %238, %235
  %246 = fmul fast float %245, 0x400CA5DBE0000000
  %247 = fadd fast float %246, 5.000000e-01
  %248 = call float @dx.op.unary.f32(i32 24, float %247)  ; Sqrt(value)
  br label %252

; <label>:249                                     ; preds = %182
  %250 = fcmp fast ogt float %235, %238
  br i1 %250, label %251, label %252

; <label>:251                                     ; preds = %249
  br label %252

; <label>:252                                     ; preds = %251, %249, %244, %0
  %253 = phi float [ %248, %244 ], [ -2.000000e+00, %251 ], [ 1.000000e+00, %249 ], [ -2.000000e+00, %0 ]
  %254 = phi float [ %219, %244 ], [ %219, %251 ], [ %219, %249 ], [ %16, %0 ]
  %255 = phi float [ %223, %244 ], [ %223, %251 ], [ %223, %249 ], [ %17, %0 ]
  %256 = phi float [ %227, %244 ], [ %227, %251 ], [ %227, %249 ], [ %18, %0 ]
  %257 = phi float [ %221, %244 ], [ %221, %251 ], [ %221, %249 ], [ %20, %0 ]
  %258 = phi float [ %225, %244 ], [ %225, %251 ], [ %225, %249 ], [ %21, %0 ]
  %259 = phi float [ %229, %244 ], [ %229, %251 ], [ %229, %249 ], [ %22, %0 ]
  %260 = phi float [ %199, %244 ], [ %199, %251 ], [ %199, %249 ], [ %24, %0 ]
  %261 = phi float [ %208, %244 ], [ %208, %251 ], [ %208, %249 ], [ %25, %0 ]
  %262 = phi float [ %217, %244 ], [ %217, %251 ], [ %217, %249 ], [ %26, %0 ]
  %263 = fmul fast float %254, %86
  %264 = call float @dx.op.tertiary.f32(i32 46, float %87, float %255, float %263)  ; FMad(a,b,c)
  %265 = call float @dx.op.tertiary.f32(i32 46, float %88, float %256, float %264)  ; FMad(a,b,c)
  %266 = fmul fast float %257, %86
  %267 = call float @dx.op.tertiary.f32(i32 46, float %87, float %258, float %266)  ; FMad(a,b,c)
  %268 = call float @dx.op.tertiary.f32(i32 46, float %88, float %259, float %267)  ; FMad(a,b,c)
  %269 = fmul fast float %260, %86
  %270 = call float @dx.op.tertiary.f32(i32 46, float %87, float %261, float %269)  ; FMad(a,b,c)
  %271 = call float @dx.op.tertiary.f32(i32 46, float %88, float %262, float %270)  ; FMad(a,b,c)
  %272 = or i1 %154, %157
  %273 = fsub fast float -0.000000e+00, %165
  %274 = fsub fast float -0.000000e+00, %167
  %275 = fsub fast float -0.000000e+00, %169
  %276 = select i1 %272, float %165, float %273
  %277 = select i1 %272, float %167, float %274
  %278 = select i1 %272, float %169, float %275
  %279 = fadd fast float %265, %149
  %280 = fadd fast float %268, %150
  %281 = fadd fast float %271, %151
  %282 = fmul fast float %279, %170
  %283 = fmul fast float %280, %170
  %284 = fmul fast float %281, %170
  %285 = fsub fast float %276, %282
  %286 = fsub fast float %277, %283
  %287 = fsub fast float %278, %284
  %288 = call float @dx.op.dot3.f32(i32 55, float %285, float %286, float %287, float %285, float %286, float %287)  ; Dot3(ax,ay,az,bx,by,bz)
  %289 = call float @dx.op.unary.f32(i32 25, float %288)  ; Rsqrt(value)
  %290 = fmul fast float %285, %289
  %291 = fsub fast float -0.000000e+00, %290
  %292 = fmul fast float %286, %289
  %293 = fsub fast float -0.000000e+00, %292
  %294 = fmul fast float %289, %287
  %295 = fsub fast float -0.000000e+00, %294
  br i1 %154, label %296, label %304

; <label>:296                                     ; preds = %252
  %297 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 41)  ; CBufferLoadLegacy(handle,regIndex)
  %298 = extractvalue %dx.types.CBufRet.f32 %297, 0
  %299 = extractvalue %dx.types.CBufRet.f32 %297, 1
  %300 = extractvalue %dx.types.CBufRet.f32 %297, 2
  %301 = call float @dx.op.dot3.f32(i32 55, float %298, float %299, float %300, float %291, float %293, float %295)  ; Dot3(ax,ay,az,bx,by,bz)
  %302 = call float @dx.op.binary.f32(i32 35, float %301, float 5.000000e-01)  ; FMax(a,b)
  %303 = fdiv fast float 1.000000e+00, %302
  br label %304

; <label>:304                                     ; preds = %296, %252
  %305 = phi float [ %303, %296 ], [ 1.000000e+00, %252 ]
  %306 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %307 = extractvalue %dx.types.CBufRet.f32 %306, 0
  %308 = fmul fast float %307, 5.000000e-01
  %309 = fmul fast float %305, %291
  %310 = fmul fast float %305, %293
  %311 = fmul fast float %305, %295
  %312 = fmul fast float %309, %308
  %313 = fmul fast float %310, %308
  %314 = fmul fast float %311, %308
  %315 = fadd fast float %265, %41
  %316 = fadd fast float %315, %312
  %317 = fadd fast float %268, %42
  %318 = fadd fast float %317, %313
  %319 = fadd fast float %271, %43
  %320 = fadd fast float %319, %314
  %321 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %322 = extractvalue %dx.types.CBufRet.f32 %321, 0
  %323 = extractvalue %dx.types.CBufRet.f32 %321, 1
  %324 = extractvalue %dx.types.CBufRet.f32 %321, 2
  %325 = extractvalue %dx.types.CBufRet.f32 %321, 3
  %326 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %327 = extractvalue %dx.types.CBufRet.f32 %326, 0
  %328 = extractvalue %dx.types.CBufRet.f32 %326, 1
  %329 = extractvalue %dx.types.CBufRet.f32 %326, 2
  %330 = extractvalue %dx.types.CBufRet.f32 %326, 3
  %331 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %332 = extractvalue %dx.types.CBufRet.f32 %331, 0
  %333 = extractvalue %dx.types.CBufRet.f32 %331, 1
  %334 = extractvalue %dx.types.CBufRet.f32 %331, 2
  %335 = extractvalue %dx.types.CBufRet.f32 %331, 3
  %336 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %337 = extractvalue %dx.types.CBufRet.f32 %336, 0
  %338 = extractvalue %dx.types.CBufRet.f32 %336, 1
  %339 = extractvalue %dx.types.CBufRet.f32 %336, 2
  %340 = extractvalue %dx.types.CBufRet.f32 %336, 3
  %341 = fmul fast float %316, %322
  %342 = call float @dx.op.tertiary.f32(i32 46, float %318, float %323, float %341)  ; FMad(a,b,c)
  %343 = call float @dx.op.tertiary.f32(i32 46, float %320, float %324, float %342)  ; FMad(a,b,c)
  %344 = fadd fast float %343, %325
  %345 = fmul fast float %316, %327
  %346 = call float @dx.op.tertiary.f32(i32 46, float %318, float %328, float %345)  ; FMad(a,b,c)
  %347 = call float @dx.op.tertiary.f32(i32 46, float %320, float %329, float %346)  ; FMad(a,b,c)
  %348 = fadd fast float %347, %330
  %349 = fmul fast float %316, %332
  %350 = call float @dx.op.tertiary.f32(i32 46, float %318, float %333, float %349)  ; FMad(a,b,c)
  %351 = call float @dx.op.tertiary.f32(i32 46, float %320, float %334, float %350)  ; FMad(a,b,c)
  %352 = fadd fast float %351, %335
  %353 = fmul fast float %316, %337
  %354 = call float @dx.op.tertiary.f32(i32 46, float %318, float %338, float %353)  ; FMad(a,b,c)
  %355 = call float @dx.op.tertiary.f32(i32 46, float %320, float %339, float %354)  ; FMad(a,b,c)
  %356 = fadd fast float %355, %340
  %357 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 37)  ; CBufferLoadLegacy(handle,regIndex)
  %358 = extractvalue %dx.types.CBufRet.f32 %357, 0
  %359 = extractvalue %dx.types.CBufRet.f32 %357, 1
  %360 = extractvalue %dx.types.CBufRet.f32 %357, 2
  %361 = fadd fast float %358, %316
  %362 = fadd fast float %359, %318
  %363 = fadd fast float %360, %320
  %364 = fcmp fast oeq float %253, -2.000000e+00
  %365 = select i1 %364, float 0.000000e+00, float %344
  %366 = select i1 %364, float 0.000000e+00, float %348
  %367 = select i1 %364, float 0.000000e+00, float %352
  %368 = select i1 %364, float 1.000000e+00, float %356
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %365)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %366)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %367)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %368)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %11)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %12)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %133)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %134)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %135)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %143)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %144)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float %145)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %138)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %139)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %140)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %361)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %362)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float %363)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float %253)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 0, float %149)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 1, float %150)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 2, float %151)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!9}
!dx.entryPoints = !{!10}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{null, null, !5, null}
!5 = !{!6, !7, !8}
!6 = !{i32 0, %hostlayout.CameraShaderConsts* undef, !"", i32 0, i32 1, i32 1, i32 848, null}
!7 = !{i32 1, %hostlayout.FrequentVertexConsts* undef, !"", i32 0, i32 5, i32 1, i32 112, null}
!8 = !{i32 2, %ShaderSpecificConstants* undef, !"", i32 0, i32 4, i32 1, i32 84, null}
!9 = !{[51 x i32] [i32 49, i32 23, i32 229391, i32 229391, i32 229391, i32 0, i32 16, i32 32, i32 0, i32 0, i32 495567, i32 495567, i32 495567, i32 0, i32 261647, i32 261647, i32 261647, i32 232975, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 524239, i32 524239, i32 524239, i32 1540111, i32 524239, i32 524239, i32 524239, i32 2588687, i32 524239, i32 524239, i32 524239, i32 4685839, i32 0]}
!10 = !{void ()* @vs_main_, !"vs_main_", !11, !4, null}
!11 = !{!12, !31, null}
!12 = !{!13, !16, !18, !19, !21, !22, !24, !25, !26, !28, !30}
!13 = !{i32 0, !"POSITION", i8 9, i8 0, !14, i8 0, i32 1, i8 3, i32 0, i8 0, !15}
!14 = !{i32 0}
!15 = !{i32 3, i32 7}
!16 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !14, i8 0, i32 1, i8 2, i32 1, i8 0, !17}
!17 = !{i32 3, i32 3}
!18 = !{i32 2, !"NORMAL", i8 9, i8 0, !14, i8 0, i32 1, i8 3, i32 2, i8 0, !15}
!19 = !{i32 3, !"TANGENT", i8 9, i8 0, !14, i8 0, i32 1, i8 4, i32 3, i8 0, !20}
!20 = !{i32 3, i32 15}
!21 = !{i32 4, !"COLOR", i8 9, i8 0, !14, i8 0, i32 1, i8 4, i32 4, i8 0, null}
!22 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !23, i8 0, i32 1, i8 2, i32 5, i8 0, null}
!23 = !{i32 1}
!24 = !{i32 6, !"EXTRA_DATA", i8 9, i8 0, !14, i8 0, i32 1, i8 4, i32 6, i8 0, null}
!25 = !{i32 7, !"EXTRA_DATA", i8 9, i8 0, !23, i8 0, i32 1, i8 4, i32 7, i8 0, null}
!26 = !{i32 8, !"EXTRA_DATA", i8 9, i8 0, !27, i8 0, i32 1, i8 4, i32 8, i8 0, null}
!27 = !{i32 2}
!28 = !{i32 9, !"INSTANCE_TRANSFORM", i8 9, i8 0, !29, i8 0, i32 3, i8 4, i32 9, i8 0, !20}
!29 = !{i32 0, i32 1, i32 2}
!30 = !{i32 10, !"SV_InstanceID", i8 5, i8 2, !14, i8 0, i32 1, i8 1, i32 12, i8 0, null}
!31 = !{!32, !33, !34, !35, !36, !38}
!32 = !{i32 0, !"SV_Position", i8 9, i8 3, !14, i8 4, i32 1, i8 4, i32 0, i8 0, !20}
!33 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !14, i8 2, i32 1, i8 4, i32 1, i8 0, !20}
!34 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !23, i8 2, i32 1, i8 4, i32 2, i8 0, !20}
!35 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !27, i8 2, i32 1, i8 4, i32 3, i8 0, !20}
!36 = !{i32 4, !"TEXCOORD", i8 9, i8 0, !37, i8 2, i32 1, i8 3, i32 4, i8 0, !15}
!37 = !{i32 3}
!38 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !39, i8 1, i32 1, i8 3, i32 5, i8 0, !15}
!39 = !{i32 4}
 