;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; POSITION                 0   xyz         0     NONE   float   xyz 
; BLENDINDICES             0   xyzw        1     NONE    uint   xyzw
; BLENDWEIGHT              0   xyzw        2     NONE   float   xyzw
; BLENDINDICES             1   xyzw        3     NONE    uint   xyzw
; BLENDWEIGHT              1   xyzw        4     NONE   float   xyzw
; TEXCOORD                 0   xy          5     NONE   float   xy  
; NORMAL                   0   xyz         6     NONE   float   xyz 
; TANGENT                  0   xyzw        7     NONE   float   xyzw
; COLOR                    0   xyzw        8     NONE   float   xyzw
; TEXCOORD                 1   xy          9     NONE   float       
; INSTANCE_TRANSFORM       0   xyzw       10     NONE   float   xyzw
; INSTANCE_TRANSFORM       1   xyzw       11     NONE   float   xyzw
; INSTANCE_TRANSFORM       2   xyzw       12     NONE   float   xyzw
; INSTANCE_SKINNING_DATA     0   xyzw       13     NONE    uint   xyz 
; SV_VertexID              0   x          14   VERTID    uint       
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; TEXCOORD                 0   xyzw        1     NONE   float   xyzw
; TEXCOORD                 1   xyzw        2     NONE   float   xyzw
; TEXCOORD                 2   xyzw        3     NONE   float   xyzw
; TEXCOORD                 3   xyzw        4     NONE   float   xyzw
; TEXCOORD                 4   xyzw        5     NONE   float   xyzw
; TEXCOORD                 5   xyzw        6     NONE   float   xyzw
; TEXCOORD                 6   xy          7     NONE   float   xy  
; SV_ClipDistance          0   x           8  CLIPDST   float   x   
;
; shader hash: 4e87fa3389d6bc98582a21819dff4a52
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; POSITION                 0                              
; BLENDINDICES             0                              
; BLENDWEIGHT              0                              
; BLENDINDICES             1                              
; BLENDWEIGHT              1                              
; TEXCOORD                 0                              
; NORMAL                   0                              
; TANGENT                  0                              
; COLOR                    0                              
; TEXCOORD                 1                              
; INSTANCE_TRANSFORM       0                              
; INSTANCE_SKINNING_DATA     0                              
; SV_VertexID              0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; TEXCOORD                 3                 linear       
; TEXCOORD                 4                 linear       
; TEXCOORD                 5                 linear       
; TEXCOORD                 6                 linear       
; SV_ClipDistance          0                 linear       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [496 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [476 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [848 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [36 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [112 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb7     1
;                                   cbuffer      NA          NA     CB1            cb0     1
;                                   cbuffer      NA          NA     CB2            cb1     1
;                                   cbuffer      NA          NA     CB3            cb4     1
;                                   cbuffer      NA          NA     CB4            cb5     1
;                                   sampler      NA          NA      S0             s0     1
;                                   texture     f32          2d      T0      t0,space1 32768
;                                   texture    byte         r/o      T1            t10     1
;
;
; ViewId state:
;
; Number of inputs: 57, outputs: 33
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 28, 29, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 1 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 28, 29, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 2 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 28, 29, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 3 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 28, 29, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 4 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 28, 29, 30, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 5 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 28, 29, 30, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 52, 53 }
;   output 6 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 51, 52, 53 }
;   output 7 depends on inputs: { 20 }
;   output 8 depends on inputs: { 21 }
;   output 9 depends on inputs: { 32 }
;   output 10 depends on inputs: { 33 }
;   output 11 depends on inputs: { 34 }
;   output 12 depends on inputs: { 35 }
;   output 13 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 14 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 15 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 16 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 28, 29, 30, 31, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 17 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 28, 29, 30, 31, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 18 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 28, 29, 30, 31, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 19 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 20 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 21 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 22 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 28, 29, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 23 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 28, 29, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 24 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 28, 29, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 25 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 28, 29, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 26 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 53, 54 }
;   output 27 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 53, 54 }
;   output 28 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 53, 54 }
;   output 29 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 53, 54 }
;   output 32 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 28, 29, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%struct.ByteAddressBuffer = type { i32 }
%MaterialModifiersConsts = type { [31 x <4 x float>] }
%GlobalShaderConsts = type { <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, float, float, float, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, i32, float, [6 x <4 x float>], <4 x float>, <2 x i32>, i32, i32, float, i32, i32 }
%hostlayout.CameraShaderConsts = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, i32, i32, <2 x i32>, float, float }
%ShaderSpecificConstants = type { i32, float, float }
%hostlayout.FrequentVertexConsts = type { [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float> }
%struct.SamplerState = type { i32 }

define void @vs_main_() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 10, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 4, i32 5, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 3, i32 4, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 2, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 1, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 7, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %8 = call i32 @dx.op.loadInput.i32(i32 4, i32 11, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call i32 @dx.op.loadInput.i32(i32 4, i32 11, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call i32 @dx.op.loadInput.i32(i32 4, i32 11, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %20 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %21 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %22 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %23 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %24 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %25 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %26 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %27 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %28 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %29 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %30 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %31 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %32 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %33 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %34 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %35 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %36 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %37 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %38 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %39 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %40 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %41 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %42 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %43 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %44 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %45 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %46 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %47 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %48 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %49 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %50 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %51 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %52 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %53 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %54 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %55 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %56 = extractvalue %dx.types.CBufRet.i32 %55, 0
  %57 = extractvalue %dx.types.CBufRet.i32 %55, 1
  %58 = extractvalue %dx.types.CBufRet.i32 %55, 2
  %59 = bitcast float %46 to i32
  %60 = bitcast float %50 to i32
  %61 = bitcast float %54 to i32
  %62 = sub i32 %59, %56
  %63 = sub i32 %60, %57
  %64 = sub i32 %61, %58
  %65 = sitofp i32 %62 to float
  %66 = sitofp i32 %63 to float
  %67 = sitofp i32 %64 to float
  %68 = fmul fast float %65, 0x3EE0000000000000
  %69 = fmul fast float %66, 0x3EE0000000000000
  %70 = fmul fast float %67, 0x3EE0000000000000
  %71 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %72 = extractvalue %dx.types.CBufRet.f32 %71, 0
  %73 = extractvalue %dx.types.CBufRet.f32 %71, 1
  %74 = extractvalue %dx.types.CBufRet.f32 %71, 2
  %75 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %76 = extractvalue %dx.types.CBufRet.f32 %75, 0
  %77 = extractvalue %dx.types.CBufRet.f32 %75, 1
  %78 = extractvalue %dx.types.CBufRet.f32 %75, 2
  %79 = fmul fast float %76, %40
  %80 = fmul fast float %77, %41
  %81 = fmul fast float %78, %42
  %82 = fadd fast float %79, %72
  %83 = fadd fast float %80, %73
  %84 = fadd fast float %81, %74
  %85 = call float @dx.op.dot4.f32(i32 56, float %32, float %33, float %34, float %35, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %86 = call float @dx.op.dot4.f32(i32 56, float %24, float %25, float %26, float %27, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %87 = fadd fast float %86, %85
  %88 = call float @dx.op.binary.f32(i32 35, float 0x3EE4F8B580000000, float %87)  ; FMax(a,b)
  %89 = fdiv fast float %32, %88
  %90 = fdiv fast float %33, %88
  %91 = fdiv fast float %34, %88
  %92 = fdiv fast float %35, %88
  %93 = fdiv fast float %24, %88
  %94 = fdiv fast float %25, %88
  %95 = fdiv fast float %26, %88
  %96 = fdiv fast float %27, %88
  %97 = mul i32 %36, %9
  %98 = add i32 %97, %8
  %99 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %98, i32 undef)  ; BufferLoad(srv,index,wot)
  %100 = extractvalue %dx.types.ResRet.i32 %99, 0
  %101 = extractvalue %dx.types.ResRet.i32 %99, 1
  %102 = extractvalue %dx.types.ResRet.i32 %99, 2
  %103 = extractvalue %dx.types.ResRet.i32 %99, 3
  %104 = bitcast i32 %100 to float
  %105 = bitcast i32 %101 to float
  %106 = bitcast i32 %102 to float
  %107 = bitcast i32 %103 to float
  %108 = add i32 %98, 16
  %109 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %108, i32 undef)  ; BufferLoad(srv,index,wot)
  %110 = extractvalue %dx.types.ResRet.i32 %109, 0
  %111 = extractvalue %dx.types.ResRet.i32 %109, 1
  %112 = extractvalue %dx.types.ResRet.i32 %109, 2
  %113 = extractvalue %dx.types.ResRet.i32 %109, 3
  %114 = bitcast i32 %110 to float
  %115 = bitcast i32 %111 to float
  %116 = bitcast i32 %112 to float
  %117 = bitcast i32 %113 to float
  %118 = add i32 %98, 32
  %119 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %118, i32 undef)  ; BufferLoad(srv,index,wot)
  %120 = extractvalue %dx.types.ResRet.i32 %119, 0
  %121 = extractvalue %dx.types.ResRet.i32 %119, 1
  %122 = extractvalue %dx.types.ResRet.i32 %119, 2
  %123 = extractvalue %dx.types.ResRet.i32 %119, 3
  %124 = bitcast i32 %120 to float
  %125 = bitcast i32 %121 to float
  %126 = bitcast i32 %122 to float
  %127 = bitcast i32 %123 to float
  %128 = mul i32 %28, %9
  %129 = add i32 %128, %8
  %130 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %129, i32 undef)  ; BufferLoad(srv,index,wot)
  %131 = extractvalue %dx.types.ResRet.i32 %130, 0
  %132 = extractvalue %dx.types.ResRet.i32 %130, 1
  %133 = extractvalue %dx.types.ResRet.i32 %130, 2
  %134 = extractvalue %dx.types.ResRet.i32 %130, 3
  %135 = bitcast i32 %131 to float
  %136 = bitcast i32 %132 to float
  %137 = bitcast i32 %133 to float
  %138 = bitcast i32 %134 to float
  %139 = add i32 %129, 16
  %140 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %139, i32 undef)  ; BufferLoad(srv,index,wot)
  %141 = extractvalue %dx.types.ResRet.i32 %140, 0
  %142 = extractvalue %dx.types.ResRet.i32 %140, 1
  %143 = extractvalue %dx.types.ResRet.i32 %140, 2
  %144 = extractvalue %dx.types.ResRet.i32 %140, 3
  %145 = bitcast i32 %141 to float
  %146 = bitcast i32 %142 to float
  %147 = bitcast i32 %143 to float
  %148 = bitcast i32 %144 to float
  %149 = add i32 %129, 32
  %150 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %149, i32 undef)  ; BufferLoad(srv,index,wot)
  %151 = extractvalue %dx.types.ResRet.i32 %150, 0
  %152 = extractvalue %dx.types.ResRet.i32 %150, 1
  %153 = extractvalue %dx.types.ResRet.i32 %150, 2
  %154 = extractvalue %dx.types.ResRet.i32 %150, 3
  %155 = bitcast i32 %151 to float
  %156 = bitcast i32 %152 to float
  %157 = bitcast i32 %153 to float
  %158 = bitcast i32 %154 to float
  %159 = fmul fast float %104, %89
  %160 = fmul fast float %114, %89
  %161 = fmul fast float %124, %89
  %162 = fmul fast float %105, %89
  %163 = fmul fast float %115, %89
  %164 = fmul fast float %125, %89
  %165 = fmul fast float %106, %89
  %166 = fmul fast float %116, %89
  %167 = fmul fast float %126, %89
  %168 = fmul fast float %107, %89
  %169 = fmul fast float %117, %89
  %170 = fmul fast float %127, %89
  %171 = fmul fast float %135, %93
  %172 = fmul fast float %145, %93
  %173 = fmul fast float %155, %93
  %174 = fmul fast float %136, %93
  %175 = fmul fast float %146, %93
  %176 = fmul fast float %156, %93
  %177 = fmul fast float %137, %93
  %178 = fmul fast float %147, %93
  %179 = fmul fast float %157, %93
  %180 = fmul fast float %138, %93
  %181 = fmul fast float %148, %93
  %182 = fmul fast float %158, %93
  %183 = fadd fast float %171, %159
  %184 = fadd fast float %172, %160
  %185 = fadd fast float %173, %161
  %186 = fadd fast float %174, %162
  %187 = fadd fast float %175, %163
  %188 = fadd fast float %176, %164
  %189 = fadd fast float %177, %165
  %190 = fadd fast float %178, %166
  %191 = fadd fast float %179, %167
  %192 = fadd fast float %180, %168
  %193 = fadd fast float %181, %169
  %194 = fadd fast float %182, %170
  %195 = mul i32 %37, %9
  %196 = add i32 %195, %8
  %197 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %196, i32 undef)  ; BufferLoad(srv,index,wot)
  %198 = extractvalue %dx.types.ResRet.i32 %197, 0
  %199 = extractvalue %dx.types.ResRet.i32 %197, 1
  %200 = extractvalue %dx.types.ResRet.i32 %197, 2
  %201 = extractvalue %dx.types.ResRet.i32 %197, 3
  %202 = bitcast i32 %198 to float
  %203 = bitcast i32 %199 to float
  %204 = bitcast i32 %200 to float
  %205 = bitcast i32 %201 to float
  %206 = add i32 %196, 16
  %207 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %206, i32 undef)  ; BufferLoad(srv,index,wot)
  %208 = extractvalue %dx.types.ResRet.i32 %207, 0
  %209 = extractvalue %dx.types.ResRet.i32 %207, 1
  %210 = extractvalue %dx.types.ResRet.i32 %207, 2
  %211 = extractvalue %dx.types.ResRet.i32 %207, 3
  %212 = bitcast i32 %208 to float
  %213 = bitcast i32 %209 to float
  %214 = bitcast i32 %210 to float
  %215 = bitcast i32 %211 to float
  %216 = add i32 %196, 32
  %217 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %216, i32 undef)  ; BufferLoad(srv,index,wot)
  %218 = extractvalue %dx.types.ResRet.i32 %217, 0
  %219 = extractvalue %dx.types.ResRet.i32 %217, 1
  %220 = extractvalue %dx.types.ResRet.i32 %217, 2
  %221 = extractvalue %dx.types.ResRet.i32 %217, 3
  %222 = bitcast i32 %218 to float
  %223 = bitcast i32 %219 to float
  %224 = bitcast i32 %220 to float
  %225 = bitcast i32 %221 to float
  %226 = mul i32 %29, %9
  %227 = add i32 %226, %8
  %228 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %227, i32 undef)  ; BufferLoad(srv,index,wot)
  %229 = extractvalue %dx.types.ResRet.i32 %228, 0
  %230 = extractvalue %dx.types.ResRet.i32 %228, 1
  %231 = extractvalue %dx.types.ResRet.i32 %228, 2
  %232 = extractvalue %dx.types.ResRet.i32 %228, 3
  %233 = bitcast i32 %229 to float
  %234 = bitcast i32 %230 to float
  %235 = bitcast i32 %231 to float
  %236 = bitcast i32 %232 to float
  %237 = add i32 %227, 16
  %238 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %237, i32 undef)  ; BufferLoad(srv,index,wot)
  %239 = extractvalue %dx.types.ResRet.i32 %238, 0
  %240 = extractvalue %dx.types.ResRet.i32 %238, 1
  %241 = extractvalue %dx.types.ResRet.i32 %238, 2
  %242 = extractvalue %dx.types.ResRet.i32 %238, 3
  %243 = bitcast i32 %239 to float
  %244 = bitcast i32 %240 to float
  %245 = bitcast i32 %241 to float
  %246 = bitcast i32 %242 to float
  %247 = add i32 %227, 32
  %248 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %247, i32 undef)  ; BufferLoad(srv,index,wot)
  %249 = extractvalue %dx.types.ResRet.i32 %248, 0
  %250 = extractvalue %dx.types.ResRet.i32 %248, 1
  %251 = extractvalue %dx.types.ResRet.i32 %248, 2
  %252 = extractvalue %dx.types.ResRet.i32 %248, 3
  %253 = bitcast i32 %249 to float
  %254 = bitcast i32 %250 to float
  %255 = bitcast i32 %251 to float
  %256 = bitcast i32 %252 to float
  %257 = fmul fast float %202, %90
  %258 = fmul fast float %212, %90
  %259 = fmul fast float %222, %90
  %260 = fmul fast float %203, %90
  %261 = fmul fast float %213, %90
  %262 = fmul fast float %223, %90
  %263 = fmul fast float %204, %90
  %264 = fmul fast float %214, %90
  %265 = fmul fast float %224, %90
  %266 = fmul fast float %205, %90
  %267 = fmul fast float %215, %90
  %268 = fmul fast float %225, %90
  %269 = fadd fast float %183, %257
  %270 = fadd fast float %184, %258
  %271 = fadd fast float %185, %259
  %272 = fadd fast float %186, %260
  %273 = fadd fast float %187, %261
  %274 = fadd fast float %188, %262
  %275 = fadd fast float %189, %263
  %276 = fadd fast float %190, %264
  %277 = fadd fast float %191, %265
  %278 = fadd fast float %192, %266
  %279 = fadd fast float %193, %267
  %280 = fadd fast float %194, %268
  %281 = fmul fast float %233, %94
  %282 = fmul fast float %243, %94
  %283 = fmul fast float %253, %94
  %284 = fmul fast float %234, %94
  %285 = fmul fast float %244, %94
  %286 = fmul fast float %254, %94
  %287 = fmul fast float %235, %94
  %288 = fmul fast float %245, %94
  %289 = fmul fast float %255, %94
  %290 = fmul fast float %236, %94
  %291 = fmul fast float %246, %94
  %292 = fmul fast float %256, %94
  %293 = fadd fast float %269, %281
  %294 = fadd fast float %270, %282
  %295 = fadd fast float %271, %283
  %296 = fadd fast float %272, %284
  %297 = fadd fast float %273, %285
  %298 = fadd fast float %274, %286
  %299 = fadd fast float %275, %287
  %300 = fadd fast float %276, %288
  %301 = fadd fast float %277, %289
  %302 = fadd fast float %278, %290
  %303 = fadd fast float %279, %291
  %304 = fadd fast float %280, %292
  %305 = mul i32 %38, %9
  %306 = add i32 %305, %8
  %307 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %306, i32 undef)  ; BufferLoad(srv,index,wot)
  %308 = extractvalue %dx.types.ResRet.i32 %307, 0
  %309 = extractvalue %dx.types.ResRet.i32 %307, 1
  %310 = extractvalue %dx.types.ResRet.i32 %307, 2
  %311 = extractvalue %dx.types.ResRet.i32 %307, 3
  %312 = bitcast i32 %308 to float
  %313 = bitcast i32 %309 to float
  %314 = bitcast i32 %310 to float
  %315 = bitcast i32 %311 to float
  %316 = add i32 %306, 16
  %317 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %316, i32 undef)  ; BufferLoad(srv,index,wot)
  %318 = extractvalue %dx.types.ResRet.i32 %317, 0
  %319 = extractvalue %dx.types.ResRet.i32 %317, 1
  %320 = extractvalue %dx.types.ResRet.i32 %317, 2
  %321 = extractvalue %dx.types.ResRet.i32 %317, 3
  %322 = bitcast i32 %318 to float
  %323 = bitcast i32 %319 to float
  %324 = bitcast i32 %320 to float
  %325 = bitcast i32 %321 to float
  %326 = add i32 %306, 32
  %327 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %326, i32 undef)  ; BufferLoad(srv,index,wot)
  %328 = extractvalue %dx.types.ResRet.i32 %327, 0
  %329 = extractvalue %dx.types.ResRet.i32 %327, 1
  %330 = extractvalue %dx.types.ResRet.i32 %327, 2
  %331 = extractvalue %dx.types.ResRet.i32 %327, 3
  %332 = bitcast i32 %328 to float
  %333 = bitcast i32 %329 to float
  %334 = bitcast i32 %330 to float
  %335 = bitcast i32 %331 to float
  %336 = mul i32 %30, %9
  %337 = add i32 %336, %8
  %338 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %337, i32 undef)  ; BufferLoad(srv,index,wot)
  %339 = extractvalue %dx.types.ResRet.i32 %338, 0
  %340 = extractvalue %dx.types.ResRet.i32 %338, 1
  %341 = extractvalue %dx.types.ResRet.i32 %338, 2
  %342 = extractvalue %dx.types.ResRet.i32 %338, 3
  %343 = bitcast i32 %339 to float
  %344 = bitcast i32 %340 to float
  %345 = bitcast i32 %341 to float
  %346 = bitcast i32 %342 to float
  %347 = add i32 %337, 16
  %348 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %347, i32 undef)  ; BufferLoad(srv,index,wot)
  %349 = extractvalue %dx.types.ResRet.i32 %348, 0
  %350 = extractvalue %dx.types.ResRet.i32 %348, 1
  %351 = extractvalue %dx.types.ResRet.i32 %348, 2
  %352 = extractvalue %dx.types.ResRet.i32 %348, 3
  %353 = bitcast i32 %349 to float
  %354 = bitcast i32 %350 to float
  %355 = bitcast i32 %351 to float
  %356 = bitcast i32 %352 to float
  %357 = add i32 %337, 32
  %358 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %357, i32 undef)  ; BufferLoad(srv,index,wot)
  %359 = extractvalue %dx.types.ResRet.i32 %358, 0
  %360 = extractvalue %dx.types.ResRet.i32 %358, 1
  %361 = extractvalue %dx.types.ResRet.i32 %358, 2
  %362 = extractvalue %dx.types.ResRet.i32 %358, 3
  %363 = bitcast i32 %359 to float
  %364 = bitcast i32 %360 to float
  %365 = bitcast i32 %361 to float
  %366 = bitcast i32 %362 to float
  %367 = fmul fast float %312, %91
  %368 = fmul fast float %322, %91
  %369 = fmul fast float %332, %91
  %370 = fmul fast float %313, %91
  %371 = fmul fast float %323, %91
  %372 = fmul fast float %333, %91
  %373 = fmul fast float %314, %91
  %374 = fmul fast float %324, %91
  %375 = fmul fast float %334, %91
  %376 = fmul fast float %315, %91
  %377 = fmul fast float %325, %91
  %378 = fmul fast float %335, %91
  %379 = fadd fast float %293, %367
  %380 = fadd fast float %294, %368
  %381 = fadd fast float %295, %369
  %382 = fadd fast float %296, %370
  %383 = fadd fast float %297, %371
  %384 = fadd fast float %298, %372
  %385 = fadd fast float %299, %373
  %386 = fadd fast float %300, %374
  %387 = fadd fast float %301, %375
  %388 = fadd fast float %302, %376
  %389 = fadd fast float %303, %377
  %390 = fadd fast float %304, %378
  %391 = fmul fast float %343, %95
  %392 = fmul fast float %353, %95
  %393 = fmul fast float %363, %95
  %394 = fmul fast float %344, %95
  %395 = fmul fast float %354, %95
  %396 = fmul fast float %364, %95
  %397 = fmul fast float %345, %95
  %398 = fmul fast float %355, %95
  %399 = fmul fast float %365, %95
  %400 = fmul fast float %346, %95
  %401 = fmul fast float %356, %95
  %402 = fmul fast float %366, %95
  %403 = fadd fast float %379, %391
  %404 = fadd fast float %380, %392
  %405 = fadd fast float %381, %393
  %406 = fadd fast float %382, %394
  %407 = fadd fast float %383, %395
  %408 = fadd fast float %384, %396
  %409 = fadd fast float %385, %397
  %410 = fadd fast float %386, %398
  %411 = fadd fast float %387, %399
  %412 = fadd fast float %388, %400
  %413 = fadd fast float %389, %401
  %414 = fadd fast float %390, %402
  %415 = mul i32 %39, %9
  %416 = add i32 %415, %8
  %417 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %416, i32 undef)  ; BufferLoad(srv,index,wot)
  %418 = extractvalue %dx.types.ResRet.i32 %417, 0
  %419 = extractvalue %dx.types.ResRet.i32 %417, 1
  %420 = extractvalue %dx.types.ResRet.i32 %417, 2
  %421 = extractvalue %dx.types.ResRet.i32 %417, 3
  %422 = bitcast i32 %418 to float
  %423 = bitcast i32 %419 to float
  %424 = bitcast i32 %420 to float
  %425 = bitcast i32 %421 to float
  %426 = add i32 %416, 16
  %427 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %426, i32 undef)  ; BufferLoad(srv,index,wot)
  %428 = extractvalue %dx.types.ResRet.i32 %427, 0
  %429 = extractvalue %dx.types.ResRet.i32 %427, 1
  %430 = extractvalue %dx.types.ResRet.i32 %427, 2
  %431 = extractvalue %dx.types.ResRet.i32 %427, 3
  %432 = bitcast i32 %428 to float
  %433 = bitcast i32 %429 to float
  %434 = bitcast i32 %430 to float
  %435 = bitcast i32 %431 to float
  %436 = add i32 %416, 32
  %437 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %436, i32 undef)  ; BufferLoad(srv,index,wot)
  %438 = extractvalue %dx.types.ResRet.i32 %437, 0
  %439 = extractvalue %dx.types.ResRet.i32 %437, 1
  %440 = extractvalue %dx.types.ResRet.i32 %437, 2
  %441 = extractvalue %dx.types.ResRet.i32 %437, 3
  %442 = bitcast i32 %438 to float
  %443 = bitcast i32 %439 to float
  %444 = bitcast i32 %440 to float
  %445 = bitcast i32 %441 to float
  %446 = mul i32 %31, %9
  %447 = add i32 %446, %8
  %448 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %447, i32 undef)  ; BufferLoad(srv,index,wot)
  %449 = extractvalue %dx.types.ResRet.i32 %448, 0
  %450 = extractvalue %dx.types.ResRet.i32 %448, 1
  %451 = extractvalue %dx.types.ResRet.i32 %448, 2
  %452 = extractvalue %dx.types.ResRet.i32 %448, 3
  %453 = bitcast i32 %449 to float
  %454 = bitcast i32 %450 to float
  %455 = bitcast i32 %451 to float
  %456 = bitcast i32 %452 to float
  %457 = add i32 %447, 16
  %458 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %457, i32 undef)  ; BufferLoad(srv,index,wot)
  %459 = extractvalue %dx.types.ResRet.i32 %458, 0
  %460 = extractvalue %dx.types.ResRet.i32 %458, 1
  %461 = extractvalue %dx.types.ResRet.i32 %458, 2
  %462 = extractvalue %dx.types.ResRet.i32 %458, 3
  %463 = bitcast i32 %459 to float
  %464 = bitcast i32 %460 to float
  %465 = bitcast i32 %461 to float
  %466 = bitcast i32 %462 to float
  %467 = add i32 %447, 32
  %468 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %467, i32 undef)  ; BufferLoad(srv,index,wot)
  %469 = extractvalue %dx.types.ResRet.i32 %468, 0
  %470 = extractvalue %dx.types.ResRet.i32 %468, 1
  %471 = extractvalue %dx.types.ResRet.i32 %468, 2
  %472 = extractvalue %dx.types.ResRet.i32 %468, 3
  %473 = bitcast i32 %469 to float
  %474 = bitcast i32 %470 to float
  %475 = bitcast i32 %471 to float
  %476 = bitcast i32 %472 to float
  %477 = fmul fast float %422, %92
  %478 = fmul fast float %432, %92
  %479 = fmul fast float %442, %92
  %480 = fmul fast float %423, %92
  %481 = fmul fast float %433, %92
  %482 = fmul fast float %443, %92
  %483 = fmul fast float %424, %92
  %484 = fmul fast float %434, %92
  %485 = fmul fast float %444, %92
  %486 = fmul fast float %425, %92
  %487 = fmul fast float %435, %92
  %488 = fmul fast float %445, %92
  %489 = fadd fast float %403, %477
  %490 = fadd fast float %404, %478
  %491 = fadd fast float %405, %479
  %492 = fadd fast float %406, %480
  %493 = fadd fast float %407, %481
  %494 = fadd fast float %408, %482
  %495 = fadd fast float %409, %483
  %496 = fadd fast float %410, %484
  %497 = fadd fast float %411, %485
  %498 = fadd fast float %412, %486
  %499 = fadd fast float %413, %487
  %500 = fadd fast float %414, %488
  %501 = fmul fast float %453, %96
  %502 = fmul fast float %463, %96
  %503 = fmul fast float %473, %96
  %504 = fmul fast float %454, %96
  %505 = fmul fast float %464, %96
  %506 = fmul fast float %474, %96
  %507 = fmul fast float %455, %96
  %508 = fmul fast float %465, %96
  %509 = fmul fast float %475, %96
  %510 = fmul fast float %456, %96
  %511 = fmul fast float %466, %96
  %512 = fmul fast float %476, %96
  %513 = fadd fast float %489, %501
  %514 = fadd fast float %490, %502
  %515 = fadd fast float %491, %503
  %516 = fadd fast float %492, %504
  %517 = fadd fast float %493, %505
  %518 = fadd fast float %494, %506
  %519 = fadd fast float %495, %507
  %520 = fadd fast float %496, %508
  %521 = fadd fast float %497, %509
  %522 = fadd fast float %498, %510
  %523 = fadd fast float %499, %511
  %524 = fadd fast float %500, %512
  %525 = fadd fast float %25, %24
  %526 = fadd fast float %525, %26
  %527 = fadd fast float %526, %27
  %528 = fadd fast float %527, %32
  %529 = fadd fast float %528, %33
  %530 = fadd fast float %529, %34
  %531 = fadd fast float %530, %35
  %532 = fdiv fast float %531, %88
  %533 = add i32 %97, %10
  %534 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %533, i32 undef)  ; BufferLoad(srv,index,wot)
  %535 = extractvalue %dx.types.ResRet.i32 %534, 0
  %536 = extractvalue %dx.types.ResRet.i32 %534, 1
  %537 = extractvalue %dx.types.ResRet.i32 %534, 2
  %538 = extractvalue %dx.types.ResRet.i32 %534, 3
  %539 = bitcast i32 %535 to float
  %540 = bitcast i32 %536 to float
  %541 = bitcast i32 %537 to float
  %542 = bitcast i32 %538 to float
  %543 = add i32 %533, 16
  %544 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %543, i32 undef)  ; BufferLoad(srv,index,wot)
  %545 = extractvalue %dx.types.ResRet.i32 %544, 0
  %546 = extractvalue %dx.types.ResRet.i32 %544, 1
  %547 = extractvalue %dx.types.ResRet.i32 %544, 2
  %548 = extractvalue %dx.types.ResRet.i32 %544, 3
  %549 = bitcast i32 %545 to float
  %550 = bitcast i32 %546 to float
  %551 = bitcast i32 %547 to float
  %552 = bitcast i32 %548 to float
  %553 = add i32 %533, 32
  %554 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %553, i32 undef)  ; BufferLoad(srv,index,wot)
  %555 = extractvalue %dx.types.ResRet.i32 %554, 0
  %556 = extractvalue %dx.types.ResRet.i32 %554, 1
  %557 = extractvalue %dx.types.ResRet.i32 %554, 2
  %558 = extractvalue %dx.types.ResRet.i32 %554, 3
  %559 = bitcast i32 %555 to float
  %560 = bitcast i32 %556 to float
  %561 = bitcast i32 %557 to float
  %562 = bitcast i32 %558 to float
  %563 = add i32 %128, %10
  %564 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %563, i32 undef)  ; BufferLoad(srv,index,wot)
  %565 = extractvalue %dx.types.ResRet.i32 %564, 0
  %566 = extractvalue %dx.types.ResRet.i32 %564, 1
  %567 = extractvalue %dx.types.ResRet.i32 %564, 2
  %568 = extractvalue %dx.types.ResRet.i32 %564, 3
  %569 = bitcast i32 %565 to float
  %570 = bitcast i32 %566 to float
  %571 = bitcast i32 %567 to float
  %572 = bitcast i32 %568 to float
  %573 = add i32 %563, 16
  %574 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %573, i32 undef)  ; BufferLoad(srv,index,wot)
  %575 = extractvalue %dx.types.ResRet.i32 %574, 0
  %576 = extractvalue %dx.types.ResRet.i32 %574, 1
  %577 = extractvalue %dx.types.ResRet.i32 %574, 2
  %578 = extractvalue %dx.types.ResRet.i32 %574, 3
  %579 = bitcast i32 %575 to float
  %580 = bitcast i32 %576 to float
  %581 = bitcast i32 %577 to float
  %582 = bitcast i32 %578 to float
  %583 = add i32 %563, 32
  %584 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %583, i32 undef)  ; BufferLoad(srv,index,wot)
  %585 = extractvalue %dx.types.ResRet.i32 %584, 0
  %586 = extractvalue %dx.types.ResRet.i32 %584, 1
  %587 = extractvalue %dx.types.ResRet.i32 %584, 2
  %588 = extractvalue %dx.types.ResRet.i32 %584, 3
  %589 = bitcast i32 %585 to float
  %590 = bitcast i32 %586 to float
  %591 = bitcast i32 %587 to float
  %592 = bitcast i32 %588 to float
  %593 = fmul fast float %539, %89
  %594 = fmul fast float %549, %89
  %595 = fmul fast float %559, %89
  %596 = fmul fast float %540, %89
  %597 = fmul fast float %550, %89
  %598 = fmul fast float %560, %89
  %599 = fmul fast float %541, %89
  %600 = fmul fast float %551, %89
  %601 = fmul fast float %561, %89
  %602 = fmul fast float %542, %89
  %603 = fmul fast float %552, %89
  %604 = fmul fast float %562, %89
  %605 = fmul fast float %569, %93
  %606 = fmul fast float %579, %93
  %607 = fmul fast float %589, %93
  %608 = fmul fast float %570, %93
  %609 = fmul fast float %580, %93
  %610 = fmul fast float %590, %93
  %611 = fmul fast float %571, %93
  %612 = fmul fast float %581, %93
  %613 = fmul fast float %591, %93
  %614 = fmul fast float %572, %93
  %615 = fmul fast float %582, %93
  %616 = fmul fast float %592, %93
  %617 = fadd fast float %605, %593
  %618 = fadd fast float %606, %594
  %619 = fadd fast float %607, %595
  %620 = fadd fast float %608, %596
  %621 = fadd fast float %609, %597
  %622 = fadd fast float %610, %598
  %623 = fadd fast float %611, %599
  %624 = fadd fast float %612, %600
  %625 = fadd fast float %613, %601
  %626 = fadd fast float %614, %602
  %627 = fadd fast float %615, %603
  %628 = fadd fast float %616, %604
  %629 = add i32 %195, %10
  %630 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %629, i32 undef)  ; BufferLoad(srv,index,wot)
  %631 = extractvalue %dx.types.ResRet.i32 %630, 0
  %632 = extractvalue %dx.types.ResRet.i32 %630, 1
  %633 = extractvalue %dx.types.ResRet.i32 %630, 2
  %634 = extractvalue %dx.types.ResRet.i32 %630, 3
  %635 = bitcast i32 %631 to float
  %636 = bitcast i32 %632 to float
  %637 = bitcast i32 %633 to float
  %638 = bitcast i32 %634 to float
  %639 = add i32 %629, 16
  %640 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %639, i32 undef)  ; BufferLoad(srv,index,wot)
  %641 = extractvalue %dx.types.ResRet.i32 %640, 0
  %642 = extractvalue %dx.types.ResRet.i32 %640, 1
  %643 = extractvalue %dx.types.ResRet.i32 %640, 2
  %644 = extractvalue %dx.types.ResRet.i32 %640, 3
  %645 = bitcast i32 %641 to float
  %646 = bitcast i32 %642 to float
  %647 = bitcast i32 %643 to float
  %648 = bitcast i32 %644 to float
  %649 = add i32 %629, 32
  %650 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %649, i32 undef)  ; BufferLoad(srv,index,wot)
  %651 = extractvalue %dx.types.ResRet.i32 %650, 0
  %652 = extractvalue %dx.types.ResRet.i32 %650, 1
  %653 = extractvalue %dx.types.ResRet.i32 %650, 2
  %654 = extractvalue %dx.types.ResRet.i32 %650, 3
  %655 = bitcast i32 %651 to float
  %656 = bitcast i32 %652 to float
  %657 = bitcast i32 %653 to float
  %658 = bitcast i32 %654 to float
  %659 = add i32 %226, %10
  %660 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %659, i32 undef)  ; BufferLoad(srv,index,wot)
  %661 = extractvalue %dx.types.ResRet.i32 %660, 0
  %662 = extractvalue %dx.types.ResRet.i32 %660, 1
  %663 = extractvalue %dx.types.ResRet.i32 %660, 2
  %664 = extractvalue %dx.types.ResRet.i32 %660, 3
  %665 = bitcast i32 %661 to float
  %666 = bitcast i32 %662 to float
  %667 = bitcast i32 %663 to float
  %668 = bitcast i32 %664 to float
  %669 = add i32 %659, 16
  %670 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %669, i32 undef)  ; BufferLoad(srv,index,wot)
  %671 = extractvalue %dx.types.ResRet.i32 %670, 0
  %672 = extractvalue %dx.types.ResRet.i32 %670, 1
  %673 = extractvalue %dx.types.ResRet.i32 %670, 2
  %674 = extractvalue %dx.types.ResRet.i32 %670, 3
  %675 = bitcast i32 %671 to float
  %676 = bitcast i32 %672 to float
  %677 = bitcast i32 %673 to float
  %678 = bitcast i32 %674 to float
  %679 = add i32 %659, 32
  %680 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %679, i32 undef)  ; BufferLoad(srv,index,wot)
  %681 = extractvalue %dx.types.ResRet.i32 %680, 0
  %682 = extractvalue %dx.types.ResRet.i32 %680, 1
  %683 = extractvalue %dx.types.ResRet.i32 %680, 2
  %684 = extractvalue %dx.types.ResRet.i32 %680, 3
  %685 = bitcast i32 %681 to float
  %686 = bitcast i32 %682 to float
  %687 = bitcast i32 %683 to float
  %688 = bitcast i32 %684 to float
  %689 = fmul fast float %635, %90
  %690 = fmul fast float %645, %90
  %691 = fmul fast float %655, %90
  %692 = fmul fast float %636, %90
  %693 = fmul fast float %646, %90
  %694 = fmul fast float %656, %90
  %695 = fmul fast float %637, %90
  %696 = fmul fast float %647, %90
  %697 = fmul fast float %657, %90
  %698 = fmul fast float %638, %90
  %699 = fmul fast float %648, %90
  %700 = fmul fast float %658, %90
  %701 = fadd fast float %617, %689
  %702 = fadd fast float %618, %690
  %703 = fadd fast float %619, %691
  %704 = fadd fast float %620, %692
  %705 = fadd fast float %621, %693
  %706 = fadd fast float %622, %694
  %707 = fadd fast float %623, %695
  %708 = fadd fast float %624, %696
  %709 = fadd fast float %625, %697
  %710 = fadd fast float %626, %698
  %711 = fadd fast float %627, %699
  %712 = fadd fast float %628, %700
  %713 = fmul fast float %665, %94
  %714 = fmul fast float %675, %94
  %715 = fmul fast float %685, %94
  %716 = fmul fast float %666, %94
  %717 = fmul fast float %676, %94
  %718 = fmul fast float %686, %94
  %719 = fmul fast float %667, %94
  %720 = fmul fast float %677, %94
  %721 = fmul fast float %687, %94
  %722 = fmul fast float %668, %94
  %723 = fmul fast float %678, %94
  %724 = fmul fast float %688, %94
  %725 = fadd fast float %701, %713
  %726 = fadd fast float %702, %714
  %727 = fadd fast float %703, %715
  %728 = fadd fast float %704, %716
  %729 = fadd fast float %705, %717
  %730 = fadd fast float %706, %718
  %731 = fadd fast float %707, %719
  %732 = fadd fast float %708, %720
  %733 = fadd fast float %709, %721
  %734 = fadd fast float %710, %722
  %735 = fadd fast float %711, %723
  %736 = fadd fast float %712, %724
  %737 = add i32 %305, %10
  %738 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %737, i32 undef)  ; BufferLoad(srv,index,wot)
  %739 = extractvalue %dx.types.ResRet.i32 %738, 0
  %740 = extractvalue %dx.types.ResRet.i32 %738, 1
  %741 = extractvalue %dx.types.ResRet.i32 %738, 2
  %742 = extractvalue %dx.types.ResRet.i32 %738, 3
  %743 = bitcast i32 %739 to float
  %744 = bitcast i32 %740 to float
  %745 = bitcast i32 %741 to float
  %746 = bitcast i32 %742 to float
  %747 = add i32 %737, 16
  %748 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %747, i32 undef)  ; BufferLoad(srv,index,wot)
  %749 = extractvalue %dx.types.ResRet.i32 %748, 0
  %750 = extractvalue %dx.types.ResRet.i32 %748, 1
  %751 = extractvalue %dx.types.ResRet.i32 %748, 2
  %752 = extractvalue %dx.types.ResRet.i32 %748, 3
  %753 = bitcast i32 %749 to float
  %754 = bitcast i32 %750 to float
  %755 = bitcast i32 %751 to float
  %756 = bitcast i32 %752 to float
  %757 = add i32 %737, 32
  %758 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %757, i32 undef)  ; BufferLoad(srv,index,wot)
  %759 = extractvalue %dx.types.ResRet.i32 %758, 0
  %760 = extractvalue %dx.types.ResRet.i32 %758, 1
  %761 = extractvalue %dx.types.ResRet.i32 %758, 2
  %762 = extractvalue %dx.types.ResRet.i32 %758, 3
  %763 = bitcast i32 %759 to float
  %764 = bitcast i32 %760 to float
  %765 = bitcast i32 %761 to float
  %766 = bitcast i32 %762 to float
  %767 = add i32 %336, %10
  %768 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %767, i32 undef)  ; BufferLoad(srv,index,wot)
  %769 = extractvalue %dx.types.ResRet.i32 %768, 0
  %770 = extractvalue %dx.types.ResRet.i32 %768, 1
  %771 = extractvalue %dx.types.ResRet.i32 %768, 2
  %772 = extractvalue %dx.types.ResRet.i32 %768, 3
  %773 = bitcast i32 %769 to float
  %774 = bitcast i32 %770 to float
  %775 = bitcast i32 %771 to float
  %776 = bitcast i32 %772 to float
  %777 = add i32 %767, 16
  %778 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %777, i32 undef)  ; BufferLoad(srv,index,wot)
  %779 = extractvalue %dx.types.ResRet.i32 %778, 0
  %780 = extractvalue %dx.types.ResRet.i32 %778, 1
  %781 = extractvalue %dx.types.ResRet.i32 %778, 2
  %782 = extractvalue %dx.types.ResRet.i32 %778, 3
  %783 = bitcast i32 %779 to float
  %784 = bitcast i32 %780 to float
  %785 = bitcast i32 %781 to float
  %786 = bitcast i32 %782 to float
  %787 = add i32 %767, 32
  %788 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %787, i32 undef)  ; BufferLoad(srv,index,wot)
  %789 = extractvalue %dx.types.ResRet.i32 %788, 0
  %790 = extractvalue %dx.types.ResRet.i32 %788, 1
  %791 = extractvalue %dx.types.ResRet.i32 %788, 2
  %792 = extractvalue %dx.types.ResRet.i32 %788, 3
  %793 = bitcast i32 %789 to float
  %794 = bitcast i32 %790 to float
  %795 = bitcast i32 %791 to float
  %796 = bitcast i32 %792 to float
  %797 = fmul fast float %743, %91
  %798 = fmul fast float %753, %91
  %799 = fmul fast float %763, %91
  %800 = fmul fast float %744, %91
  %801 = fmul fast float %754, %91
  %802 = fmul fast float %764, %91
  %803 = fmul fast float %745, %91
  %804 = fmul fast float %755, %91
  %805 = fmul fast float %765, %91
  %806 = fmul fast float %746, %91
  %807 = fmul fast float %756, %91
  %808 = fmul fast float %766, %91
  %809 = fadd fast float %725, %797
  %810 = fadd fast float %726, %798
  %811 = fadd fast float %727, %799
  %812 = fadd fast float %728, %800
  %813 = fadd fast float %729, %801
  %814 = fadd fast float %730, %802
  %815 = fadd fast float %731, %803
  %816 = fadd fast float %732, %804
  %817 = fadd fast float %733, %805
  %818 = fadd fast float %734, %806
  %819 = fadd fast float %735, %807
  %820 = fadd fast float %736, %808
  %821 = fmul fast float %773, %95
  %822 = fmul fast float %783, %95
  %823 = fmul fast float %793, %95
  %824 = fmul fast float %774, %95
  %825 = fmul fast float %784, %95
  %826 = fmul fast float %794, %95
  %827 = fmul fast float %775, %95
  %828 = fmul fast float %785, %95
  %829 = fmul fast float %795, %95
  %830 = fmul fast float %776, %95
  %831 = fmul fast float %786, %95
  %832 = fmul fast float %796, %95
  %833 = fadd fast float %809, %821
  %834 = fadd fast float %810, %822
  %835 = fadd fast float %811, %823
  %836 = fadd fast float %812, %824
  %837 = fadd fast float %813, %825
  %838 = fadd fast float %814, %826
  %839 = fadd fast float %815, %827
  %840 = fadd fast float %816, %828
  %841 = fadd fast float %817, %829
  %842 = fadd fast float %818, %830
  %843 = fadd fast float %819, %831
  %844 = fadd fast float %820, %832
  %845 = add i32 %415, %10
  %846 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %845, i32 undef)  ; BufferLoad(srv,index,wot)
  %847 = extractvalue %dx.types.ResRet.i32 %846, 0
  %848 = extractvalue %dx.types.ResRet.i32 %846, 1
  %849 = extractvalue %dx.types.ResRet.i32 %846, 2
  %850 = extractvalue %dx.types.ResRet.i32 %846, 3
  %851 = bitcast i32 %847 to float
  %852 = bitcast i32 %848 to float
  %853 = bitcast i32 %849 to float
  %854 = bitcast i32 %850 to float
  %855 = add i32 %845, 16
  %856 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %855, i32 undef)  ; BufferLoad(srv,index,wot)
  %857 = extractvalue %dx.types.ResRet.i32 %856, 0
  %858 = extractvalue %dx.types.ResRet.i32 %856, 1
  %859 = extractvalue %dx.types.ResRet.i32 %856, 2
  %860 = extractvalue %dx.types.ResRet.i32 %856, 3
  %861 = bitcast i32 %857 to float
  %862 = bitcast i32 %858 to float
  %863 = bitcast i32 %859 to float
  %864 = bitcast i32 %860 to float
  %865 = add i32 %845, 32
  %866 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %865, i32 undef)  ; BufferLoad(srv,index,wot)
  %867 = extractvalue %dx.types.ResRet.i32 %866, 0
  %868 = extractvalue %dx.types.ResRet.i32 %866, 1
  %869 = extractvalue %dx.types.ResRet.i32 %866, 2
  %870 = extractvalue %dx.types.ResRet.i32 %866, 3
  %871 = bitcast i32 %867 to float
  %872 = bitcast i32 %868 to float
  %873 = bitcast i32 %869 to float
  %874 = bitcast i32 %870 to float
  %875 = add i32 %446, %10
  %876 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %875, i32 undef)  ; BufferLoad(srv,index,wot)
  %877 = extractvalue %dx.types.ResRet.i32 %876, 0
  %878 = extractvalue %dx.types.ResRet.i32 %876, 1
  %879 = extractvalue %dx.types.ResRet.i32 %876, 2
  %880 = extractvalue %dx.types.ResRet.i32 %876, 3
  %881 = bitcast i32 %877 to float
  %882 = bitcast i32 %878 to float
  %883 = bitcast i32 %879 to float
  %884 = bitcast i32 %880 to float
  %885 = add i32 %875, 16
  %886 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %885, i32 undef)  ; BufferLoad(srv,index,wot)
  %887 = extractvalue %dx.types.ResRet.i32 %886, 0
  %888 = extractvalue %dx.types.ResRet.i32 %886, 1
  %889 = extractvalue %dx.types.ResRet.i32 %886, 2
  %890 = extractvalue %dx.types.ResRet.i32 %886, 3
  %891 = bitcast i32 %887 to float
  %892 = bitcast i32 %888 to float
  %893 = bitcast i32 %889 to float
  %894 = bitcast i32 %890 to float
  %895 = add i32 %875, 32
  %896 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %895, i32 undef)  ; BufferLoad(srv,index,wot)
  %897 = extractvalue %dx.types.ResRet.i32 %896, 0
  %898 = extractvalue %dx.types.ResRet.i32 %896, 1
  %899 = extractvalue %dx.types.ResRet.i32 %896, 2
  %900 = extractvalue %dx.types.ResRet.i32 %896, 3
  %901 = bitcast i32 %897 to float
  %902 = bitcast i32 %898 to float
  %903 = bitcast i32 %899 to float
  %904 = bitcast i32 %900 to float
  %905 = fmul fast float %851, %92
  %906 = fmul fast float %861, %92
  %907 = fmul fast float %871, %92
  %908 = fmul fast float %852, %92
  %909 = fmul fast float %862, %92
  %910 = fmul fast float %872, %92
  %911 = fmul fast float %853, %92
  %912 = fmul fast float %863, %92
  %913 = fmul fast float %873, %92
  %914 = fmul fast float %854, %92
  %915 = fmul fast float %864, %92
  %916 = fmul fast float %874, %92
  %917 = fadd fast float %833, %905
  %918 = fadd fast float %834, %906
  %919 = fadd fast float %835, %907
  %920 = fadd fast float %836, %908
  %921 = fadd fast float %837, %909
  %922 = fadd fast float %838, %910
  %923 = fadd fast float %839, %911
  %924 = fadd fast float %840, %912
  %925 = fadd fast float %841, %913
  %926 = fadd fast float %842, %914
  %927 = fadd fast float %843, %915
  %928 = fadd fast float %844, %916
  %929 = fmul fast float %881, %96
  %930 = fmul fast float %891, %96
  %931 = fmul fast float %901, %96
  %932 = fmul fast float %882, %96
  %933 = fmul fast float %892, %96
  %934 = fmul fast float %902, %96
  %935 = fmul fast float %883, %96
  %936 = fmul fast float %893, %96
  %937 = fmul fast float %903, %96
  %938 = fmul fast float %884, %96
  %939 = fmul fast float %894, %96
  %940 = fmul fast float %904, %96
  %941 = fadd fast float %917, %929
  %942 = fadd fast float %918, %930
  %943 = fadd fast float %919, %931
  %944 = fadd fast float %920, %932
  %945 = fadd fast float %921, %933
  %946 = fadd fast float %922, %934
  %947 = fadd fast float %923, %935
  %948 = fadd fast float %924, %936
  %949 = fadd fast float %925, %937
  %950 = fadd fast float %926, %938
  %951 = fadd fast float %927, %939
  %952 = fadd fast float %928, %940
  %953 = fmul fast float %941, %82
  %954 = call float @dx.op.tertiary.f32(i32 46, float %83, float %944, float %953)  ; FMad(a,b,c)
  %955 = call float @dx.op.tertiary.f32(i32 46, float %84, float %947, float %954)  ; FMad(a,b,c)
  %956 = fadd fast float %950, %955
  %957 = fmul fast float %942, %82
  %958 = call float @dx.op.tertiary.f32(i32 46, float %83, float %945, float %957)  ; FMad(a,b,c)
  %959 = call float @dx.op.tertiary.f32(i32 46, float %84, float %948, float %958)  ; FMad(a,b,c)
  %960 = fadd fast float %951, %959
  %961 = fmul fast float %943, %82
  %962 = call float @dx.op.tertiary.f32(i32 46, float %83, float %946, float %961)  ; FMad(a,b,c)
  %963 = call float @dx.op.tertiary.f32(i32 46, float %84, float %949, float %962)  ; FMad(a,b,c)
  %964 = fadd fast float %952, %963
  %965 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %966 = extractvalue %dx.types.CBufRet.f32 %965, 0
  %967 = extractvalue %dx.types.CBufRet.f32 %965, 1
  %968 = extractvalue %dx.types.CBufRet.f32 %965, 2
  %969 = extractvalue %dx.types.CBufRet.f32 %965, 3
  %970 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %971 = extractvalue %dx.types.CBufRet.f32 %970, 0
  %972 = extractvalue %dx.types.CBufRet.f32 %970, 1
  %973 = extractvalue %dx.types.CBufRet.f32 %970, 2
  %974 = extractvalue %dx.types.CBufRet.f32 %970, 3
  %975 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %976 = extractvalue %dx.types.CBufRet.f32 %975, 0
  %977 = extractvalue %dx.types.CBufRet.f32 %975, 1
  %978 = extractvalue %dx.types.CBufRet.f32 %975, 2
  %979 = extractvalue %dx.types.CBufRet.f32 %975, 3
  %980 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %981 = extractvalue %dx.types.CBufRet.i32 %980, 0
  %982 = extractvalue %dx.types.CBufRet.i32 %980, 1
  %983 = extractvalue %dx.types.CBufRet.i32 %980, 2
  %984 = bitcast float %969 to i32
  %985 = bitcast float %974 to i32
  %986 = bitcast float %979 to i32
  %987 = sub i32 %984, %981
  %988 = sub i32 %985, %982
  %989 = sub i32 %986, %983
  %990 = sitofp i32 %987 to float
  %991 = sitofp i32 %988 to float
  %992 = sitofp i32 %989 to float
  %993 = fmul fast float %990, 0x3EE0000000000000
  %994 = fmul fast float %991, 0x3EE0000000000000
  %995 = fmul fast float %992, 0x3EE0000000000000
  %996 = fmul fast float %966, %956
  %997 = call float @dx.op.tertiary.f32(i32 46, float %967, float %960, float %996)  ; FMad(a,b,c)
  %998 = call float @dx.op.tertiary.f32(i32 46, float %968, float %964, float %997)  ; FMad(a,b,c)
  %999 = fadd fast float %993, %998
  %1000 = fmul fast float %971, %956
  %1001 = call float @dx.op.tertiary.f32(i32 46, float %972, float %960, float %1000)  ; FMad(a,b,c)
  %1002 = call float @dx.op.tertiary.f32(i32 46, float %973, float %964, float %1001)  ; FMad(a,b,c)
  %1003 = fadd fast float %994, %1002
  %1004 = fmul fast float %976, %956
  %1005 = call float @dx.op.tertiary.f32(i32 46, float %977, float %960, float %1004)  ; FMad(a,b,c)
  %1006 = call float @dx.op.tertiary.f32(i32 46, float %978, float %964, float %1005)  ; FMad(a,b,c)
  %1007 = fadd fast float %1006, %995
  %1008 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %1009 = extractvalue %dx.types.CBufRet.f32 %1008, 0
  %1010 = extractvalue %dx.types.CBufRet.f32 %1008, 1
  %1011 = extractvalue %dx.types.CBufRet.f32 %1008, 2
  %1012 = extractvalue %dx.types.CBufRet.f32 %1008, 3
  %1013 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %1014 = extractvalue %dx.types.CBufRet.f32 %1013, 0
  %1015 = extractvalue %dx.types.CBufRet.f32 %1013, 1
  %1016 = extractvalue %dx.types.CBufRet.f32 %1013, 2
  %1017 = extractvalue %dx.types.CBufRet.f32 %1013, 3
  %1018 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 18)  ; CBufferLoadLegacy(handle,regIndex)
  %1019 = extractvalue %dx.types.CBufRet.f32 %1018, 0
  %1020 = extractvalue %dx.types.CBufRet.f32 %1018, 1
  %1021 = extractvalue %dx.types.CBufRet.f32 %1018, 2
  %1022 = extractvalue %dx.types.CBufRet.f32 %1018, 3
  %1023 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %1024 = extractvalue %dx.types.CBufRet.f32 %1023, 0
  %1025 = extractvalue %dx.types.CBufRet.f32 %1023, 1
  %1026 = extractvalue %dx.types.CBufRet.f32 %1023, 2
  %1027 = extractvalue %dx.types.CBufRet.f32 %1023, 3
  %1028 = fmul fast float %1009, %999
  %1029 = call float @dx.op.tertiary.f32(i32 46, float %1003, float %1010, float %1028)  ; FMad(a,b,c)
  %1030 = call float @dx.op.tertiary.f32(i32 46, float %1007, float %1011, float %1029)  ; FMad(a,b,c)
  %1031 = fadd fast float %1030, %1012
  %1032 = fmul fast float %1014, %999
  %1033 = call float @dx.op.tertiary.f32(i32 46, float %1003, float %1015, float %1032)  ; FMad(a,b,c)
  %1034 = call float @dx.op.tertiary.f32(i32 46, float %1007, float %1016, float %1033)  ; FMad(a,b,c)
  %1035 = fadd fast float %1034, %1017
  %1036 = fmul fast float %1019, %999
  %1037 = call float @dx.op.tertiary.f32(i32 46, float %1003, float %1020, float %1036)  ; FMad(a,b,c)
  %1038 = call float @dx.op.tertiary.f32(i32 46, float %1007, float %1021, float %1037)  ; FMad(a,b,c)
  %1039 = fadd fast float %1038, %1022
  %1040 = fmul fast float %1024, %999
  %1041 = call float @dx.op.tertiary.f32(i32 46, float %1003, float %1025, float %1040)  ; FMad(a,b,c)
  %1042 = call float @dx.op.tertiary.f32(i32 46, float %1007, float %1026, float %1041)  ; FMad(a,b,c)
  %1043 = fadd fast float %1042, %1027
  %1044 = fmul fast float %513, %43
  %1045 = call float @dx.op.tertiary.f32(i32 46, float %514, float %44, float %1044)  ; FMad(a,b,c)
  %1046 = call float @dx.op.tertiary.f32(i32 46, float %515, float %45, float %1045)  ; FMad(a,b,c)
  %1047 = fmul fast float %513, %47
  %1048 = call float @dx.op.tertiary.f32(i32 46, float %514, float %48, float %1047)  ; FMad(a,b,c)
  %1049 = call float @dx.op.tertiary.f32(i32 46, float %515, float %49, float %1048)  ; FMad(a,b,c)
  %1050 = fmul fast float %513, %51
  %1051 = call float @dx.op.tertiary.f32(i32 46, float %514, float %52, float %1050)  ; FMad(a,b,c)
  %1052 = call float @dx.op.tertiary.f32(i32 46, float %515, float %53, float %1051)  ; FMad(a,b,c)
  %1053 = fmul fast float %516, %43
  %1054 = call float @dx.op.tertiary.f32(i32 46, float %517, float %44, float %1053)  ; FMad(a,b,c)
  %1055 = call float @dx.op.tertiary.f32(i32 46, float %518, float %45, float %1054)  ; FMad(a,b,c)
  %1056 = fmul fast float %516, %47
  %1057 = call float @dx.op.tertiary.f32(i32 46, float %517, float %48, float %1056)  ; FMad(a,b,c)
  %1058 = call float @dx.op.tertiary.f32(i32 46, float %518, float %49, float %1057)  ; FMad(a,b,c)
  %1059 = fmul fast float %516, %51
  %1060 = call float @dx.op.tertiary.f32(i32 46, float %517, float %52, float %1059)  ; FMad(a,b,c)
  %1061 = call float @dx.op.tertiary.f32(i32 46, float %518, float %53, float %1060)  ; FMad(a,b,c)
  %1062 = fmul fast float %519, %43
  %1063 = call float @dx.op.tertiary.f32(i32 46, float %520, float %44, float %1062)  ; FMad(a,b,c)
  %1064 = call float @dx.op.tertiary.f32(i32 46, float %521, float %45, float %1063)  ; FMad(a,b,c)
  %1065 = fmul fast float %519, %47
  %1066 = call float @dx.op.tertiary.f32(i32 46, float %520, float %48, float %1065)  ; FMad(a,b,c)
  %1067 = call float @dx.op.tertiary.f32(i32 46, float %521, float %49, float %1066)  ; FMad(a,b,c)
  %1068 = fmul fast float %519, %51
  %1069 = call float @dx.op.tertiary.f32(i32 46, float %520, float %52, float %1068)  ; FMad(a,b,c)
  %1070 = call float @dx.op.tertiary.f32(i32 46, float %521, float %53, float %1069)  ; FMad(a,b,c)
  %1071 = fmul fast float %522, %43
  %1072 = call float @dx.op.tertiary.f32(i32 46, float %523, float %44, float %1071)  ; FMad(a,b,c)
  %1073 = call float @dx.op.tertiary.f32(i32 46, float %524, float %45, float %1072)  ; FMad(a,b,c)
  %1074 = call float @dx.op.tertiary.f32(i32 46, float %532, float %68, float %1073)  ; FMad(a,b,c)
  %1075 = fmul fast float %522, %47
  %1076 = call float @dx.op.tertiary.f32(i32 46, float %523, float %48, float %1075)  ; FMad(a,b,c)
  %1077 = call float @dx.op.tertiary.f32(i32 46, float %524, float %49, float %1076)  ; FMad(a,b,c)
  %1078 = call float @dx.op.tertiary.f32(i32 46, float %532, float %69, float %1077)  ; FMad(a,b,c)
  %1079 = fmul fast float %522, %51
  %1080 = call float @dx.op.tertiary.f32(i32 46, float %523, float %52, float %1079)  ; FMad(a,b,c)
  %1081 = call float @dx.op.tertiary.f32(i32 46, float %524, float %53, float %1080)  ; FMad(a,b,c)
  %1082 = call float @dx.op.tertiary.f32(i32 46, float %532, float %70, float %1081)  ; FMad(a,b,c)
  %1083 = fmul fast float %19, 2.000000e+00
  %1084 = fmul fast float %20, 2.000000e+00
  %1085 = fmul fast float %21, 2.000000e+00
  %1086 = fadd fast float %1083, -1.000000e+00
  %1087 = fadd fast float %1084, -1.000000e+00
  %1088 = fadd fast float %1085, -1.000000e+00
  %1089 = fmul fast float %15, 2.000000e+00
  %1090 = fmul fast float %16, 2.000000e+00
  %1091 = fmul fast float %17, 2.000000e+00
  %1092 = fadd fast float %1089, -1.000000e+00
  %1093 = fadd fast float %1090, -1.000000e+00
  %1094 = fadd fast float %1091, -1.000000e+00
  %1095 = fmul fast float %18, 2.000000e+00
  %1096 = fadd fast float %1095, -1.000000e+00
  %1097 = fmul fast float %1087, %1094
  %1098 = fmul fast float %1088, %1093
  %1099 = fsub fast float %1097, %1098
  %1100 = fmul fast float %1088, %1092
  %1101 = fmul fast float %1086, %1094
  %1102 = fsub fast float %1100, %1101
  %1103 = fmul fast float %1086, %1093
  %1104 = fmul fast float %1087, %1092
  %1105 = fsub fast float %1103, %1104
  %1106 = fmul fast float %1099, %1096
  %1107 = fmul fast float %1102, %1096
  %1108 = fmul fast float %1105, %1096
  %1109 = fmul fast float %1046, %1092
  %1110 = call float @dx.op.tertiary.f32(i32 46, float %1093, float %1055, float %1109)  ; FMad(a,b,c)
  %1111 = call float @dx.op.tertiary.f32(i32 46, float %1094, float %1064, float %1110)  ; FMad(a,b,c)
  %1112 = fmul fast float %1049, %1092
  %1113 = call float @dx.op.tertiary.f32(i32 46, float %1093, float %1058, float %1112)  ; FMad(a,b,c)
  %1114 = call float @dx.op.tertiary.f32(i32 46, float %1094, float %1067, float %1113)  ; FMad(a,b,c)
  %1115 = fmul fast float %1052, %1092
  %1116 = call float @dx.op.tertiary.f32(i32 46, float %1093, float %1061, float %1115)  ; FMad(a,b,c)
  %1117 = call float @dx.op.tertiary.f32(i32 46, float %1094, float %1070, float %1116)  ; FMad(a,b,c)
  %1118 = fmul fast float %1046, %1106
  %1119 = call float @dx.op.tertiary.f32(i32 46, float %1107, float %1055, float %1118)  ; FMad(a,b,c)
  %1120 = call float @dx.op.tertiary.f32(i32 46, float %1108, float %1064, float %1119)  ; FMad(a,b,c)
  %1121 = fmul fast float %1049, %1106
  %1122 = call float @dx.op.tertiary.f32(i32 46, float %1107, float %1058, float %1121)  ; FMad(a,b,c)
  %1123 = call float @dx.op.tertiary.f32(i32 46, float %1108, float %1067, float %1122)  ; FMad(a,b,c)
  %1124 = fmul fast float %1052, %1106
  %1125 = call float @dx.op.tertiary.f32(i32 46, float %1107, float %1061, float %1124)  ; FMad(a,b,c)
  %1126 = call float @dx.op.tertiary.f32(i32 46, float %1108, float %1070, float %1125)  ; FMad(a,b,c)
  %1127 = fmul fast float %1046, %1086
  %1128 = call float @dx.op.tertiary.f32(i32 46, float %1087, float %1055, float %1127)  ; FMad(a,b,c)
  %1129 = call float @dx.op.tertiary.f32(i32 46, float %1088, float %1064, float %1128)  ; FMad(a,b,c)
  %1130 = fmul fast float %1049, %1086
  %1131 = call float @dx.op.tertiary.f32(i32 46, float %1087, float %1058, float %1130)  ; FMad(a,b,c)
  %1132 = call float @dx.op.tertiary.f32(i32 46, float %1088, float %1067, float %1131)  ; FMad(a,b,c)
  %1133 = fmul fast float %1052, %1086
  %1134 = call float @dx.op.tertiary.f32(i32 46, float %1087, float %1061, float %1133)  ; FMad(a,b,c)
  %1135 = call float @dx.op.tertiary.f32(i32 46, float %1088, float %1070, float %1134)  ; FMad(a,b,c)
  %1136 = call float @dx.op.dot3.f32(i32 55, float %1129, float %1132, float %1135, float %1129, float %1132, float %1135)  ; Dot3(ax,ay,az,bx,by,bz)
  %1137 = call float @dx.op.unary.f32(i32 25, float %1136)  ; Rsqrt(value)
  %1138 = fmul fast float %1137, %1129
  %1139 = fmul fast float %1137, %1132
  %1140 = fmul fast float %1137, %1135
  %1141 = call float @dx.op.dot3.f32(i32 55, float %1120, float %1123, float %1126, float %1120, float %1123, float %1126)  ; Dot3(ax,ay,az,bx,by,bz)
  %1142 = call float @dx.op.unary.f32(i32 25, float %1141)  ; Rsqrt(value)
  %1143 = fmul fast float %1142, %1120
  %1144 = fmul fast float %1142, %1123
  %1145 = fmul fast float %1142, %1126
  %1146 = call float @dx.op.dot3.f32(i32 55, float %1111, float %1114, float %1117, float %1111, float %1114, float %1117)  ; Dot3(ax,ay,az,bx,by,bz)
  %1147 = call float @dx.op.unary.f32(i32 25, float %1146)  ; Rsqrt(value)
  %1148 = fmul fast float %1147, %1111
  %1149 = fmul fast float %1147, %1114
  %1150 = fmul fast float %1147, %1117
  %1151 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1152 = extractvalue %dx.types.CBufRet.i32 %1151, 0
  %1153 = add i32 %1152, 0
  %1154 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 %1153, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %1155 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1154, %dx.types.Handle %2, float %22, float %23, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1156 = extractvalue %dx.types.ResRet.f32 %1155, 0
  %1157 = call float @dx.op.unary.f32(i32 7, float %1156)  ; Saturate(value)
  %1158 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1159 = extractvalue %dx.types.CBufRet.f32 %1158, 0
  %1160 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1161 = extractvalue %dx.types.CBufRet.f32 %1160, 0
  %1162 = fmul fast float %1159, %1157
  %1163 = fmul fast float %1162, %1161
  %1164 = fmul fast float %1163, 5.000000e-01
  %1165 = fadd fast float %1163, 5.000000e-01
  %1166 = call float @dx.op.unary.f32(i32 22, float %1165)  ; Frc(value)
  %1167 = fmul fast float %1166, 2.000000e+00
  %1168 = fadd fast float %1167, -1.000000e+00
  %1169 = call float @dx.op.unary.f32(i32 6, float %1168)  ; FAbs(value)
  %1170 = fmul fast float %1169, 2.000000e+00
  %1171 = fsub fast float 3.000000e+00, %1170
  %1172 = fmul fast float %1169, %1169
  %1173 = fmul fast float %1172, 2.000000e+00
  %1174 = fmul fast float %1173, %1171
  %1175 = fadd fast float %1174, -1.000000e+00
  %1176 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1177 = extractvalue %dx.types.CBufRet.f32 %1176, 0
  %1178 = fmul fast float %1157, 0x3F1A36E2E0000000
  %1179 = fmul fast float %1178, %1177
  %1180 = fmul fast float %1179, %1175
  %1181 = fadd fast float %1164, 0x400090FDC0000000
  %1182 = call float @dx.op.unary.f32(i32 22, float %1181)  ; Frc(value)
  %1183 = fmul fast float %1182, 2.000000e+00
  %1184 = fadd fast float %1183, -1.000000e+00
  %1185 = call float @dx.op.unary.f32(i32 6, float %1184)  ; FAbs(value)
  %1186 = fmul fast float %1185, 2.000000e+00
  %1187 = fsub fast float 3.000000e+00, %1186
  %1188 = fmul fast float %1185, %1185
  %1189 = fmul fast float %1188, 2.000000e+00
  %1190 = fmul fast float %1189, %1187
  %1191 = fadd fast float %1190, -1.000000e+00
  %1192 = fmul fast float %1179, %1191
  %1193 = call float @dx.op.dot3.f32(i32 55, float %1138, float %1139, float %1140, float %1138, float %1139, float %1140)  ; Dot3(ax,ay,az,bx,by,bz)
  %1194 = call float @dx.op.unary.f32(i32 25, float %1193)  ; Rsqrt(value)
  %1195 = fmul fast float %1194, %1138
  %1196 = fmul fast float %1194, %1139
  %1197 = fmul fast float %1194, %1140
  %1198 = fmul fast float %1195, %1180
  %1199 = fmul fast float %1196, %1180
  %1200 = fmul fast float %1197, %1180
  %1201 = call float @dx.op.dot3.f32(i32 55, float %1148, float %1149, float %1150, float %1148, float %1149, float %1150)  ; Dot3(ax,ay,az,bx,by,bz)
  %1202 = call float @dx.op.unary.f32(i32 25, float %1201)  ; Rsqrt(value)
  %1203 = fmul fast float %1202, %1148
  %1204 = fmul fast float %1202, %1149
  %1205 = fmul fast float %1202, %1150
  %1206 = fmul fast float %1203, %1192
  %1207 = fmul fast float %1204, %1192
  %1208 = fmul fast float %1205, %1192
  %1209 = fadd fast float %1198, %82
  %1210 = fadd fast float %1209, %1206
  %1211 = fadd fast float %1199, %83
  %1212 = fadd fast float %1211, %1207
  %1213 = fadd fast float %1200, %84
  %1214 = fadd fast float %1213, %1208
  %1215 = fmul fast float %1210, %1046
  %1216 = call float @dx.op.tertiary.f32(i32 46, float %1212, float %1055, float %1215)  ; FMad(a,b,c)
  %1217 = call float @dx.op.tertiary.f32(i32 46, float %1214, float %1064, float %1216)  ; FMad(a,b,c)
  %1218 = fadd fast float %1217, %1074
  %1219 = fmul fast float %1210, %1049
  %1220 = call float @dx.op.tertiary.f32(i32 46, float %1212, float %1058, float %1219)  ; FMad(a,b,c)
  %1221 = call float @dx.op.tertiary.f32(i32 46, float %1214, float %1067, float %1220)  ; FMad(a,b,c)
  %1222 = fadd fast float %1221, %1078
  %1223 = fmul fast float %1210, %1052
  %1224 = call float @dx.op.tertiary.f32(i32 46, float %1212, float %1061, float %1223)  ; FMad(a,b,c)
  %1225 = call float @dx.op.tertiary.f32(i32 46, float %1214, float %1070, float %1224)  ; FMad(a,b,c)
  %1226 = fadd fast float %1225, %1082
  %1227 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 37)  ; CBufferLoadLegacy(handle,regIndex)
  %1228 = extractvalue %dx.types.CBufRet.f32 %1227, 0
  %1229 = extractvalue %dx.types.CBufRet.f32 %1227, 1
  %1230 = extractvalue %dx.types.CBufRet.f32 %1227, 2
  %1231 = fadd fast float %1228, %1218
  %1232 = fadd fast float %1229, %1222
  %1233 = fadd fast float %1230, %1226
  %1234 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %1235 = extractvalue %dx.types.CBufRet.f32 %1234, 0
  %1236 = extractvalue %dx.types.CBufRet.f32 %1234, 1
  %1237 = extractvalue %dx.types.CBufRet.f32 %1234, 2
  %1238 = extractvalue %dx.types.CBufRet.f32 %1234, 3
  %1239 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %1240 = extractvalue %dx.types.CBufRet.f32 %1239, 0
  %1241 = extractvalue %dx.types.CBufRet.f32 %1239, 1
  %1242 = extractvalue %dx.types.CBufRet.f32 %1239, 2
  %1243 = extractvalue %dx.types.CBufRet.f32 %1239, 3
  %1244 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %1245 = extractvalue %dx.types.CBufRet.f32 %1244, 0
  %1246 = extractvalue %dx.types.CBufRet.f32 %1244, 1
  %1247 = extractvalue %dx.types.CBufRet.f32 %1244, 2
  %1248 = extractvalue %dx.types.CBufRet.f32 %1244, 3
  %1249 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %1250 = extractvalue %dx.types.CBufRet.f32 %1249, 0
  %1251 = extractvalue %dx.types.CBufRet.f32 %1249, 1
  %1252 = extractvalue %dx.types.CBufRet.f32 %1249, 2
  %1253 = extractvalue %dx.types.CBufRet.f32 %1249, 3
  %1254 = fmul fast float %1235, %1218
  %1255 = call float @dx.op.tertiary.f32(i32 46, float %1222, float %1236, float %1254)  ; FMad(a,b,c)
  %1256 = call float @dx.op.tertiary.f32(i32 46, float %1226, float %1237, float %1255)  ; FMad(a,b,c)
  %1257 = fadd fast float %1256, %1238
  %1258 = fmul fast float %1240, %1218
  %1259 = call float @dx.op.tertiary.f32(i32 46, float %1222, float %1241, float %1258)  ; FMad(a,b,c)
  %1260 = call float @dx.op.tertiary.f32(i32 46, float %1226, float %1242, float %1259)  ; FMad(a,b,c)
  %1261 = fadd fast float %1260, %1243
  %1262 = fmul fast float %1245, %1218
  %1263 = call float @dx.op.tertiary.f32(i32 46, float %1222, float %1246, float %1262)  ; FMad(a,b,c)
  %1264 = call float @dx.op.tertiary.f32(i32 46, float %1226, float %1247, float %1263)  ; FMad(a,b,c)
  %1265 = fadd fast float %1264, %1248
  %1266 = fmul fast float %1250, %1218
  %1267 = call float @dx.op.tertiary.f32(i32 46, float %1222, float %1251, float %1266)  ; FMad(a,b,c)
  %1268 = call float @dx.op.tertiary.f32(i32 46, float %1226, float %1252, float %1267)  ; FMad(a,b,c)
  %1269 = fadd fast float %1268, %1253
  %1270 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %1271 = extractvalue %dx.types.CBufRet.f32 %1270, 0
  %1272 = extractvalue %dx.types.CBufRet.f32 %1270, 1
  %1273 = fmul fast float %1271, %1269
  %1274 = fmul fast float %1272, %1269
  %1275 = fsub fast float %1257, %1273
  %1276 = fsub fast float %1261, %1274
  %1277 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %1278 = extractvalue %dx.types.CBufRet.f32 %1277, 0
  %1279 = extractvalue %dx.types.CBufRet.f32 %1277, 1
  %1280 = extractvalue %dx.types.CBufRet.f32 %1277, 2
  %1281 = extractvalue %dx.types.CBufRet.f32 %1277, 3
  %1282 = call float @dx.op.dot4.f32(i32 56, float %1278, float %1279, float %1280, float %1281, float %1231, float %1232, float %1233, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %1257)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %1261)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %1265)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %1269)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %1231)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %1232)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %1233)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %22)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %23)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %11)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %12)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float %13)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %14)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %1138)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %1139)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %1140)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %1143)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float %1144)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float %1145)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float %1148)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 0, float %1149)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 1, float %1150)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 2, float %1275)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 3, float %1276)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 0, float %1265)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 1, float %1269)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 2, float %1031)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 3, float %1035)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 0, float %1039)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 1, float %1043)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 8, i32 0, i8 0, float %1282)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!17}
!dx.entryPoints = !{!18}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{!5, null, !9, !15}
!5 = !{!6, !8}
!6 = !{i32 0, [32768 x %"class.Texture2D<vector<float, 4> >"]* undef, !"", i32 1, i32 0, i32 32768, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 10, i32 1, i32 11, i32 0, null}
!9 = !{!10, !11, !12, !13, !14}
!10 = !{i32 0, %MaterialModifiersConsts* undef, !"", i32 0, i32 7, i32 1, i32 496, null}
!11 = !{i32 1, %GlobalShaderConsts* undef, !"", i32 0, i32 0, i32 1, i32 476, null}
!12 = !{i32 2, %hostlayout.CameraShaderConsts* undef, !"", i32 0, i32 1, i32 1, i32 848, null}
!13 = !{i32 3, %ShaderSpecificConstants* undef, !"", i32 0, i32 4, i32 1, i32 36, null}
!14 = !{i32 4, %hostlayout.FrequentVertexConsts* undef, !"", i32 0, i32 5, i32 1, i32 112, null}
!15 = !{!16}
!16 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!17 = !{[116 x i32] [i32 57, i32 33, i32 1069547647, i32 1, i32 1069547647, i32 1, i32 1069547647, i32 1, i32 0, i32 0, i32 1073733759, i32 1, i32 1073733759, i32 1, i32 1073733759, i32 1, i32 1073733759, i32 1, i32 1073733759, i32 1, i32 1073733759, i32 1, i32 1073733759, i32 1, i32 1073733759, i32 1, i32 1073733759, i32 1, i32 1073733759, i32 1, i32 1073733759, i32 1, i32 1073733759, i32 1, i32 1073733759, i32 1, i32 1073733759, i32 1, i32 1073733759, i32 1, i32 1073733759, i32 1, i32 62914815, i32 1, i32 62914943, i32 1, i32 0, i32 0, i32 0, i32 0, i32 63430783, i32 1, i32 63430783, i32 1, i32 63430783, i32 1, i32 0, i32 0, i32 67043455, i32 1, i32 67043455, i32 1, i32 67043455, i32 1, i32 458752, i32 0, i32 512, i32 0, i32 1024, i32 0, i32 2048, i32 0, i32 4096, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 67100799, i32 1, i32 67100799, i32 1, i32 67100799, i32 1, i32 62914591, i32 1, i32 67100799, i32 1, i32 67100799, i32 1, i32 67100799, i32 1, i32 62914607, i32 1, i32 67100799, i32 1, i32 67100799, i32 1, i32 67100799, i32 1, i32 62914639, i32 1, i32 67100799, i32 1, i32 1073733759, i32 1, i32 1006632960, i32 0, i32 0, i32 0, i32 0, i32 0]}
!18 = !{void ()* @vs_main_, !"vs_main_", !19, !4, !56}
!19 = !{!20, !40, null}
!20 = !{!21, !24, !26, !27, !29, !30, !32, !33, !34, !35, !36, !38, !39}
!21 = !{i32 0, !"POSITION", i8 9, i8 0, !22, i8 0, i32 1, i8 3, i32 0, i8 0, !23}
!22 = !{i32 0}
!23 = !{i32 3, i32 7}
!24 = !{i32 1, !"BLENDINDICES", i8 5, i8 0, !22, i8 0, i32 1, i8 4, i32 1, i8 0, !25}
!25 = !{i32 3, i32 15}
!26 = !{i32 2, !"BLENDWEIGHT", i8 9, i8 0, !22, i8 0, i32 1, i8 4, i32 2, i8 0, !25}
!27 = !{i32 3, !"BLENDINDICES", i8 5, i8 0, !28, i8 0, i32 1, i8 4, i32 3, i8 0, !25}
!28 = !{i32 1}
!29 = !{i32 4, !"BLENDWEIGHT", i8 9, i8 0, !28, i8 0, i32 1, i8 4, i32 4, i8 0, !25}
!30 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !22, i8 0, i32 1, i8 2, i32 5, i8 0, !31}
!31 = !{i32 3, i32 3}
!32 = !{i32 6, !"NORMAL", i8 9, i8 0, !22, i8 0, i32 1, i8 3, i32 6, i8 0, !23}
!33 = !{i32 7, !"TANGENT", i8 9, i8 0, !22, i8 0, i32 1, i8 4, i32 7, i8 0, !25}
!34 = !{i32 8, !"COLOR", i8 9, i8 0, !22, i8 0, i32 1, i8 4, i32 8, i8 0, !25}
!35 = !{i32 9, !"TEXCOORD", i8 9, i8 0, !28, i8 0, i32 1, i8 2, i32 9, i8 0, null}
!36 = !{i32 10, !"INSTANCE_TRANSFORM", i8 9, i8 0, !37, i8 0, i32 3, i8 4, i32 10, i8 0, !25}
!37 = !{i32 0, i32 1, i32 2}
!38 = !{i32 11, !"INSTANCE_SKINNING_DATA", i8 5, i8 0, !22, i8 0, i32 1, i8 4, i32 13, i8 0, !23}
!39 = !{i32 12, !"SV_VertexID", i8 5, i8 1, !22, i8 0, i32 1, i8 1, i32 14, i8 0, null}
!40 = !{!41, !42, !43, !44, !46, !48, !50, !52, !54}
!41 = !{i32 0, !"SV_Position", i8 9, i8 3, !22, i8 4, i32 1, i8 4, i32 0, i8 0, !25}
!42 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !22, i8 2, i32 1, i8 4, i32 1, i8 0, !25}
!43 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !28, i8 2, i32 1, i8 4, i32 2, i8 0, !25}
!44 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !45, i8 2, i32 1, i8 4, i32 3, i8 0, !25}
!45 = !{i32 2}
!46 = !{i32 4, !"TEXCOORD", i8 9, i8 0, !47, i8 2, i32 1, i8 4, i32 4, i8 0, !25}
!47 = !{i32 3}
!48 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !49, i8 2, i32 1, i8 4, i32 5, i8 0, !25}
!49 = !{i32 4}
!50 = !{i32 6, !"TEXCOORD", i8 9, i8 0, !51, i8 2, i32 1, i8 4, i32 6, i8 0, !25}
!51 = !{i32 5}
!52 = !{i32 7, !"TEXCOORD", i8 9, i8 0, !53, i8 2, i32 1, i8 2, i32 7, i8 0, !31}
!53 = !{i32 6}
!54 = !{i32 8, !"SV_ClipDistance", i8 9, i8 6, !22, i8 2, i32 1, i8 1, i32 8, i8 0, !55}
!55 = !{i32 3, i32 1}
!56 = !{i32 0, i64 16}
 