;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; POSITION                 0   xyz         0     NONE   float   xyz 
; BLENDINDICES             0   xyzw        1     NONE    uint   xyzw
; BLENDWEIGHT              0   xyzw        2     NONE   float   xyzw
; TEXCOORD                 0   xy          3     NONE   float   xy  
; NORMAL                   0   xyz         4     NONE   float   xyz 
; TANGENT                  0   xyzw        5     NONE   float   xyzw
; COLOR                    0   xyzw        6     NONE   float       
; TEXCOORD                 1   xy          7     NONE   float       
; INSTANCE_TRANSFORM       0   xyzw        8     NONE   float   xyzw
; INSTANCE_TRANSFORM       1   xyzw        9     NONE   float   xyzw
; INSTANCE_TRANSFORM       2   xyzw       10     NONE   float   xyzw
; INSTANCE_SKINNING_DATA     0   xyzw       11     NONE    uint   xy  
; SV_VertexID              0   x          12   VERTID    uint       
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; TEXCOORD                 0   xyzw        1     NONE   float   xyzw
; TEXCOORD                 1   xyzw        2     NONE   float   xyzw
; TEXCOORD                 2   xyzw        3     NONE   float   xyzw
; TEXCOORD                 3   xyzw        4     NONE   float   xyzw
;
; shader hash: 43f4fd018c5c1c37b9ce144fa2745477
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; POSITION                 0                              
; BLENDINDICES             0                              
; BLENDWEIGHT              0                              
; TEXCOORD                 0                              
; NORMAL                   0                              
; TANGENT                  0                              
; COLOR                    0                              
; TEXCOORD                 1                              
; INSTANCE_TRANSFORM       0                              
; INSTANCE_SKINNING_DATA     0                              
; SV_VertexID              0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; TEXCOORD                 3                 linear       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [496 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [848 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [112 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb7     1
;                                   cbuffer      NA          NA     CB1            cb1     1
;                                   cbuffer      NA          NA     CB2            cb5     1
;                                   texture    byte         r/o      T0            t10     1
;
;
; ViewId state:
;
; Number of inputs: 49, outputs: 20
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
;   output 1 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
;   output 2 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
;   output 3 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
;   output 4 depends on inputs: { 12 }
;   output 5 depends on inputs: { 13 }
;   output 6 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 7 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 8 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 9 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 20, 21, 22, 23, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 10 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 20, 21, 22, 23, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 11 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 20, 21, 22, 23, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 12 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 20, 21, 22, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 13 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 20, 21, 22, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 14 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 20, 21, 22, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 15 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 44, 45 }
;   output 16 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 36, 37, 38, 39, 44, 45 }
;   output 17 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 40, 41, 42, 43, 44, 45 }
;   output 18 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
;   output 19 depends on inputs: { 35, 39 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%struct.ByteAddressBuffer = type { i32 }
%MaterialModifiersConsts = type { [31 x <4 x float>] }
%hostlayout.CameraShaderConsts = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, i32, i32, <2 x i32>, float, float }
%hostlayout.FrequentVertexConsts = type { [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float> }

define void @vs_main_() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 10, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 2, i32 5, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 7, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call i32 @dx.op.loadInput.i32(i32 4, i32 9, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call i32 @dx.op.loadInput.i32(i32 4, i32 9, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %20 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %21 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %22 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %23 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %24 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %25 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %26 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %27 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %28 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %29 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %30 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %31 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 1, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %32 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 1, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %33 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 1, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %34 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 1, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %35 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 2, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %36 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 2, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %37 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 2, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %38 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 2, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %39 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %40 = extractvalue %dx.types.CBufRet.i32 %39, 0
  %41 = extractvalue %dx.types.CBufRet.i32 %39, 1
  %42 = extractvalue %dx.types.CBufRet.i32 %39, 2
  %43 = bitcast float %30 to i32
  %44 = bitcast float %34 to i32
  %45 = bitcast float %38 to i32
  %46 = sub i32 %43, %40
  %47 = sub i32 %44, %41
  %48 = sub i32 %45, %42
  %49 = sitofp i32 %46 to float
  %50 = sitofp i32 %47 to float
  %51 = sitofp i32 %48 to float
  %52 = fmul fast float %49, 0x3EE0000000000000
  %53 = fmul fast float %50, 0x3EE0000000000000
  %54 = fmul fast float %51, 0x3EE0000000000000
  %55 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %56 = extractvalue %dx.types.CBufRet.f32 %55, 0
  %57 = extractvalue %dx.types.CBufRet.f32 %55, 1
  %58 = extractvalue %dx.types.CBufRet.f32 %55, 2
  %59 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %60 = extractvalue %dx.types.CBufRet.f32 %59, 0
  %61 = extractvalue %dx.types.CBufRet.f32 %59, 1
  %62 = extractvalue %dx.types.CBufRet.f32 %59, 2
  %63 = fmul fast float %60, %24
  %64 = fmul fast float %61, %25
  %65 = fmul fast float %62, %26
  %66 = fadd fast float %63, %56
  %67 = fadd fast float %64, %57
  %68 = fadd fast float %65, %58
  %69 = call float @dx.op.dot4.f32(i32 56, float %16, float %17, float %18, float %19, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %70 = call float @dx.op.binary.f32(i32 35, float 0x3EE4F8B580000000, float %69)  ; FMax(a,b)
  %71 = fdiv fast float %16, %70
  %72 = fdiv fast float %17, %70
  %73 = fdiv fast float %18, %70
  %74 = fdiv fast float %19, %70
  %75 = mul i32 %20, %6
  %76 = add i32 %75, %5
  %77 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %76, i32 undef)  ; BufferLoad(srv,index,wot)
  %78 = extractvalue %dx.types.ResRet.i32 %77, 0
  %79 = extractvalue %dx.types.ResRet.i32 %77, 1
  %80 = extractvalue %dx.types.ResRet.i32 %77, 2
  %81 = extractvalue %dx.types.ResRet.i32 %77, 3
  %82 = bitcast i32 %78 to float
  %83 = bitcast i32 %79 to float
  %84 = bitcast i32 %80 to float
  %85 = bitcast i32 %81 to float
  %86 = add i32 %76, 16
  %87 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %86, i32 undef)  ; BufferLoad(srv,index,wot)
  %88 = extractvalue %dx.types.ResRet.i32 %87, 0
  %89 = extractvalue %dx.types.ResRet.i32 %87, 1
  %90 = extractvalue %dx.types.ResRet.i32 %87, 2
  %91 = extractvalue %dx.types.ResRet.i32 %87, 3
  %92 = bitcast i32 %88 to float
  %93 = bitcast i32 %89 to float
  %94 = bitcast i32 %90 to float
  %95 = bitcast i32 %91 to float
  %96 = add i32 %76, 32
  %97 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %96, i32 undef)  ; BufferLoad(srv,index,wot)
  %98 = extractvalue %dx.types.ResRet.i32 %97, 0
  %99 = extractvalue %dx.types.ResRet.i32 %97, 1
  %100 = extractvalue %dx.types.ResRet.i32 %97, 2
  %101 = extractvalue %dx.types.ResRet.i32 %97, 3
  %102 = bitcast i32 %98 to float
  %103 = bitcast i32 %99 to float
  %104 = bitcast i32 %100 to float
  %105 = bitcast i32 %101 to float
  %106 = fmul fast float %82, %71
  %107 = fmul fast float %92, %71
  %108 = fmul fast float %102, %71
  %109 = fmul fast float %83, %71
  %110 = fmul fast float %93, %71
  %111 = fmul fast float %103, %71
  %112 = fmul fast float %84, %71
  %113 = fmul fast float %94, %71
  %114 = fmul fast float %104, %71
  %115 = fmul fast float %85, %71
  %116 = fmul fast float %95, %71
  %117 = fmul fast float %105, %71
  %118 = mul i32 %21, %6
  %119 = add i32 %118, %5
  %120 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %119, i32 undef)  ; BufferLoad(srv,index,wot)
  %121 = extractvalue %dx.types.ResRet.i32 %120, 0
  %122 = extractvalue %dx.types.ResRet.i32 %120, 1
  %123 = extractvalue %dx.types.ResRet.i32 %120, 2
  %124 = extractvalue %dx.types.ResRet.i32 %120, 3
  %125 = bitcast i32 %121 to float
  %126 = bitcast i32 %122 to float
  %127 = bitcast i32 %123 to float
  %128 = bitcast i32 %124 to float
  %129 = add i32 %119, 16
  %130 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %129, i32 undef)  ; BufferLoad(srv,index,wot)
  %131 = extractvalue %dx.types.ResRet.i32 %130, 0
  %132 = extractvalue %dx.types.ResRet.i32 %130, 1
  %133 = extractvalue %dx.types.ResRet.i32 %130, 2
  %134 = extractvalue %dx.types.ResRet.i32 %130, 3
  %135 = bitcast i32 %131 to float
  %136 = bitcast i32 %132 to float
  %137 = bitcast i32 %133 to float
  %138 = bitcast i32 %134 to float
  %139 = add i32 %119, 32
  %140 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %139, i32 undef)  ; BufferLoad(srv,index,wot)
  %141 = extractvalue %dx.types.ResRet.i32 %140, 0
  %142 = extractvalue %dx.types.ResRet.i32 %140, 1
  %143 = extractvalue %dx.types.ResRet.i32 %140, 2
  %144 = extractvalue %dx.types.ResRet.i32 %140, 3
  %145 = bitcast i32 %141 to float
  %146 = bitcast i32 %142 to float
  %147 = bitcast i32 %143 to float
  %148 = bitcast i32 %144 to float
  %149 = fmul fast float %125, %72
  %150 = fmul fast float %135, %72
  %151 = fmul fast float %145, %72
  %152 = fmul fast float %126, %72
  %153 = fmul fast float %136, %72
  %154 = fmul fast float %146, %72
  %155 = fmul fast float %127, %72
  %156 = fmul fast float %137, %72
  %157 = fmul fast float %147, %72
  %158 = fmul fast float %128, %72
  %159 = fmul fast float %138, %72
  %160 = fmul fast float %148, %72
  %161 = fadd fast float %149, %106
  %162 = fadd fast float %150, %107
  %163 = fadd fast float %151, %108
  %164 = fadd fast float %152, %109
  %165 = fadd fast float %153, %110
  %166 = fadd fast float %154, %111
  %167 = fadd fast float %155, %112
  %168 = fadd fast float %156, %113
  %169 = fadd fast float %157, %114
  %170 = fadd fast float %158, %115
  %171 = fadd fast float %159, %116
  %172 = fadd fast float %160, %117
  %173 = mul i32 %22, %6
  %174 = add i32 %173, %5
  %175 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %174, i32 undef)  ; BufferLoad(srv,index,wot)
  %176 = extractvalue %dx.types.ResRet.i32 %175, 0
  %177 = extractvalue %dx.types.ResRet.i32 %175, 1
  %178 = extractvalue %dx.types.ResRet.i32 %175, 2
  %179 = extractvalue %dx.types.ResRet.i32 %175, 3
  %180 = bitcast i32 %176 to float
  %181 = bitcast i32 %177 to float
  %182 = bitcast i32 %178 to float
  %183 = bitcast i32 %179 to float
  %184 = add i32 %174, 16
  %185 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %184, i32 undef)  ; BufferLoad(srv,index,wot)
  %186 = extractvalue %dx.types.ResRet.i32 %185, 0
  %187 = extractvalue %dx.types.ResRet.i32 %185, 1
  %188 = extractvalue %dx.types.ResRet.i32 %185, 2
  %189 = extractvalue %dx.types.ResRet.i32 %185, 3
  %190 = bitcast i32 %186 to float
  %191 = bitcast i32 %187 to float
  %192 = bitcast i32 %188 to float
  %193 = bitcast i32 %189 to float
  %194 = add i32 %174, 32
  %195 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %194, i32 undef)  ; BufferLoad(srv,index,wot)
  %196 = extractvalue %dx.types.ResRet.i32 %195, 0
  %197 = extractvalue %dx.types.ResRet.i32 %195, 1
  %198 = extractvalue %dx.types.ResRet.i32 %195, 2
  %199 = extractvalue %dx.types.ResRet.i32 %195, 3
  %200 = bitcast i32 %196 to float
  %201 = bitcast i32 %197 to float
  %202 = bitcast i32 %198 to float
  %203 = bitcast i32 %199 to float
  %204 = fmul fast float %180, %73
  %205 = fmul fast float %190, %73
  %206 = fmul fast float %200, %73
  %207 = fmul fast float %181, %73
  %208 = fmul fast float %191, %73
  %209 = fmul fast float %201, %73
  %210 = fmul fast float %182, %73
  %211 = fmul fast float %192, %73
  %212 = fmul fast float %202, %73
  %213 = fmul fast float %183, %73
  %214 = fmul fast float %193, %73
  %215 = fmul fast float %203, %73
  %216 = fadd fast float %161, %204
  %217 = fadd fast float %162, %205
  %218 = fadd fast float %163, %206
  %219 = fadd fast float %164, %207
  %220 = fadd fast float %165, %208
  %221 = fadd fast float %166, %209
  %222 = fadd fast float %167, %210
  %223 = fadd fast float %168, %211
  %224 = fadd fast float %169, %212
  %225 = fadd fast float %170, %213
  %226 = fadd fast float %171, %214
  %227 = fadd fast float %172, %215
  %228 = mul i32 %23, %6
  %229 = add i32 %228, %5
  %230 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %229, i32 undef)  ; BufferLoad(srv,index,wot)
  %231 = extractvalue %dx.types.ResRet.i32 %230, 0
  %232 = extractvalue %dx.types.ResRet.i32 %230, 1
  %233 = extractvalue %dx.types.ResRet.i32 %230, 2
  %234 = extractvalue %dx.types.ResRet.i32 %230, 3
  %235 = bitcast i32 %231 to float
  %236 = bitcast i32 %232 to float
  %237 = bitcast i32 %233 to float
  %238 = bitcast i32 %234 to float
  %239 = add i32 %229, 16
  %240 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %239, i32 undef)  ; BufferLoad(srv,index,wot)
  %241 = extractvalue %dx.types.ResRet.i32 %240, 0
  %242 = extractvalue %dx.types.ResRet.i32 %240, 1
  %243 = extractvalue %dx.types.ResRet.i32 %240, 2
  %244 = extractvalue %dx.types.ResRet.i32 %240, 3
  %245 = bitcast i32 %241 to float
  %246 = bitcast i32 %242 to float
  %247 = bitcast i32 %243 to float
  %248 = bitcast i32 %244 to float
  %249 = add i32 %229, 32
  %250 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %249, i32 undef)  ; BufferLoad(srv,index,wot)
  %251 = extractvalue %dx.types.ResRet.i32 %250, 0
  %252 = extractvalue %dx.types.ResRet.i32 %250, 1
  %253 = extractvalue %dx.types.ResRet.i32 %250, 2
  %254 = extractvalue %dx.types.ResRet.i32 %250, 3
  %255 = bitcast i32 %251 to float
  %256 = bitcast i32 %252 to float
  %257 = bitcast i32 %253 to float
  %258 = bitcast i32 %254 to float
  %259 = fmul fast float %235, %74
  %260 = fmul fast float %245, %74
  %261 = fmul fast float %255, %74
  %262 = fmul fast float %236, %74
  %263 = fmul fast float %246, %74
  %264 = fmul fast float %256, %74
  %265 = fmul fast float %237, %74
  %266 = fmul fast float %247, %74
  %267 = fmul fast float %257, %74
  %268 = fmul fast float %238, %74
  %269 = fmul fast float %248, %74
  %270 = fmul fast float %258, %74
  %271 = fadd fast float %216, %259
  %272 = fadd fast float %217, %260
  %273 = fadd fast float %218, %261
  %274 = fadd fast float %219, %262
  %275 = fadd fast float %220, %263
  %276 = fadd fast float %221, %264
  %277 = fadd fast float %222, %265
  %278 = fadd fast float %223, %266
  %279 = fadd fast float %224, %267
  %280 = fadd fast float %225, %268
  %281 = fadd fast float %226, %269
  %282 = fadd fast float %227, %270
  %283 = fmul fast float %271, %66
  %284 = call float @dx.op.tertiary.f32(i32 46, float %67, float %274, float %283)  ; FMad(a,b,c)
  %285 = call float @dx.op.tertiary.f32(i32 46, float %68, float %277, float %284)  ; FMad(a,b,c)
  %286 = fadd fast float %280, %285
  %287 = fmul fast float %272, %66
  %288 = call float @dx.op.tertiary.f32(i32 46, float %67, float %275, float %287)  ; FMad(a,b,c)
  %289 = call float @dx.op.tertiary.f32(i32 46, float %68, float %278, float %288)  ; FMad(a,b,c)
  %290 = fadd fast float %281, %289
  %291 = fmul fast float %273, %66
  %292 = call float @dx.op.tertiary.f32(i32 46, float %67, float %276, float %291)  ; FMad(a,b,c)
  %293 = call float @dx.op.tertiary.f32(i32 46, float %68, float %279, float %292)  ; FMad(a,b,c)
  %294 = fadd fast float %282, %293
  %295 = fmul fast float %286, %27
  %296 = call float @dx.op.tertiary.f32(i32 46, float %290, float %28, float %295)  ; FMad(a,b,c)
  %297 = call float @dx.op.tertiary.f32(i32 46, float %294, float %29, float %296)  ; FMad(a,b,c)
  %298 = fadd fast float %297, %52
  %299 = fmul fast float %286, %31
  %300 = call float @dx.op.tertiary.f32(i32 46, float %290, float %32, float %299)  ; FMad(a,b,c)
  %301 = call float @dx.op.tertiary.f32(i32 46, float %294, float %33, float %300)  ; FMad(a,b,c)
  %302 = fadd fast float %301, %53
  %303 = fmul fast float %286, %35
  %304 = call float @dx.op.tertiary.f32(i32 46, float %290, float %36, float %303)  ; FMad(a,b,c)
  %305 = call float @dx.op.tertiary.f32(i32 46, float %294, float %37, float %304)  ; FMad(a,b,c)
  %306 = fadd fast float %305, %54
  %307 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %308 = extractvalue %dx.types.CBufRet.f32 %307, 0
  %309 = extractvalue %dx.types.CBufRet.f32 %307, 1
  %310 = extractvalue %dx.types.CBufRet.f32 %307, 2
  %311 = extractvalue %dx.types.CBufRet.f32 %307, 3
  %312 = fmul fast float %308, %298
  %313 = call float @dx.op.tertiary.f32(i32 46, float %302, float %309, float %312)  ; FMad(a,b,c)
  %314 = call float @dx.op.tertiary.f32(i32 46, float %306, float %310, float %313)  ; FMad(a,b,c)
  %315 = fadd fast float %314, %311
  %316 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 37)  ; CBufferLoadLegacy(handle,regIndex)
  %317 = extractvalue %dx.types.CBufRet.f32 %316, 0
  %318 = extractvalue %dx.types.CBufRet.f32 %316, 1
  %319 = extractvalue %dx.types.CBufRet.f32 %316, 2
  %320 = fadd fast float %317, %298
  %321 = fadd fast float %318, %302
  %322 = fadd fast float %319, %306
  %323 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %324 = extractvalue %dx.types.CBufRet.f32 %323, 0
  %325 = extractvalue %dx.types.CBufRet.f32 %323, 1
  %326 = extractvalue %dx.types.CBufRet.f32 %323, 2
  %327 = extractvalue %dx.types.CBufRet.f32 %323, 3
  %328 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %329 = extractvalue %dx.types.CBufRet.f32 %328, 0
  %330 = extractvalue %dx.types.CBufRet.f32 %328, 1
  %331 = extractvalue %dx.types.CBufRet.f32 %328, 2
  %332 = extractvalue %dx.types.CBufRet.f32 %328, 3
  %333 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %334 = extractvalue %dx.types.CBufRet.f32 %333, 0
  %335 = extractvalue %dx.types.CBufRet.f32 %333, 1
  %336 = extractvalue %dx.types.CBufRet.f32 %333, 2
  %337 = extractvalue %dx.types.CBufRet.f32 %333, 3
  %338 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %339 = extractvalue %dx.types.CBufRet.f32 %338, 0
  %340 = extractvalue %dx.types.CBufRet.f32 %338, 1
  %341 = extractvalue %dx.types.CBufRet.f32 %338, 2
  %342 = extractvalue %dx.types.CBufRet.f32 %338, 3
  %343 = fmul fast float %324, %298
  %344 = call float @dx.op.tertiary.f32(i32 46, float %302, float %325, float %343)  ; FMad(a,b,c)
  %345 = call float @dx.op.tertiary.f32(i32 46, float %306, float %326, float %344)  ; FMad(a,b,c)
  %346 = fadd fast float %345, %327
  %347 = fmul fast float %329, %298
  %348 = call float @dx.op.tertiary.f32(i32 46, float %302, float %330, float %347)  ; FMad(a,b,c)
  %349 = call float @dx.op.tertiary.f32(i32 46, float %306, float %331, float %348)  ; FMad(a,b,c)
  %350 = fadd fast float %349, %332
  %351 = fmul fast float %334, %298
  %352 = call float @dx.op.tertiary.f32(i32 46, float %302, float %335, float %351)  ; FMad(a,b,c)
  %353 = call float @dx.op.tertiary.f32(i32 46, float %306, float %336, float %352)  ; FMad(a,b,c)
  %354 = fadd fast float %353, %337
  %355 = fmul fast float %339, %298
  %356 = call float @dx.op.tertiary.f32(i32 46, float %302, float %340, float %355)  ; FMad(a,b,c)
  %357 = call float @dx.op.tertiary.f32(i32 46, float %306, float %341, float %356)  ; FMad(a,b,c)
  %358 = fadd fast float %357, %342
  %359 = fmul fast float %271, %27
  %360 = call float @dx.op.tertiary.f32(i32 46, float %272, float %28, float %359)  ; FMad(a,b,c)
  %361 = call float @dx.op.tertiary.f32(i32 46, float %273, float %29, float %360)  ; FMad(a,b,c)
  %362 = fmul fast float %271, %31
  %363 = call float @dx.op.tertiary.f32(i32 46, float %272, float %32, float %362)  ; FMad(a,b,c)
  %364 = call float @dx.op.tertiary.f32(i32 46, float %273, float %33, float %363)  ; FMad(a,b,c)
  %365 = fmul fast float %271, %35
  %366 = call float @dx.op.tertiary.f32(i32 46, float %272, float %36, float %365)  ; FMad(a,b,c)
  %367 = call float @dx.op.tertiary.f32(i32 46, float %273, float %37, float %366)  ; FMad(a,b,c)
  %368 = fmul fast float %274, %27
  %369 = call float @dx.op.tertiary.f32(i32 46, float %275, float %28, float %368)  ; FMad(a,b,c)
  %370 = call float @dx.op.tertiary.f32(i32 46, float %276, float %29, float %369)  ; FMad(a,b,c)
  %371 = fmul fast float %274, %31
  %372 = call float @dx.op.tertiary.f32(i32 46, float %275, float %32, float %371)  ; FMad(a,b,c)
  %373 = call float @dx.op.tertiary.f32(i32 46, float %276, float %33, float %372)  ; FMad(a,b,c)
  %374 = fmul fast float %274, %35
  %375 = call float @dx.op.tertiary.f32(i32 46, float %275, float %36, float %374)  ; FMad(a,b,c)
  %376 = call float @dx.op.tertiary.f32(i32 46, float %276, float %37, float %375)  ; FMad(a,b,c)
  %377 = fmul fast float %277, %27
  %378 = call float @dx.op.tertiary.f32(i32 46, float %278, float %28, float %377)  ; FMad(a,b,c)
  %379 = call float @dx.op.tertiary.f32(i32 46, float %279, float %29, float %378)  ; FMad(a,b,c)
  %380 = fmul fast float %277, %31
  %381 = call float @dx.op.tertiary.f32(i32 46, float %278, float %32, float %380)  ; FMad(a,b,c)
  %382 = call float @dx.op.tertiary.f32(i32 46, float %279, float %33, float %381)  ; FMad(a,b,c)
  %383 = fmul fast float %277, %35
  %384 = call float @dx.op.tertiary.f32(i32 46, float %278, float %36, float %383)  ; FMad(a,b,c)
  %385 = call float @dx.op.tertiary.f32(i32 46, float %279, float %37, float %384)  ; FMad(a,b,c)
  %386 = fmul fast float %11, 2.000000e+00
  %387 = fmul fast float %12, 2.000000e+00
  %388 = fmul fast float %13, 2.000000e+00
  %389 = fadd fast float %386, -1.000000e+00
  %390 = fadd fast float %387, -1.000000e+00
  %391 = fadd fast float %388, -1.000000e+00
  %392 = fmul fast float %7, 2.000000e+00
  %393 = fmul fast float %8, 2.000000e+00
  %394 = fmul fast float %9, 2.000000e+00
  %395 = fadd fast float %392, -1.000000e+00
  %396 = fadd fast float %393, -1.000000e+00
  %397 = fadd fast float %394, -1.000000e+00
  %398 = fmul fast float %10, 2.000000e+00
  %399 = fadd fast float %398, -1.000000e+00
  %400 = fmul fast float %390, %397
  %401 = fmul fast float %391, %396
  %402 = fsub fast float %400, %401
  %403 = fmul fast float %391, %395
  %404 = fmul fast float %389, %397
  %405 = fsub fast float %403, %404
  %406 = fmul fast float %389, %396
  %407 = fmul fast float %390, %395
  %408 = fsub fast float %406, %407
  %409 = fmul fast float %402, %399
  %410 = fmul fast float %405, %399
  %411 = fmul fast float %408, %399
  %412 = fmul fast float %361, %395
  %413 = call float @dx.op.tertiary.f32(i32 46, float %396, float %370, float %412)  ; FMad(a,b,c)
  %414 = call float @dx.op.tertiary.f32(i32 46, float %397, float %379, float %413)  ; FMad(a,b,c)
  %415 = fmul fast float %364, %395
  %416 = call float @dx.op.tertiary.f32(i32 46, float %396, float %373, float %415)  ; FMad(a,b,c)
  %417 = call float @dx.op.tertiary.f32(i32 46, float %397, float %382, float %416)  ; FMad(a,b,c)
  %418 = fmul fast float %367, %395
  %419 = call float @dx.op.tertiary.f32(i32 46, float %396, float %376, float %418)  ; FMad(a,b,c)
  %420 = call float @dx.op.tertiary.f32(i32 46, float %397, float %385, float %419)  ; FMad(a,b,c)
  %421 = fmul fast float %361, %409
  %422 = call float @dx.op.tertiary.f32(i32 46, float %410, float %370, float %421)  ; FMad(a,b,c)
  %423 = call float @dx.op.tertiary.f32(i32 46, float %411, float %379, float %422)  ; FMad(a,b,c)
  %424 = fmul fast float %364, %409
  %425 = call float @dx.op.tertiary.f32(i32 46, float %410, float %373, float %424)  ; FMad(a,b,c)
  %426 = call float @dx.op.tertiary.f32(i32 46, float %411, float %382, float %425)  ; FMad(a,b,c)
  %427 = fmul fast float %367, %409
  %428 = call float @dx.op.tertiary.f32(i32 46, float %410, float %376, float %427)  ; FMad(a,b,c)
  %429 = call float @dx.op.tertiary.f32(i32 46, float %411, float %385, float %428)  ; FMad(a,b,c)
  %430 = fmul fast float %361, %389
  %431 = call float @dx.op.tertiary.f32(i32 46, float %390, float %370, float %430)  ; FMad(a,b,c)
  %432 = call float @dx.op.tertiary.f32(i32 46, float %391, float %379, float %431)  ; FMad(a,b,c)
  %433 = fmul fast float %364, %389
  %434 = call float @dx.op.tertiary.f32(i32 46, float %390, float %373, float %433)  ; FMad(a,b,c)
  %435 = call float @dx.op.tertiary.f32(i32 46, float %391, float %382, float %434)  ; FMad(a,b,c)
  %436 = fmul fast float %367, %389
  %437 = call float @dx.op.tertiary.f32(i32 46, float %390, float %376, float %436)  ; FMad(a,b,c)
  %438 = call float @dx.op.tertiary.f32(i32 46, float %391, float %385, float %437)  ; FMad(a,b,c)
  %439 = call float @dx.op.dot3.f32(i32 55, float %432, float %435, float %438, float %432, float %435, float %438)  ; Dot3(ax,ay,az,bx,by,bz)
  %440 = call float @dx.op.unary.f32(i32 25, float %439)  ; Rsqrt(value)
  %441 = fmul fast float %440, %432
  %442 = fmul fast float %440, %435
  %443 = fmul fast float %440, %438
  %444 = call float @dx.op.dot3.f32(i32 55, float %423, float %426, float %429, float %423, float %426, float %429)  ; Dot3(ax,ay,az,bx,by,bz)
  %445 = call float @dx.op.unary.f32(i32 25, float %444)  ; Rsqrt(value)
  %446 = fmul fast float %445, %423
  %447 = fmul fast float %445, %426
  %448 = fmul fast float %445, %429
  %449 = call float @dx.op.dot3.f32(i32 55, float %414, float %417, float %420, float %414, float %417, float %420)  ; Dot3(ax,ay,az,bx,by,bz)
  %450 = call float @dx.op.unary.f32(i32 25, float %449)  ; Rsqrt(value)
  %451 = fmul fast float %450, %414
  %452 = fmul fast float %450, %417
  %453 = fmul fast float %450, %420
  %454 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %455 = extractvalue %dx.types.CBufRet.f32 %454, 0
  %456 = call float @dx.op.unary.f32(i32 6, float %455)  ; FAbs(value)
  %457 = fmul fast float %456, 0x3FC99999A0000000
  %458 = fsub fast float 0x3FC99999A0000000, %457
  %459 = extractvalue %dx.types.CBufRet.f32 %454, 1
  %460 = call float @dx.op.unary.f32(i32 6, float %459)  ; FAbs(value)
  %461 = fmul fast float %460, 0x3FE99999A0000000
  %462 = fsub fast float 1.000000e+00, %461
  %463 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 36)  ; CBufferLoadLegacy(handle,regIndex)
  %464 = extractvalue %dx.types.CBufRet.f32 %463, 0
  %465 = extractvalue %dx.types.CBufRet.f32 %463, 1
  %466 = fsub fast float %52, %464
  %467 = fsub fast float %53, %465
  %468 = fadd fast float %466, %317
  %469 = fadd fast float %467, %318
  %470 = fmul fast float %468, %468
  %471 = fmul fast float %469, %469
  %472 = fadd fast float %470, %471
  %473 = call float @dx.op.unary.f32(i32 24, float %472)  ; Sqrt(value)
  %474 = fadd fast float %473, 0xBFD3333340000000
  %475 = fmul fast float %474, 2.000000e+00
  %476 = call float @dx.op.unary.f32(i32 7, float %475)  ; Saturate(value)
  %477 = fsub fast float 1.000000e+00, %476
  %478 = call float @dx.op.binary.f32(i32 36, float %462, float %477)  ; FMin(a,b)
  %479 = call float @dx.op.binary.f32(i32 35, float %478, float %458)  ; FMax(a,b)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %346)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %350)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %354)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %358)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %14)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %15)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %441)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %442)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %443)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %446)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %447)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float %448)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %451)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %452)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %453)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %320)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %321)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float %322)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float %315)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float %479)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!11}
!dx.entryPoints = !{!12}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{!5, null, !7, null}
!5 = !{!6}
!6 = !{i32 0, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 10, i32 1, i32 11, i32 0, null}
!7 = !{!8, !9, !10}
!8 = !{i32 0, %MaterialModifiersConsts* undef, !"", i32 0, i32 7, i32 1, i32 496, null}
!9 = !{i32 1, %hostlayout.CameraShaderConsts* undef, !"", i32 0, i32 1, i32 1, i32 848, null}
!10 = !{i32 2, %hostlayout.FrequentVertexConsts* undef, !"", i32 0, i32 5, i32 1, i32 112, null}
!11 = !{[51 x i32] [i32 49, i32 20, i32 491535, i32 491535, i32 491535, i32 0, i32 524239, i32 524239, i32 524239, i32 524239, i32 524239, i32 524239, i32 524239, i32 524239, i32 16, i32 32, i32 0, i32 0, i32 4032, i32 4032, i32 4032, i32 0, i32 32256, i32 32256, i32 32256, i32 3584, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 327631, i32 327631, i32 327631, i32 819215, i32 360399, i32 360399, i32 360399, i32 851983, i32 425935, i32 425935, i32 425935, i32 393231, i32 524239, i32 524239, i32 0, i32 0, i32 0]}
!12 = !{void ()* @vs_main_, !"vs_main_", !13, !4, !40}
!13 = !{!14, !32, null}
!14 = !{!15, !18, !20, !21, !23, !24, !25, !26, !28, !30, !31}
!15 = !{i32 0, !"POSITION", i8 9, i8 0, !16, i8 0, i32 1, i8 3, i32 0, i8 0, !17}
!16 = !{i32 0}
!17 = !{i32 3, i32 7}
!18 = !{i32 1, !"BLENDINDICES", i8 5, i8 0, !16, i8 0, i32 1, i8 4, i32 1, i8 0, !19}
!19 = !{i32 3, i32 15}
!20 = !{i32 2, !"BLENDWEIGHT", i8 9, i8 0, !16, i8 0, i32 1, i8 4, i32 2, i8 0, !19}
!21 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !16, i8 0, i32 1, i8 2, i32 3, i8 0, !22}
!22 = !{i32 3, i32 3}
!23 = !{i32 4, !"NORMAL", i8 9, i8 0, !16, i8 0, i32 1, i8 3, i32 4, i8 0, !17}
!24 = !{i32 5, !"TANGENT", i8 9, i8 0, !16, i8 0, i32 1, i8 4, i32 5, i8 0, !19}
!25 = !{i32 6, !"COLOR", i8 9, i8 0, !16, i8 0, i32 1, i8 4, i32 6, i8 0, null}
!26 = !{i32 7, !"TEXCOORD", i8 9, i8 0, !27, i8 0, i32 1, i8 2, i32 7, i8 0, null}
!27 = !{i32 1}
!28 = !{i32 8, !"INSTANCE_TRANSFORM", i8 9, i8 0, !29, i8 0, i32 3, i8 4, i32 8, i8 0, !19}
!29 = !{i32 0, i32 1, i32 2}
!30 = !{i32 9, !"INSTANCE_SKINNING_DATA", i8 5, i8 0, !16, i8 0, i32 1, i8 4, i32 11, i8 0, !22}
!31 = !{i32 10, !"SV_VertexID", i8 5, i8 1, !16, i8 0, i32 1, i8 1, i32 12, i8 0, null}
!32 = !{!33, !34, !35, !36, !38}
!33 = !{i32 0, !"SV_Position", i8 9, i8 3, !16, i8 4, i32 1, i8 4, i32 0, i8 0, !19}
!34 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !16, i8 2, i32 1, i8 4, i32 1, i8 0, !19}
!35 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !27, i8 2, i32 1, i8 4, i32 2, i8 0, !19}
!36 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !37, i8 2, i32 1, i8 4, i32 3, i8 0, !19}
!37 = !{i32 2}
!38 = !{i32 4, !"TEXCOORD", i8 9, i8 0, !39, i8 2, i32 1, i8 4, i32 4, i8 0, !19}
!39 = !{i32 3}
!40 = !{i32 0, i64 16}
 