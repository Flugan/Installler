;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; POSITION                 0   xyz         0     NONE   float   xyz 
; COLOR                    0   xyzw        1     NONE   float   xyzw
; TEXCOORD                 0   xyz         2     NONE   float   xyz 
; TEXCOORD                 1   xy          3     NONE   float   xy  
; TEXCOORD                 2   xy          4     NONE   float   xy  
; SV_VertexID              0   x           5   VERTID    uint   x   
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; TEXCOORD                 0   xyzw        1     NONE   float   xyzw
; TEXCOORD                 1   xyzw        2     NONE   float   xyzw
; TEXCOORD                 2   xyzw        3     NONE   float   xyzw
; TEXCOORD                 3   xyzw        4     NONE   float   xyzw
; TEXCOORD                 4   xyzw        5     NONE   float   xyzw
; TEXCOORD                 6   xy          6     NONE   float   xy  
; SV_ClipDistance          0   x           7  CLIPDST   float   x   
;
; shader hash: 21b8c924d7477c2e1693442200b25b2c
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; POSITION                 0                              
; COLOR                    0                              
; TEXCOORD                 0                              
; TEXCOORD                 1                              
; TEXCOORD                 2                              
; SV_VertexID              0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; TEXCOORD                 3                 linear       
; TEXCOORD                 4                 linear       
; TEXCOORD                 6               centroid       
; SV_ClipDistance          0                 linear       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [476 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [848 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [4 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [112 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [12 x i8] (type annotation not present)
;
; }
;
; Resource bind info for 
; {
;
;   [12 x i8] (type annotation not present)
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;                                   cbuffer      NA          NA     CB1            cb1     1
;                                   cbuffer      NA          NA     CB2            cb4     1
;                                   cbuffer      NA          NA     CB3            cb5     1
;                                   cbuffer      NA          NA     CB4            cb6     1
;                                   texture  struct         r/o      T0            t77     1
;
;
; ViewId state:
;
; Number of inputs: 21, outputs: 29
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2, 8, 9, 12, 13 }
;   output 1 depends on inputs: { 0, 1, 2, 8, 9, 12, 13 }
;   output 2 depends on inputs: { 0, 1, 2, 8, 9, 12, 13 }
;   output 3 depends on inputs: { 0, 1, 2, 8, 9, 12, 13 }
;   output 4 depends on inputs: { 16 }
;   output 5 depends on inputs: { 17 }
;   output 6 depends on inputs: { 0, 1, 2, 8, 9, 12, 13 }
;   output 7 depends on inputs: { 10 }
;   output 8 depends on inputs: { 4 }
;   output 9 depends on inputs: { 5 }
;   output 10 depends on inputs: { 6 }
;   output 11 depends on inputs: { 7 }
;   output 15 depends on inputs: { 8, 9 }
;   output 16 depends on inputs: { 8, 9 }
;   output 17 depends on inputs: { 8, 9 }
;   output 18 depends on inputs: { 8, 9 }
;   output 19 depends on inputs: { 8, 9 }
;   output 20 depends on inputs: { 8, 9 }
;   output 21 depends on inputs: { 0, 1, 2, 8, 9, 12, 13 }
;   output 22 depends on inputs: { 0, 1, 2, 8, 9, 12, 13 }
;   output 23 depends on inputs: { 0, 1, 2, 8, 9, 12, 13 }
;   output 24 depends on inputs: { 20 }
;   output 25 depends on inputs: { 20 }
;   output 28 depends on inputs: { 0, 1, 2, 8, 9, 12, 13 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%"class.StructuredBuffer<SDPLParticleData>" = type { %struct.SDPLParticleData }
%struct.SDPLParticleData = type { i32, i32, i32 }
%GlobalShaderConsts = type { <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, float, float, float, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, i32, float, [6 x <4 x float>], <4 x float>, <2 x i32>, i32, i32, float, i32, i32 }
%hostlayout.CameraShaderConsts = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, i32, i32, <2 x i32>, float, float }
%ShaderSpecificConstants = type { float }
%hostlayout.FrequentVertexConsts = type { [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float> }
%VER = type { %struct.SEmitterConsts }
%struct.SEmitterConsts = type { i32, float, float }

define void @vs_main_() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 77, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 4, i32 6, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 3, i32 5, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 2, i32 4, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %7 = call i32 @dx.op.loadInput.i32(i32 4, i32 5, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %20 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %21 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %22 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %23 = extractvalue %dx.types.CBufRet.f32 %22, 0
  %24 = extractvalue %dx.types.CBufRet.f32 %22, 1
  %25 = extractvalue %dx.types.CBufRet.f32 %22, 2
  %26 = extractvalue %dx.types.CBufRet.f32 %22, 3
  %27 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %28 = extractvalue %dx.types.CBufRet.f32 %27, 0
  %29 = extractvalue %dx.types.CBufRet.f32 %27, 1
  %30 = extractvalue %dx.types.CBufRet.f32 %27, 2
  %31 = extractvalue %dx.types.CBufRet.f32 %27, 3
  %32 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %33 = extractvalue %dx.types.CBufRet.f32 %32, 0
  %34 = extractvalue %dx.types.CBufRet.f32 %32, 1
  %35 = extractvalue %dx.types.CBufRet.f32 %32, 2
  %36 = extractvalue %dx.types.CBufRet.f32 %32, 3
  %37 = bitcast float %26 to i32
  %38 = bitcast float %31 to i32
  %39 = bitcast float %36 to i32
  %40 = sitofp i32 %37 to float
  %41 = sitofp i32 %38 to float
  %42 = sitofp i32 %39 to float
  %43 = fmul fast float %40, 0x3EE0000000000000
  %44 = fmul fast float %41, 0x3EE0000000000000
  %45 = fmul fast float %42, 0x3EE0000000000000
  %46 = fmul fast float %23, %19
  %47 = call float @dx.op.tertiary.f32(i32 46, float %20, float %24, float %46)  ; FMad(a,b,c)
  %48 = call float @dx.op.tertiary.f32(i32 46, float %21, float %25, float %47)  ; FMad(a,b,c)
  %49 = fadd fast float %43, %48
  %50 = fmul fast float %28, %19
  %51 = call float @dx.op.tertiary.f32(i32 46, float %20, float %29, float %50)  ; FMad(a,b,c)
  %52 = call float @dx.op.tertiary.f32(i32 46, float %21, float %30, float %51)  ; FMad(a,b,c)
  %53 = fadd fast float %52, %44
  %54 = fmul fast float %33, %19
  %55 = call float @dx.op.tertiary.f32(i32 46, float %20, float %34, float %54)  ; FMad(a,b,c)
  %56 = call float @dx.op.tertiary.f32(i32 46, float %21, float %35, float %55)  ; FMad(a,b,c)
  %57 = fadd fast float %56, %45
  %58 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 41)  ; CBufferLoadLegacy(handle,regIndex)
  %59 = extractvalue %dx.types.CBufRet.f32 %58, 0
  %60 = extractvalue %dx.types.CBufRet.f32 %58, 1
  %61 = extractvalue %dx.types.CBufRet.f32 %58, 2
  %62 = fsub fast float -0.000000e+00, %59
  %63 = fsub fast float -0.000000e+00, %60
  %64 = fsub fast float -0.000000e+00, %61
  %65 = fmul fast float %13, %11
  %66 = fmul fast float %12, %10
  %67 = fadd fast float %65, %66
  %68 = fmul fast float %12, %11
  %69 = fmul fast float %13, %10
  %70 = fsub fast float %68, %69
  %71 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 40)  ; CBufferLoadLegacy(handle,regIndex)
  %72 = extractvalue %dx.types.CBufRet.f32 %71, 0
  %73 = extractvalue %dx.types.CBufRet.f32 %71, 1
  %74 = extractvalue %dx.types.CBufRet.f32 %71, 2
  %75 = fmul fast float %72, %67
  %76 = fmul fast float %73, %67
  %77 = fmul fast float %74, %67
  %78 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 42)  ; CBufferLoadLegacy(handle,regIndex)
  %79 = extractvalue %dx.types.CBufRet.f32 %78, 0
  %80 = extractvalue %dx.types.CBufRet.f32 %78, 1
  %81 = extractvalue %dx.types.CBufRet.f32 %78, 2
  %82 = fmul fast float %79, %70
  %83 = fmul fast float %80, %70
  %84 = fmul fast float %81, %70
  %85 = fadd fast float %49, %75
  %86 = fadd fast float %53, %76
  %87 = fadd fast float %57, %77
  %88 = fadd fast float %85, %82
  %89 = fadd fast float %86, %83
  %90 = fadd fast float %87, %84
  %91 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %92 = extractvalue %dx.types.CBufRet.f32 %91, 0
  %93 = extractvalue %dx.types.CBufRet.f32 %91, 1
  %94 = extractvalue %dx.types.CBufRet.f32 %91, 2
  %95 = extractvalue %dx.types.CBufRet.f32 %91, 3
  %96 = fmul fast float %88, %92
  %97 = call float @dx.op.tertiary.f32(i32 46, float %89, float %93, float %96)  ; FMad(a,b,c)
  %98 = call float @dx.op.tertiary.f32(i32 46, float %90, float %94, float %97)  ; FMad(a,b,c)
  %99 = fadd fast float %98, %95
  %100 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %101 = extractvalue %dx.types.CBufRet.f32 %100, 0
  %102 = extractvalue %dx.types.CBufRet.f32 %100, 1
  %103 = extractvalue %dx.types.CBufRet.f32 %100, 2
  %104 = extractvalue %dx.types.CBufRet.f32 %100, 3
  %105 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %106 = extractvalue %dx.types.CBufRet.f32 %105, 0
  %107 = extractvalue %dx.types.CBufRet.f32 %105, 1
  %108 = extractvalue %dx.types.CBufRet.f32 %105, 2
  %109 = extractvalue %dx.types.CBufRet.f32 %105, 3
  %110 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %111 = extractvalue %dx.types.CBufRet.f32 %110, 0
  %112 = extractvalue %dx.types.CBufRet.f32 %110, 1
  %113 = extractvalue %dx.types.CBufRet.f32 %110, 2
  %114 = extractvalue %dx.types.CBufRet.f32 %110, 3
  %115 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %116 = extractvalue %dx.types.CBufRet.f32 %115, 0
  %117 = extractvalue %dx.types.CBufRet.f32 %115, 1
  %118 = extractvalue %dx.types.CBufRet.f32 %115, 2
  %119 = extractvalue %dx.types.CBufRet.f32 %115, 3
  %120 = fmul fast float %101, %88
  %121 = call float @dx.op.tertiary.f32(i32 46, float %89, float %102, float %120)  ; FMad(a,b,c)
  %122 = call float @dx.op.tertiary.f32(i32 46, float %90, float %103, float %121)  ; FMad(a,b,c)
  %123 = fadd fast float %122, %104
  %124 = fmul fast float %106, %88
  %125 = call float @dx.op.tertiary.f32(i32 46, float %89, float %107, float %124)  ; FMad(a,b,c)
  %126 = call float @dx.op.tertiary.f32(i32 46, float %90, float %108, float %125)  ; FMad(a,b,c)
  %127 = fadd fast float %126, %109
  %128 = fmul fast float %111, %88
  %129 = call float @dx.op.tertiary.f32(i32 46, float %89, float %112, float %128)  ; FMad(a,b,c)
  %130 = call float @dx.op.tertiary.f32(i32 46, float %90, float %113, float %129)  ; FMad(a,b,c)
  %131 = fadd fast float %130, %114
  %132 = fmul fast float %116, %88
  %133 = call float @dx.op.tertiary.f32(i32 46, float %89, float %117, float %132)  ; FMad(a,b,c)
  %134 = call float @dx.op.tertiary.f32(i32 46, float %90, float %118, float %133)  ; FMad(a,b,c)
  %135 = fadd fast float %134, %119
  %136 = fsub fast float -0.000000e+00, %12
  %137 = fmul fast float %72, %136
  %138 = fmul fast float %73, %136
  %139 = fmul fast float %74, %136
  %140 = fmul fast float %79, %13
  %141 = fmul fast float %80, %13
  %142 = fmul fast float %81, %13
  %143 = fsub fast float %137, %140
  %144 = fsub fast float %138, %141
  %145 = fsub fast float %139, %142
  %146 = fmul fast float %72, %13
  %147 = fmul fast float %73, %13
  %148 = fmul fast float %74, %13
  %149 = fmul fast float %79, %12
  %150 = fmul fast float %80, %12
  %151 = fmul fast float %81, %12
  %152 = fsub fast float %146, %149
  %153 = fsub fast float %147, %150
  %154 = fsub fast float %148, %151
  %155 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %156 = extractvalue %dx.types.CBufRet.f32 %155, 0
  %157 = fcmp fast olt float %156, 1.000000e+00
  %158 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %159 = extractvalue %dx.types.CBufRet.f32 %158, 0
  %160 = fmul fast float %159, 5.000000e-01
  %161 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %2, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %162 = extractvalue %dx.types.CBufRet.i32 %161, 0
  %163 = lshr i32 %7, 2
  %164 = add i32 %162, %163
  %165 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %164, i32 8)  ; BufferLoad(srv,index,wot)
  %166 = extractvalue %dx.types.ResRet.i32 %165, 0
  %167 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %164, i32 0)  ; BufferLoad(srv,index,wot)
  %168 = extractvalue %dx.types.ResRet.i32 %167, 0
  %169 = add i32 %168, 1
  %170 = and i32 %169, 31
  %171 = shl i32 1, %170
  %172 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %6, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %173 = extractvalue %dx.types.CBufRet.i32 %172, 2
  %174 = lshr i32 %173, %170
  %175 = add i32 %174, -1
  %176 = and i32 %175, %166
  %177 = extractvalue %dx.types.CBufRet.i32 %172, 3
  %178 = sub i32 31, %168
  %179 = add i32 %178, %177
  %180 = and i32 %179, 31
  %181 = lshr i32 %166, %180
  %182 = shl i32 %176, %170
  %183 = shl i32 %181, %170
  %184 = uitofp i32 %182 to float
  %185 = uitofp i32 %183 to float
  %186 = fmul fast float %184, %159
  %187 = fmul fast float %185, %159
  %188 = lshr i32 %7, 1
  %189 = and i32 %188, 1
  %190 = add i32 %188, %7
  %191 = and i32 %190, 1
  %192 = uitofp i32 %191 to float
  %193 = uitofp i32 %189 to float
  %194 = add i32 %171, -1
  %195 = uitofp i32 %194 to float
  %196 = fmul fast float %159, %192
  %197 = fmul fast float %196, %195
  %198 = fmul fast float %159, %193
  %199 = fmul fast float %198, %195
  %200 = fadd fast float %197, %160
  %201 = fadd fast float %200, %186
  %202 = fadd fast float %199, %160
  %203 = fadd fast float %202, %187
  %204 = select i1 %157, float %201, float 0.000000e+00
  %205 = select i1 %157, float %203, float 0.000000e+00
  %206 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %207 = extractvalue %dx.types.CBufRet.f32 %206, 0
  %208 = extractvalue %dx.types.CBufRet.f32 %206, 1
  %209 = extractvalue %dx.types.CBufRet.f32 %206, 2
  %210 = extractvalue %dx.types.CBufRet.f32 %206, 3
  %211 = call float @dx.op.dot4.f32(i32 56, float %207, float %208, float %209, float %210, float %88, float %89, float %90, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %123)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %127)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %131)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %135)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %8)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %9)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %99)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %14)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %15)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %16)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %17)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float %18)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %62)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %63)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %64)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %152)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %153)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float %154)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float %143)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float %144)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 0, float %145)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 1, float %88)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 2, float %89)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 3, float %90)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 0, float %204)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 1, float %205)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 0, float %211)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!14}
!dx.entryPoints = !{!15}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{!5, null, !8, null}
!5 = !{!6}
!6 = !{i32 0, %"class.StructuredBuffer<SDPLParticleData>"* undef, !"", i32 0, i32 77, i32 1, i32 12, i32 0, !7}
!7 = !{i32 1, i32 12}
!8 = !{!9, !10, !11, !12, !13}
!9 = !{i32 0, %GlobalShaderConsts* undef, !"", i32 0, i32 0, i32 1, i32 476, null}
!10 = !{i32 1, %hostlayout.CameraShaderConsts* undef, !"", i32 0, i32 1, i32 1, i32 848, null}
!11 = !{i32 2, %ShaderSpecificConstants* undef, !"", i32 0, i32 4, i32 1, i32 4, null}
!12 = !{i32 3, %hostlayout.FrequentVertexConsts* undef, !"", i32 0, i32 5, i32 1, i32 112, null}
!13 = !{i32 4, %VER* undef, !"", i32 0, i32 6, i32 1, i32 12, null}
!14 = !{[23 x i32] [i32 21, i32 29, i32 283115599, i32 283115599, i32 283115599, i32 0, i32 256, i32 512, i32 1024, i32 2048, i32 285179983, i32 285179983, i32 128, i32 0, i32 283115599, i32 283115599, i32 0, i32 0, i32 16, i32 32, i32 0, i32 0, i32 50331648]}
!15 = !{void ()* @vs_main_, !"vs_main_", !16, !4, !43}
!16 = !{!17, !31, null}
!17 = !{!18, !21, !23, !24, !27, !29}
!18 = !{i32 0, !"POSITION", i8 9, i8 0, !19, i8 0, i32 1, i8 3, i32 0, i8 0, !20}
!19 = !{i32 0}
!20 = !{i32 3, i32 7}
!21 = !{i32 1, !"COLOR", i8 9, i8 0, !19, i8 0, i32 1, i8 4, i32 1, i8 0, !22}
!22 = !{i32 3, i32 15}
!23 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !19, i8 0, i32 1, i8 3, i32 2, i8 0, !20}
!24 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !25, i8 0, i32 1, i8 2, i32 3, i8 0, !26}
!25 = !{i32 1}
!26 = !{i32 3, i32 3}
!27 = !{i32 4, !"TEXCOORD", i8 9, i8 0, !28, i8 0, i32 1, i8 2, i32 4, i8 0, !26}
!28 = !{i32 2}
!29 = !{i32 5, !"SV_VertexID", i8 5, i8 1, !19, i8 0, i32 1, i8 1, i32 5, i8 0, !30}
!30 = !{i32 3, i32 1}
!31 = !{!32, !33, !34, !35, !36, !38, !40, !42}
!32 = !{i32 0, !"SV_Position", i8 9, i8 3, !19, i8 4, i32 1, i8 4, i32 0, i8 0, !22}
!33 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !19, i8 2, i32 1, i8 4, i32 1, i8 0, !22}
!34 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !25, i8 2, i32 1, i8 4, i32 2, i8 0, !22}
!35 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !28, i8 2, i32 1, i8 4, i32 3, i8 0, !22}
!36 = !{i32 4, !"TEXCOORD", i8 9, i8 0, !37, i8 2, i32 1, i8 4, i32 4, i8 0, !22}
!37 = !{i32 3}
!38 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !39, i8 2, i32 1, i8 4, i32 5, i8 0, !22}
!39 = !{i32 4}
!40 = !{i32 6, !"TEXCOORD", i8 9, i8 0, !41, i8 3, i32 1, i8 2, i32 6, i8 0, !26}
!41 = !{i32 6}
!42 = !{i32 7, !"SV_ClipDistance", i8 9, i8 6, !19, i8 2, i32 1, i8 1, i32 7, i8 0, !30}
!43 = !{i32 0, i64 16}
 