;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; POSITION                 0   xyz         0     NONE   float   xyz 
; BLENDINDICES             0   xyzw        1     NONE    uint   xyzw
; BLENDWEIGHT              0   xyzw        2     NONE   float   xyzw
; BLENDINDICES             1   xyzw        3     NONE    uint   xyzw
; BLENDWEIGHT              1   xyzw        4     NONE   float   xyzw
; TEXCOORD                 0   xy          5     NONE   float   xy  
; NORMAL                   0   xyz         6     NONE   float   xyz 
; TANGENT                  0   xyzw        7     NONE   float   xyzw
; COLOR                    0   xyzw        8     NONE   float   xyzw
; TEXCOORD                 1   xy          9     NONE   float       
; INSTANCE_TRANSFORM       0   xyzw       10     NONE   float   xyzw
; INSTANCE_TRANSFORM       1   xyzw       11     NONE   float   xyzw
; INSTANCE_TRANSFORM       2   xyzw       12     NONE   float   xyzw
; INSTANCE_SKINNING_DATA     0   xyzw       13     NONE    uint   xyz 
; EXTRA_DATA               0   xyz        14     NONE   float   xyz 
; SV_VertexID              0   x          15   VERTID    uint   x   
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; TEXCOORD                 0   xyzw        1     NONE   float   xyzw
; TEXCOORD                 1   xyzw        2     NONE   float   xyzw
; TEXCOORD                 2   xyzw        3     NONE   float   xyzw
; TEXCOORD                 3   xyzw        4     NONE   float   xyzw
; TEXCOORD                 4   xyzw        5     NONE   float   xyzw
; TEXCOORD                 5   xyzw        6     NONE   float   xyzw
; TEXCOORD                 6   xyzw        7     NONE   float   xyzw
; TEXCOORD                 7   xy          8     NONE   float   xy  
; SV_ClipDistance          0   x           9  CLIPDST   float   x   
;
; shader hash: 7a5c215e0778c8443de4845d295b985c
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; POSITION                 0                              
; BLENDINDICES             0                              
; BLENDWEIGHT              0                              
; BLENDINDICES             1                              
; BLENDWEIGHT              1                              
; TEXCOORD                 0                              
; NORMAL                   0                              
; TANGENT                  0                              
; COLOR                    0                              
; TEXCOORD                 1                              
; INSTANCE_TRANSFORM       0                              
; INSTANCE_SKINNING_DATA     0                              
; EXTRA_DATA               0                              
; SV_VertexID              0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; TEXCOORD                 3                 linear       
; TEXCOORD                 4                 linear       
; TEXCOORD                 5                 linear       
; TEXCOORD                 6                 linear       
; TEXCOORD                 7                 linear       
; SV_ClipDistance          0                 linear       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [496 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [848 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [5760 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [640 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [112 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [512 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb7     1
;                                   cbuffer      NA          NA     CB1            cb1     1
;                                   cbuffer      NA          NA     CB2            cb9     1
;                                   cbuffer      NA          NA     CB3           cb10     1
;                                   cbuffer      NA          NA     CB4            cb5     1
;                                   cbuffer      NA          NA     CB5            cb8     1
;                                   texture    byte         r/o      T0            t10     1
;                                   texture     f32          2d      T1            t77     1
;
;
; ViewId state:
;
; Number of inputs: 61, outputs: 37
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 1 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 2 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 3 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 4 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 5 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 6 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 7 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 28, 29, 30, 31, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 8 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 28, 29, 30, 31, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 9 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 28, 29, 30, 31, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 10 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 11 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 12 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 13 depends on inputs: { 20 }
;   output 14 depends on inputs: { 21 }
;   output 15 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 52, 53, 56, 57, 58, 60 }
;   output 16 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 44, 45, 46, 47, 52, 53, 56, 57, 58, 60 }
;   output 17 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 18 depends on inputs: { 32 }
;   output 19 depends on inputs: { 33 }
;   output 20 depends on inputs: { 34 }
;   output 21 depends on inputs: { 35 }
;   output 22 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 23 depends on inputs: { 20, 21 }
;   output 24 depends on inputs: { 20, 21 }
;   output 25 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 26 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 27 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 28 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 29 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 53, 54, 56, 57, 58, 60 }
;   output 30 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 53, 54, 56, 57, 58, 60 }
;   output 31 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 53, 54, 56, 57, 58, 60 }
;   output 32 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 53, 54, 56, 57, 58, 60 }
;   output 36 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%MaterialModifiersConsts = type { [31 x <4 x float>] }
%hostlayout.CameraShaderConsts = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, i32, i32, <2 x i32>, float, float }
%TextureRegionsCB = type { [40 x %struct.SRegion] }
%struct.SRegion = type { i32, float, float, [4 x <4 x float>], [4 x <4 x float>] }
%FloatTracksDataCB = type { [40 x <4 x float>] }
%hostlayout.FrequentVertexConsts = type { [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float> }
%CullObjectsCB = type { [8 x %struct.CullObjectPacked] }
%struct.CullObjectPacked = type { <2 x i32>, <2 x i32>, <3 x float>, float, <3 x float>, float, <3 x float>, i32 }

define void @vs_main_() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 77, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 10, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 5, i32 8, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 4, i32 5, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 3, i32 10, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 2, i32 9, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 7, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %9 = call i32 @dx.op.loadInput.i32(i32 4, i32 13, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 12, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 12, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 12, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call i32 @dx.op.loadInput.i32(i32 4, i32 11, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call i32 @dx.op.loadInput.i32(i32 4, i32 11, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call i32 @dx.op.loadInput.i32(i32 4, i32 11, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %20 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %21 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %22 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %23 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %24 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %25 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %26 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %27 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %28 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %29 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %30 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %31 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %32 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %33 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %34 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %35 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %36 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %37 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %38 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %39 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %40 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %41 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %42 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %43 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %44 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %45 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %46 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %47 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %48 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %49 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %50 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %51 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %52 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %53 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %54 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %55 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %56 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %57 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %58 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %59 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %60 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %7, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %61 = extractvalue %dx.types.CBufRet.i32 %60, 0
  %62 = extractvalue %dx.types.CBufRet.i32 %60, 1
  %63 = extractvalue %dx.types.CBufRet.i32 %60, 2
  %64 = bitcast float %51 to i32
  %65 = bitcast float %55 to i32
  %66 = bitcast float %59 to i32
  %67 = sub i32 %64, %61
  %68 = sub i32 %65, %62
  %69 = sub i32 %66, %63
  %70 = sitofp i32 %67 to float
  %71 = sitofp i32 %68 to float
  %72 = sitofp i32 %69 to float
  %73 = fmul fast float %70, 0x3EE0000000000000
  %74 = fmul fast float %71, 0x3EE0000000000000
  %75 = fmul fast float %72, 0x3EE0000000000000
  %76 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %77 = extractvalue %dx.types.CBufRet.f32 %76, 0
  %78 = extractvalue %dx.types.CBufRet.f32 %76, 1
  %79 = extractvalue %dx.types.CBufRet.f32 %76, 2
  %80 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %81 = extractvalue %dx.types.CBufRet.f32 %80, 0
  %82 = extractvalue %dx.types.CBufRet.f32 %80, 1
  %83 = extractvalue %dx.types.CBufRet.f32 %80, 2
  %84 = fmul fast float %81, %45
  %85 = fmul fast float %82, %46
  %86 = fmul fast float %83, %47
  %87 = fadd fast float %84, %77
  %88 = fadd fast float %85, %78
  %89 = fadd fast float %86, %79
  %90 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %91 = extractvalue %dx.types.CBufRet.f32 %90, 0
  %92 = fcmp fast ogt float %91, 5.000000e-01
  br i1 %92, label %93, label %98

; <label>:93                                      ; preds = %0
  %94 = and i32 %9, 255
  %95 = lshr i32 %9, 8
  %96 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1, i32 0, i32 %94, i32 %95, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %97 = extractvalue %dx.types.ResRet.f32 %96, 0
  br label %98

; <label>:98                                      ; preds = %93, %0
  %99 = phi float [ %97, %93 ], [ 0.000000e+00, %0 ]
  %100 = fmul fast float %99, 2.500000e+00
  %101 = fmul fast float %100, %10
  %102 = fmul fast float %100, %11
  %103 = fmul fast float %100, %12
  %104 = fadd fast float %87, %101
  %105 = fadd fast float %88, %102
  %106 = fadd fast float %89, %103
  %107 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %108 = extractvalue %dx.types.CBufRet.f32 %107, 0
  %109 = fptoui float %108 to i32
  %110 = call i32 @dx.op.binary.i32(i32 40, i32 %109, i32 8)  ; UMin(a,b)
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %177, label %112

; <label>:112                                     ; preds = %98
  br label %113

; <label>:113                                     ; preds = %113, %112
  %114 = phi float [ %173, %113 ], [ 0.000000e+00, %112 ]
  %115 = phi i32 [ %174, %113 ], [ 0, %112 ]
  %116 = shl i32 %115, 2
  %117 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %116)  ; CBufferLoadLegacy(handle,regIndex)
  %118 = extractvalue %dx.types.CBufRet.i32 %117, 0
  %119 = extractvalue %dx.types.CBufRet.i32 %117, 1
  %120 = call float @dx.op.legacyF16ToF32(i32 131, i32 %118)  ; LegacyF16ToF32(value)
  %121 = lshr i32 %118, 16
  %122 = call float @dx.op.legacyF16ToF32(i32 131, i32 %121)  ; LegacyF16ToF32(value)
  %123 = call float @dx.op.legacyF16ToF32(i32 131, i32 %119)  ; LegacyF16ToF32(value)
  %124 = lshr i32 %119, 16
  %125 = call float @dx.op.legacyF16ToF32(i32 131, i32 %124)  ; LegacyF16ToF32(value)
  %126 = or i32 %116, 1
  %127 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %126)  ; CBufferLoadLegacy(handle,regIndex)
  %128 = extractvalue %dx.types.CBufRet.f32 %127, 0
  %129 = extractvalue %dx.types.CBufRet.f32 %127, 1
  %130 = extractvalue %dx.types.CBufRet.f32 %127, 2
  %131 = extractvalue %dx.types.CBufRet.f32 %127, 3
  %132 = or i32 %116, 2
  %133 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %132)  ; CBufferLoadLegacy(handle,regIndex)
  %134 = extractvalue %dx.types.CBufRet.f32 %133, 0
  %135 = extractvalue %dx.types.CBufRet.f32 %133, 1
  %136 = extractvalue %dx.types.CBufRet.f32 %133, 2
  %137 = extractvalue %dx.types.CBufRet.f32 %133, 3
  %138 = call float @dx.op.dot4.f32(i32 56, float %120, float %122, float %123, float %125, float %104, float %105, float %106, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %139 = fmul fast float %138, -1.000000e+01
  %140 = call float @dx.op.unary.f32(i32 7, float %139)  ; Saturate(value)
  %141 = fsub fast float 1.000000e+00, %140
  %142 = fsub fast float %104, %128
  %143 = fsub fast float %105, %129
  %144 = fsub fast float %106, %130
  %145 = fsub fast float %134, %128
  %146 = fsub fast float %135, %129
  %147 = fsub fast float %136, %130
  %148 = call float @dx.op.dot3.f32(i32 55, float %142, float %143, float %144, float %145, float %146, float %147)  ; Dot3(ax,ay,az,bx,by,bz)
  %149 = call float @dx.op.dot3.f32(i32 55, float %145, float %146, float %147, float %145, float %146, float %147)  ; Dot3(ax,ay,az,bx,by,bz)
  %150 = fdiv fast float %148, %149
  %151 = fmul fast float %150, %145
  %152 = fmul fast float %150, %146
  %153 = fmul fast float %150, %147
  %154 = fsub fast float %128, %104
  %155 = fadd fast float %154, %151
  %156 = fsub fast float %129, %105
  %157 = fadd fast float %156, %152
  %158 = fsub fast float %130, %106
  %159 = fadd fast float %158, %153
  %160 = call float @dx.op.dot3.f32(i32 55, float %155, float %157, float %159, float %155, float %157, float %159)  ; Dot3(ax,ay,az,bx,by,bz)
  %161 = call float @dx.op.unary.f32(i32 24, float %160)  ; Sqrt(value)
  %162 = fmul fast float %131, 5.000000e-01
  %163 = fsub fast float %161, %162
  %164 = fdiv fast float %163, %162
  %165 = call float @dx.op.unary.f32(i32 7, float %164)  ; Saturate(value)
  %166 = fmul fast float %165, 2.000000e+00
  %167 = fsub fast float 3.000000e+00, %166
  %168 = fmul fast float %165, %165
  %169 = fmul fast float %168, %167
  %170 = fsub fast float 1.000000e+00, %169
  %171 = fmul fast float %141, %137
  %172 = fmul fast float %171, %170
  %173 = call float @dx.op.binary.f32(i32 35, float %172, float %114)  ; FMax(a,b)
  %174 = add nuw i32 %115, 1
  %175 = icmp eq i32 %174, %110
  br i1 %175, label %176, label %113

; <label>:176                                     ; preds = %113
  br label %177

; <label>:177                                     ; preds = %176, %98
  %178 = phi float [ 0.000000e+00, %98 ], [ %173, %176 ]
  %179 = call float @dx.op.unary.f32(i32 7, float %178)  ; Saturate(value)
  %180 = fmul fast float %179, %10
  %181 = fmul fast float %179, %11
  %182 = fmul fast float %179, %12
  %183 = fadd fast float %180, %104
  %184 = fadd fast float %181, %105
  %185 = fadd fast float %182, %106
  %186 = extractvalue %dx.types.CBufRet.f32 %107, 2
  %187 = fcmp fast ogt float %186, 5.000000e-01
  br i1 %187, label %263, label %188

; <label>:188                                     ; preds = %177
  br i1 %111, label %254, label %189

; <label>:189                                     ; preds = %188
  br label %190

; <label>:190                                     ; preds = %190, %189
  %191 = phi float [ %250, %190 ], [ 0.000000e+00, %189 ]
  %192 = phi i32 [ %251, %190 ], [ 0, %189 ]
  %193 = shl i32 %192, 2
  %194 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %193)  ; CBufferLoadLegacy(handle,regIndex)
  %195 = extractvalue %dx.types.CBufRet.i32 %194, 0
  %196 = extractvalue %dx.types.CBufRet.i32 %194, 1
  %197 = call float @dx.op.legacyF16ToF32(i32 131, i32 %195)  ; LegacyF16ToF32(value)
  %198 = lshr i32 %195, 16
  %199 = call float @dx.op.legacyF16ToF32(i32 131, i32 %198)  ; LegacyF16ToF32(value)
  %200 = call float @dx.op.legacyF16ToF32(i32 131, i32 %196)  ; LegacyF16ToF32(value)
  %201 = lshr i32 %196, 16
  %202 = call float @dx.op.legacyF16ToF32(i32 131, i32 %201)  ; LegacyF16ToF32(value)
  %203 = or i32 %193, 1
  %204 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %203)  ; CBufferLoadLegacy(handle,regIndex)
  %205 = extractvalue %dx.types.CBufRet.f32 %204, 0
  %206 = extractvalue %dx.types.CBufRet.f32 %204, 1
  %207 = extractvalue %dx.types.CBufRet.f32 %204, 2
  %208 = extractvalue %dx.types.CBufRet.f32 %204, 3
  %209 = or i32 %193, 2
  %210 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %209)  ; CBufferLoadLegacy(handle,regIndex)
  %211 = extractvalue %dx.types.CBufRet.f32 %210, 0
  %212 = extractvalue %dx.types.CBufRet.f32 %210, 1
  %213 = extractvalue %dx.types.CBufRet.f32 %210, 2
  %214 = extractvalue %dx.types.CBufRet.f32 %210, 3
  %215 = call float @dx.op.dot4.f32(i32 56, float %197, float %199, float %200, float %202, float %183, float %184, float %185, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %216 = fmul fast float %215, -1.000000e+01
  %217 = call float @dx.op.unary.f32(i32 7, float %216)  ; Saturate(value)
  %218 = fsub fast float 1.000000e+00, %217
  %219 = fsub fast float %183, %205
  %220 = fsub fast float %184, %206
  %221 = fsub fast float %185, %207
  %222 = fsub fast float %211, %205
  %223 = fsub fast float %212, %206
  %224 = fsub fast float %213, %207
  %225 = call float @dx.op.dot3.f32(i32 55, float %219, float %220, float %221, float %222, float %223, float %224)  ; Dot3(ax,ay,az,bx,by,bz)
  %226 = call float @dx.op.dot3.f32(i32 55, float %222, float %223, float %224, float %222, float %223, float %224)  ; Dot3(ax,ay,az,bx,by,bz)
  %227 = fdiv fast float %225, %226
  %228 = fmul fast float %227, %222
  %229 = fmul fast float %227, %223
  %230 = fmul fast float %227, %224
  %231 = fsub fast float %205, %183
  %232 = fadd fast float %231, %228
  %233 = fsub fast float %206, %184
  %234 = fadd fast float %233, %229
  %235 = fsub fast float %207, %185
  %236 = fadd fast float %235, %230
  %237 = call float @dx.op.dot3.f32(i32 55, float %232, float %234, float %236, float %232, float %234, float %236)  ; Dot3(ax,ay,az,bx,by,bz)
  %238 = call float @dx.op.unary.f32(i32 24, float %237)  ; Sqrt(value)
  %239 = fmul fast float %208, 5.000000e-01
  %240 = fsub fast float %238, %239
  %241 = fdiv fast float %240, %239
  %242 = call float @dx.op.unary.f32(i32 7, float %241)  ; Saturate(value)
  %243 = fmul fast float %242, 2.000000e+00
  %244 = fsub fast float 3.000000e+00, %243
  %245 = fmul fast float %242, %242
  %246 = fmul fast float %245, %244
  %247 = fsub fast float 1.000000e+00, %246
  %248 = fmul fast float %218, %214
  %249 = fmul fast float %248, %247
  %250 = call float @dx.op.binary.f32(i32 35, float %249, float %191)  ; FMax(a,b)
  %251 = add nuw i32 %192, 1
  %252 = icmp eq i32 %251, %110
  br i1 %252, label %253, label %190

; <label>:253                                     ; preds = %190
  br label %254

; <label>:254                                     ; preds = %253, %188
  %255 = phi float [ 0.000000e+00, %188 ], [ %250, %253 ]
  %256 = call float @dx.op.unary.f32(i32 7, float %255)  ; Saturate(value)
  %257 = fmul fast float %256, %10
  %258 = fmul fast float %256, %11
  %259 = fmul fast float %256, %12
  %260 = fadd fast float %257, %183
  %261 = fadd fast float %258, %184
  %262 = fadd fast float %259, %185
  br label %263

; <label>:263                                     ; preds = %254, %177
  %264 = phi float [ %183, %177 ], [ %260, %254 ]
  %265 = phi float [ %184, %177 ], [ %261, %254 ]
  %266 = phi float [ %185, %177 ], [ %262, %254 ]
  %267 = call float @dx.op.dot4.f32(i32 56, float %37, float %38, float %39, float %40, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %268 = call float @dx.op.dot4.f32(i32 56, float %29, float %30, float %31, float %32, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %269 = fadd fast float %268, %267
  %270 = call float @dx.op.binary.f32(i32 35, float 0x3EE4F8B580000000, float %269)  ; FMax(a,b)
  %271 = fdiv fast float %37, %270
  %272 = fdiv fast float %38, %270
  %273 = fdiv fast float %39, %270
  %274 = fdiv fast float %40, %270
  %275 = fdiv fast float %29, %270
  %276 = fdiv fast float %30, %270
  %277 = fdiv fast float %31, %270
  %278 = fdiv fast float %32, %270
  %279 = mul i32 %41, %14
  %280 = add i32 %279, %13
  %281 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %280, i32 undef)  ; BufferLoad(srv,index,wot)
  %282 = extractvalue %dx.types.ResRet.i32 %281, 0
  %283 = extractvalue %dx.types.ResRet.i32 %281, 1
  %284 = extractvalue %dx.types.ResRet.i32 %281, 2
  %285 = extractvalue %dx.types.ResRet.i32 %281, 3
  %286 = bitcast i32 %282 to float
  %287 = bitcast i32 %283 to float
  %288 = bitcast i32 %284 to float
  %289 = bitcast i32 %285 to float
  %290 = add i32 %280, 16
  %291 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %290, i32 undef)  ; BufferLoad(srv,index,wot)
  %292 = extractvalue %dx.types.ResRet.i32 %291, 0
  %293 = extractvalue %dx.types.ResRet.i32 %291, 1
  %294 = extractvalue %dx.types.ResRet.i32 %291, 2
  %295 = extractvalue %dx.types.ResRet.i32 %291, 3
  %296 = bitcast i32 %292 to float
  %297 = bitcast i32 %293 to float
  %298 = bitcast i32 %294 to float
  %299 = bitcast i32 %295 to float
  %300 = add i32 %280, 32
  %301 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %300, i32 undef)  ; BufferLoad(srv,index,wot)
  %302 = extractvalue %dx.types.ResRet.i32 %301, 0
  %303 = extractvalue %dx.types.ResRet.i32 %301, 1
  %304 = extractvalue %dx.types.ResRet.i32 %301, 2
  %305 = extractvalue %dx.types.ResRet.i32 %301, 3
  %306 = bitcast i32 %302 to float
  %307 = bitcast i32 %303 to float
  %308 = bitcast i32 %304 to float
  %309 = bitcast i32 %305 to float
  %310 = mul i32 %33, %14
  %311 = add i32 %310, %13
  %312 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %311, i32 undef)  ; BufferLoad(srv,index,wot)
  %313 = extractvalue %dx.types.ResRet.i32 %312, 0
  %314 = extractvalue %dx.types.ResRet.i32 %312, 1
  %315 = extractvalue %dx.types.ResRet.i32 %312, 2
  %316 = extractvalue %dx.types.ResRet.i32 %312, 3
  %317 = bitcast i32 %313 to float
  %318 = bitcast i32 %314 to float
  %319 = bitcast i32 %315 to float
  %320 = bitcast i32 %316 to float
  %321 = add i32 %311, 16
  %322 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %321, i32 undef)  ; BufferLoad(srv,index,wot)
  %323 = extractvalue %dx.types.ResRet.i32 %322, 0
  %324 = extractvalue %dx.types.ResRet.i32 %322, 1
  %325 = extractvalue %dx.types.ResRet.i32 %322, 2
  %326 = extractvalue %dx.types.ResRet.i32 %322, 3
  %327 = bitcast i32 %323 to float
  %328 = bitcast i32 %324 to float
  %329 = bitcast i32 %325 to float
  %330 = bitcast i32 %326 to float
  %331 = add i32 %311, 32
  %332 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %331, i32 undef)  ; BufferLoad(srv,index,wot)
  %333 = extractvalue %dx.types.ResRet.i32 %332, 0
  %334 = extractvalue %dx.types.ResRet.i32 %332, 1
  %335 = extractvalue %dx.types.ResRet.i32 %332, 2
  %336 = extractvalue %dx.types.ResRet.i32 %332, 3
  %337 = bitcast i32 %333 to float
  %338 = bitcast i32 %334 to float
  %339 = bitcast i32 %335 to float
  %340 = bitcast i32 %336 to float
  %341 = fmul fast float %286, %271
  %342 = fmul fast float %296, %271
  %343 = fmul fast float %306, %271
  %344 = fmul fast float %287, %271
  %345 = fmul fast float %297, %271
  %346 = fmul fast float %307, %271
  %347 = fmul fast float %288, %271
  %348 = fmul fast float %298, %271
  %349 = fmul fast float %308, %271
  %350 = fmul fast float %289, %271
  %351 = fmul fast float %299, %271
  %352 = fmul fast float %309, %271
  %353 = fmul fast float %317, %275
  %354 = fmul fast float %327, %275
  %355 = fmul fast float %337, %275
  %356 = fmul fast float %318, %275
  %357 = fmul fast float %328, %275
  %358 = fmul fast float %338, %275
  %359 = fmul fast float %319, %275
  %360 = fmul fast float %329, %275
  %361 = fmul fast float %339, %275
  %362 = fmul fast float %320, %275
  %363 = fmul fast float %330, %275
  %364 = fmul fast float %340, %275
  %365 = fadd fast float %353, %341
  %366 = fadd fast float %354, %342
  %367 = fadd fast float %355, %343
  %368 = fadd fast float %356, %344
  %369 = fadd fast float %357, %345
  %370 = fadd fast float %358, %346
  %371 = fadd fast float %359, %347
  %372 = fadd fast float %360, %348
  %373 = fadd fast float %361, %349
  %374 = fadd fast float %362, %350
  %375 = fadd fast float %363, %351
  %376 = fadd fast float %364, %352
  %377 = mul i32 %42, %14
  %378 = add i32 %377, %13
  %379 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %378, i32 undef)  ; BufferLoad(srv,index,wot)
  %380 = extractvalue %dx.types.ResRet.i32 %379, 0
  %381 = extractvalue %dx.types.ResRet.i32 %379, 1
  %382 = extractvalue %dx.types.ResRet.i32 %379, 2
  %383 = extractvalue %dx.types.ResRet.i32 %379, 3
  %384 = bitcast i32 %380 to float
  %385 = bitcast i32 %381 to float
  %386 = bitcast i32 %382 to float
  %387 = bitcast i32 %383 to float
  %388 = add i32 %378, 16
  %389 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %388, i32 undef)  ; BufferLoad(srv,index,wot)
  %390 = extractvalue %dx.types.ResRet.i32 %389, 0
  %391 = extractvalue %dx.types.ResRet.i32 %389, 1
  %392 = extractvalue %dx.types.ResRet.i32 %389, 2
  %393 = extractvalue %dx.types.ResRet.i32 %389, 3
  %394 = bitcast i32 %390 to float
  %395 = bitcast i32 %391 to float
  %396 = bitcast i32 %392 to float
  %397 = bitcast i32 %393 to float
  %398 = add i32 %378, 32
  %399 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %398, i32 undef)  ; BufferLoad(srv,index,wot)
  %400 = extractvalue %dx.types.ResRet.i32 %399, 0
  %401 = extractvalue %dx.types.ResRet.i32 %399, 1
  %402 = extractvalue %dx.types.ResRet.i32 %399, 2
  %403 = extractvalue %dx.types.ResRet.i32 %399, 3
  %404 = bitcast i32 %400 to float
  %405 = bitcast i32 %401 to float
  %406 = bitcast i32 %402 to float
  %407 = bitcast i32 %403 to float
  %408 = mul i32 %34, %14
  %409 = add i32 %408, %13
  %410 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %409, i32 undef)  ; BufferLoad(srv,index,wot)
  %411 = extractvalue %dx.types.ResRet.i32 %410, 0
  %412 = extractvalue %dx.types.ResRet.i32 %410, 1
  %413 = extractvalue %dx.types.ResRet.i32 %410, 2
  %414 = extractvalue %dx.types.ResRet.i32 %410, 3
  %415 = bitcast i32 %411 to float
  %416 = bitcast i32 %412 to float
  %417 = bitcast i32 %413 to float
  %418 = bitcast i32 %414 to float
  %419 = add i32 %409, 16
  %420 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %419, i32 undef)  ; BufferLoad(srv,index,wot)
  %421 = extractvalue %dx.types.ResRet.i32 %420, 0
  %422 = extractvalue %dx.types.ResRet.i32 %420, 1
  %423 = extractvalue %dx.types.ResRet.i32 %420, 2
  %424 = extractvalue %dx.types.ResRet.i32 %420, 3
  %425 = bitcast i32 %421 to float
  %426 = bitcast i32 %422 to float
  %427 = bitcast i32 %423 to float
  %428 = bitcast i32 %424 to float
  %429 = add i32 %409, 32
  %430 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %429, i32 undef)  ; BufferLoad(srv,index,wot)
  %431 = extractvalue %dx.types.ResRet.i32 %430, 0
  %432 = extractvalue %dx.types.ResRet.i32 %430, 1
  %433 = extractvalue %dx.types.ResRet.i32 %430, 2
  %434 = extractvalue %dx.types.ResRet.i32 %430, 3
  %435 = bitcast i32 %431 to float
  %436 = bitcast i32 %432 to float
  %437 = bitcast i32 %433 to float
  %438 = bitcast i32 %434 to float
  %439 = fmul fast float %384, %272
  %440 = fmul fast float %394, %272
  %441 = fmul fast float %404, %272
  %442 = fmul fast float %385, %272
  %443 = fmul fast float %395, %272
  %444 = fmul fast float %405, %272
  %445 = fmul fast float %386, %272
  %446 = fmul fast float %396, %272
  %447 = fmul fast float %406, %272
  %448 = fmul fast float %387, %272
  %449 = fmul fast float %397, %272
  %450 = fmul fast float %407, %272
  %451 = fadd fast float %365, %439
  %452 = fadd fast float %366, %440
  %453 = fadd fast float %367, %441
  %454 = fadd fast float %368, %442
  %455 = fadd fast float %369, %443
  %456 = fadd fast float %370, %444
  %457 = fadd fast float %371, %445
  %458 = fadd fast float %372, %446
  %459 = fadd fast float %373, %447
  %460 = fadd fast float %374, %448
  %461 = fadd fast float %375, %449
  %462 = fadd fast float %376, %450
  %463 = fmul fast float %415, %276
  %464 = fmul fast float %425, %276
  %465 = fmul fast float %435, %276
  %466 = fmul fast float %416, %276
  %467 = fmul fast float %426, %276
  %468 = fmul fast float %436, %276
  %469 = fmul fast float %417, %276
  %470 = fmul fast float %427, %276
  %471 = fmul fast float %437, %276
  %472 = fmul fast float %418, %276
  %473 = fmul fast float %428, %276
  %474 = fmul fast float %438, %276
  %475 = fadd fast float %451, %463
  %476 = fadd fast float %452, %464
  %477 = fadd fast float %453, %465
  %478 = fadd fast float %454, %466
  %479 = fadd fast float %455, %467
  %480 = fadd fast float %456, %468
  %481 = fadd fast float %457, %469
  %482 = fadd fast float %458, %470
  %483 = fadd fast float %459, %471
  %484 = fadd fast float %460, %472
  %485 = fadd fast float %461, %473
  %486 = fadd fast float %462, %474
  %487 = mul i32 %43, %14
  %488 = add i32 %487, %13
  %489 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %488, i32 undef)  ; BufferLoad(srv,index,wot)
  %490 = extractvalue %dx.types.ResRet.i32 %489, 0
  %491 = extractvalue %dx.types.ResRet.i32 %489, 1
  %492 = extractvalue %dx.types.ResRet.i32 %489, 2
  %493 = extractvalue %dx.types.ResRet.i32 %489, 3
  %494 = bitcast i32 %490 to float
  %495 = bitcast i32 %491 to float
  %496 = bitcast i32 %492 to float
  %497 = bitcast i32 %493 to float
  %498 = add i32 %488, 16
  %499 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %498, i32 undef)  ; BufferLoad(srv,index,wot)
  %500 = extractvalue %dx.types.ResRet.i32 %499, 0
  %501 = extractvalue %dx.types.ResRet.i32 %499, 1
  %502 = extractvalue %dx.types.ResRet.i32 %499, 2
  %503 = extractvalue %dx.types.ResRet.i32 %499, 3
  %504 = bitcast i32 %500 to float
  %505 = bitcast i32 %501 to float
  %506 = bitcast i32 %502 to float
  %507 = bitcast i32 %503 to float
  %508 = add i32 %488, 32
  %509 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %508, i32 undef)  ; BufferLoad(srv,index,wot)
  %510 = extractvalue %dx.types.ResRet.i32 %509, 0
  %511 = extractvalue %dx.types.ResRet.i32 %509, 1
  %512 = extractvalue %dx.types.ResRet.i32 %509, 2
  %513 = extractvalue %dx.types.ResRet.i32 %509, 3
  %514 = bitcast i32 %510 to float
  %515 = bitcast i32 %511 to float
  %516 = bitcast i32 %512 to float
  %517 = bitcast i32 %513 to float
  %518 = mul i32 %35, %14
  %519 = add i32 %518, %13
  %520 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %519, i32 undef)  ; BufferLoad(srv,index,wot)
  %521 = extractvalue %dx.types.ResRet.i32 %520, 0
  %522 = extractvalue %dx.types.ResRet.i32 %520, 1
  %523 = extractvalue %dx.types.ResRet.i32 %520, 2
  %524 = extractvalue %dx.types.ResRet.i32 %520, 3
  %525 = bitcast i32 %521 to float
  %526 = bitcast i32 %522 to float
  %527 = bitcast i32 %523 to float
  %528 = bitcast i32 %524 to float
  %529 = add i32 %519, 16
  %530 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %529, i32 undef)  ; BufferLoad(srv,index,wot)
  %531 = extractvalue %dx.types.ResRet.i32 %530, 0
  %532 = extractvalue %dx.types.ResRet.i32 %530, 1
  %533 = extractvalue %dx.types.ResRet.i32 %530, 2
  %534 = extractvalue %dx.types.ResRet.i32 %530, 3
  %535 = bitcast i32 %531 to float
  %536 = bitcast i32 %532 to float
  %537 = bitcast i32 %533 to float
  %538 = bitcast i32 %534 to float
  %539 = add i32 %519, 32
  %540 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %539, i32 undef)  ; BufferLoad(srv,index,wot)
  %541 = extractvalue %dx.types.ResRet.i32 %540, 0
  %542 = extractvalue %dx.types.ResRet.i32 %540, 1
  %543 = extractvalue %dx.types.ResRet.i32 %540, 2
  %544 = extractvalue %dx.types.ResRet.i32 %540, 3
  %545 = bitcast i32 %541 to float
  %546 = bitcast i32 %542 to float
  %547 = bitcast i32 %543 to float
  %548 = bitcast i32 %544 to float
  %549 = fmul fast float %494, %273
  %550 = fmul fast float %504, %273
  %551 = fmul fast float %514, %273
  %552 = fmul fast float %495, %273
  %553 = fmul fast float %505, %273
  %554 = fmul fast float %515, %273
  %555 = fmul fast float %496, %273
  %556 = fmul fast float %506, %273
  %557 = fmul fast float %516, %273
  %558 = fmul fast float %497, %273
  %559 = fmul fast float %507, %273
  %560 = fmul fast float %517, %273
  %561 = fadd fast float %475, %549
  %562 = fadd fast float %476, %550
  %563 = fadd fast float %477, %551
  %564 = fadd fast float %478, %552
  %565 = fadd fast float %479, %553
  %566 = fadd fast float %480, %554
  %567 = fadd fast float %481, %555
  %568 = fadd fast float %482, %556
  %569 = fadd fast float %483, %557
  %570 = fadd fast float %484, %558
  %571 = fadd fast float %485, %559
  %572 = fadd fast float %486, %560
  %573 = fmul fast float %525, %277
  %574 = fmul fast float %535, %277
  %575 = fmul fast float %545, %277
  %576 = fmul fast float %526, %277
  %577 = fmul fast float %536, %277
  %578 = fmul fast float %546, %277
  %579 = fmul fast float %527, %277
  %580 = fmul fast float %537, %277
  %581 = fmul fast float %547, %277
  %582 = fmul fast float %528, %277
  %583 = fmul fast float %538, %277
  %584 = fmul fast float %548, %277
  %585 = fadd fast float %561, %573
  %586 = fadd fast float %562, %574
  %587 = fadd fast float %563, %575
  %588 = fadd fast float %564, %576
  %589 = fadd fast float %565, %577
  %590 = fadd fast float %566, %578
  %591 = fadd fast float %567, %579
  %592 = fadd fast float %568, %580
  %593 = fadd fast float %569, %581
  %594 = fadd fast float %570, %582
  %595 = fadd fast float %571, %583
  %596 = fadd fast float %572, %584
  %597 = mul i32 %44, %14
  %598 = add i32 %597, %13
  %599 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %598, i32 undef)  ; BufferLoad(srv,index,wot)
  %600 = extractvalue %dx.types.ResRet.i32 %599, 0
  %601 = extractvalue %dx.types.ResRet.i32 %599, 1
  %602 = extractvalue %dx.types.ResRet.i32 %599, 2
  %603 = extractvalue %dx.types.ResRet.i32 %599, 3
  %604 = bitcast i32 %600 to float
  %605 = bitcast i32 %601 to float
  %606 = bitcast i32 %602 to float
  %607 = bitcast i32 %603 to float
  %608 = add i32 %598, 16
  %609 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %608, i32 undef)  ; BufferLoad(srv,index,wot)
  %610 = extractvalue %dx.types.ResRet.i32 %609, 0
  %611 = extractvalue %dx.types.ResRet.i32 %609, 1
  %612 = extractvalue %dx.types.ResRet.i32 %609, 2
  %613 = extractvalue %dx.types.ResRet.i32 %609, 3
  %614 = bitcast i32 %610 to float
  %615 = bitcast i32 %611 to float
  %616 = bitcast i32 %612 to float
  %617 = bitcast i32 %613 to float
  %618 = add i32 %598, 32
  %619 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %618, i32 undef)  ; BufferLoad(srv,index,wot)
  %620 = extractvalue %dx.types.ResRet.i32 %619, 0
  %621 = extractvalue %dx.types.ResRet.i32 %619, 1
  %622 = extractvalue %dx.types.ResRet.i32 %619, 2
  %623 = extractvalue %dx.types.ResRet.i32 %619, 3
  %624 = bitcast i32 %620 to float
  %625 = bitcast i32 %621 to float
  %626 = bitcast i32 %622 to float
  %627 = bitcast i32 %623 to float
  %628 = mul i32 %36, %14
  %629 = add i32 %628, %13
  %630 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %629, i32 undef)  ; BufferLoad(srv,index,wot)
  %631 = extractvalue %dx.types.ResRet.i32 %630, 0
  %632 = extractvalue %dx.types.ResRet.i32 %630, 1
  %633 = extractvalue %dx.types.ResRet.i32 %630, 2
  %634 = extractvalue %dx.types.ResRet.i32 %630, 3
  %635 = bitcast i32 %631 to float
  %636 = bitcast i32 %632 to float
  %637 = bitcast i32 %633 to float
  %638 = bitcast i32 %634 to float
  %639 = add i32 %629, 16
  %640 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %639, i32 undef)  ; BufferLoad(srv,index,wot)
  %641 = extractvalue %dx.types.ResRet.i32 %640, 0
  %642 = extractvalue %dx.types.ResRet.i32 %640, 1
  %643 = extractvalue %dx.types.ResRet.i32 %640, 2
  %644 = extractvalue %dx.types.ResRet.i32 %640, 3
  %645 = bitcast i32 %641 to float
  %646 = bitcast i32 %642 to float
  %647 = bitcast i32 %643 to float
  %648 = bitcast i32 %644 to float
  %649 = add i32 %629, 32
  %650 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %649, i32 undef)  ; BufferLoad(srv,index,wot)
  %651 = extractvalue %dx.types.ResRet.i32 %650, 0
  %652 = extractvalue %dx.types.ResRet.i32 %650, 1
  %653 = extractvalue %dx.types.ResRet.i32 %650, 2
  %654 = extractvalue %dx.types.ResRet.i32 %650, 3
  %655 = bitcast i32 %651 to float
  %656 = bitcast i32 %652 to float
  %657 = bitcast i32 %653 to float
  %658 = bitcast i32 %654 to float
  %659 = fmul fast float %604, %274
  %660 = fmul fast float %614, %274
  %661 = fmul fast float %624, %274
  %662 = fmul fast float %605, %274
  %663 = fmul fast float %615, %274
  %664 = fmul fast float %625, %274
  %665 = fmul fast float %606, %274
  %666 = fmul fast float %616, %274
  %667 = fmul fast float %626, %274
  %668 = fmul fast float %607, %274
  %669 = fmul fast float %617, %274
  %670 = fmul fast float %627, %274
  %671 = fadd fast float %585, %659
  %672 = fadd fast float %586, %660
  %673 = fadd fast float %587, %661
  %674 = fadd fast float %588, %662
  %675 = fadd fast float %589, %663
  %676 = fadd fast float %590, %664
  %677 = fadd fast float %591, %665
  %678 = fadd fast float %592, %666
  %679 = fadd fast float %593, %667
  %680 = fadd fast float %594, %668
  %681 = fadd fast float %595, %669
  %682 = fadd fast float %596, %670
  %683 = fmul fast float %635, %278
  %684 = fmul fast float %645, %278
  %685 = fmul fast float %655, %278
  %686 = fmul fast float %636, %278
  %687 = fmul fast float %646, %278
  %688 = fmul fast float %656, %278
  %689 = fmul fast float %637, %278
  %690 = fmul fast float %647, %278
  %691 = fmul fast float %657, %278
  %692 = fmul fast float %638, %278
  %693 = fmul fast float %648, %278
  %694 = fmul fast float %658, %278
  %695 = fadd fast float %671, %683
  %696 = fadd fast float %672, %684
  %697 = fadd fast float %673, %685
  %698 = fadd fast float %674, %686
  %699 = fadd fast float %675, %687
  %700 = fadd fast float %676, %688
  %701 = fadd fast float %677, %689
  %702 = fadd fast float %678, %690
  %703 = fadd fast float %679, %691
  %704 = fadd fast float %680, %692
  %705 = fadd fast float %681, %693
  %706 = fadd fast float %682, %694
  %707 = fmul fast float %695, %264
  %708 = call float @dx.op.tertiary.f32(i32 46, float %265, float %698, float %707)  ; FMad(a,b,c)
  %709 = call float @dx.op.tertiary.f32(i32 46, float %266, float %701, float %708)  ; FMad(a,b,c)
  %710 = fadd fast float %704, %709
  %711 = fmul fast float %696, %264
  %712 = call float @dx.op.tertiary.f32(i32 46, float %265, float %699, float %711)  ; FMad(a,b,c)
  %713 = call float @dx.op.tertiary.f32(i32 46, float %266, float %702, float %712)  ; FMad(a,b,c)
  %714 = fadd fast float %705, %713
  %715 = fmul fast float %697, %264
  %716 = call float @dx.op.tertiary.f32(i32 46, float %265, float %700, float %715)  ; FMad(a,b,c)
  %717 = call float @dx.op.tertiary.f32(i32 46, float %266, float %703, float %716)  ; FMad(a,b,c)
  %718 = fadd fast float %706, %717
  br i1 %187, label %719, label %794

; <label>:719                                     ; preds = %263
  br i1 %111, label %785, label %720

; <label>:720                                     ; preds = %719
  br label %721

; <label>:721                                     ; preds = %721, %720
  %722 = phi float [ %781, %721 ], [ 0.000000e+00, %720 ]
  %723 = phi i32 [ %782, %721 ], [ 0, %720 ]
  %724 = shl i32 %723, 2
  %725 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %724)  ; CBufferLoadLegacy(handle,regIndex)
  %726 = extractvalue %dx.types.CBufRet.i32 %725, 0
  %727 = extractvalue %dx.types.CBufRet.i32 %725, 1
  %728 = call float @dx.op.legacyF16ToF32(i32 131, i32 %726)  ; LegacyF16ToF32(value)
  %729 = lshr i32 %726, 16
  %730 = call float @dx.op.legacyF16ToF32(i32 131, i32 %729)  ; LegacyF16ToF32(value)
  %731 = call float @dx.op.legacyF16ToF32(i32 131, i32 %727)  ; LegacyF16ToF32(value)
  %732 = lshr i32 %727, 16
  %733 = call float @dx.op.legacyF16ToF32(i32 131, i32 %732)  ; LegacyF16ToF32(value)
  %734 = or i32 %724, 1
  %735 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %734)  ; CBufferLoadLegacy(handle,regIndex)
  %736 = extractvalue %dx.types.CBufRet.f32 %735, 0
  %737 = extractvalue %dx.types.CBufRet.f32 %735, 1
  %738 = extractvalue %dx.types.CBufRet.f32 %735, 2
  %739 = extractvalue %dx.types.CBufRet.f32 %735, 3
  %740 = or i32 %724, 2
  %741 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %740)  ; CBufferLoadLegacy(handle,regIndex)
  %742 = extractvalue %dx.types.CBufRet.f32 %741, 0
  %743 = extractvalue %dx.types.CBufRet.f32 %741, 1
  %744 = extractvalue %dx.types.CBufRet.f32 %741, 2
  %745 = extractvalue %dx.types.CBufRet.f32 %741, 3
  %746 = call float @dx.op.dot4.f32(i32 56, float %728, float %730, float %731, float %733, float %710, float %714, float %718, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %747 = fmul fast float %746, -1.000000e+01
  %748 = call float @dx.op.unary.f32(i32 7, float %747)  ; Saturate(value)
  %749 = fsub fast float 1.000000e+00, %748
  %750 = fsub fast float %710, %736
  %751 = fsub fast float %714, %737
  %752 = fsub fast float %718, %738
  %753 = fsub fast float %742, %736
  %754 = fsub fast float %743, %737
  %755 = fsub fast float %744, %738
  %756 = call float @dx.op.dot3.f32(i32 55, float %750, float %751, float %752, float %753, float %754, float %755)  ; Dot3(ax,ay,az,bx,by,bz)
  %757 = call float @dx.op.dot3.f32(i32 55, float %753, float %754, float %755, float %753, float %754, float %755)  ; Dot3(ax,ay,az,bx,by,bz)
  %758 = fdiv fast float %756, %757
  %759 = fmul fast float %758, %753
  %760 = fmul fast float %758, %754
  %761 = fmul fast float %758, %755
  %762 = fsub fast float %736, %710
  %763 = fadd fast float %762, %759
  %764 = fsub fast float %737, %714
  %765 = fadd fast float %764, %760
  %766 = fsub fast float %738, %718
  %767 = fadd fast float %766, %761
  %768 = call float @dx.op.dot3.f32(i32 55, float %763, float %765, float %767, float %763, float %765, float %767)  ; Dot3(ax,ay,az,bx,by,bz)
  %769 = call float @dx.op.unary.f32(i32 24, float %768)  ; Sqrt(value)
  %770 = fmul fast float %739, 5.000000e-01
  %771 = fsub fast float %769, %770
  %772 = fdiv fast float %771, %770
  %773 = call float @dx.op.unary.f32(i32 7, float %772)  ; Saturate(value)
  %774 = fmul fast float %773, 2.000000e+00
  %775 = fsub fast float 3.000000e+00, %774
  %776 = fmul fast float %773, %773
  %777 = fmul fast float %776, %775
  %778 = fsub fast float 1.000000e+00, %777
  %779 = fmul fast float %749, %745
  %780 = fmul fast float %779, %778
  %781 = call float @dx.op.binary.f32(i32 35, float %780, float %722)  ; FMax(a,b)
  %782 = add nuw i32 %723, 1
  %783 = icmp eq i32 %782, %110
  br i1 %783, label %784, label %721

; <label>:784                                     ; preds = %721
  br label %785

; <label>:785                                     ; preds = %784, %719
  %786 = phi float [ 0.000000e+00, %719 ], [ %781, %784 ]
  %787 = call float @dx.op.unary.f32(i32 7, float %786)  ; Saturate(value)
  %788 = fmul fast float %787, %10
  %789 = fmul fast float %787, %11
  %790 = fmul fast float %787, %12
  %791 = fadd fast float %788, %710
  %792 = fadd fast float %789, %714
  %793 = fadd fast float %790, %718
  br label %794

; <label>:794                                     ; preds = %785, %263
  %795 = phi float [ %791, %785 ], [ %710, %263 ]
  %796 = phi float [ %792, %785 ], [ %714, %263 ]
  %797 = phi float [ %793, %785 ], [ %718, %263 ]
  %798 = fmul fast float %795, %48
  %799 = call float @dx.op.tertiary.f32(i32 46, float %796, float %49, float %798)  ; FMad(a,b,c)
  %800 = call float @dx.op.tertiary.f32(i32 46, float %797, float %50, float %799)  ; FMad(a,b,c)
  %801 = fadd fast float %800, %73
  %802 = fmul fast float %795, %52
  %803 = call float @dx.op.tertiary.f32(i32 46, float %796, float %53, float %802)  ; FMad(a,b,c)
  %804 = call float @dx.op.tertiary.f32(i32 46, float %797, float %54, float %803)  ; FMad(a,b,c)
  %805 = fadd fast float %804, %74
  %806 = fmul fast float %795, %56
  %807 = call float @dx.op.tertiary.f32(i32 46, float %796, float %57, float %806)  ; FMad(a,b,c)
  %808 = call float @dx.op.tertiary.f32(i32 46, float %797, float %58, float %807)  ; FMad(a,b,c)
  %809 = fadd fast float %808, %75
  %810 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %811 = extractvalue %dx.types.CBufRet.f32 %810, 0
  %812 = extractvalue %dx.types.CBufRet.f32 %810, 1
  %813 = extractvalue %dx.types.CBufRet.f32 %810, 2
  %814 = extractvalue %dx.types.CBufRet.f32 %810, 3
  %815 = fmul fast float %811, %801
  %816 = call float @dx.op.tertiary.f32(i32 46, float %805, float %812, float %815)  ; FMad(a,b,c)
  %817 = call float @dx.op.tertiary.f32(i32 46, float %809, float %813, float %816)  ; FMad(a,b,c)
  %818 = fadd fast float %817, %814
  %819 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 37)  ; CBufferLoadLegacy(handle,regIndex)
  %820 = extractvalue %dx.types.CBufRet.f32 %819, 0
  %821 = extractvalue %dx.types.CBufRet.f32 %819, 1
  %822 = extractvalue %dx.types.CBufRet.f32 %819, 2
  %823 = fadd fast float %820, %801
  %824 = fadd fast float %821, %805
  %825 = fadd fast float %822, %809
  %826 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %827 = extractvalue %dx.types.CBufRet.f32 %826, 0
  %828 = extractvalue %dx.types.CBufRet.f32 %826, 1
  %829 = extractvalue %dx.types.CBufRet.f32 %826, 2
  %830 = extractvalue %dx.types.CBufRet.f32 %826, 3
  %831 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %832 = extractvalue %dx.types.CBufRet.f32 %831, 0
  %833 = extractvalue %dx.types.CBufRet.f32 %831, 1
  %834 = extractvalue %dx.types.CBufRet.f32 %831, 2
  %835 = extractvalue %dx.types.CBufRet.f32 %831, 3
  %836 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %837 = extractvalue %dx.types.CBufRet.f32 %836, 0
  %838 = extractvalue %dx.types.CBufRet.f32 %836, 1
  %839 = extractvalue %dx.types.CBufRet.f32 %836, 2
  %840 = extractvalue %dx.types.CBufRet.f32 %836, 3
  %841 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %842 = extractvalue %dx.types.CBufRet.f32 %841, 0
  %843 = extractvalue %dx.types.CBufRet.f32 %841, 1
  %844 = extractvalue %dx.types.CBufRet.f32 %841, 2
  %845 = extractvalue %dx.types.CBufRet.f32 %841, 3
  %846 = fmul fast float %827, %801
  %847 = call float @dx.op.tertiary.f32(i32 46, float %805, float %828, float %846)  ; FMad(a,b,c)
  %848 = call float @dx.op.tertiary.f32(i32 46, float %809, float %829, float %847)  ; FMad(a,b,c)
  %849 = fadd fast float %848, %830
  %850 = fmul fast float %832, %801
  %851 = call float @dx.op.tertiary.f32(i32 46, float %805, float %833, float %850)  ; FMad(a,b,c)
  %852 = call float @dx.op.tertiary.f32(i32 46, float %809, float %834, float %851)  ; FMad(a,b,c)
  %853 = fadd fast float %852, %835
  %854 = fmul fast float %837, %801
  %855 = call float @dx.op.tertiary.f32(i32 46, float %805, float %838, float %854)  ; FMad(a,b,c)
  %856 = call float @dx.op.tertiary.f32(i32 46, float %809, float %839, float %855)  ; FMad(a,b,c)
  %857 = fadd fast float %856, %840
  %858 = fmul fast float %842, %801
  %859 = call float @dx.op.tertiary.f32(i32 46, float %805, float %843, float %858)  ; FMad(a,b,c)
  %860 = call float @dx.op.tertiary.f32(i32 46, float %809, float %844, float %859)  ; FMad(a,b,c)
  %861 = fadd fast float %860, %845
  br i1 %187, label %937, label %862

; <label>:862                                     ; preds = %794
  br i1 %111, label %928, label %863

; <label>:863                                     ; preds = %862
  br label %864

; <label>:864                                     ; preds = %864, %863
  %865 = phi float [ %924, %864 ], [ 0.000000e+00, %863 ]
  %866 = phi i32 [ %925, %864 ], [ 0, %863 ]
  %867 = shl i32 %866, 2
  %868 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %867)  ; CBufferLoadLegacy(handle,regIndex)
  %869 = extractvalue %dx.types.CBufRet.i32 %868, 0
  %870 = extractvalue %dx.types.CBufRet.i32 %868, 1
  %871 = call float @dx.op.legacyF16ToF32(i32 131, i32 %869)  ; LegacyF16ToF32(value)
  %872 = lshr i32 %869, 16
  %873 = call float @dx.op.legacyF16ToF32(i32 131, i32 %872)  ; LegacyF16ToF32(value)
  %874 = call float @dx.op.legacyF16ToF32(i32 131, i32 %870)  ; LegacyF16ToF32(value)
  %875 = lshr i32 %870, 16
  %876 = call float @dx.op.legacyF16ToF32(i32 131, i32 %875)  ; LegacyF16ToF32(value)
  %877 = or i32 %867, 1
  %878 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %877)  ; CBufferLoadLegacy(handle,regIndex)
  %879 = extractvalue %dx.types.CBufRet.f32 %878, 0
  %880 = extractvalue %dx.types.CBufRet.f32 %878, 1
  %881 = extractvalue %dx.types.CBufRet.f32 %878, 2
  %882 = extractvalue %dx.types.CBufRet.f32 %878, 3
  %883 = or i32 %867, 2
  %884 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %883)  ; CBufferLoadLegacy(handle,regIndex)
  %885 = extractvalue %dx.types.CBufRet.f32 %884, 0
  %886 = extractvalue %dx.types.CBufRet.f32 %884, 1
  %887 = extractvalue %dx.types.CBufRet.f32 %884, 2
  %888 = extractvalue %dx.types.CBufRet.f32 %884, 3
  %889 = call float @dx.op.dot4.f32(i32 56, float %871, float %873, float %874, float %876, float %183, float %184, float %185, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %890 = fmul fast float %889, -1.000000e+01
  %891 = call float @dx.op.unary.f32(i32 7, float %890)  ; Saturate(value)
  %892 = fsub fast float 1.000000e+00, %891
  %893 = fsub fast float %183, %879
  %894 = fsub fast float %184, %880
  %895 = fsub fast float %185, %881
  %896 = fsub fast float %885, %879
  %897 = fsub fast float %886, %880
  %898 = fsub fast float %887, %881
  %899 = call float @dx.op.dot3.f32(i32 55, float %893, float %894, float %895, float %896, float %897, float %898)  ; Dot3(ax,ay,az,bx,by,bz)
  %900 = call float @dx.op.dot3.f32(i32 55, float %896, float %897, float %898, float %896, float %897, float %898)  ; Dot3(ax,ay,az,bx,by,bz)
  %901 = fdiv fast float %899, %900
  %902 = fmul fast float %901, %896
  %903 = fmul fast float %901, %897
  %904 = fmul fast float %901, %898
  %905 = fsub fast float %879, %183
  %906 = fadd fast float %905, %902
  %907 = fsub fast float %880, %184
  %908 = fadd fast float %907, %903
  %909 = fsub fast float %881, %185
  %910 = fadd fast float %909, %904
  %911 = call float @dx.op.dot3.f32(i32 55, float %906, float %908, float %910, float %906, float %908, float %910)  ; Dot3(ax,ay,az,bx,by,bz)
  %912 = call float @dx.op.unary.f32(i32 24, float %911)  ; Sqrt(value)
  %913 = fmul fast float %882, 5.000000e-01
  %914 = fsub fast float %912, %913
  %915 = fdiv fast float %914, %913
  %916 = call float @dx.op.unary.f32(i32 7, float %915)  ; Saturate(value)
  %917 = fmul fast float %916, 2.000000e+00
  %918 = fsub fast float 3.000000e+00, %917
  %919 = fmul fast float %916, %916
  %920 = fmul fast float %919, %918
  %921 = fsub fast float 1.000000e+00, %920
  %922 = fmul fast float %892, %888
  %923 = fmul fast float %922, %921
  %924 = call float @dx.op.binary.f32(i32 35, float %923, float %865)  ; FMax(a,b)
  %925 = add nuw i32 %866, 1
  %926 = icmp eq i32 %925, %110
  br i1 %926, label %927, label %864

; <label>:927                                     ; preds = %864
  br label %928

; <label>:928                                     ; preds = %927, %862
  %929 = phi float [ 0.000000e+00, %862 ], [ %924, %927 ]
  %930 = call float @dx.op.unary.f32(i32 7, float %929)  ; Saturate(value)
  %931 = fmul fast float %930, %10
  %932 = fmul fast float %930, %11
  %933 = fmul fast float %930, %12
  %934 = fadd fast float %931, %183
  %935 = fadd fast float %932, %184
  %936 = fadd fast float %933, %185
  br label %937

; <label>:937                                     ; preds = %928, %794
  %938 = phi float [ %183, %794 ], [ %934, %928 ]
  %939 = phi float [ %184, %794 ], [ %935, %928 ]
  %940 = phi float [ %185, %794 ], [ %936, %928 ]
  %941 = add i32 %279, %15
  %942 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %941, i32 undef)  ; BufferLoad(srv,index,wot)
  %943 = extractvalue %dx.types.ResRet.i32 %942, 0
  %944 = extractvalue %dx.types.ResRet.i32 %942, 1
  %945 = extractvalue %dx.types.ResRet.i32 %942, 2
  %946 = extractvalue %dx.types.ResRet.i32 %942, 3
  %947 = bitcast i32 %943 to float
  %948 = bitcast i32 %944 to float
  %949 = bitcast i32 %945 to float
  %950 = bitcast i32 %946 to float
  %951 = add i32 %941, 16
  %952 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %951, i32 undef)  ; BufferLoad(srv,index,wot)
  %953 = extractvalue %dx.types.ResRet.i32 %952, 0
  %954 = extractvalue %dx.types.ResRet.i32 %952, 1
  %955 = extractvalue %dx.types.ResRet.i32 %952, 2
  %956 = extractvalue %dx.types.ResRet.i32 %952, 3
  %957 = bitcast i32 %953 to float
  %958 = bitcast i32 %954 to float
  %959 = bitcast i32 %955 to float
  %960 = bitcast i32 %956 to float
  %961 = add i32 %941, 32
  %962 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %961, i32 undef)  ; BufferLoad(srv,index,wot)
  %963 = extractvalue %dx.types.ResRet.i32 %962, 0
  %964 = extractvalue %dx.types.ResRet.i32 %962, 1
  %965 = extractvalue %dx.types.ResRet.i32 %962, 2
  %966 = extractvalue %dx.types.ResRet.i32 %962, 3
  %967 = bitcast i32 %963 to float
  %968 = bitcast i32 %964 to float
  %969 = bitcast i32 %965 to float
  %970 = bitcast i32 %966 to float
  %971 = add i32 %310, %15
  %972 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %971, i32 undef)  ; BufferLoad(srv,index,wot)
  %973 = extractvalue %dx.types.ResRet.i32 %972, 0
  %974 = extractvalue %dx.types.ResRet.i32 %972, 1
  %975 = extractvalue %dx.types.ResRet.i32 %972, 2
  %976 = extractvalue %dx.types.ResRet.i32 %972, 3
  %977 = bitcast i32 %973 to float
  %978 = bitcast i32 %974 to float
  %979 = bitcast i32 %975 to float
  %980 = bitcast i32 %976 to float
  %981 = add i32 %971, 16
  %982 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %981, i32 undef)  ; BufferLoad(srv,index,wot)
  %983 = extractvalue %dx.types.ResRet.i32 %982, 0
  %984 = extractvalue %dx.types.ResRet.i32 %982, 1
  %985 = extractvalue %dx.types.ResRet.i32 %982, 2
  %986 = extractvalue %dx.types.ResRet.i32 %982, 3
  %987 = bitcast i32 %983 to float
  %988 = bitcast i32 %984 to float
  %989 = bitcast i32 %985 to float
  %990 = bitcast i32 %986 to float
  %991 = add i32 %971, 32
  %992 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %991, i32 undef)  ; BufferLoad(srv,index,wot)
  %993 = extractvalue %dx.types.ResRet.i32 %992, 0
  %994 = extractvalue %dx.types.ResRet.i32 %992, 1
  %995 = extractvalue %dx.types.ResRet.i32 %992, 2
  %996 = extractvalue %dx.types.ResRet.i32 %992, 3
  %997 = bitcast i32 %993 to float
  %998 = bitcast i32 %994 to float
  %999 = bitcast i32 %995 to float
  %1000 = bitcast i32 %996 to float
  %1001 = fmul fast float %947, %271
  %1002 = fmul fast float %957, %271
  %1003 = fmul fast float %967, %271
  %1004 = fmul fast float %948, %271
  %1005 = fmul fast float %958, %271
  %1006 = fmul fast float %968, %271
  %1007 = fmul fast float %949, %271
  %1008 = fmul fast float %959, %271
  %1009 = fmul fast float %969, %271
  %1010 = fmul fast float %950, %271
  %1011 = fmul fast float %960, %271
  %1012 = fmul fast float %970, %271
  %1013 = fmul fast float %977, %275
  %1014 = fmul fast float %987, %275
  %1015 = fmul fast float %997, %275
  %1016 = fmul fast float %978, %275
  %1017 = fmul fast float %988, %275
  %1018 = fmul fast float %998, %275
  %1019 = fmul fast float %979, %275
  %1020 = fmul fast float %989, %275
  %1021 = fmul fast float %999, %275
  %1022 = fmul fast float %980, %275
  %1023 = fmul fast float %990, %275
  %1024 = fmul fast float %1000, %275
  %1025 = fadd fast float %1013, %1001
  %1026 = fadd fast float %1014, %1002
  %1027 = fadd fast float %1015, %1003
  %1028 = fadd fast float %1016, %1004
  %1029 = fadd fast float %1017, %1005
  %1030 = fadd fast float %1018, %1006
  %1031 = fadd fast float %1019, %1007
  %1032 = fadd fast float %1020, %1008
  %1033 = fadd fast float %1021, %1009
  %1034 = fadd fast float %1022, %1010
  %1035 = fadd fast float %1023, %1011
  %1036 = fadd fast float %1024, %1012
  %1037 = add i32 %377, %15
  %1038 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1037, i32 undef)  ; BufferLoad(srv,index,wot)
  %1039 = extractvalue %dx.types.ResRet.i32 %1038, 0
  %1040 = extractvalue %dx.types.ResRet.i32 %1038, 1
  %1041 = extractvalue %dx.types.ResRet.i32 %1038, 2
  %1042 = extractvalue %dx.types.ResRet.i32 %1038, 3
  %1043 = bitcast i32 %1039 to float
  %1044 = bitcast i32 %1040 to float
  %1045 = bitcast i32 %1041 to float
  %1046 = bitcast i32 %1042 to float
  %1047 = add i32 %1037, 16
  %1048 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1047, i32 undef)  ; BufferLoad(srv,index,wot)
  %1049 = extractvalue %dx.types.ResRet.i32 %1048, 0
  %1050 = extractvalue %dx.types.ResRet.i32 %1048, 1
  %1051 = extractvalue %dx.types.ResRet.i32 %1048, 2
  %1052 = extractvalue %dx.types.ResRet.i32 %1048, 3
  %1053 = bitcast i32 %1049 to float
  %1054 = bitcast i32 %1050 to float
  %1055 = bitcast i32 %1051 to float
  %1056 = bitcast i32 %1052 to float
  %1057 = add i32 %1037, 32
  %1058 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1057, i32 undef)  ; BufferLoad(srv,index,wot)
  %1059 = extractvalue %dx.types.ResRet.i32 %1058, 0
  %1060 = extractvalue %dx.types.ResRet.i32 %1058, 1
  %1061 = extractvalue %dx.types.ResRet.i32 %1058, 2
  %1062 = extractvalue %dx.types.ResRet.i32 %1058, 3
  %1063 = bitcast i32 %1059 to float
  %1064 = bitcast i32 %1060 to float
  %1065 = bitcast i32 %1061 to float
  %1066 = bitcast i32 %1062 to float
  %1067 = add i32 %408, %15
  %1068 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1067, i32 undef)  ; BufferLoad(srv,index,wot)
  %1069 = extractvalue %dx.types.ResRet.i32 %1068, 0
  %1070 = extractvalue %dx.types.ResRet.i32 %1068, 1
  %1071 = extractvalue %dx.types.ResRet.i32 %1068, 2
  %1072 = extractvalue %dx.types.ResRet.i32 %1068, 3
  %1073 = bitcast i32 %1069 to float
  %1074 = bitcast i32 %1070 to float
  %1075 = bitcast i32 %1071 to float
  %1076 = bitcast i32 %1072 to float
  %1077 = add i32 %1067, 16
  %1078 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1077, i32 undef)  ; BufferLoad(srv,index,wot)
  %1079 = extractvalue %dx.types.ResRet.i32 %1078, 0
  %1080 = extractvalue %dx.types.ResRet.i32 %1078, 1
  %1081 = extractvalue %dx.types.ResRet.i32 %1078, 2
  %1082 = extractvalue %dx.types.ResRet.i32 %1078, 3
  %1083 = bitcast i32 %1079 to float
  %1084 = bitcast i32 %1080 to float
  %1085 = bitcast i32 %1081 to float
  %1086 = bitcast i32 %1082 to float
  %1087 = add i32 %1067, 32
  %1088 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1087, i32 undef)  ; BufferLoad(srv,index,wot)
  %1089 = extractvalue %dx.types.ResRet.i32 %1088, 0
  %1090 = extractvalue %dx.types.ResRet.i32 %1088, 1
  %1091 = extractvalue %dx.types.ResRet.i32 %1088, 2
  %1092 = extractvalue %dx.types.ResRet.i32 %1088, 3
  %1093 = bitcast i32 %1089 to float
  %1094 = bitcast i32 %1090 to float
  %1095 = bitcast i32 %1091 to float
  %1096 = bitcast i32 %1092 to float
  %1097 = fmul fast float %1043, %272
  %1098 = fmul fast float %1053, %272
  %1099 = fmul fast float %1063, %272
  %1100 = fmul fast float %1044, %272
  %1101 = fmul fast float %1054, %272
  %1102 = fmul fast float %1064, %272
  %1103 = fmul fast float %1045, %272
  %1104 = fmul fast float %1055, %272
  %1105 = fmul fast float %1065, %272
  %1106 = fmul fast float %1046, %272
  %1107 = fmul fast float %1056, %272
  %1108 = fmul fast float %1066, %272
  %1109 = fadd fast float %1025, %1097
  %1110 = fadd fast float %1026, %1098
  %1111 = fadd fast float %1027, %1099
  %1112 = fadd fast float %1028, %1100
  %1113 = fadd fast float %1029, %1101
  %1114 = fadd fast float %1030, %1102
  %1115 = fadd fast float %1031, %1103
  %1116 = fadd fast float %1032, %1104
  %1117 = fadd fast float %1033, %1105
  %1118 = fadd fast float %1034, %1106
  %1119 = fadd fast float %1035, %1107
  %1120 = fadd fast float %1036, %1108
  %1121 = fmul fast float %1073, %276
  %1122 = fmul fast float %1083, %276
  %1123 = fmul fast float %1093, %276
  %1124 = fmul fast float %1074, %276
  %1125 = fmul fast float %1084, %276
  %1126 = fmul fast float %1094, %276
  %1127 = fmul fast float %1075, %276
  %1128 = fmul fast float %1085, %276
  %1129 = fmul fast float %1095, %276
  %1130 = fmul fast float %1076, %276
  %1131 = fmul fast float %1086, %276
  %1132 = fmul fast float %1096, %276
  %1133 = fadd fast float %1109, %1121
  %1134 = fadd fast float %1110, %1122
  %1135 = fadd fast float %1111, %1123
  %1136 = fadd fast float %1112, %1124
  %1137 = fadd fast float %1113, %1125
  %1138 = fadd fast float %1114, %1126
  %1139 = fadd fast float %1115, %1127
  %1140 = fadd fast float %1116, %1128
  %1141 = fadd fast float %1117, %1129
  %1142 = fadd fast float %1118, %1130
  %1143 = fadd fast float %1119, %1131
  %1144 = fadd fast float %1120, %1132
  %1145 = add i32 %487, %15
  %1146 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1145, i32 undef)  ; BufferLoad(srv,index,wot)
  %1147 = extractvalue %dx.types.ResRet.i32 %1146, 0
  %1148 = extractvalue %dx.types.ResRet.i32 %1146, 1
  %1149 = extractvalue %dx.types.ResRet.i32 %1146, 2
  %1150 = extractvalue %dx.types.ResRet.i32 %1146, 3
  %1151 = bitcast i32 %1147 to float
  %1152 = bitcast i32 %1148 to float
  %1153 = bitcast i32 %1149 to float
  %1154 = bitcast i32 %1150 to float
  %1155 = add i32 %1145, 16
  %1156 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1155, i32 undef)  ; BufferLoad(srv,index,wot)
  %1157 = extractvalue %dx.types.ResRet.i32 %1156, 0
  %1158 = extractvalue %dx.types.ResRet.i32 %1156, 1
  %1159 = extractvalue %dx.types.ResRet.i32 %1156, 2
  %1160 = extractvalue %dx.types.ResRet.i32 %1156, 3
  %1161 = bitcast i32 %1157 to float
  %1162 = bitcast i32 %1158 to float
  %1163 = bitcast i32 %1159 to float
  %1164 = bitcast i32 %1160 to float
  %1165 = add i32 %1145, 32
  %1166 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1165, i32 undef)  ; BufferLoad(srv,index,wot)
  %1167 = extractvalue %dx.types.ResRet.i32 %1166, 0
  %1168 = extractvalue %dx.types.ResRet.i32 %1166, 1
  %1169 = extractvalue %dx.types.ResRet.i32 %1166, 2
  %1170 = extractvalue %dx.types.ResRet.i32 %1166, 3
  %1171 = bitcast i32 %1167 to float
  %1172 = bitcast i32 %1168 to float
  %1173 = bitcast i32 %1169 to float
  %1174 = bitcast i32 %1170 to float
  %1175 = add i32 %518, %15
  %1176 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1175, i32 undef)  ; BufferLoad(srv,index,wot)
  %1177 = extractvalue %dx.types.ResRet.i32 %1176, 0
  %1178 = extractvalue %dx.types.ResRet.i32 %1176, 1
  %1179 = extractvalue %dx.types.ResRet.i32 %1176, 2
  %1180 = extractvalue %dx.types.ResRet.i32 %1176, 3
  %1181 = bitcast i32 %1177 to float
  %1182 = bitcast i32 %1178 to float
  %1183 = bitcast i32 %1179 to float
  %1184 = bitcast i32 %1180 to float
  %1185 = add i32 %1175, 16
  %1186 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1185, i32 undef)  ; BufferLoad(srv,index,wot)
  %1187 = extractvalue %dx.types.ResRet.i32 %1186, 0
  %1188 = extractvalue %dx.types.ResRet.i32 %1186, 1
  %1189 = extractvalue %dx.types.ResRet.i32 %1186, 2
  %1190 = extractvalue %dx.types.ResRet.i32 %1186, 3
  %1191 = bitcast i32 %1187 to float
  %1192 = bitcast i32 %1188 to float
  %1193 = bitcast i32 %1189 to float
  %1194 = bitcast i32 %1190 to float
  %1195 = add i32 %1175, 32
  %1196 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1195, i32 undef)  ; BufferLoad(srv,index,wot)
  %1197 = extractvalue %dx.types.ResRet.i32 %1196, 0
  %1198 = extractvalue %dx.types.ResRet.i32 %1196, 1
  %1199 = extractvalue %dx.types.ResRet.i32 %1196, 2
  %1200 = extractvalue %dx.types.ResRet.i32 %1196, 3
  %1201 = bitcast i32 %1197 to float
  %1202 = bitcast i32 %1198 to float
  %1203 = bitcast i32 %1199 to float
  %1204 = bitcast i32 %1200 to float
  %1205 = fmul fast float %1151, %273
  %1206 = fmul fast float %1161, %273
  %1207 = fmul fast float %1171, %273
  %1208 = fmul fast float %1152, %273
  %1209 = fmul fast float %1162, %273
  %1210 = fmul fast float %1172, %273
  %1211 = fmul fast float %1153, %273
  %1212 = fmul fast float %1163, %273
  %1213 = fmul fast float %1173, %273
  %1214 = fmul fast float %1154, %273
  %1215 = fmul fast float %1164, %273
  %1216 = fmul fast float %1174, %273
  %1217 = fadd fast float %1133, %1205
  %1218 = fadd fast float %1134, %1206
  %1219 = fadd fast float %1135, %1207
  %1220 = fadd fast float %1136, %1208
  %1221 = fadd fast float %1137, %1209
  %1222 = fadd fast float %1138, %1210
  %1223 = fadd fast float %1139, %1211
  %1224 = fadd fast float %1140, %1212
  %1225 = fadd fast float %1141, %1213
  %1226 = fadd fast float %1142, %1214
  %1227 = fadd fast float %1143, %1215
  %1228 = fadd fast float %1144, %1216
  %1229 = fmul fast float %1181, %277
  %1230 = fmul fast float %1191, %277
  %1231 = fmul fast float %1201, %277
  %1232 = fmul fast float %1182, %277
  %1233 = fmul fast float %1192, %277
  %1234 = fmul fast float %1202, %277
  %1235 = fmul fast float %1183, %277
  %1236 = fmul fast float %1193, %277
  %1237 = fmul fast float %1203, %277
  %1238 = fmul fast float %1184, %277
  %1239 = fmul fast float %1194, %277
  %1240 = fmul fast float %1204, %277
  %1241 = fadd fast float %1217, %1229
  %1242 = fadd fast float %1218, %1230
  %1243 = fadd fast float %1219, %1231
  %1244 = fadd fast float %1220, %1232
  %1245 = fadd fast float %1221, %1233
  %1246 = fadd fast float %1222, %1234
  %1247 = fadd fast float %1223, %1235
  %1248 = fadd fast float %1224, %1236
  %1249 = fadd fast float %1225, %1237
  %1250 = fadd fast float %1226, %1238
  %1251 = fadd fast float %1227, %1239
  %1252 = fadd fast float %1228, %1240
  %1253 = add i32 %597, %15
  %1254 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1253, i32 undef)  ; BufferLoad(srv,index,wot)
  %1255 = extractvalue %dx.types.ResRet.i32 %1254, 0
  %1256 = extractvalue %dx.types.ResRet.i32 %1254, 1
  %1257 = extractvalue %dx.types.ResRet.i32 %1254, 2
  %1258 = extractvalue %dx.types.ResRet.i32 %1254, 3
  %1259 = bitcast i32 %1255 to float
  %1260 = bitcast i32 %1256 to float
  %1261 = bitcast i32 %1257 to float
  %1262 = bitcast i32 %1258 to float
  %1263 = add i32 %1253, 16
  %1264 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1263, i32 undef)  ; BufferLoad(srv,index,wot)
  %1265 = extractvalue %dx.types.ResRet.i32 %1264, 0
  %1266 = extractvalue %dx.types.ResRet.i32 %1264, 1
  %1267 = extractvalue %dx.types.ResRet.i32 %1264, 2
  %1268 = extractvalue %dx.types.ResRet.i32 %1264, 3
  %1269 = bitcast i32 %1265 to float
  %1270 = bitcast i32 %1266 to float
  %1271 = bitcast i32 %1267 to float
  %1272 = bitcast i32 %1268 to float
  %1273 = add i32 %1253, 32
  %1274 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1273, i32 undef)  ; BufferLoad(srv,index,wot)
  %1275 = extractvalue %dx.types.ResRet.i32 %1274, 0
  %1276 = extractvalue %dx.types.ResRet.i32 %1274, 1
  %1277 = extractvalue %dx.types.ResRet.i32 %1274, 2
  %1278 = extractvalue %dx.types.ResRet.i32 %1274, 3
  %1279 = bitcast i32 %1275 to float
  %1280 = bitcast i32 %1276 to float
  %1281 = bitcast i32 %1277 to float
  %1282 = bitcast i32 %1278 to float
  %1283 = add i32 %628, %15
  %1284 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1283, i32 undef)  ; BufferLoad(srv,index,wot)
  %1285 = extractvalue %dx.types.ResRet.i32 %1284, 0
  %1286 = extractvalue %dx.types.ResRet.i32 %1284, 1
  %1287 = extractvalue %dx.types.ResRet.i32 %1284, 2
  %1288 = extractvalue %dx.types.ResRet.i32 %1284, 3
  %1289 = bitcast i32 %1285 to float
  %1290 = bitcast i32 %1286 to float
  %1291 = bitcast i32 %1287 to float
  %1292 = bitcast i32 %1288 to float
  %1293 = add i32 %1283, 16
  %1294 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1293, i32 undef)  ; BufferLoad(srv,index,wot)
  %1295 = extractvalue %dx.types.ResRet.i32 %1294, 0
  %1296 = extractvalue %dx.types.ResRet.i32 %1294, 1
  %1297 = extractvalue %dx.types.ResRet.i32 %1294, 2
  %1298 = extractvalue %dx.types.ResRet.i32 %1294, 3
  %1299 = bitcast i32 %1295 to float
  %1300 = bitcast i32 %1296 to float
  %1301 = bitcast i32 %1297 to float
  %1302 = bitcast i32 %1298 to float
  %1303 = add i32 %1283, 32
  %1304 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1303, i32 undef)  ; BufferLoad(srv,index,wot)
  %1305 = extractvalue %dx.types.ResRet.i32 %1304, 0
  %1306 = extractvalue %dx.types.ResRet.i32 %1304, 1
  %1307 = extractvalue %dx.types.ResRet.i32 %1304, 2
  %1308 = extractvalue %dx.types.ResRet.i32 %1304, 3
  %1309 = bitcast i32 %1305 to float
  %1310 = bitcast i32 %1306 to float
  %1311 = bitcast i32 %1307 to float
  %1312 = bitcast i32 %1308 to float
  %1313 = fmul fast float %1259, %274
  %1314 = fmul fast float %1269, %274
  %1315 = fmul fast float %1279, %274
  %1316 = fmul fast float %1260, %274
  %1317 = fmul fast float %1270, %274
  %1318 = fmul fast float %1280, %274
  %1319 = fmul fast float %1261, %274
  %1320 = fmul fast float %1271, %274
  %1321 = fmul fast float %1281, %274
  %1322 = fmul fast float %1262, %274
  %1323 = fmul fast float %1272, %274
  %1324 = fmul fast float %1282, %274
  %1325 = fadd fast float %1241, %1313
  %1326 = fadd fast float %1242, %1314
  %1327 = fadd fast float %1243, %1315
  %1328 = fadd fast float %1244, %1316
  %1329 = fadd fast float %1245, %1317
  %1330 = fadd fast float %1246, %1318
  %1331 = fadd fast float %1247, %1319
  %1332 = fadd fast float %1248, %1320
  %1333 = fadd fast float %1249, %1321
  %1334 = fadd fast float %1250, %1322
  %1335 = fadd fast float %1251, %1323
  %1336 = fadd fast float %1252, %1324
  %1337 = fmul fast float %1289, %278
  %1338 = fmul fast float %1299, %278
  %1339 = fmul fast float %1309, %278
  %1340 = fmul fast float %1290, %278
  %1341 = fmul fast float %1300, %278
  %1342 = fmul fast float %1310, %278
  %1343 = fmul fast float %1291, %278
  %1344 = fmul fast float %1301, %278
  %1345 = fmul fast float %1311, %278
  %1346 = fmul fast float %1292, %278
  %1347 = fmul fast float %1302, %278
  %1348 = fmul fast float %1312, %278
  %1349 = fadd fast float %1325, %1337
  %1350 = fadd fast float %1326, %1338
  %1351 = fadd fast float %1327, %1339
  %1352 = fadd fast float %1328, %1340
  %1353 = fadd fast float %1329, %1341
  %1354 = fadd fast float %1330, %1342
  %1355 = fadd fast float %1331, %1343
  %1356 = fadd fast float %1332, %1344
  %1357 = fadd fast float %1333, %1345
  %1358 = fadd fast float %1334, %1346
  %1359 = fadd fast float %1335, %1347
  %1360 = fadd fast float %1336, %1348
  %1361 = fmul fast float %1349, %938
  %1362 = call float @dx.op.tertiary.f32(i32 46, float %939, float %1352, float %1361)  ; FMad(a,b,c)
  %1363 = call float @dx.op.tertiary.f32(i32 46, float %940, float %1355, float %1362)  ; FMad(a,b,c)
  %1364 = fadd fast float %1358, %1363
  %1365 = fmul fast float %1350, %938
  %1366 = call float @dx.op.tertiary.f32(i32 46, float %939, float %1353, float %1365)  ; FMad(a,b,c)
  %1367 = call float @dx.op.tertiary.f32(i32 46, float %940, float %1356, float %1366)  ; FMad(a,b,c)
  %1368 = fadd fast float %1359, %1367
  %1369 = fmul fast float %1351, %938
  %1370 = call float @dx.op.tertiary.f32(i32 46, float %939, float %1354, float %1369)  ; FMad(a,b,c)
  %1371 = call float @dx.op.tertiary.f32(i32 46, float %940, float %1357, float %1370)  ; FMad(a,b,c)
  %1372 = fadd fast float %1360, %1371
  br i1 %187, label %1373, label %1448

; <label>:1373                                    ; preds = %937
  br i1 %111, label %1439, label %1374

; <label>:1374                                    ; preds = %1373
  br label %1375

; <label>:1375                                    ; preds = %1375, %1374
  %1376 = phi float [ %1435, %1375 ], [ 0.000000e+00, %1374 ]
  %1377 = phi i32 [ %1436, %1375 ], [ 0, %1374 ]
  %1378 = shl i32 %1377, 2
  %1379 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %1378)  ; CBufferLoadLegacy(handle,regIndex)
  %1380 = extractvalue %dx.types.CBufRet.i32 %1379, 0
  %1381 = extractvalue %dx.types.CBufRet.i32 %1379, 1
  %1382 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1380)  ; LegacyF16ToF32(value)
  %1383 = lshr i32 %1380, 16
  %1384 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1383)  ; LegacyF16ToF32(value)
  %1385 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1381)  ; LegacyF16ToF32(value)
  %1386 = lshr i32 %1381, 16
  %1387 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1386)  ; LegacyF16ToF32(value)
  %1388 = or i32 %1378, 1
  %1389 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %1388)  ; CBufferLoadLegacy(handle,regIndex)
  %1390 = extractvalue %dx.types.CBufRet.f32 %1389, 0
  %1391 = extractvalue %dx.types.CBufRet.f32 %1389, 1
  %1392 = extractvalue %dx.types.CBufRet.f32 %1389, 2
  %1393 = extractvalue %dx.types.CBufRet.f32 %1389, 3
  %1394 = or i32 %1378, 2
  %1395 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %1394)  ; CBufferLoadLegacy(handle,regIndex)
  %1396 = extractvalue %dx.types.CBufRet.f32 %1395, 0
  %1397 = extractvalue %dx.types.CBufRet.f32 %1395, 1
  %1398 = extractvalue %dx.types.CBufRet.f32 %1395, 2
  %1399 = extractvalue %dx.types.CBufRet.f32 %1395, 3
  %1400 = call float @dx.op.dot4.f32(i32 56, float %1382, float %1384, float %1385, float %1387, float %1364, float %1368, float %1372, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1401 = fmul fast float %1400, -1.000000e+01
  %1402 = call float @dx.op.unary.f32(i32 7, float %1401)  ; Saturate(value)
  %1403 = fsub fast float 1.000000e+00, %1402
  %1404 = fsub fast float %1364, %1390
  %1405 = fsub fast float %1368, %1391
  %1406 = fsub fast float %1372, %1392
  %1407 = fsub fast float %1396, %1390
  %1408 = fsub fast float %1397, %1391
  %1409 = fsub fast float %1398, %1392
  %1410 = call float @dx.op.dot3.f32(i32 55, float %1404, float %1405, float %1406, float %1407, float %1408, float %1409)  ; Dot3(ax,ay,az,bx,by,bz)
  %1411 = call float @dx.op.dot3.f32(i32 55, float %1407, float %1408, float %1409, float %1407, float %1408, float %1409)  ; Dot3(ax,ay,az,bx,by,bz)
  %1412 = fdiv fast float %1410, %1411
  %1413 = fmul fast float %1412, %1407
  %1414 = fmul fast float %1412, %1408
  %1415 = fmul fast float %1412, %1409
  %1416 = fsub fast float %1390, %1364
  %1417 = fadd fast float %1416, %1413
  %1418 = fsub fast float %1391, %1368
  %1419 = fadd fast float %1418, %1414
  %1420 = fsub fast float %1392, %1372
  %1421 = fadd fast float %1420, %1415
  %1422 = call float @dx.op.dot3.f32(i32 55, float %1417, float %1419, float %1421, float %1417, float %1419, float %1421)  ; Dot3(ax,ay,az,bx,by,bz)
  %1423 = call float @dx.op.unary.f32(i32 24, float %1422)  ; Sqrt(value)
  %1424 = fmul fast float %1393, 5.000000e-01
  %1425 = fsub fast float %1423, %1424
  %1426 = fdiv fast float %1425, %1424
  %1427 = call float @dx.op.unary.f32(i32 7, float %1426)  ; Saturate(value)
  %1428 = fmul fast float %1427, 2.000000e+00
  %1429 = fsub fast float 3.000000e+00, %1428
  %1430 = fmul fast float %1427, %1427
  %1431 = fmul fast float %1430, %1429
  %1432 = fsub fast float 1.000000e+00, %1431
  %1433 = fmul fast float %1403, %1399
  %1434 = fmul fast float %1433, %1432
  %1435 = call float @dx.op.binary.f32(i32 35, float %1434, float %1376)  ; FMax(a,b)
  %1436 = add nuw i32 %1377, 1
  %1437 = icmp eq i32 %1436, %110
  br i1 %1437, label %1438, label %1375

; <label>:1438                                    ; preds = %1375
  br label %1439

; <label>:1439                                    ; preds = %1438, %1373
  %1440 = phi float [ 0.000000e+00, %1373 ], [ %1435, %1438 ]
  %1441 = call float @dx.op.unary.f32(i32 7, float %1440)  ; Saturate(value)
  %1442 = fmul fast float %1441, %10
  %1443 = fmul fast float %1441, %11
  %1444 = fmul fast float %1441, %12
  %1445 = fadd fast float %1442, %1364
  %1446 = fadd fast float %1443, %1368
  %1447 = fadd fast float %1444, %1372
  br label %1448

; <label>:1448                                    ; preds = %1439, %937
  %1449 = phi float [ %1445, %1439 ], [ %1364, %937 ]
  %1450 = phi float [ %1446, %1439 ], [ %1368, %937 ]
  %1451 = phi float [ %1447, %1439 ], [ %1372, %937 ]
  %1452 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1453 = extractvalue %dx.types.CBufRet.f32 %1452, 0
  %1454 = extractvalue %dx.types.CBufRet.f32 %1452, 1
  %1455 = extractvalue %dx.types.CBufRet.f32 %1452, 2
  %1456 = extractvalue %dx.types.CBufRet.f32 %1452, 3
  %1457 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1458 = extractvalue %dx.types.CBufRet.f32 %1457, 0
  %1459 = extractvalue %dx.types.CBufRet.f32 %1457, 1
  %1460 = extractvalue %dx.types.CBufRet.f32 %1457, 2
  %1461 = extractvalue %dx.types.CBufRet.f32 %1457, 3
  %1462 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %1463 = extractvalue %dx.types.CBufRet.f32 %1462, 0
  %1464 = extractvalue %dx.types.CBufRet.f32 %1462, 1
  %1465 = extractvalue %dx.types.CBufRet.f32 %1462, 2
  %1466 = extractvalue %dx.types.CBufRet.f32 %1462, 3
  %1467 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %7, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %1468 = extractvalue %dx.types.CBufRet.i32 %1467, 0
  %1469 = extractvalue %dx.types.CBufRet.i32 %1467, 1
  %1470 = extractvalue %dx.types.CBufRet.i32 %1467, 2
  %1471 = bitcast float %1456 to i32
  %1472 = bitcast float %1461 to i32
  %1473 = bitcast float %1466 to i32
  %1474 = sub i32 %1471, %1468
  %1475 = sub i32 %1472, %1469
  %1476 = sub i32 %1473, %1470
  %1477 = sitofp i32 %1474 to float
  %1478 = sitofp i32 %1475 to float
  %1479 = sitofp i32 %1476 to float
  %1480 = fmul fast float %1477, 0x3EE0000000000000
  %1481 = fmul fast float %1478, 0x3EE0000000000000
  %1482 = fmul fast float %1479, 0x3EE0000000000000
  %1483 = fmul fast float %1453, %1449
  %1484 = call float @dx.op.tertiary.f32(i32 46, float %1454, float %1450, float %1483)  ; FMad(a,b,c)
  %1485 = call float @dx.op.tertiary.f32(i32 46, float %1455, float %1451, float %1484)  ; FMad(a,b,c)
  %1486 = fadd fast float %1480, %1485
  %1487 = fmul fast float %1458, %1449
  %1488 = call float @dx.op.tertiary.f32(i32 46, float %1459, float %1450, float %1487)  ; FMad(a,b,c)
  %1489 = call float @dx.op.tertiary.f32(i32 46, float %1460, float %1451, float %1488)  ; FMad(a,b,c)
  %1490 = fadd fast float %1481, %1489
  %1491 = fmul fast float %1463, %1449
  %1492 = call float @dx.op.tertiary.f32(i32 46, float %1464, float %1450, float %1491)  ; FMad(a,b,c)
  %1493 = call float @dx.op.tertiary.f32(i32 46, float %1465, float %1451, float %1492)  ; FMad(a,b,c)
  %1494 = fadd fast float %1493, %1482
  %1495 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %1496 = extractvalue %dx.types.CBufRet.f32 %1495, 0
  %1497 = extractvalue %dx.types.CBufRet.f32 %1495, 1
  %1498 = extractvalue %dx.types.CBufRet.f32 %1495, 2
  %1499 = extractvalue %dx.types.CBufRet.f32 %1495, 3
  %1500 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %1501 = extractvalue %dx.types.CBufRet.f32 %1500, 0
  %1502 = extractvalue %dx.types.CBufRet.f32 %1500, 1
  %1503 = extractvalue %dx.types.CBufRet.f32 %1500, 2
  %1504 = extractvalue %dx.types.CBufRet.f32 %1500, 3
  %1505 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 18)  ; CBufferLoadLegacy(handle,regIndex)
  %1506 = extractvalue %dx.types.CBufRet.f32 %1505, 0
  %1507 = extractvalue %dx.types.CBufRet.f32 %1505, 1
  %1508 = extractvalue %dx.types.CBufRet.f32 %1505, 2
  %1509 = extractvalue %dx.types.CBufRet.f32 %1505, 3
  %1510 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %1511 = extractvalue %dx.types.CBufRet.f32 %1510, 0
  %1512 = extractvalue %dx.types.CBufRet.f32 %1510, 1
  %1513 = extractvalue %dx.types.CBufRet.f32 %1510, 2
  %1514 = extractvalue %dx.types.CBufRet.f32 %1510, 3
  %1515 = fmul fast float %1496, %1486
  %1516 = call float @dx.op.tertiary.f32(i32 46, float %1490, float %1497, float %1515)  ; FMad(a,b,c)
  %1517 = call float @dx.op.tertiary.f32(i32 46, float %1494, float %1498, float %1516)  ; FMad(a,b,c)
  %1518 = fadd fast float %1517, %1499
  %1519 = fmul fast float %1501, %1486
  %1520 = call float @dx.op.tertiary.f32(i32 46, float %1490, float %1502, float %1519)  ; FMad(a,b,c)
  %1521 = call float @dx.op.tertiary.f32(i32 46, float %1494, float %1503, float %1520)  ; FMad(a,b,c)
  %1522 = fadd fast float %1521, %1504
  %1523 = fmul fast float %1506, %1486
  %1524 = call float @dx.op.tertiary.f32(i32 46, float %1490, float %1507, float %1523)  ; FMad(a,b,c)
  %1525 = call float @dx.op.tertiary.f32(i32 46, float %1494, float %1508, float %1524)  ; FMad(a,b,c)
  %1526 = fadd fast float %1525, %1509
  %1527 = fmul fast float %1511, %1486
  %1528 = call float @dx.op.tertiary.f32(i32 46, float %1490, float %1512, float %1527)  ; FMad(a,b,c)
  %1529 = call float @dx.op.tertiary.f32(i32 46, float %1494, float %1513, float %1528)  ; FMad(a,b,c)
  %1530 = fadd fast float %1529, %1514
  %1531 = fmul fast float %695, %48
  %1532 = call float @dx.op.tertiary.f32(i32 46, float %696, float %49, float %1531)  ; FMad(a,b,c)
  %1533 = call float @dx.op.tertiary.f32(i32 46, float %697, float %50, float %1532)  ; FMad(a,b,c)
  %1534 = fmul fast float %695, %52
  %1535 = call float @dx.op.tertiary.f32(i32 46, float %696, float %53, float %1534)  ; FMad(a,b,c)
  %1536 = call float @dx.op.tertiary.f32(i32 46, float %697, float %54, float %1535)  ; FMad(a,b,c)
  %1537 = fmul fast float %695, %56
  %1538 = call float @dx.op.tertiary.f32(i32 46, float %696, float %57, float %1537)  ; FMad(a,b,c)
  %1539 = call float @dx.op.tertiary.f32(i32 46, float %697, float %58, float %1538)  ; FMad(a,b,c)
  %1540 = fmul fast float %698, %48
  %1541 = call float @dx.op.tertiary.f32(i32 46, float %699, float %49, float %1540)  ; FMad(a,b,c)
  %1542 = call float @dx.op.tertiary.f32(i32 46, float %700, float %50, float %1541)  ; FMad(a,b,c)
  %1543 = fmul fast float %698, %52
  %1544 = call float @dx.op.tertiary.f32(i32 46, float %699, float %53, float %1543)  ; FMad(a,b,c)
  %1545 = call float @dx.op.tertiary.f32(i32 46, float %700, float %54, float %1544)  ; FMad(a,b,c)
  %1546 = fmul fast float %698, %56
  %1547 = call float @dx.op.tertiary.f32(i32 46, float %699, float %57, float %1546)  ; FMad(a,b,c)
  %1548 = call float @dx.op.tertiary.f32(i32 46, float %700, float %58, float %1547)  ; FMad(a,b,c)
  %1549 = fmul fast float %701, %48
  %1550 = call float @dx.op.tertiary.f32(i32 46, float %702, float %49, float %1549)  ; FMad(a,b,c)
  %1551 = call float @dx.op.tertiary.f32(i32 46, float %703, float %50, float %1550)  ; FMad(a,b,c)
  %1552 = fmul fast float %701, %52
  %1553 = call float @dx.op.tertiary.f32(i32 46, float %702, float %53, float %1552)  ; FMad(a,b,c)
  %1554 = call float @dx.op.tertiary.f32(i32 46, float %703, float %54, float %1553)  ; FMad(a,b,c)
  %1555 = fmul fast float %701, %56
  %1556 = call float @dx.op.tertiary.f32(i32 46, float %702, float %57, float %1555)  ; FMad(a,b,c)
  %1557 = call float @dx.op.tertiary.f32(i32 46, float %703, float %58, float %1556)  ; FMad(a,b,c)
  %1558 = fmul fast float %24, 2.000000e+00
  %1559 = fmul fast float %25, 2.000000e+00
  %1560 = fmul fast float %26, 2.000000e+00
  %1561 = fadd fast float %1558, -1.000000e+00
  %1562 = fadd fast float %1559, -1.000000e+00
  %1563 = fadd fast float %1560, -1.000000e+00
  %1564 = fmul fast float %20, 2.000000e+00
  %1565 = fmul fast float %21, 2.000000e+00
  %1566 = fmul fast float %22, 2.000000e+00
  %1567 = fadd fast float %1564, -1.000000e+00
  %1568 = fadd fast float %1565, -1.000000e+00
  %1569 = fadd fast float %1566, -1.000000e+00
  %1570 = fmul fast float %23, 2.000000e+00
  %1571 = fadd fast float %1570, -1.000000e+00
  %1572 = fmul fast float %1562, %1569
  %1573 = fmul fast float %1563, %1568
  %1574 = fsub fast float %1572, %1573
  %1575 = fmul fast float %1563, %1567
  %1576 = fmul fast float %1561, %1569
  %1577 = fsub fast float %1575, %1576
  %1578 = fmul fast float %1561, %1568
  %1579 = fmul fast float %1562, %1567
  %1580 = fsub fast float %1578, %1579
  %1581 = fmul fast float %1574, %1571
  %1582 = fmul fast float %1577, %1571
  %1583 = fmul fast float %1580, %1571
  %1584 = fmul fast float %1533, %1567
  %1585 = call float @dx.op.tertiary.f32(i32 46, float %1568, float %1542, float %1584)  ; FMad(a,b,c)
  %1586 = call float @dx.op.tertiary.f32(i32 46, float %1569, float %1551, float %1585)  ; FMad(a,b,c)
  %1587 = fmul fast float %1536, %1567
  %1588 = call float @dx.op.tertiary.f32(i32 46, float %1568, float %1545, float %1587)  ; FMad(a,b,c)
  %1589 = call float @dx.op.tertiary.f32(i32 46, float %1569, float %1554, float %1588)  ; FMad(a,b,c)
  %1590 = fmul fast float %1539, %1567
  %1591 = call float @dx.op.tertiary.f32(i32 46, float %1568, float %1548, float %1590)  ; FMad(a,b,c)
  %1592 = call float @dx.op.tertiary.f32(i32 46, float %1569, float %1557, float %1591)  ; FMad(a,b,c)
  %1593 = fmul fast float %1533, %1581
  %1594 = call float @dx.op.tertiary.f32(i32 46, float %1582, float %1542, float %1593)  ; FMad(a,b,c)
  %1595 = call float @dx.op.tertiary.f32(i32 46, float %1583, float %1551, float %1594)  ; FMad(a,b,c)
  %1596 = fmul fast float %1536, %1581
  %1597 = call float @dx.op.tertiary.f32(i32 46, float %1582, float %1545, float %1596)  ; FMad(a,b,c)
  %1598 = call float @dx.op.tertiary.f32(i32 46, float %1583, float %1554, float %1597)  ; FMad(a,b,c)
  %1599 = fmul fast float %1539, %1581
  %1600 = call float @dx.op.tertiary.f32(i32 46, float %1582, float %1548, float %1599)  ; FMad(a,b,c)
  %1601 = call float @dx.op.tertiary.f32(i32 46, float %1583, float %1557, float %1600)  ; FMad(a,b,c)
  %1602 = fmul fast float %1533, %1561
  %1603 = call float @dx.op.tertiary.f32(i32 46, float %1562, float %1542, float %1602)  ; FMad(a,b,c)
  %1604 = call float @dx.op.tertiary.f32(i32 46, float %1563, float %1551, float %1603)  ; FMad(a,b,c)
  %1605 = fmul fast float %1536, %1561
  %1606 = call float @dx.op.tertiary.f32(i32 46, float %1562, float %1545, float %1605)  ; FMad(a,b,c)
  %1607 = call float @dx.op.tertiary.f32(i32 46, float %1563, float %1554, float %1606)  ; FMad(a,b,c)
  %1608 = fmul fast float %1539, %1561
  %1609 = call float @dx.op.tertiary.f32(i32 46, float %1562, float %1548, float %1608)  ; FMad(a,b,c)
  %1610 = call float @dx.op.tertiary.f32(i32 46, float %1563, float %1557, float %1609)  ; FMad(a,b,c)
  %1611 = call float @dx.op.dot3.f32(i32 55, float %1604, float %1607, float %1610, float %1604, float %1607, float %1610)  ; Dot3(ax,ay,az,bx,by,bz)
  %1612 = call float @dx.op.unary.f32(i32 25, float %1611)  ; Rsqrt(value)
  %1613 = fmul fast float %1612, %1604
  %1614 = fmul fast float %1612, %1607
  %1615 = fmul fast float %1612, %1610
  %1616 = call float @dx.op.dot3.f32(i32 55, float %1595, float %1598, float %1601, float %1595, float %1598, float %1601)  ; Dot3(ax,ay,az,bx,by,bz)
  %1617 = call float @dx.op.unary.f32(i32 25, float %1616)  ; Rsqrt(value)
  %1618 = fmul fast float %1617, %1595
  %1619 = fmul fast float %1617, %1598
  %1620 = fmul fast float %1617, %1601
  %1621 = call float @dx.op.dot3.f32(i32 55, float %1586, float %1589, float %1592, float %1586, float %1589, float %1592)  ; Dot3(ax,ay,az,bx,by,bz)
  %1622 = call float @dx.op.unary.f32(i32 25, float %1621)  ; Rsqrt(value)
  %1623 = fmul fast float %1622, %1586
  %1624 = fmul fast float %1622, %1589
  %1625 = fmul fast float %1622, %1592
  %1626 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %1627 = extractvalue %dx.types.CBufRet.f32 %1626, 1
  %1628 = fptosi float %1627 to i32
  %1629 = icmp sgt i32 %1628, 0
  br i1 %1629, label %1630, label %1717

; <label>:1630                                    ; preds = %1448
  br label %1631

; <label>:1631                                    ; preds = %1702, %1630
  %1632 = phi float [ %1710, %1702 ], [ 0.000000e+00, %1630 ]
  %1633 = phi float [ %1713, %1702 ], [ 0.000000e+00, %1630 ]
  %1634 = phi i32 [ %1714, %1702 ], [ 0, %1630 ]
  %1635 = mul i32 %1634, 9
  %1636 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %6, i32 %1635)  ; CBufferLoadLegacy(handle,regIndex)
  %1637 = extractvalue %dx.types.CBufRet.i32 %1636, 0
  %1638 = icmp eq i32 %1637, 0
  br i1 %1638, label %1702, label %1639

; <label>:1639                                    ; preds = %1631
  br label %1640

; <label>:1640                                    ; preds = %1693, %1639
  %1641 = phi float [ %1696, %1693 ], [ 0.000000e+00, %1639 ]
  %1642 = phi i32 [ %1697, %1693 ], [ 0, %1639 ]
  %1643 = add i32 %1635, 5
  %1644 = add i32 %1643, %1642
  %1645 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 %1644)  ; CBufferLoadLegacy(handle,regIndex)
  %1646 = extractvalue %dx.types.CBufRet.f32 %1645, 0
  %1647 = extractvalue %dx.types.CBufRet.f32 %1645, 1
  %1648 = extractvalue %dx.types.CBufRet.f32 %1645, 2
  %1649 = extractvalue %dx.types.CBufRet.f32 %1645, 3
  %1650 = add i32 %1635, 1
  %1651 = add i32 %1650, %1642
  %1652 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 %1651)  ; CBufferLoadLegacy(handle,regIndex)
  %1653 = extractvalue %dx.types.CBufRet.f32 %1652, 0
  %1654 = extractvalue %dx.types.CBufRet.f32 %1652, 1
  %1655 = extractvalue %dx.types.CBufRet.f32 %1652, 2
  %1656 = extractvalue %dx.types.CBufRet.f32 %1652, 3
  %1657 = fcmp fast olt float %27, %1646
  %1658 = fcmp fast ogt float %27, %1648
  %1659 = or i1 %1657, %1658
  br i1 %1659, label %1674, label %1660

; <label>:1660                                    ; preds = %1640
  %1661 = fcmp fast oge float %27, %1653
  %1662 = fcmp fast ole float %27, %1655
  %1663 = and i1 %1661, %1662
  br i1 %1663, label %1674, label %1664

; <label>:1664                                    ; preds = %1660
  %1665 = fcmp fast olt float %27, %1653
  br i1 %1665, label %1666, label %1670

; <label>:1666                                    ; preds = %1664
  %1667 = fsub fast float %27, %1646
  %1668 = fsub fast float %1653, %1646
  %1669 = fdiv fast float %1667, %1668
  br label %1674

; <label>:1670                                    ; preds = %1664
  %1671 = fsub fast float %1648, %27
  %1672 = fsub fast float %1648, %1655
  %1673 = fdiv fast float %1671, %1672
  br label %1674

; <label>:1674                                    ; preds = %1670, %1666, %1660, %1640
  %1675 = phi float [ 0.000000e+00, %1640 ], [ %1669, %1666 ], [ %1673, %1670 ], [ 1.000000e+00, %1660 ]
  %1676 = fcmp fast olt float %28, %1647
  %1677 = fcmp fast ogt float %28, %1649
  %1678 = or i1 %1676, %1677
  br i1 %1678, label %1693, label %1679

; <label>:1679                                    ; preds = %1674
  %1680 = fcmp fast oge float %28, %1654
  %1681 = fcmp fast ole float %28, %1656
  %1682 = and i1 %1680, %1681
  br i1 %1682, label %1693, label %1683

; <label>:1683                                    ; preds = %1679
  %1684 = fcmp fast olt float %28, %1654
  br i1 %1684, label %1685, label %1689

; <label>:1685                                    ; preds = %1683
  %1686 = fsub fast float %28, %1647
  %1687 = fsub fast float %1654, %1647
  %1688 = fdiv fast float %1686, %1687
  br label %1693

; <label>:1689                                    ; preds = %1683
  %1690 = fsub fast float %1649, %28
  %1691 = fsub fast float %1649, %1656
  %1692 = fdiv fast float %1690, %1691
  br label %1693

; <label>:1693                                    ; preds = %1689, %1685, %1679, %1674
  %1694 = phi float [ 0.000000e+00, %1674 ], [ %1688, %1685 ], [ %1692, %1689 ], [ 1.000000e+00, %1679 ]
  %1695 = fmul fast float %1694, %1675
  %1696 = call float @dx.op.binary.f32(i32 35, float %1641, float %1695)  ; FMax(a,b)
  %1697 = add i32 %1642, 1
  %1698 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %6, i32 %1635)  ; CBufferLoadLegacy(handle,regIndex)
  %1699 = extractvalue %dx.types.CBufRet.i32 %1698, 0
  %1700 = icmp ult i32 %1697, %1699
  br i1 %1700, label %1640, label %1701

; <label>:1701                                    ; preds = %1693
  br label %1702

; <label>:1702                                    ; preds = %1701, %1631
  %1703 = phi float [ 0.000000e+00, %1631 ], [ %1696, %1701 ]
  %1704 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 %1634)  ; CBufferLoadLegacy(handle,regIndex)
  %1705 = extractvalue %dx.types.CBufRet.f32 %1704, 0
  %1706 = fmul fast float %1705, %1703
  %1707 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 %1635)  ; CBufferLoadLegacy(handle,regIndex)
  %1708 = extractvalue %dx.types.CBufRet.f32 %1707, 1
  %1709 = fmul fast float %1706, %1708
  %1710 = fadd fast float %1709, %1632
  %1711 = extractvalue %dx.types.CBufRet.f32 %1707, 2
  %1712 = fmul fast float %1706, %1711
  %1713 = fadd fast float %1712, %1633
  %1714 = add nuw nsw i32 %1634, 1
  %1715 = icmp eq i32 %1714, %1628
  br i1 %1715, label %1716, label %1631

; <label>:1716                                    ; preds = %1702
  br label %1717

; <label>:1717                                    ; preds = %1716, %1448
  %1718 = phi float [ 0.000000e+00, %1448 ], [ %1710, %1716 ]
  %1719 = phi float [ 0.000000e+00, %1448 ], [ %1713, %1716 ]
  %1720 = call float @dx.op.unary.f32(i32 7, float %1718)  ; Saturate(value)
  %1721 = call float @dx.op.unary.f32(i32 7, float %1719)  ; Saturate(value)
  %1722 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %1723 = extractvalue %dx.types.CBufRet.f32 %1722, 0
  %1724 = extractvalue %dx.types.CBufRet.f32 %1722, 1
  %1725 = fmul fast float %1723, %861
  %1726 = fmul fast float %1724, %861
  %1727 = fsub fast float %849, %1725
  %1728 = fsub fast float %853, %1726
  %1729 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %1730 = extractvalue %dx.types.CBufRet.f32 %1729, 0
  %1731 = extractvalue %dx.types.CBufRet.f32 %1729, 1
  %1732 = extractvalue %dx.types.CBufRet.f32 %1729, 2
  %1733 = extractvalue %dx.types.CBufRet.f32 %1729, 3
  %1734 = call float @dx.op.dot4.f32(i32 56, float %1730, float %1731, float %1732, float %1733, float %823, float %824, float %825, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %849)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %853)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %857)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %861)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %1613)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %1614)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %1615)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %1618)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %1619)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %1620)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %1623)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float %1624)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %1625)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %27)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %28)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %823)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %824)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float %825)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float %16)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float %17)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 0, float %18)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 1, float %19)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 2, float %818)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 3, float %1720)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 0, float %1721)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 1, float %1727)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 2, float %1728)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 3, float %857)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 0, float %861)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 1, float %1518)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 2, float %1522)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 3, float %1526)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 8, i32 0, i8 0, float %1530)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 8, i32 0, i8 1, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 9, i32 0, i8 0, float %1734)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!16}
!dx.entryPoints = !{!17}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{!5, null, !9, null}
!5 = !{!6, !7}
!6 = !{i32 0, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 10, i32 1, i32 11, i32 0, null}
!7 = !{i32 1, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 77, i32 1, i32 2, i32 0, !8}
!8 = !{i32 0, i32 9}
!9 = !{!10, !11, !12, !13, !14, !15}
!10 = !{i32 0, %MaterialModifiersConsts* undef, !"", i32 0, i32 7, i32 1, i32 496, null}
!11 = !{i32 1, %hostlayout.CameraShaderConsts* undef, !"", i32 0, i32 1, i32 1, i32 848, null}
!12 = !{i32 2, %TextureRegionsCB* undef, !"", i32 0, i32 9, i32 1, i32 5760, null}
!13 = !{i32 3, %FloatTracksDataCB* undef, !"", i32 0, i32 10, i32 1, i32 640, null}
!14 = !{i32 4, %hostlayout.FrequentVertexConsts* undef, !"", i32 0, i32 5, i32 1, i32 112, null}
!15 = !{i32 5, %CullObjectsCB* undef, !"", i32 0, i32 8, i32 1, i32 512, null}
!16 = !{[124 x i32] [i32 61, i32 37, i32 -29130737, i32 17, i32 -29130737, i32 17, i32 -29130737, i32 17, i32 0, i32 0, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 25174016, i32 0, i32 25182208, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1008, i32 0, i32 1008, i32 0, i32 1008, i32 0, i32 0, i32 0, i32 8064, i32 0, i32 8064, i32 0, i32 8064, i32 0, i32 896, i32 0, i32 262144, i32 0, i32 524288, i32 0, i32 1048576, i32 0, i32 2097152, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 507551743, i32 16, i32 507551743, i32 16, i32 507551743, i32 16, i32 507543567, i32 16, i32 507584511, i32 16, i32 507584511, i32 16, i32 507584511, i32 16, i32 507576335, i32 16, i32 507650047, i32 16, i32 507650047, i32 16, i32 507650047, i32 16, i32 507641871, i32 16, i32 507748351, i32 16, i32 -29122561, i32 17, i32 -536870912, i32 1, i32 0, i32 0, i32 -29130737, i32 17, i32 -29130737, i32 17, i32 -29130737, i32 17, i32 0, i32 0, i32 -29130737, i32 17]}
!17 = !{void ()* @vs_main_, !"vs_main_", !18, !4, !58}
!18 = !{!19, !41, null}
!19 = !{!20, !23, !25, !26, !28, !29, !31, !32, !33, !34, !35, !37, !38, !39}
!20 = !{i32 0, !"POSITION", i8 9, i8 0, !21, i8 0, i32 1, i8 3, i32 0, i8 0, !22}
!21 = !{i32 0}
!22 = !{i32 3, i32 7}
!23 = !{i32 1, !"BLENDINDICES", i8 5, i8 0, !21, i8 0, i32 1, i8 4, i32 1, i8 0, !24}
!24 = !{i32 3, i32 15}
!25 = !{i32 2, !"BLENDWEIGHT", i8 9, i8 0, !21, i8 0, i32 1, i8 4, i32 2, i8 0, !24}
!26 = !{i32 3, !"BLENDINDICES", i8 5, i8 0, !27, i8 0, i32 1, i8 4, i32 3, i8 0, !24}
!27 = !{i32 1}
!28 = !{i32 4, !"BLENDWEIGHT", i8 9, i8 0, !27, i8 0, i32 1, i8 4, i32 4, i8 0, !24}
!29 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !21, i8 0, i32 1, i8 2, i32 5, i8 0, !30}
!30 = !{i32 3, i32 3}
!31 = !{i32 6, !"NORMAL", i8 9, i8 0, !21, i8 0, i32 1, i8 3, i32 6, i8 0, !22}
!32 = !{i32 7, !"TANGENT", i8 9, i8 0, !21, i8 0, i32 1, i8 4, i32 7, i8 0, !24}
!33 = !{i32 8, !"COLOR", i8 9, i8 0, !21, i8 0, i32 1, i8 4, i32 8, i8 0, !24}
!34 = !{i32 9, !"TEXCOORD", i8 9, i8 0, !27, i8 0, i32 1, i8 2, i32 9, i8 0, null}
!35 = !{i32 10, !"INSTANCE_TRANSFORM", i8 9, i8 0, !36, i8 0, i32 3, i8 4, i32 10, i8 0, !24}
!36 = !{i32 0, i32 1, i32 2}
!37 = !{i32 11, !"INSTANCE_SKINNING_DATA", i8 5, i8 0, !21, i8 0, i32 1, i8 4, i32 13, i8 0, !22}
!38 = !{i32 12, !"EXTRA_DATA", i8 9, i8 0, !21, i8 0, i32 1, i8 3, i32 14, i8 0, !22}
!39 = !{i32 13, !"SV_VertexID", i8 5, i8 1, !21, i8 0, i32 1, i8 1, i32 15, i8 0, !40}
!40 = !{i32 3, i32 1}
!41 = !{!42, !43, !44, !45, !47, !49, !51, !53, !55, !57}
!42 = !{i32 0, !"SV_Position", i8 9, i8 3, !21, i8 4, i32 1, i8 4, i32 0, i8 0, !24}
!43 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !21, i8 2, i32 1, i8 4, i32 1, i8 0, !24}
!44 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !27, i8 2, i32 1, i8 4, i32 2, i8 0, !24}
!45 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !46, i8 2, i32 1, i8 4, i32 3, i8 0, !24}
!46 = !{i32 2}
!47 = !{i32 4, !"TEXCOORD", i8 9, i8 0, !48, i8 2, i32 1, i8 4, i32 4, i8 0, !24}
!48 = !{i32 3}
!49 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !50, i8 2, i32 1, i8 4, i32 5, i8 0, !24}
!50 = !{i32 4}
!51 = !{i32 6, !"TEXCOORD", i8 9, i8 0, !52, i8 2, i32 1, i8 4, i32 6, i8 0, !24}
!52 = !{i32 5}
!53 = !{i32 7, !"TEXCOORD", i8 9, i8 0, !54, i8 2, i32 1, i8 4, i32 7, i8 0, !24}
!54 = !{i32 6}
!55 = !{i32 8, !"TEXCOORD", i8 9, i8 0, !56, i8 2, i32 1, i8 2, i32 8, i8 0, !30}
!56 = !{i32 7}
!57 = !{i32 9, !"SV_ClipDistance", i8 9, i8 6, !21, i8 2, i32 1, i8 1, i32 9, i8 0, !40}
!58 = !{i32 0, i64 16}
 