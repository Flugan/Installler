;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; POSITION                 0   xyz         0     NONE   float   xyz 
; BLENDINDICES             0   xyzw        1     NONE    uint   xyzw
; BLENDWEIGHT              0   xyzw        2     NONE   float   xyzw
; TEXCOORD                 0   xy          3     NONE   float   xy  
; NORMAL                   0   xyz         4     NONE   float   xyz 
; TANGENT                  0   xyzw        5     NONE   float   xyzw
; COLOR                    0   xyzw        6     NONE   float   xyzw
; TEXCOORD                 1   xy          7     NONE   float       
; INSTANCE_TRANSFORM       0   xyzw        8     NONE   float   xyzw
; INSTANCE_TRANSFORM       1   xyzw        9     NONE   float   xyzw
; INSTANCE_TRANSFORM       2   xyzw       10     NONE   float   xyzw
; INSTANCE_SKINNING_DATA     0   xyzw       11     NONE    uint   xyz 
; EXTRA_DATA               0   xyz        12     NONE   float   xyz 
; SV_VertexID              0   x          13   VERTID    uint   x   
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; TEXCOORD                 0   xyzw        1     NONE   float   xyzw
; TEXCOORD                 1   xyzw        2     NONE   float   xyzw
; TEXCOORD                 2   xyzw        3     NONE   float   xyzw
; TEXCOORD                 3   xyzw        4     NONE   float   xyzw
; TEXCOORD                 4   xyzw        5     NONE   float   xyzw
; TEXCOORD                 5   xyzw        6     NONE   float   xyzw
; TEXCOORD                 6   xyzw        7     NONE   float   xyzw
; TEXCOORD                 7   xy          8     NONE   float   xy  
; SV_ClipDistance          0   x           9  CLIPDST   float   x   
;
; shader hash: fccfad89267afb9aa632d7ec825bf561
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; POSITION                 0                              
; BLENDINDICES             0                              
; BLENDWEIGHT              0                              
; TEXCOORD                 0                              
; NORMAL                   0                              
; TANGENT                  0                              
; COLOR                    0                              
; TEXCOORD                 1                              
; INSTANCE_TRANSFORM       0                              
; INSTANCE_SKINNING_DATA     0                              
; EXTRA_DATA               0                              
; SV_VertexID              0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; TEXCOORD                 3                 linear       
; TEXCOORD                 4                 linear       
; TEXCOORD                 5                 linear       
; TEXCOORD                 6                 linear       
; TEXCOORD                 7                 linear       
; SV_ClipDistance          0                 linear       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [496 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [848 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [5760 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [640 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [112 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [512 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb7     1
;                                   cbuffer      NA          NA     CB1            cb1     1
;                                   cbuffer      NA          NA     CB2            cb9     1
;                                   cbuffer      NA          NA     CB3           cb10     1
;                                   cbuffer      NA          NA     CB4            cb5     1
;                                   cbuffer      NA          NA     CB5            cb8     1
;                                   texture    byte         r/o      T0            t10     1
;                                   texture     f32          2d      T1            t77     1
;
;
; ViewId state:
;
; Number of inputs: 53, outputs: 37
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;   output 1 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;   output 2 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;   output 3 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;   output 4 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 5 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 6 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 7 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 20, 21, 22, 23, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 8 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 20, 21, 22, 23, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 9 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 20, 21, 22, 23, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 10 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 20, 21, 22, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 11 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 20, 21, 22, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 12 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 20, 21, 22, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 13 depends on inputs: { 12 }
;   output 14 depends on inputs: { 13 }
;   output 15 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 44, 45, 48, 49, 50, 52 }
;   output 16 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 36, 37, 38, 39, 44, 45, 48, 49, 50, 52 }
;   output 17 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;   output 18 depends on inputs: { 24 }
;   output 19 depends on inputs: { 25 }
;   output 20 depends on inputs: { 26 }
;   output 21 depends on inputs: { 27 }
;   output 22 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;   output 23 depends on inputs: { 12, 13 }
;   output 24 depends on inputs: { 12, 13 }
;   output 25 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;   output 26 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;   output 27 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;   output 28 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;   output 29 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 45, 46, 48, 49, 50, 52 }
;   output 30 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 45, 46, 48, 49, 50, 52 }
;   output 31 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 45, 46, 48, 49, 50, 52 }
;   output 32 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 45, 46, 48, 49, 50, 52 }
;   output 36 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%MaterialModifiersConsts = type { [31 x <4 x float>] }
%hostlayout.CameraShaderConsts = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, i32, i32, <2 x i32>, float, float }
%TextureRegionsCB = type { [40 x %struct.SRegion] }
%struct.SRegion = type { i32, float, float, [4 x <4 x float>], [4 x <4 x float>] }
%FloatTracksDataCB = type { [40 x <4 x float>] }
%hostlayout.FrequentVertexConsts = type { [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float> }
%CullObjectsCB = type { [8 x %struct.CullObjectPacked] }
%struct.CullObjectPacked = type { <2 x i32>, <2 x i32>, <3 x float>, float, <3 x float>, float, <3 x float>, i32 }

define void @vs_main_() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 77, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 10, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 5, i32 8, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 4, i32 5, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 3, i32 10, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 2, i32 9, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 7, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %9 = call i32 @dx.op.loadInput.i32(i32 4, i32 11, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call i32 @dx.op.loadInput.i32(i32 4, i32 9, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call i32 @dx.op.loadInput.i32(i32 4, i32 9, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call i32 @dx.op.loadInput.i32(i32 4, i32 9, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %20 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %21 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %22 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %23 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %24 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %25 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %26 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %27 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %28 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %29 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %30 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %31 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %32 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %33 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %34 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %35 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %36 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %37 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %38 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %39 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %40 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %41 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %42 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %43 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %44 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 1, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %45 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 1, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %46 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 1, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %47 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 1, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %48 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 2, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %49 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 2, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %50 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 2, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %51 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 2, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %52 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %7, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %53 = extractvalue %dx.types.CBufRet.i32 %52, 0
  %54 = extractvalue %dx.types.CBufRet.i32 %52, 1
  %55 = extractvalue %dx.types.CBufRet.i32 %52, 2
  %56 = bitcast float %43 to i32
  %57 = bitcast float %47 to i32
  %58 = bitcast float %51 to i32
  %59 = sub i32 %56, %53
  %60 = sub i32 %57, %54
  %61 = sub i32 %58, %55
  %62 = sitofp i32 %59 to float
  %63 = sitofp i32 %60 to float
  %64 = sitofp i32 %61 to float
  %65 = fmul fast float %62, 0x3EE0000000000000
  %66 = fmul fast float %63, 0x3EE0000000000000
  %67 = fmul fast float %64, 0x3EE0000000000000
  %68 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %69 = extractvalue %dx.types.CBufRet.f32 %68, 0
  %70 = extractvalue %dx.types.CBufRet.f32 %68, 1
  %71 = extractvalue %dx.types.CBufRet.f32 %68, 2
  %72 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %73 = extractvalue %dx.types.CBufRet.f32 %72, 0
  %74 = extractvalue %dx.types.CBufRet.f32 %72, 1
  %75 = extractvalue %dx.types.CBufRet.f32 %72, 2
  %76 = fmul fast float %73, %37
  %77 = fmul fast float %74, %38
  %78 = fmul fast float %75, %39
  %79 = fadd fast float %76, %69
  %80 = fadd fast float %77, %70
  %81 = fadd fast float %78, %71
  %82 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %83 = extractvalue %dx.types.CBufRet.f32 %82, 0
  %84 = fcmp fast ogt float %83, 5.000000e-01
  br i1 %84, label %85, label %90

; <label>:85                                      ; preds = %0
  %86 = and i32 %9, 255
  %87 = lshr i32 %9, 8
  %88 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1, i32 0, i32 %86, i32 %87, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %89 = extractvalue %dx.types.ResRet.f32 %88, 0
  br label %90

; <label>:90                                      ; preds = %85, %0
  %91 = phi float [ %89, %85 ], [ 0.000000e+00, %0 ]
  %92 = fmul fast float %91, 2.500000e+00
  %93 = fmul fast float %92, %10
  %94 = fmul fast float %92, %11
  %95 = fmul fast float %92, %12
  %96 = fadd fast float %79, %93
  %97 = fadd fast float %80, %94
  %98 = fadd fast float %81, %95
  %99 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %100 = extractvalue %dx.types.CBufRet.f32 %99, 0
  %101 = fptoui float %100 to i32
  %102 = call i32 @dx.op.binary.i32(i32 40, i32 %101, i32 8)  ; UMin(a,b)
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %169, label %104

; <label>:104                                     ; preds = %90
  br label %105

; <label>:105                                     ; preds = %105, %104
  %106 = phi float [ %165, %105 ], [ 0.000000e+00, %104 ]
  %107 = phi i32 [ %166, %105 ], [ 0, %104 ]
  %108 = shl i32 %107, 2
  %109 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %108)  ; CBufferLoadLegacy(handle,regIndex)
  %110 = extractvalue %dx.types.CBufRet.i32 %109, 0
  %111 = extractvalue %dx.types.CBufRet.i32 %109, 1
  %112 = call float @dx.op.legacyF16ToF32(i32 131, i32 %110)  ; LegacyF16ToF32(value)
  %113 = lshr i32 %110, 16
  %114 = call float @dx.op.legacyF16ToF32(i32 131, i32 %113)  ; LegacyF16ToF32(value)
  %115 = call float @dx.op.legacyF16ToF32(i32 131, i32 %111)  ; LegacyF16ToF32(value)
  %116 = lshr i32 %111, 16
  %117 = call float @dx.op.legacyF16ToF32(i32 131, i32 %116)  ; LegacyF16ToF32(value)
  %118 = or i32 %108, 1
  %119 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %118)  ; CBufferLoadLegacy(handle,regIndex)
  %120 = extractvalue %dx.types.CBufRet.f32 %119, 0
  %121 = extractvalue %dx.types.CBufRet.f32 %119, 1
  %122 = extractvalue %dx.types.CBufRet.f32 %119, 2
  %123 = extractvalue %dx.types.CBufRet.f32 %119, 3
  %124 = or i32 %108, 2
  %125 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %124)  ; CBufferLoadLegacy(handle,regIndex)
  %126 = extractvalue %dx.types.CBufRet.f32 %125, 0
  %127 = extractvalue %dx.types.CBufRet.f32 %125, 1
  %128 = extractvalue %dx.types.CBufRet.f32 %125, 2
  %129 = extractvalue %dx.types.CBufRet.f32 %125, 3
  %130 = call float @dx.op.dot4.f32(i32 56, float %112, float %114, float %115, float %117, float %96, float %97, float %98, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %131 = fmul fast float %130, -1.000000e+01
  %132 = call float @dx.op.unary.f32(i32 7, float %131)  ; Saturate(value)
  %133 = fsub fast float 1.000000e+00, %132
  %134 = fsub fast float %96, %120
  %135 = fsub fast float %97, %121
  %136 = fsub fast float %98, %122
  %137 = fsub fast float %126, %120
  %138 = fsub fast float %127, %121
  %139 = fsub fast float %128, %122
  %140 = call float @dx.op.dot3.f32(i32 55, float %134, float %135, float %136, float %137, float %138, float %139)  ; Dot3(ax,ay,az,bx,by,bz)
  %141 = call float @dx.op.dot3.f32(i32 55, float %137, float %138, float %139, float %137, float %138, float %139)  ; Dot3(ax,ay,az,bx,by,bz)
  %142 = fdiv fast float %140, %141
  %143 = fmul fast float %142, %137
  %144 = fmul fast float %142, %138
  %145 = fmul fast float %142, %139
  %146 = fsub fast float %120, %96
  %147 = fadd fast float %146, %143
  %148 = fsub fast float %121, %97
  %149 = fadd fast float %148, %144
  %150 = fsub fast float %122, %98
  %151 = fadd fast float %150, %145
  %152 = call float @dx.op.dot3.f32(i32 55, float %147, float %149, float %151, float %147, float %149, float %151)  ; Dot3(ax,ay,az,bx,by,bz)
  %153 = call float @dx.op.unary.f32(i32 24, float %152)  ; Sqrt(value)
  %154 = fmul fast float %123, 5.000000e-01
  %155 = fsub fast float %153, %154
  %156 = fdiv fast float %155, %154
  %157 = call float @dx.op.unary.f32(i32 7, float %156)  ; Saturate(value)
  %158 = fmul fast float %157, 2.000000e+00
  %159 = fsub fast float 3.000000e+00, %158
  %160 = fmul fast float %157, %157
  %161 = fmul fast float %160, %159
  %162 = fsub fast float 1.000000e+00, %161
  %163 = fmul fast float %133, %129
  %164 = fmul fast float %163, %162
  %165 = call float @dx.op.binary.f32(i32 35, float %164, float %106)  ; FMax(a,b)
  %166 = add nuw i32 %107, 1
  %167 = icmp eq i32 %166, %102
  br i1 %167, label %168, label %105

; <label>:168                                     ; preds = %105
  br label %169

; <label>:169                                     ; preds = %168, %90
  %170 = phi float [ 0.000000e+00, %90 ], [ %165, %168 ]
  %171 = call float @dx.op.unary.f32(i32 7, float %170)  ; Saturate(value)
  %172 = fmul fast float %171, %10
  %173 = fmul fast float %171, %11
  %174 = fmul fast float %171, %12
  %175 = fadd fast float %172, %96
  %176 = fadd fast float %173, %97
  %177 = fadd fast float %174, %98
  %178 = extractvalue %dx.types.CBufRet.f32 %99, 1
  %179 = extractvalue %dx.types.CBufRet.f32 %99, 2
  %180 = fcmp fast ogt float %179, 5.000000e-01
  br i1 %180, label %256, label %181

; <label>:181                                     ; preds = %169
  br i1 %103, label %247, label %182

; <label>:182                                     ; preds = %181
  br label %183

; <label>:183                                     ; preds = %183, %182
  %184 = phi float [ %243, %183 ], [ 0.000000e+00, %182 ]
  %185 = phi i32 [ %244, %183 ], [ 0, %182 ]
  %186 = shl i32 %185, 2
  %187 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %186)  ; CBufferLoadLegacy(handle,regIndex)
  %188 = extractvalue %dx.types.CBufRet.i32 %187, 0
  %189 = extractvalue %dx.types.CBufRet.i32 %187, 1
  %190 = call float @dx.op.legacyF16ToF32(i32 131, i32 %188)  ; LegacyF16ToF32(value)
  %191 = lshr i32 %188, 16
  %192 = call float @dx.op.legacyF16ToF32(i32 131, i32 %191)  ; LegacyF16ToF32(value)
  %193 = call float @dx.op.legacyF16ToF32(i32 131, i32 %189)  ; LegacyF16ToF32(value)
  %194 = lshr i32 %189, 16
  %195 = call float @dx.op.legacyF16ToF32(i32 131, i32 %194)  ; LegacyF16ToF32(value)
  %196 = or i32 %186, 1
  %197 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %196)  ; CBufferLoadLegacy(handle,regIndex)
  %198 = extractvalue %dx.types.CBufRet.f32 %197, 0
  %199 = extractvalue %dx.types.CBufRet.f32 %197, 1
  %200 = extractvalue %dx.types.CBufRet.f32 %197, 2
  %201 = extractvalue %dx.types.CBufRet.f32 %197, 3
  %202 = or i32 %186, 2
  %203 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %202)  ; CBufferLoadLegacy(handle,regIndex)
  %204 = extractvalue %dx.types.CBufRet.f32 %203, 0
  %205 = extractvalue %dx.types.CBufRet.f32 %203, 1
  %206 = extractvalue %dx.types.CBufRet.f32 %203, 2
  %207 = extractvalue %dx.types.CBufRet.f32 %203, 3
  %208 = call float @dx.op.dot4.f32(i32 56, float %190, float %192, float %193, float %195, float %175, float %176, float %177, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %209 = fmul fast float %208, -1.000000e+01
  %210 = call float @dx.op.unary.f32(i32 7, float %209)  ; Saturate(value)
  %211 = fsub fast float 1.000000e+00, %210
  %212 = fsub fast float %175, %198
  %213 = fsub fast float %176, %199
  %214 = fsub fast float %177, %200
  %215 = fsub fast float %204, %198
  %216 = fsub fast float %205, %199
  %217 = fsub fast float %206, %200
  %218 = call float @dx.op.dot3.f32(i32 55, float %212, float %213, float %214, float %215, float %216, float %217)  ; Dot3(ax,ay,az,bx,by,bz)
  %219 = call float @dx.op.dot3.f32(i32 55, float %215, float %216, float %217, float %215, float %216, float %217)  ; Dot3(ax,ay,az,bx,by,bz)
  %220 = fdiv fast float %218, %219
  %221 = fmul fast float %220, %215
  %222 = fmul fast float %220, %216
  %223 = fmul fast float %220, %217
  %224 = fsub fast float %198, %175
  %225 = fadd fast float %224, %221
  %226 = fsub fast float %199, %176
  %227 = fadd fast float %226, %222
  %228 = fsub fast float %200, %177
  %229 = fadd fast float %228, %223
  %230 = call float @dx.op.dot3.f32(i32 55, float %225, float %227, float %229, float %225, float %227, float %229)  ; Dot3(ax,ay,az,bx,by,bz)
  %231 = call float @dx.op.unary.f32(i32 24, float %230)  ; Sqrt(value)
  %232 = fmul fast float %201, 5.000000e-01
  %233 = fsub fast float %231, %232
  %234 = fdiv fast float %233, %232
  %235 = call float @dx.op.unary.f32(i32 7, float %234)  ; Saturate(value)
  %236 = fmul fast float %235, 2.000000e+00
  %237 = fsub fast float 3.000000e+00, %236
  %238 = fmul fast float %235, %235
  %239 = fmul fast float %238, %237
  %240 = fsub fast float 1.000000e+00, %239
  %241 = fmul fast float %211, %207
  %242 = fmul fast float %241, %240
  %243 = call float @dx.op.binary.f32(i32 35, float %242, float %184)  ; FMax(a,b)
  %244 = add nuw i32 %185, 1
  %245 = icmp eq i32 %244, %102
  br i1 %245, label %246, label %183

; <label>:246                                     ; preds = %183
  br label %247

; <label>:247                                     ; preds = %246, %181
  %248 = phi float [ 0.000000e+00, %181 ], [ %243, %246 ]
  %249 = call float @dx.op.unary.f32(i32 7, float %248)  ; Saturate(value)
  %250 = fmul fast float %249, %10
  %251 = fmul fast float %249, %11
  %252 = fmul fast float %249, %12
  %253 = fadd fast float %250, %175
  %254 = fadd fast float %251, %176
  %255 = fadd fast float %252, %177
  br label %256

; <label>:256                                     ; preds = %247, %169
  %257 = phi float [ %175, %169 ], [ %253, %247 ]
  %258 = phi float [ %176, %169 ], [ %254, %247 ]
  %259 = phi float [ %177, %169 ], [ %255, %247 ]
  %260 = call float @dx.op.dot4.f32(i32 56, float %29, float %30, float %31, float %32, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %261 = call float @dx.op.binary.f32(i32 35, float 0x3EE4F8B580000000, float %260)  ; FMax(a,b)
  %262 = fdiv fast float %29, %261
  %263 = fdiv fast float %30, %261
  %264 = fdiv fast float %31, %261
  %265 = fdiv fast float %32, %261
  %266 = mul i32 %33, %14
  %267 = add i32 %266, %13
  %268 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %267, i32 undef)  ; BufferLoad(srv,index,wot)
  %269 = extractvalue %dx.types.ResRet.i32 %268, 0
  %270 = extractvalue %dx.types.ResRet.i32 %268, 1
  %271 = extractvalue %dx.types.ResRet.i32 %268, 2
  %272 = extractvalue %dx.types.ResRet.i32 %268, 3
  %273 = bitcast i32 %269 to float
  %274 = bitcast i32 %270 to float
  %275 = bitcast i32 %271 to float
  %276 = bitcast i32 %272 to float
  %277 = add i32 %267, 16
  %278 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %277, i32 undef)  ; BufferLoad(srv,index,wot)
  %279 = extractvalue %dx.types.ResRet.i32 %278, 0
  %280 = extractvalue %dx.types.ResRet.i32 %278, 1
  %281 = extractvalue %dx.types.ResRet.i32 %278, 2
  %282 = extractvalue %dx.types.ResRet.i32 %278, 3
  %283 = bitcast i32 %279 to float
  %284 = bitcast i32 %280 to float
  %285 = bitcast i32 %281 to float
  %286 = bitcast i32 %282 to float
  %287 = add i32 %267, 32
  %288 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %287, i32 undef)  ; BufferLoad(srv,index,wot)
  %289 = extractvalue %dx.types.ResRet.i32 %288, 0
  %290 = extractvalue %dx.types.ResRet.i32 %288, 1
  %291 = extractvalue %dx.types.ResRet.i32 %288, 2
  %292 = extractvalue %dx.types.ResRet.i32 %288, 3
  %293 = bitcast i32 %289 to float
  %294 = bitcast i32 %290 to float
  %295 = bitcast i32 %291 to float
  %296 = bitcast i32 %292 to float
  %297 = fmul fast float %273, %262
  %298 = fmul fast float %283, %262
  %299 = fmul fast float %293, %262
  %300 = fmul fast float %274, %262
  %301 = fmul fast float %284, %262
  %302 = fmul fast float %294, %262
  %303 = fmul fast float %275, %262
  %304 = fmul fast float %285, %262
  %305 = fmul fast float %295, %262
  %306 = fmul fast float %276, %262
  %307 = fmul fast float %286, %262
  %308 = fmul fast float %296, %262
  %309 = mul i32 %34, %14
  %310 = add i32 %309, %13
  %311 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %310, i32 undef)  ; BufferLoad(srv,index,wot)
  %312 = extractvalue %dx.types.ResRet.i32 %311, 0
  %313 = extractvalue %dx.types.ResRet.i32 %311, 1
  %314 = extractvalue %dx.types.ResRet.i32 %311, 2
  %315 = extractvalue %dx.types.ResRet.i32 %311, 3
  %316 = bitcast i32 %312 to float
  %317 = bitcast i32 %313 to float
  %318 = bitcast i32 %314 to float
  %319 = bitcast i32 %315 to float
  %320 = add i32 %310, 16
  %321 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %320, i32 undef)  ; BufferLoad(srv,index,wot)
  %322 = extractvalue %dx.types.ResRet.i32 %321, 0
  %323 = extractvalue %dx.types.ResRet.i32 %321, 1
  %324 = extractvalue %dx.types.ResRet.i32 %321, 2
  %325 = extractvalue %dx.types.ResRet.i32 %321, 3
  %326 = bitcast i32 %322 to float
  %327 = bitcast i32 %323 to float
  %328 = bitcast i32 %324 to float
  %329 = bitcast i32 %325 to float
  %330 = add i32 %310, 32
  %331 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %330, i32 undef)  ; BufferLoad(srv,index,wot)
  %332 = extractvalue %dx.types.ResRet.i32 %331, 0
  %333 = extractvalue %dx.types.ResRet.i32 %331, 1
  %334 = extractvalue %dx.types.ResRet.i32 %331, 2
  %335 = extractvalue %dx.types.ResRet.i32 %331, 3
  %336 = bitcast i32 %332 to float
  %337 = bitcast i32 %333 to float
  %338 = bitcast i32 %334 to float
  %339 = bitcast i32 %335 to float
  %340 = fmul fast float %316, %263
  %341 = fmul fast float %326, %263
  %342 = fmul fast float %336, %263
  %343 = fmul fast float %317, %263
  %344 = fmul fast float %327, %263
  %345 = fmul fast float %337, %263
  %346 = fmul fast float %318, %263
  %347 = fmul fast float %328, %263
  %348 = fmul fast float %338, %263
  %349 = fmul fast float %319, %263
  %350 = fmul fast float %329, %263
  %351 = fmul fast float %339, %263
  %352 = fadd fast float %340, %297
  %353 = fadd fast float %341, %298
  %354 = fadd fast float %342, %299
  %355 = fadd fast float %343, %300
  %356 = fadd fast float %344, %301
  %357 = fadd fast float %345, %302
  %358 = fadd fast float %346, %303
  %359 = fadd fast float %347, %304
  %360 = fadd fast float %348, %305
  %361 = fadd fast float %349, %306
  %362 = fadd fast float %350, %307
  %363 = fadd fast float %351, %308
  %364 = mul i32 %35, %14
  %365 = add i32 %364, %13
  %366 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %365, i32 undef)  ; BufferLoad(srv,index,wot)
  %367 = extractvalue %dx.types.ResRet.i32 %366, 0
  %368 = extractvalue %dx.types.ResRet.i32 %366, 1
  %369 = extractvalue %dx.types.ResRet.i32 %366, 2
  %370 = extractvalue %dx.types.ResRet.i32 %366, 3
  %371 = bitcast i32 %367 to float
  %372 = bitcast i32 %368 to float
  %373 = bitcast i32 %369 to float
  %374 = bitcast i32 %370 to float
  %375 = add i32 %365, 16
  %376 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %375, i32 undef)  ; BufferLoad(srv,index,wot)
  %377 = extractvalue %dx.types.ResRet.i32 %376, 0
  %378 = extractvalue %dx.types.ResRet.i32 %376, 1
  %379 = extractvalue %dx.types.ResRet.i32 %376, 2
  %380 = extractvalue %dx.types.ResRet.i32 %376, 3
  %381 = bitcast i32 %377 to float
  %382 = bitcast i32 %378 to float
  %383 = bitcast i32 %379 to float
  %384 = bitcast i32 %380 to float
  %385 = add i32 %365, 32
  %386 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %385, i32 undef)  ; BufferLoad(srv,index,wot)
  %387 = extractvalue %dx.types.ResRet.i32 %386, 0
  %388 = extractvalue %dx.types.ResRet.i32 %386, 1
  %389 = extractvalue %dx.types.ResRet.i32 %386, 2
  %390 = extractvalue %dx.types.ResRet.i32 %386, 3
  %391 = bitcast i32 %387 to float
  %392 = bitcast i32 %388 to float
  %393 = bitcast i32 %389 to float
  %394 = bitcast i32 %390 to float
  %395 = fmul fast float %371, %264
  %396 = fmul fast float %381, %264
  %397 = fmul fast float %391, %264
  %398 = fmul fast float %372, %264
  %399 = fmul fast float %382, %264
  %400 = fmul fast float %392, %264
  %401 = fmul fast float %373, %264
  %402 = fmul fast float %383, %264
  %403 = fmul fast float %393, %264
  %404 = fmul fast float %374, %264
  %405 = fmul fast float %384, %264
  %406 = fmul fast float %394, %264
  %407 = fadd fast float %352, %395
  %408 = fadd fast float %353, %396
  %409 = fadd fast float %354, %397
  %410 = fadd fast float %355, %398
  %411 = fadd fast float %356, %399
  %412 = fadd fast float %357, %400
  %413 = fadd fast float %358, %401
  %414 = fadd fast float %359, %402
  %415 = fadd fast float %360, %403
  %416 = fadd fast float %361, %404
  %417 = fadd fast float %362, %405
  %418 = fadd fast float %363, %406
  %419 = mul i32 %36, %14
  %420 = add i32 %419, %13
  %421 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %420, i32 undef)  ; BufferLoad(srv,index,wot)
  %422 = extractvalue %dx.types.ResRet.i32 %421, 0
  %423 = extractvalue %dx.types.ResRet.i32 %421, 1
  %424 = extractvalue %dx.types.ResRet.i32 %421, 2
  %425 = extractvalue %dx.types.ResRet.i32 %421, 3
  %426 = bitcast i32 %422 to float
  %427 = bitcast i32 %423 to float
  %428 = bitcast i32 %424 to float
  %429 = bitcast i32 %425 to float
  %430 = add i32 %420, 16
  %431 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %430, i32 undef)  ; BufferLoad(srv,index,wot)
  %432 = extractvalue %dx.types.ResRet.i32 %431, 0
  %433 = extractvalue %dx.types.ResRet.i32 %431, 1
  %434 = extractvalue %dx.types.ResRet.i32 %431, 2
  %435 = extractvalue %dx.types.ResRet.i32 %431, 3
  %436 = bitcast i32 %432 to float
  %437 = bitcast i32 %433 to float
  %438 = bitcast i32 %434 to float
  %439 = bitcast i32 %435 to float
  %440 = add i32 %420, 32
  %441 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %440, i32 undef)  ; BufferLoad(srv,index,wot)
  %442 = extractvalue %dx.types.ResRet.i32 %441, 0
  %443 = extractvalue %dx.types.ResRet.i32 %441, 1
  %444 = extractvalue %dx.types.ResRet.i32 %441, 2
  %445 = extractvalue %dx.types.ResRet.i32 %441, 3
  %446 = bitcast i32 %442 to float
  %447 = bitcast i32 %443 to float
  %448 = bitcast i32 %444 to float
  %449 = bitcast i32 %445 to float
  %450 = fmul fast float %426, %265
  %451 = fmul fast float %436, %265
  %452 = fmul fast float %446, %265
  %453 = fmul fast float %427, %265
  %454 = fmul fast float %437, %265
  %455 = fmul fast float %447, %265
  %456 = fmul fast float %428, %265
  %457 = fmul fast float %438, %265
  %458 = fmul fast float %448, %265
  %459 = fmul fast float %429, %265
  %460 = fmul fast float %439, %265
  %461 = fmul fast float %449, %265
  %462 = fadd fast float %407, %450
  %463 = fadd fast float %408, %451
  %464 = fadd fast float %409, %452
  %465 = fadd fast float %410, %453
  %466 = fadd fast float %411, %454
  %467 = fadd fast float %412, %455
  %468 = fadd fast float %413, %456
  %469 = fadd fast float %414, %457
  %470 = fadd fast float %415, %458
  %471 = fadd fast float %416, %459
  %472 = fadd fast float %417, %460
  %473 = fadd fast float %418, %461
  %474 = fmul fast float %462, %257
  %475 = call float @dx.op.tertiary.f32(i32 46, float %258, float %465, float %474)  ; FMad(a,b,c)
  %476 = call float @dx.op.tertiary.f32(i32 46, float %259, float %468, float %475)  ; FMad(a,b,c)
  %477 = fadd fast float %476, %471
  %478 = fmul fast float %463, %257
  %479 = call float @dx.op.tertiary.f32(i32 46, float %258, float %466, float %478)  ; FMad(a,b,c)
  %480 = call float @dx.op.tertiary.f32(i32 46, float %259, float %469, float %479)  ; FMad(a,b,c)
  %481 = fadd fast float %480, %472
  %482 = fmul fast float %464, %257
  %483 = call float @dx.op.tertiary.f32(i32 46, float %258, float %467, float %482)  ; FMad(a,b,c)
  %484 = call float @dx.op.tertiary.f32(i32 46, float %259, float %470, float %483)  ; FMad(a,b,c)
  %485 = fadd fast float %484, %473
  br i1 %180, label %486, label %561

; <label>:486                                     ; preds = %256
  br i1 %103, label %552, label %487

; <label>:487                                     ; preds = %486
  br label %488

; <label>:488                                     ; preds = %488, %487
  %489 = phi float [ %548, %488 ], [ 0.000000e+00, %487 ]
  %490 = phi i32 [ %549, %488 ], [ 0, %487 ]
  %491 = shl i32 %490, 2
  %492 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %491)  ; CBufferLoadLegacy(handle,regIndex)
  %493 = extractvalue %dx.types.CBufRet.i32 %492, 0
  %494 = extractvalue %dx.types.CBufRet.i32 %492, 1
  %495 = call float @dx.op.legacyF16ToF32(i32 131, i32 %493)  ; LegacyF16ToF32(value)
  %496 = lshr i32 %493, 16
  %497 = call float @dx.op.legacyF16ToF32(i32 131, i32 %496)  ; LegacyF16ToF32(value)
  %498 = call float @dx.op.legacyF16ToF32(i32 131, i32 %494)  ; LegacyF16ToF32(value)
  %499 = lshr i32 %494, 16
  %500 = call float @dx.op.legacyF16ToF32(i32 131, i32 %499)  ; LegacyF16ToF32(value)
  %501 = or i32 %491, 1
  %502 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %501)  ; CBufferLoadLegacy(handle,regIndex)
  %503 = extractvalue %dx.types.CBufRet.f32 %502, 0
  %504 = extractvalue %dx.types.CBufRet.f32 %502, 1
  %505 = extractvalue %dx.types.CBufRet.f32 %502, 2
  %506 = extractvalue %dx.types.CBufRet.f32 %502, 3
  %507 = or i32 %491, 2
  %508 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %507)  ; CBufferLoadLegacy(handle,regIndex)
  %509 = extractvalue %dx.types.CBufRet.f32 %508, 0
  %510 = extractvalue %dx.types.CBufRet.f32 %508, 1
  %511 = extractvalue %dx.types.CBufRet.f32 %508, 2
  %512 = extractvalue %dx.types.CBufRet.f32 %508, 3
  %513 = call float @dx.op.dot4.f32(i32 56, float %495, float %497, float %498, float %500, float %477, float %481, float %485, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %514 = fmul fast float %513, -1.000000e+01
  %515 = call float @dx.op.unary.f32(i32 7, float %514)  ; Saturate(value)
  %516 = fsub fast float 1.000000e+00, %515
  %517 = fsub fast float %477, %503
  %518 = fsub fast float %481, %504
  %519 = fsub fast float %485, %505
  %520 = fsub fast float %509, %503
  %521 = fsub fast float %510, %504
  %522 = fsub fast float %511, %505
  %523 = call float @dx.op.dot3.f32(i32 55, float %517, float %518, float %519, float %520, float %521, float %522)  ; Dot3(ax,ay,az,bx,by,bz)
  %524 = call float @dx.op.dot3.f32(i32 55, float %520, float %521, float %522, float %520, float %521, float %522)  ; Dot3(ax,ay,az,bx,by,bz)
  %525 = fdiv fast float %523, %524
  %526 = fmul fast float %525, %520
  %527 = fmul fast float %525, %521
  %528 = fmul fast float %525, %522
  %529 = fsub fast float %503, %477
  %530 = fadd fast float %529, %526
  %531 = fsub fast float %504, %481
  %532 = fadd fast float %531, %527
  %533 = fsub fast float %505, %485
  %534 = fadd fast float %533, %528
  %535 = call float @dx.op.dot3.f32(i32 55, float %530, float %532, float %534, float %530, float %532, float %534)  ; Dot3(ax,ay,az,bx,by,bz)
  %536 = call float @dx.op.unary.f32(i32 24, float %535)  ; Sqrt(value)
  %537 = fmul fast float %506, 5.000000e-01
  %538 = fsub fast float %536, %537
  %539 = fdiv fast float %538, %537
  %540 = call float @dx.op.unary.f32(i32 7, float %539)  ; Saturate(value)
  %541 = fmul fast float %540, 2.000000e+00
  %542 = fsub fast float 3.000000e+00, %541
  %543 = fmul fast float %540, %540
  %544 = fmul fast float %543, %542
  %545 = fsub fast float 1.000000e+00, %544
  %546 = fmul fast float %516, %512
  %547 = fmul fast float %546, %545
  %548 = call float @dx.op.binary.f32(i32 35, float %547, float %489)  ; FMax(a,b)
  %549 = add nuw i32 %490, 1
  %550 = icmp eq i32 %549, %102
  br i1 %550, label %551, label %488

; <label>:551                                     ; preds = %488
  br label %552

; <label>:552                                     ; preds = %551, %486
  %553 = phi float [ 0.000000e+00, %486 ], [ %548, %551 ]
  %554 = call float @dx.op.unary.f32(i32 7, float %553)  ; Saturate(value)
  %555 = fmul fast float %554, %10
  %556 = fmul fast float %554, %11
  %557 = fmul fast float %554, %12
  %558 = fadd fast float %555, %477
  %559 = fadd fast float %556, %481
  %560 = fadd fast float %557, %485
  br label %561

; <label>:561                                     ; preds = %552, %256
  %562 = phi float [ %558, %552 ], [ %477, %256 ]
  %563 = phi float [ %559, %552 ], [ %481, %256 ]
  %564 = phi float [ %560, %552 ], [ %485, %256 ]
  %565 = fcmp ule float %178, 5.000000e-01
  %566 = xor i1 %565, true
  %567 = or i1 %180, %566
  %568 = or i1 %567, %103
  br i1 %568, label %699, label %569

; <label>:569                                     ; preds = %561
  br label %570

; <label>:570                                     ; preds = %695, %569
  %571 = phi i32 [ %696, %695 ], [ 0, %569 ]
  %572 = shl i32 %571, 2
  %573 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %572)  ; CBufferLoadLegacy(handle,regIndex)
  %574 = extractvalue %dx.types.CBufRet.i32 %573, 0
  %575 = extractvalue %dx.types.CBufRet.i32 %573, 1
  %576 = call float @dx.op.legacyF16ToF32(i32 131, i32 %574)  ; LegacyF16ToF32(value)
  %577 = lshr i32 %574, 16
  %578 = call float @dx.op.legacyF16ToF32(i32 131, i32 %577)  ; LegacyF16ToF32(value)
  %579 = call float @dx.op.legacyF16ToF32(i32 131, i32 %575)  ; LegacyF16ToF32(value)
  %580 = lshr i32 %575, 16
  %581 = call float @dx.op.legacyF16ToF32(i32 131, i32 %580)  ; LegacyF16ToF32(value)
  %582 = extractvalue %dx.types.CBufRet.i32 %573, 2
  %583 = extractvalue %dx.types.CBufRet.i32 %573, 3
  %584 = call float @dx.op.legacyF16ToF32(i32 131, i32 %582)  ; LegacyF16ToF32(value)
  %585 = lshr i32 %582, 16
  %586 = call float @dx.op.legacyF16ToF32(i32 131, i32 %585)  ; LegacyF16ToF32(value)
  %587 = call float @dx.op.legacyF16ToF32(i32 131, i32 %583)  ; LegacyF16ToF32(value)
  %588 = lshr i32 %583, 16
  %589 = call float @dx.op.legacyF16ToF32(i32 131, i32 %588)  ; LegacyF16ToF32(value)
  %590 = or i32 %572, 1
  %591 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %590)  ; CBufferLoadLegacy(handle,regIndex)
  %592 = extractvalue %dx.types.CBufRet.f32 %591, 0
  %593 = extractvalue %dx.types.CBufRet.f32 %591, 1
  %594 = extractvalue %dx.types.CBufRet.f32 %591, 2
  %595 = extractvalue %dx.types.CBufRet.f32 %591, 3
  %596 = or i32 %572, 2
  %597 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %596)  ; CBufferLoadLegacy(handle,regIndex)
  %598 = extractvalue %dx.types.CBufRet.f32 %597, 0
  %599 = extractvalue %dx.types.CBufRet.f32 %597, 1
  %600 = extractvalue %dx.types.CBufRet.f32 %597, 2
  %601 = or i32 %572, 3
  %602 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %601)  ; CBufferLoadLegacy(handle,regIndex)
  %603 = extractvalue %dx.types.CBufRet.i32 %602, 3
  %604 = icmp eq i32 %603, 0
  %605 = fsub fast float %257, %592
  %606 = fsub fast float %258, %593
  %607 = fsub fast float %259, %594
  %608 = fsub fast float %598, %592
  %609 = fsub fast float %599, %593
  %610 = fsub fast float %600, %594
  %611 = call float @dx.op.dot3.f32(i32 55, float %605, float %606, float %607, float %608, float %609, float %610)  ; Dot3(ax,ay,az,bx,by,bz)
  %612 = call float @dx.op.dot3.f32(i32 55, float %608, float %609, float %610, float %608, float %609, float %610)  ; Dot3(ax,ay,az,bx,by,bz)
  %613 = fdiv fast float %611, %612
  %614 = fmul fast float %613, %608
  %615 = fmul fast float %613, %609
  %616 = fmul fast float %613, %610
  %617 = fsub fast float %592, %257
  %618 = fadd fast float %617, %614
  %619 = fsub fast float %593, %258
  %620 = fadd fast float %619, %615
  %621 = fsub fast float %594, %259
  %622 = fadd fast float %621, %616
  %623 = call float @dx.op.dot3.f32(i32 55, float %618, float %620, float %622, float %618, float %620, float %622)  ; Dot3(ax,ay,az,bx,by,bz)
  %624 = fmul fast float %595, %595
  %625 = fcmp fast ole float %623, %624
  %626 = call float @dx.op.dot4.f32(i32 56, float %584, float %586, float %587, float %589, float %257, float %258, float %259, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  br i1 %604, label %627, label %657, !dx.controlflow.hints !57

; <label>:627                                     ; preds = %570
  %628 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %601)  ; CBufferLoadLegacy(handle,regIndex)
  %629 = call float @dx.op.dot4.f32(i32 56, float %576, float %578, float %579, float %581, float %257, float %258, float %259, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %630 = fcmp fast ogt float %629, 0.000000e+00
  %631 = and i1 %625, %630
  %632 = fcmp fast ogt float %626, 0.000000e+00
  %633 = and i1 %631, %632
  br i1 %633, label %634, label %695

; <label>:634                                     ; preds = %627
  %635 = extractvalue %dx.types.CBufRet.f32 %628, 0
  %636 = extractvalue %dx.types.CBufRet.f32 %628, 1
  %637 = extractvalue %dx.types.CBufRet.f32 %628, 2
  %638 = call float @dx.op.dot4.f32(i32 56, float %257, float %258, float %259, float 1.000000e+00, float %576, float %578, float %579, float %581)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %639 = fmul fast float %576, %638
  %640 = fsub fast float -0.000000e+00, %639
  %641 = fmul fast float %578, %638
  %642 = fsub fast float -0.000000e+00, %641
  %643 = fmul fast float %579, %638
  %644 = fsub fast float -0.000000e+00, %643
  %645 = call float @dx.op.dot3.f32(i32 55, float %640, float %642, float %644, float %640, float %642, float %644)  ; Dot3(ax,ay,az,bx,by,bz)
  %646 = fmul fast float %645, 0x408F3FFFE0000000
  %647 = call float @dx.op.unary.f32(i32 7, float %646)  ; Saturate(value)
  %648 = fsub fast float %635, %562
  %649 = fsub fast float %636, %563
  %650 = fsub fast float %637, %564
  %651 = fmul fast float %647, %648
  %652 = fmul fast float %647, %649
  %653 = fmul fast float %647, %650
  %654 = fadd fast float %651, %562
  %655 = fadd fast float %652, %563
  %656 = fadd fast float %653, %564
  br label %699

; <label>:657                                     ; preds = %570
  %658 = fcmp fast oge float %626, 0.000000e+00
  %659 = and i1 %625, %658
  br i1 %659, label %660, label %695

; <label>:660                                     ; preds = %657
  %661 = fadd fast float %614, %592
  %662 = fadd fast float %615, %593
  %663 = fadd fast float %616, %594
  %664 = call float @dx.op.dot4.f32(i32 56, float %257, float %258, float %259, float 1.000000e+00, float %576, float %578, float %579, float %581)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %665 = fmul fast float %664, %576
  %666 = fmul fast float %664, %578
  %667 = fmul fast float %664, %579
  %668 = fsub fast float %257, %665
  %669 = fsub fast float %258, %666
  %670 = fsub fast float %259, %667
  %671 = fsub fast float %668, %661
  %672 = fsub fast float %669, %662
  %673 = fsub fast float %670, %663
  %674 = call float @dx.op.dot3.f32(i32 55, float %671, float %672, float %673, float %671, float %672, float %673)  ; Dot3(ax,ay,az,bx,by,bz)
  %675 = call float @dx.op.unary.f32(i32 25, float %674)  ; Rsqrt(value)
  %676 = fmul fast float %675, %595
  %677 = fmul fast float %676, %671
  %678 = fmul fast float %676, %672
  %679 = fmul fast float %676, %673
  %680 = fadd fast float %677, %661
  %681 = fadd fast float %678, %662
  %682 = fadd fast float %679, %663
  %683 = fmul fast float %680, %462
  %684 = call float @dx.op.tertiary.f32(i32 46, float %681, float %465, float %683)  ; FMad(a,b,c)
  %685 = call float @dx.op.tertiary.f32(i32 46, float %682, float %468, float %684)  ; FMad(a,b,c)
  %686 = fadd fast float %685, %471
  %687 = fmul fast float %680, %463
  %688 = call float @dx.op.tertiary.f32(i32 46, float %681, float %466, float %687)  ; FMad(a,b,c)
  %689 = call float @dx.op.tertiary.f32(i32 46, float %682, float %469, float %688)  ; FMad(a,b,c)
  %690 = fadd fast float %689, %472
  %691 = fmul fast float %680, %464
  %692 = call float @dx.op.tertiary.f32(i32 46, float %681, float %467, float %691)  ; FMad(a,b,c)
  %693 = call float @dx.op.tertiary.f32(i32 46, float %682, float %470, float %692)  ; FMad(a,b,c)
  %694 = fadd fast float %693, %473
  br label %699

; <label>:695                                     ; preds = %657, %627
  %696 = add nuw i32 %571, 1
  %697 = icmp ult i32 %696, %102
  br i1 %697, label %570, label %698, !llvm.loop !58

; <label>:698                                     ; preds = %695
  br label %699

; <label>:699                                     ; preds = %698, %660, %634, %561
  %700 = phi float [ %562, %561 ], [ %654, %634 ], [ %686, %660 ], [ %562, %698 ]
  %701 = phi float [ %563, %561 ], [ %655, %634 ], [ %690, %660 ], [ %563, %698 ]
  %702 = phi float [ %564, %561 ], [ %656, %634 ], [ %694, %660 ], [ %564, %698 ]
  %703 = fmul fast float %700, %40
  %704 = call float @dx.op.tertiary.f32(i32 46, float %701, float %41, float %703)  ; FMad(a,b,c)
  %705 = call float @dx.op.tertiary.f32(i32 46, float %702, float %42, float %704)  ; FMad(a,b,c)
  %706 = fadd fast float %705, %65
  %707 = fmul fast float %700, %44
  %708 = call float @dx.op.tertiary.f32(i32 46, float %701, float %45, float %707)  ; FMad(a,b,c)
  %709 = call float @dx.op.tertiary.f32(i32 46, float %702, float %46, float %708)  ; FMad(a,b,c)
  %710 = fadd fast float %709, %66
  %711 = fmul fast float %700, %48
  %712 = call float @dx.op.tertiary.f32(i32 46, float %701, float %49, float %711)  ; FMad(a,b,c)
  %713 = call float @dx.op.tertiary.f32(i32 46, float %702, float %50, float %712)  ; FMad(a,b,c)
  %714 = fadd fast float %713, %67
  %715 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %716 = extractvalue %dx.types.CBufRet.f32 %715, 0
  %717 = extractvalue %dx.types.CBufRet.f32 %715, 1
  %718 = extractvalue %dx.types.CBufRet.f32 %715, 2
  %719 = extractvalue %dx.types.CBufRet.f32 %715, 3
  %720 = fmul fast float %716, %706
  %721 = call float @dx.op.tertiary.f32(i32 46, float %710, float %717, float %720)  ; FMad(a,b,c)
  %722 = call float @dx.op.tertiary.f32(i32 46, float %714, float %718, float %721)  ; FMad(a,b,c)
  %723 = fadd fast float %722, %719
  %724 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 37)  ; CBufferLoadLegacy(handle,regIndex)
  %725 = extractvalue %dx.types.CBufRet.f32 %724, 0
  %726 = extractvalue %dx.types.CBufRet.f32 %724, 1
  %727 = extractvalue %dx.types.CBufRet.f32 %724, 2
  %728 = fadd fast float %725, %706
  %729 = fadd fast float %726, %710
  %730 = fadd fast float %727, %714
  %731 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %732 = extractvalue %dx.types.CBufRet.f32 %731, 0
  %733 = extractvalue %dx.types.CBufRet.f32 %731, 1
  %734 = extractvalue %dx.types.CBufRet.f32 %731, 2
  %735 = extractvalue %dx.types.CBufRet.f32 %731, 3
  %736 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %737 = extractvalue %dx.types.CBufRet.f32 %736, 0
  %738 = extractvalue %dx.types.CBufRet.f32 %736, 1
  %739 = extractvalue %dx.types.CBufRet.f32 %736, 2
  %740 = extractvalue %dx.types.CBufRet.f32 %736, 3
  %741 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %742 = extractvalue %dx.types.CBufRet.f32 %741, 0
  %743 = extractvalue %dx.types.CBufRet.f32 %741, 1
  %744 = extractvalue %dx.types.CBufRet.f32 %741, 2
  %745 = extractvalue %dx.types.CBufRet.f32 %741, 3
  %746 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %747 = extractvalue %dx.types.CBufRet.f32 %746, 0
  %748 = extractvalue %dx.types.CBufRet.f32 %746, 1
  %749 = extractvalue %dx.types.CBufRet.f32 %746, 2
  %750 = extractvalue %dx.types.CBufRet.f32 %746, 3
  %751 = fmul fast float %732, %706
  %752 = call float @dx.op.tertiary.f32(i32 46, float %710, float %733, float %751)  ; FMad(a,b,c)
  %753 = call float @dx.op.tertiary.f32(i32 46, float %714, float %734, float %752)  ; FMad(a,b,c)
  %754 = fadd fast float %753, %735
  %755 = fmul fast float %737, %706
  %756 = call float @dx.op.tertiary.f32(i32 46, float %710, float %738, float %755)  ; FMad(a,b,c)
  %757 = call float @dx.op.tertiary.f32(i32 46, float %714, float %739, float %756)  ; FMad(a,b,c)
  %758 = fadd fast float %757, %740
  %759 = fmul fast float %742, %706
  %760 = call float @dx.op.tertiary.f32(i32 46, float %710, float %743, float %759)  ; FMad(a,b,c)
  %761 = call float @dx.op.tertiary.f32(i32 46, float %714, float %744, float %760)  ; FMad(a,b,c)
  %762 = fadd fast float %761, %745
  %763 = fmul fast float %747, %706
  %764 = call float @dx.op.tertiary.f32(i32 46, float %710, float %748, float %763)  ; FMad(a,b,c)
  %765 = call float @dx.op.tertiary.f32(i32 46, float %714, float %749, float %764)  ; FMad(a,b,c)
  %766 = fadd fast float %765, %750
  br i1 %180, label %842, label %767

; <label>:767                                     ; preds = %699
  br i1 %103, label %833, label %768

; <label>:768                                     ; preds = %767
  br label %769

; <label>:769                                     ; preds = %769, %768
  %770 = phi float [ %829, %769 ], [ 0.000000e+00, %768 ]
  %771 = phi i32 [ %830, %769 ], [ 0, %768 ]
  %772 = shl i32 %771, 2
  %773 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %772)  ; CBufferLoadLegacy(handle,regIndex)
  %774 = extractvalue %dx.types.CBufRet.i32 %773, 0
  %775 = extractvalue %dx.types.CBufRet.i32 %773, 1
  %776 = call float @dx.op.legacyF16ToF32(i32 131, i32 %774)  ; LegacyF16ToF32(value)
  %777 = lshr i32 %774, 16
  %778 = call float @dx.op.legacyF16ToF32(i32 131, i32 %777)  ; LegacyF16ToF32(value)
  %779 = call float @dx.op.legacyF16ToF32(i32 131, i32 %775)  ; LegacyF16ToF32(value)
  %780 = lshr i32 %775, 16
  %781 = call float @dx.op.legacyF16ToF32(i32 131, i32 %780)  ; LegacyF16ToF32(value)
  %782 = or i32 %772, 1
  %783 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %782)  ; CBufferLoadLegacy(handle,regIndex)
  %784 = extractvalue %dx.types.CBufRet.f32 %783, 0
  %785 = extractvalue %dx.types.CBufRet.f32 %783, 1
  %786 = extractvalue %dx.types.CBufRet.f32 %783, 2
  %787 = extractvalue %dx.types.CBufRet.f32 %783, 3
  %788 = or i32 %772, 2
  %789 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %788)  ; CBufferLoadLegacy(handle,regIndex)
  %790 = extractvalue %dx.types.CBufRet.f32 %789, 0
  %791 = extractvalue %dx.types.CBufRet.f32 %789, 1
  %792 = extractvalue %dx.types.CBufRet.f32 %789, 2
  %793 = extractvalue %dx.types.CBufRet.f32 %789, 3
  %794 = call float @dx.op.dot4.f32(i32 56, float %776, float %778, float %779, float %781, float %175, float %176, float %177, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %795 = fmul fast float %794, -1.000000e+01
  %796 = call float @dx.op.unary.f32(i32 7, float %795)  ; Saturate(value)
  %797 = fsub fast float 1.000000e+00, %796
  %798 = fsub fast float %175, %784
  %799 = fsub fast float %176, %785
  %800 = fsub fast float %177, %786
  %801 = fsub fast float %790, %784
  %802 = fsub fast float %791, %785
  %803 = fsub fast float %792, %786
  %804 = call float @dx.op.dot3.f32(i32 55, float %798, float %799, float %800, float %801, float %802, float %803)  ; Dot3(ax,ay,az,bx,by,bz)
  %805 = call float @dx.op.dot3.f32(i32 55, float %801, float %802, float %803, float %801, float %802, float %803)  ; Dot3(ax,ay,az,bx,by,bz)
  %806 = fdiv fast float %804, %805
  %807 = fmul fast float %806, %801
  %808 = fmul fast float %806, %802
  %809 = fmul fast float %806, %803
  %810 = fsub fast float %784, %175
  %811 = fadd fast float %810, %807
  %812 = fsub fast float %785, %176
  %813 = fadd fast float %812, %808
  %814 = fsub fast float %786, %177
  %815 = fadd fast float %814, %809
  %816 = call float @dx.op.dot3.f32(i32 55, float %811, float %813, float %815, float %811, float %813, float %815)  ; Dot3(ax,ay,az,bx,by,bz)
  %817 = call float @dx.op.unary.f32(i32 24, float %816)  ; Sqrt(value)
  %818 = fmul fast float %787, 5.000000e-01
  %819 = fsub fast float %817, %818
  %820 = fdiv fast float %819, %818
  %821 = call float @dx.op.unary.f32(i32 7, float %820)  ; Saturate(value)
  %822 = fmul fast float %821, 2.000000e+00
  %823 = fsub fast float 3.000000e+00, %822
  %824 = fmul fast float %821, %821
  %825 = fmul fast float %824, %823
  %826 = fsub fast float 1.000000e+00, %825
  %827 = fmul fast float %797, %793
  %828 = fmul fast float %827, %826
  %829 = call float @dx.op.binary.f32(i32 35, float %828, float %770)  ; FMax(a,b)
  %830 = add nuw i32 %771, 1
  %831 = icmp eq i32 %830, %102
  br i1 %831, label %832, label %769

; <label>:832                                     ; preds = %769
  br label %833

; <label>:833                                     ; preds = %832, %767
  %834 = phi float [ 0.000000e+00, %767 ], [ %829, %832 ]
  %835 = call float @dx.op.unary.f32(i32 7, float %834)  ; Saturate(value)
  %836 = fmul fast float %835, %10
  %837 = fmul fast float %835, %11
  %838 = fmul fast float %835, %12
  %839 = fadd fast float %836, %175
  %840 = fadd fast float %837, %176
  %841 = fadd fast float %838, %177
  br label %842

; <label>:842                                     ; preds = %833, %699
  %843 = phi float [ %175, %699 ], [ %839, %833 ]
  %844 = phi float [ %176, %699 ], [ %840, %833 ]
  %845 = phi float [ %177, %699 ], [ %841, %833 ]
  %846 = add i32 %266, %15
  %847 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %846, i32 undef)  ; BufferLoad(srv,index,wot)
  %848 = extractvalue %dx.types.ResRet.i32 %847, 0
  %849 = extractvalue %dx.types.ResRet.i32 %847, 1
  %850 = extractvalue %dx.types.ResRet.i32 %847, 2
  %851 = extractvalue %dx.types.ResRet.i32 %847, 3
  %852 = bitcast i32 %848 to float
  %853 = bitcast i32 %849 to float
  %854 = bitcast i32 %850 to float
  %855 = bitcast i32 %851 to float
  %856 = add i32 %846, 16
  %857 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %856, i32 undef)  ; BufferLoad(srv,index,wot)
  %858 = extractvalue %dx.types.ResRet.i32 %857, 0
  %859 = extractvalue %dx.types.ResRet.i32 %857, 1
  %860 = extractvalue %dx.types.ResRet.i32 %857, 2
  %861 = extractvalue %dx.types.ResRet.i32 %857, 3
  %862 = bitcast i32 %858 to float
  %863 = bitcast i32 %859 to float
  %864 = bitcast i32 %860 to float
  %865 = bitcast i32 %861 to float
  %866 = add i32 %846, 32
  %867 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %866, i32 undef)  ; BufferLoad(srv,index,wot)
  %868 = extractvalue %dx.types.ResRet.i32 %867, 0
  %869 = extractvalue %dx.types.ResRet.i32 %867, 1
  %870 = extractvalue %dx.types.ResRet.i32 %867, 2
  %871 = extractvalue %dx.types.ResRet.i32 %867, 3
  %872 = bitcast i32 %868 to float
  %873 = bitcast i32 %869 to float
  %874 = bitcast i32 %870 to float
  %875 = bitcast i32 %871 to float
  %876 = fmul fast float %852, %262
  %877 = fmul fast float %862, %262
  %878 = fmul fast float %872, %262
  %879 = fmul fast float %853, %262
  %880 = fmul fast float %863, %262
  %881 = fmul fast float %873, %262
  %882 = fmul fast float %854, %262
  %883 = fmul fast float %864, %262
  %884 = fmul fast float %874, %262
  %885 = fmul fast float %855, %262
  %886 = fmul fast float %865, %262
  %887 = fmul fast float %875, %262
  %888 = add i32 %309, %15
  %889 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %888, i32 undef)  ; BufferLoad(srv,index,wot)
  %890 = extractvalue %dx.types.ResRet.i32 %889, 0
  %891 = extractvalue %dx.types.ResRet.i32 %889, 1
  %892 = extractvalue %dx.types.ResRet.i32 %889, 2
  %893 = extractvalue %dx.types.ResRet.i32 %889, 3
  %894 = bitcast i32 %890 to float
  %895 = bitcast i32 %891 to float
  %896 = bitcast i32 %892 to float
  %897 = bitcast i32 %893 to float
  %898 = add i32 %888, 16
  %899 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %898, i32 undef)  ; BufferLoad(srv,index,wot)
  %900 = extractvalue %dx.types.ResRet.i32 %899, 0
  %901 = extractvalue %dx.types.ResRet.i32 %899, 1
  %902 = extractvalue %dx.types.ResRet.i32 %899, 2
  %903 = extractvalue %dx.types.ResRet.i32 %899, 3
  %904 = bitcast i32 %900 to float
  %905 = bitcast i32 %901 to float
  %906 = bitcast i32 %902 to float
  %907 = bitcast i32 %903 to float
  %908 = add i32 %888, 32
  %909 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %908, i32 undef)  ; BufferLoad(srv,index,wot)
  %910 = extractvalue %dx.types.ResRet.i32 %909, 0
  %911 = extractvalue %dx.types.ResRet.i32 %909, 1
  %912 = extractvalue %dx.types.ResRet.i32 %909, 2
  %913 = extractvalue %dx.types.ResRet.i32 %909, 3
  %914 = bitcast i32 %910 to float
  %915 = bitcast i32 %911 to float
  %916 = bitcast i32 %912 to float
  %917 = bitcast i32 %913 to float
  %918 = fmul fast float %894, %263
  %919 = fmul fast float %904, %263
  %920 = fmul fast float %914, %263
  %921 = fmul fast float %895, %263
  %922 = fmul fast float %905, %263
  %923 = fmul fast float %915, %263
  %924 = fmul fast float %896, %263
  %925 = fmul fast float %906, %263
  %926 = fmul fast float %916, %263
  %927 = fmul fast float %897, %263
  %928 = fmul fast float %907, %263
  %929 = fmul fast float %917, %263
  %930 = fadd fast float %918, %876
  %931 = fadd fast float %919, %877
  %932 = fadd fast float %920, %878
  %933 = fadd fast float %921, %879
  %934 = fadd fast float %922, %880
  %935 = fadd fast float %923, %881
  %936 = fadd fast float %924, %882
  %937 = fadd fast float %925, %883
  %938 = fadd fast float %926, %884
  %939 = fadd fast float %927, %885
  %940 = fadd fast float %928, %886
  %941 = fadd fast float %929, %887
  %942 = add i32 %364, %15
  %943 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %942, i32 undef)  ; BufferLoad(srv,index,wot)
  %944 = extractvalue %dx.types.ResRet.i32 %943, 0
  %945 = extractvalue %dx.types.ResRet.i32 %943, 1
  %946 = extractvalue %dx.types.ResRet.i32 %943, 2
  %947 = extractvalue %dx.types.ResRet.i32 %943, 3
  %948 = bitcast i32 %944 to float
  %949 = bitcast i32 %945 to float
  %950 = bitcast i32 %946 to float
  %951 = bitcast i32 %947 to float
  %952 = add i32 %942, 16
  %953 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %952, i32 undef)  ; BufferLoad(srv,index,wot)
  %954 = extractvalue %dx.types.ResRet.i32 %953, 0
  %955 = extractvalue %dx.types.ResRet.i32 %953, 1
  %956 = extractvalue %dx.types.ResRet.i32 %953, 2
  %957 = extractvalue %dx.types.ResRet.i32 %953, 3
  %958 = bitcast i32 %954 to float
  %959 = bitcast i32 %955 to float
  %960 = bitcast i32 %956 to float
  %961 = bitcast i32 %957 to float
  %962 = add i32 %942, 32
  %963 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %962, i32 undef)  ; BufferLoad(srv,index,wot)
  %964 = extractvalue %dx.types.ResRet.i32 %963, 0
  %965 = extractvalue %dx.types.ResRet.i32 %963, 1
  %966 = extractvalue %dx.types.ResRet.i32 %963, 2
  %967 = extractvalue %dx.types.ResRet.i32 %963, 3
  %968 = bitcast i32 %964 to float
  %969 = bitcast i32 %965 to float
  %970 = bitcast i32 %966 to float
  %971 = bitcast i32 %967 to float
  %972 = fmul fast float %948, %264
  %973 = fmul fast float %958, %264
  %974 = fmul fast float %968, %264
  %975 = fmul fast float %949, %264
  %976 = fmul fast float %959, %264
  %977 = fmul fast float %969, %264
  %978 = fmul fast float %950, %264
  %979 = fmul fast float %960, %264
  %980 = fmul fast float %970, %264
  %981 = fmul fast float %951, %264
  %982 = fmul fast float %961, %264
  %983 = fmul fast float %971, %264
  %984 = fadd fast float %930, %972
  %985 = fadd fast float %931, %973
  %986 = fadd fast float %932, %974
  %987 = fadd fast float %933, %975
  %988 = fadd fast float %934, %976
  %989 = fadd fast float %935, %977
  %990 = fadd fast float %936, %978
  %991 = fadd fast float %937, %979
  %992 = fadd fast float %938, %980
  %993 = fadd fast float %939, %981
  %994 = fadd fast float %940, %982
  %995 = fadd fast float %941, %983
  %996 = add i32 %419, %15
  %997 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %996, i32 undef)  ; BufferLoad(srv,index,wot)
  %998 = extractvalue %dx.types.ResRet.i32 %997, 0
  %999 = extractvalue %dx.types.ResRet.i32 %997, 1
  %1000 = extractvalue %dx.types.ResRet.i32 %997, 2
  %1001 = extractvalue %dx.types.ResRet.i32 %997, 3
  %1002 = bitcast i32 %998 to float
  %1003 = bitcast i32 %999 to float
  %1004 = bitcast i32 %1000 to float
  %1005 = bitcast i32 %1001 to float
  %1006 = add i32 %996, 16
  %1007 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1006, i32 undef)  ; BufferLoad(srv,index,wot)
  %1008 = extractvalue %dx.types.ResRet.i32 %1007, 0
  %1009 = extractvalue %dx.types.ResRet.i32 %1007, 1
  %1010 = extractvalue %dx.types.ResRet.i32 %1007, 2
  %1011 = extractvalue %dx.types.ResRet.i32 %1007, 3
  %1012 = bitcast i32 %1008 to float
  %1013 = bitcast i32 %1009 to float
  %1014 = bitcast i32 %1010 to float
  %1015 = bitcast i32 %1011 to float
  %1016 = add i32 %996, 32
  %1017 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1016, i32 undef)  ; BufferLoad(srv,index,wot)
  %1018 = extractvalue %dx.types.ResRet.i32 %1017, 0
  %1019 = extractvalue %dx.types.ResRet.i32 %1017, 1
  %1020 = extractvalue %dx.types.ResRet.i32 %1017, 2
  %1021 = extractvalue %dx.types.ResRet.i32 %1017, 3
  %1022 = bitcast i32 %1018 to float
  %1023 = bitcast i32 %1019 to float
  %1024 = bitcast i32 %1020 to float
  %1025 = bitcast i32 %1021 to float
  %1026 = fmul fast float %1002, %265
  %1027 = fmul fast float %1012, %265
  %1028 = fmul fast float %1022, %265
  %1029 = fmul fast float %1003, %265
  %1030 = fmul fast float %1013, %265
  %1031 = fmul fast float %1023, %265
  %1032 = fmul fast float %1004, %265
  %1033 = fmul fast float %1014, %265
  %1034 = fmul fast float %1024, %265
  %1035 = fmul fast float %1005, %265
  %1036 = fmul fast float %1015, %265
  %1037 = fmul fast float %1025, %265
  %1038 = fadd fast float %984, %1026
  %1039 = fadd fast float %985, %1027
  %1040 = fadd fast float %986, %1028
  %1041 = fadd fast float %987, %1029
  %1042 = fadd fast float %988, %1030
  %1043 = fadd fast float %989, %1031
  %1044 = fadd fast float %990, %1032
  %1045 = fadd fast float %991, %1033
  %1046 = fadd fast float %992, %1034
  %1047 = fadd fast float %993, %1035
  %1048 = fadd fast float %994, %1036
  %1049 = fadd fast float %995, %1037
  %1050 = fmul fast float %1038, %843
  %1051 = call float @dx.op.tertiary.f32(i32 46, float %844, float %1041, float %1050)  ; FMad(a,b,c)
  %1052 = call float @dx.op.tertiary.f32(i32 46, float %845, float %1044, float %1051)  ; FMad(a,b,c)
  %1053 = fadd fast float %1052, %1047
  %1054 = fmul fast float %1039, %843
  %1055 = call float @dx.op.tertiary.f32(i32 46, float %844, float %1042, float %1054)  ; FMad(a,b,c)
  %1056 = call float @dx.op.tertiary.f32(i32 46, float %845, float %1045, float %1055)  ; FMad(a,b,c)
  %1057 = fadd fast float %1056, %1048
  %1058 = fmul fast float %1040, %843
  %1059 = call float @dx.op.tertiary.f32(i32 46, float %844, float %1043, float %1058)  ; FMad(a,b,c)
  %1060 = call float @dx.op.tertiary.f32(i32 46, float %845, float %1046, float %1059)  ; FMad(a,b,c)
  %1061 = fadd fast float %1060, %1049
  br i1 %180, label %1062, label %1137

; <label>:1062                                    ; preds = %842
  br i1 %103, label %1128, label %1063

; <label>:1063                                    ; preds = %1062
  br label %1064

; <label>:1064                                    ; preds = %1064, %1063
  %1065 = phi float [ %1124, %1064 ], [ 0.000000e+00, %1063 ]
  %1066 = phi i32 [ %1125, %1064 ], [ 0, %1063 ]
  %1067 = shl i32 %1066, 2
  %1068 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %1067)  ; CBufferLoadLegacy(handle,regIndex)
  %1069 = extractvalue %dx.types.CBufRet.i32 %1068, 0
  %1070 = extractvalue %dx.types.CBufRet.i32 %1068, 1
  %1071 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1069)  ; LegacyF16ToF32(value)
  %1072 = lshr i32 %1069, 16
  %1073 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1072)  ; LegacyF16ToF32(value)
  %1074 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1070)  ; LegacyF16ToF32(value)
  %1075 = lshr i32 %1070, 16
  %1076 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1075)  ; LegacyF16ToF32(value)
  %1077 = or i32 %1067, 1
  %1078 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %1077)  ; CBufferLoadLegacy(handle,regIndex)
  %1079 = extractvalue %dx.types.CBufRet.f32 %1078, 0
  %1080 = extractvalue %dx.types.CBufRet.f32 %1078, 1
  %1081 = extractvalue %dx.types.CBufRet.f32 %1078, 2
  %1082 = extractvalue %dx.types.CBufRet.f32 %1078, 3
  %1083 = or i32 %1067, 2
  %1084 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %1083)  ; CBufferLoadLegacy(handle,regIndex)
  %1085 = extractvalue %dx.types.CBufRet.f32 %1084, 0
  %1086 = extractvalue %dx.types.CBufRet.f32 %1084, 1
  %1087 = extractvalue %dx.types.CBufRet.f32 %1084, 2
  %1088 = extractvalue %dx.types.CBufRet.f32 %1084, 3
  %1089 = call float @dx.op.dot4.f32(i32 56, float %1071, float %1073, float %1074, float %1076, float %1053, float %1057, float %1061, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1090 = fmul fast float %1089, -1.000000e+01
  %1091 = call float @dx.op.unary.f32(i32 7, float %1090)  ; Saturate(value)
  %1092 = fsub fast float 1.000000e+00, %1091
  %1093 = fsub fast float %1053, %1079
  %1094 = fsub fast float %1057, %1080
  %1095 = fsub fast float %1061, %1081
  %1096 = fsub fast float %1085, %1079
  %1097 = fsub fast float %1086, %1080
  %1098 = fsub fast float %1087, %1081
  %1099 = call float @dx.op.dot3.f32(i32 55, float %1093, float %1094, float %1095, float %1096, float %1097, float %1098)  ; Dot3(ax,ay,az,bx,by,bz)
  %1100 = call float @dx.op.dot3.f32(i32 55, float %1096, float %1097, float %1098, float %1096, float %1097, float %1098)  ; Dot3(ax,ay,az,bx,by,bz)
  %1101 = fdiv fast float %1099, %1100
  %1102 = fmul fast float %1101, %1096
  %1103 = fmul fast float %1101, %1097
  %1104 = fmul fast float %1101, %1098
  %1105 = fsub fast float %1079, %1053
  %1106 = fadd fast float %1105, %1102
  %1107 = fsub fast float %1080, %1057
  %1108 = fadd fast float %1107, %1103
  %1109 = fsub fast float %1081, %1061
  %1110 = fadd fast float %1109, %1104
  %1111 = call float @dx.op.dot3.f32(i32 55, float %1106, float %1108, float %1110, float %1106, float %1108, float %1110)  ; Dot3(ax,ay,az,bx,by,bz)
  %1112 = call float @dx.op.unary.f32(i32 24, float %1111)  ; Sqrt(value)
  %1113 = fmul fast float %1082, 5.000000e-01
  %1114 = fsub fast float %1112, %1113
  %1115 = fdiv fast float %1114, %1113
  %1116 = call float @dx.op.unary.f32(i32 7, float %1115)  ; Saturate(value)
  %1117 = fmul fast float %1116, 2.000000e+00
  %1118 = fsub fast float 3.000000e+00, %1117
  %1119 = fmul fast float %1116, %1116
  %1120 = fmul fast float %1119, %1118
  %1121 = fsub fast float 1.000000e+00, %1120
  %1122 = fmul fast float %1092, %1088
  %1123 = fmul fast float %1122, %1121
  %1124 = call float @dx.op.binary.f32(i32 35, float %1123, float %1065)  ; FMax(a,b)
  %1125 = add nuw i32 %1066, 1
  %1126 = icmp eq i32 %1125, %102
  br i1 %1126, label %1127, label %1064

; <label>:1127                                    ; preds = %1064
  br label %1128

; <label>:1128                                    ; preds = %1127, %1062
  %1129 = phi float [ 0.000000e+00, %1062 ], [ %1124, %1127 ]
  %1130 = call float @dx.op.unary.f32(i32 7, float %1129)  ; Saturate(value)
  %1131 = fmul fast float %1130, %10
  %1132 = fmul fast float %1130, %11
  %1133 = fmul fast float %1130, %12
  %1134 = fadd fast float %1131, %1053
  %1135 = fadd fast float %1132, %1057
  %1136 = fadd fast float %1133, %1061
  br label %1137

; <label>:1137                                    ; preds = %1128, %842
  %1138 = phi float [ %1134, %1128 ], [ %1053, %842 ]
  %1139 = phi float [ %1135, %1128 ], [ %1057, %842 ]
  %1140 = phi float [ %1136, %1128 ], [ %1061, %842 ]
  %1141 = xor i1 %565, true
  %1142 = or i1 %180, %1141
  %1143 = or i1 %1142, %103
  br i1 %1143, label %1274, label %1144

; <label>:1144                                    ; preds = %1137
  br label %1145

; <label>:1145                                    ; preds = %1270, %1144
  %1146 = phi i32 [ %1271, %1270 ], [ 0, %1144 ]
  %1147 = shl i32 %1146, 2
  %1148 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %1147)  ; CBufferLoadLegacy(handle,regIndex)
  %1149 = extractvalue %dx.types.CBufRet.i32 %1148, 0
  %1150 = extractvalue %dx.types.CBufRet.i32 %1148, 1
  %1151 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1149)  ; LegacyF16ToF32(value)
  %1152 = lshr i32 %1149, 16
  %1153 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1152)  ; LegacyF16ToF32(value)
  %1154 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1150)  ; LegacyF16ToF32(value)
  %1155 = lshr i32 %1150, 16
  %1156 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1155)  ; LegacyF16ToF32(value)
  %1157 = extractvalue %dx.types.CBufRet.i32 %1148, 2
  %1158 = extractvalue %dx.types.CBufRet.i32 %1148, 3
  %1159 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1157)  ; LegacyF16ToF32(value)
  %1160 = lshr i32 %1157, 16
  %1161 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1160)  ; LegacyF16ToF32(value)
  %1162 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1158)  ; LegacyF16ToF32(value)
  %1163 = lshr i32 %1158, 16
  %1164 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1163)  ; LegacyF16ToF32(value)
  %1165 = or i32 %1147, 1
  %1166 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %1165)  ; CBufferLoadLegacy(handle,regIndex)
  %1167 = extractvalue %dx.types.CBufRet.f32 %1166, 0
  %1168 = extractvalue %dx.types.CBufRet.f32 %1166, 1
  %1169 = extractvalue %dx.types.CBufRet.f32 %1166, 2
  %1170 = extractvalue %dx.types.CBufRet.f32 %1166, 3
  %1171 = or i32 %1147, 2
  %1172 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %1171)  ; CBufferLoadLegacy(handle,regIndex)
  %1173 = extractvalue %dx.types.CBufRet.f32 %1172, 0
  %1174 = extractvalue %dx.types.CBufRet.f32 %1172, 1
  %1175 = extractvalue %dx.types.CBufRet.f32 %1172, 2
  %1176 = or i32 %1147, 3
  %1177 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %1176)  ; CBufferLoadLegacy(handle,regIndex)
  %1178 = extractvalue %dx.types.CBufRet.i32 %1177, 3
  %1179 = icmp eq i32 %1178, 0
  %1180 = fsub fast float %843, %1167
  %1181 = fsub fast float %844, %1168
  %1182 = fsub fast float %845, %1169
  %1183 = fsub fast float %1173, %1167
  %1184 = fsub fast float %1174, %1168
  %1185 = fsub fast float %1175, %1169
  %1186 = call float @dx.op.dot3.f32(i32 55, float %1180, float %1181, float %1182, float %1183, float %1184, float %1185)  ; Dot3(ax,ay,az,bx,by,bz)
  %1187 = call float @dx.op.dot3.f32(i32 55, float %1183, float %1184, float %1185, float %1183, float %1184, float %1185)  ; Dot3(ax,ay,az,bx,by,bz)
  %1188 = fdiv fast float %1186, %1187
  %1189 = fmul fast float %1188, %1183
  %1190 = fmul fast float %1188, %1184
  %1191 = fmul fast float %1188, %1185
  %1192 = fsub fast float %1167, %843
  %1193 = fadd fast float %1192, %1189
  %1194 = fsub fast float %1168, %844
  %1195 = fadd fast float %1194, %1190
  %1196 = fsub fast float %1169, %845
  %1197 = fadd fast float %1196, %1191
  %1198 = call float @dx.op.dot3.f32(i32 55, float %1193, float %1195, float %1197, float %1193, float %1195, float %1197)  ; Dot3(ax,ay,az,bx,by,bz)
  %1199 = fmul fast float %1170, %1170
  %1200 = fcmp fast ole float %1198, %1199
  %1201 = call float @dx.op.dot4.f32(i32 56, float %1159, float %1161, float %1162, float %1164, float %843, float %844, float %845, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  br i1 %1179, label %1202, label %1232, !dx.controlflow.hints !57

; <label>:1202                                    ; preds = %1145
  %1203 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %1176)  ; CBufferLoadLegacy(handle,regIndex)
  %1204 = call float @dx.op.dot4.f32(i32 56, float %1151, float %1153, float %1154, float %1156, float %843, float %844, float %845, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1205 = fcmp fast ogt float %1204, 0.000000e+00
  %1206 = and i1 %1200, %1205
  %1207 = fcmp fast ogt float %1201, 0.000000e+00
  %1208 = and i1 %1206, %1207
  br i1 %1208, label %1209, label %1270

; <label>:1209                                    ; preds = %1202
  %1210 = extractvalue %dx.types.CBufRet.f32 %1203, 0
  %1211 = extractvalue %dx.types.CBufRet.f32 %1203, 1
  %1212 = extractvalue %dx.types.CBufRet.f32 %1203, 2
  %1213 = call float @dx.op.dot4.f32(i32 56, float %843, float %844, float %845, float 1.000000e+00, float %1151, float %1153, float %1154, float %1156)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1214 = fmul fast float %1151, %1213
  %1215 = fsub fast float -0.000000e+00, %1214
  %1216 = fmul fast float %1153, %1213
  %1217 = fsub fast float -0.000000e+00, %1216
  %1218 = fmul fast float %1154, %1213
  %1219 = fsub fast float -0.000000e+00, %1218
  %1220 = call float @dx.op.dot3.f32(i32 55, float %1215, float %1217, float %1219, float %1215, float %1217, float %1219)  ; Dot3(ax,ay,az,bx,by,bz)
  %1221 = fmul fast float %1220, 0x408F3FFFE0000000
  %1222 = call float @dx.op.unary.f32(i32 7, float %1221)  ; Saturate(value)
  %1223 = fsub fast float %1210, %1138
  %1224 = fsub fast float %1211, %1139
  %1225 = fsub fast float %1212, %1140
  %1226 = fmul fast float %1222, %1223
  %1227 = fmul fast float %1222, %1224
  %1228 = fmul fast float %1222, %1225
  %1229 = fadd fast float %1226, %1138
  %1230 = fadd fast float %1227, %1139
  %1231 = fadd fast float %1228, %1140
  br label %1274

; <label>:1232                                    ; preds = %1145
  %1233 = fcmp fast oge float %1201, 0.000000e+00
  %1234 = and i1 %1200, %1233
  br i1 %1234, label %1235, label %1270

; <label>:1235                                    ; preds = %1232
  %1236 = fadd fast float %1189, %1167
  %1237 = fadd fast float %1190, %1168
  %1238 = fadd fast float %1191, %1169
  %1239 = call float @dx.op.dot4.f32(i32 56, float %843, float %844, float %845, float 1.000000e+00, float %1151, float %1153, float %1154, float %1156)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1240 = fmul fast float %1239, %1151
  %1241 = fmul fast float %1239, %1153
  %1242 = fmul fast float %1239, %1154
  %1243 = fsub fast float %843, %1240
  %1244 = fsub fast float %844, %1241
  %1245 = fsub fast float %845, %1242
  %1246 = fsub fast float %1243, %1236
  %1247 = fsub fast float %1244, %1237
  %1248 = fsub fast float %1245, %1238
  %1249 = call float @dx.op.dot3.f32(i32 55, float %1246, float %1247, float %1248, float %1246, float %1247, float %1248)  ; Dot3(ax,ay,az,bx,by,bz)
  %1250 = call float @dx.op.unary.f32(i32 25, float %1249)  ; Rsqrt(value)
  %1251 = fmul fast float %1250, %1170
  %1252 = fmul fast float %1251, %1246
  %1253 = fmul fast float %1251, %1247
  %1254 = fmul fast float %1251, %1248
  %1255 = fadd fast float %1252, %1236
  %1256 = fadd fast float %1253, %1237
  %1257 = fadd fast float %1254, %1238
  %1258 = fmul fast float %1255, %1038
  %1259 = call float @dx.op.tertiary.f32(i32 46, float %1256, float %1041, float %1258)  ; FMad(a,b,c)
  %1260 = call float @dx.op.tertiary.f32(i32 46, float %1257, float %1044, float %1259)  ; FMad(a,b,c)
  %1261 = fadd fast float %1260, %1047
  %1262 = fmul fast float %1255, %1039
  %1263 = call float @dx.op.tertiary.f32(i32 46, float %1256, float %1042, float %1262)  ; FMad(a,b,c)
  %1264 = call float @dx.op.tertiary.f32(i32 46, float %1257, float %1045, float %1263)  ; FMad(a,b,c)
  %1265 = fadd fast float %1264, %1048
  %1266 = fmul fast float %1255, %1040
  %1267 = call float @dx.op.tertiary.f32(i32 46, float %1256, float %1043, float %1266)  ; FMad(a,b,c)
  %1268 = call float @dx.op.tertiary.f32(i32 46, float %1257, float %1046, float %1267)  ; FMad(a,b,c)
  %1269 = fadd fast float %1268, %1049
  br label %1274

; <label>:1270                                    ; preds = %1232, %1202
  %1271 = add nuw i32 %1146, 1
  %1272 = icmp ult i32 %1271, %102
  br i1 %1272, label %1145, label %1273, !llvm.loop !58

; <label>:1273                                    ; preds = %1270
  br label %1274

; <label>:1274                                    ; preds = %1273, %1235, %1209, %1137
  %1275 = phi float [ %1138, %1137 ], [ %1229, %1209 ], [ %1261, %1235 ], [ %1138, %1273 ]
  %1276 = phi float [ %1139, %1137 ], [ %1230, %1209 ], [ %1265, %1235 ], [ %1139, %1273 ]
  %1277 = phi float [ %1140, %1137 ], [ %1231, %1209 ], [ %1269, %1235 ], [ %1140, %1273 ]
  %1278 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1279 = extractvalue %dx.types.CBufRet.f32 %1278, 0
  %1280 = extractvalue %dx.types.CBufRet.f32 %1278, 1
  %1281 = extractvalue %dx.types.CBufRet.f32 %1278, 2
  %1282 = extractvalue %dx.types.CBufRet.f32 %1278, 3
  %1283 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1284 = extractvalue %dx.types.CBufRet.f32 %1283, 0
  %1285 = extractvalue %dx.types.CBufRet.f32 %1283, 1
  %1286 = extractvalue %dx.types.CBufRet.f32 %1283, 2
  %1287 = extractvalue %dx.types.CBufRet.f32 %1283, 3
  %1288 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %1289 = extractvalue %dx.types.CBufRet.f32 %1288, 0
  %1290 = extractvalue %dx.types.CBufRet.f32 %1288, 1
  %1291 = extractvalue %dx.types.CBufRet.f32 %1288, 2
  %1292 = extractvalue %dx.types.CBufRet.f32 %1288, 3
  %1293 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %7, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %1294 = extractvalue %dx.types.CBufRet.i32 %1293, 0
  %1295 = extractvalue %dx.types.CBufRet.i32 %1293, 1
  %1296 = extractvalue %dx.types.CBufRet.i32 %1293, 2
  %1297 = bitcast float %1282 to i32
  %1298 = bitcast float %1287 to i32
  %1299 = bitcast float %1292 to i32
  %1300 = sub i32 %1297, %1294
  %1301 = sub i32 %1298, %1295
  %1302 = sub i32 %1299, %1296
  %1303 = sitofp i32 %1300 to float
  %1304 = sitofp i32 %1301 to float
  %1305 = sitofp i32 %1302 to float
  %1306 = fmul fast float %1303, 0x3EE0000000000000
  %1307 = fmul fast float %1304, 0x3EE0000000000000
  %1308 = fmul fast float %1305, 0x3EE0000000000000
  %1309 = fmul fast float %1279, %1275
  %1310 = call float @dx.op.tertiary.f32(i32 46, float %1280, float %1276, float %1309)  ; FMad(a,b,c)
  %1311 = call float @dx.op.tertiary.f32(i32 46, float %1281, float %1277, float %1310)  ; FMad(a,b,c)
  %1312 = fadd fast float %1306, %1311
  %1313 = fmul fast float %1284, %1275
  %1314 = call float @dx.op.tertiary.f32(i32 46, float %1285, float %1276, float %1313)  ; FMad(a,b,c)
  %1315 = call float @dx.op.tertiary.f32(i32 46, float %1286, float %1277, float %1314)  ; FMad(a,b,c)
  %1316 = fadd fast float %1307, %1315
  %1317 = fmul fast float %1289, %1275
  %1318 = call float @dx.op.tertiary.f32(i32 46, float %1290, float %1276, float %1317)  ; FMad(a,b,c)
  %1319 = call float @dx.op.tertiary.f32(i32 46, float %1291, float %1277, float %1318)  ; FMad(a,b,c)
  %1320 = fadd fast float %1319, %1308
  %1321 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %1322 = extractvalue %dx.types.CBufRet.f32 %1321, 0
  %1323 = extractvalue %dx.types.CBufRet.f32 %1321, 1
  %1324 = extractvalue %dx.types.CBufRet.f32 %1321, 2
  %1325 = extractvalue %dx.types.CBufRet.f32 %1321, 3
  %1326 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %1327 = extractvalue %dx.types.CBufRet.f32 %1326, 0
  %1328 = extractvalue %dx.types.CBufRet.f32 %1326, 1
  %1329 = extractvalue %dx.types.CBufRet.f32 %1326, 2
  %1330 = extractvalue %dx.types.CBufRet.f32 %1326, 3
  %1331 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 18)  ; CBufferLoadLegacy(handle,regIndex)
  %1332 = extractvalue %dx.types.CBufRet.f32 %1331, 0
  %1333 = extractvalue %dx.types.CBufRet.f32 %1331, 1
  %1334 = extractvalue %dx.types.CBufRet.f32 %1331, 2
  %1335 = extractvalue %dx.types.CBufRet.f32 %1331, 3
  %1336 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %1337 = extractvalue %dx.types.CBufRet.f32 %1336, 0
  %1338 = extractvalue %dx.types.CBufRet.f32 %1336, 1
  %1339 = extractvalue %dx.types.CBufRet.f32 %1336, 2
  %1340 = extractvalue %dx.types.CBufRet.f32 %1336, 3
  %1341 = fmul fast float %1322, %1312
  %1342 = call float @dx.op.tertiary.f32(i32 46, float %1316, float %1323, float %1341)  ; FMad(a,b,c)
  %1343 = call float @dx.op.tertiary.f32(i32 46, float %1320, float %1324, float %1342)  ; FMad(a,b,c)
  %1344 = fadd fast float %1343, %1325
  %1345 = fmul fast float %1327, %1312
  %1346 = call float @dx.op.tertiary.f32(i32 46, float %1316, float %1328, float %1345)  ; FMad(a,b,c)
  %1347 = call float @dx.op.tertiary.f32(i32 46, float %1320, float %1329, float %1346)  ; FMad(a,b,c)
  %1348 = fadd fast float %1347, %1330
  %1349 = fmul fast float %1332, %1312
  %1350 = call float @dx.op.tertiary.f32(i32 46, float %1316, float %1333, float %1349)  ; FMad(a,b,c)
  %1351 = call float @dx.op.tertiary.f32(i32 46, float %1320, float %1334, float %1350)  ; FMad(a,b,c)
  %1352 = fadd fast float %1351, %1335
  %1353 = fmul fast float %1337, %1312
  %1354 = call float @dx.op.tertiary.f32(i32 46, float %1316, float %1338, float %1353)  ; FMad(a,b,c)
  %1355 = call float @dx.op.tertiary.f32(i32 46, float %1320, float %1339, float %1354)  ; FMad(a,b,c)
  %1356 = fadd fast float %1355, %1340
  %1357 = fmul fast float %462, %40
  %1358 = call float @dx.op.tertiary.f32(i32 46, float %463, float %41, float %1357)  ; FMad(a,b,c)
  %1359 = call float @dx.op.tertiary.f32(i32 46, float %464, float %42, float %1358)  ; FMad(a,b,c)
  %1360 = fmul fast float %462, %44
  %1361 = call float @dx.op.tertiary.f32(i32 46, float %463, float %45, float %1360)  ; FMad(a,b,c)
  %1362 = call float @dx.op.tertiary.f32(i32 46, float %464, float %46, float %1361)  ; FMad(a,b,c)
  %1363 = fmul fast float %462, %48
  %1364 = call float @dx.op.tertiary.f32(i32 46, float %463, float %49, float %1363)  ; FMad(a,b,c)
  %1365 = call float @dx.op.tertiary.f32(i32 46, float %464, float %50, float %1364)  ; FMad(a,b,c)
  %1366 = fmul fast float %465, %40
  %1367 = call float @dx.op.tertiary.f32(i32 46, float %466, float %41, float %1366)  ; FMad(a,b,c)
  %1368 = call float @dx.op.tertiary.f32(i32 46, float %467, float %42, float %1367)  ; FMad(a,b,c)
  %1369 = fmul fast float %465, %44
  %1370 = call float @dx.op.tertiary.f32(i32 46, float %466, float %45, float %1369)  ; FMad(a,b,c)
  %1371 = call float @dx.op.tertiary.f32(i32 46, float %467, float %46, float %1370)  ; FMad(a,b,c)
  %1372 = fmul fast float %465, %48
  %1373 = call float @dx.op.tertiary.f32(i32 46, float %466, float %49, float %1372)  ; FMad(a,b,c)
  %1374 = call float @dx.op.tertiary.f32(i32 46, float %467, float %50, float %1373)  ; FMad(a,b,c)
  %1375 = fmul fast float %468, %40
  %1376 = call float @dx.op.tertiary.f32(i32 46, float %469, float %41, float %1375)  ; FMad(a,b,c)
  %1377 = call float @dx.op.tertiary.f32(i32 46, float %470, float %42, float %1376)  ; FMad(a,b,c)
  %1378 = fmul fast float %468, %44
  %1379 = call float @dx.op.tertiary.f32(i32 46, float %469, float %45, float %1378)  ; FMad(a,b,c)
  %1380 = call float @dx.op.tertiary.f32(i32 46, float %470, float %46, float %1379)  ; FMad(a,b,c)
  %1381 = fmul fast float %468, %48
  %1382 = call float @dx.op.tertiary.f32(i32 46, float %469, float %49, float %1381)  ; FMad(a,b,c)
  %1383 = call float @dx.op.tertiary.f32(i32 46, float %470, float %50, float %1382)  ; FMad(a,b,c)
  %1384 = fmul fast float %24, 2.000000e+00
  %1385 = fmul fast float %25, 2.000000e+00
  %1386 = fmul fast float %26, 2.000000e+00
  %1387 = fadd fast float %1384, -1.000000e+00
  %1388 = fadd fast float %1385, -1.000000e+00
  %1389 = fadd fast float %1386, -1.000000e+00
  %1390 = fmul fast float %20, 2.000000e+00
  %1391 = fmul fast float %21, 2.000000e+00
  %1392 = fmul fast float %22, 2.000000e+00
  %1393 = fadd fast float %1390, -1.000000e+00
  %1394 = fadd fast float %1391, -1.000000e+00
  %1395 = fadd fast float %1392, -1.000000e+00
  %1396 = fmul fast float %23, 2.000000e+00
  %1397 = fadd fast float %1396, -1.000000e+00
  %1398 = fmul fast float %1388, %1395
  %1399 = fmul fast float %1389, %1394
  %1400 = fsub fast float %1398, %1399
  %1401 = fmul fast float %1389, %1393
  %1402 = fmul fast float %1387, %1395
  %1403 = fsub fast float %1401, %1402
  %1404 = fmul fast float %1387, %1394
  %1405 = fmul fast float %1388, %1393
  %1406 = fsub fast float %1404, %1405
  %1407 = fmul fast float %1400, %1397
  %1408 = fmul fast float %1403, %1397
  %1409 = fmul fast float %1406, %1397
  %1410 = fmul fast float %1359, %1393
  %1411 = call float @dx.op.tertiary.f32(i32 46, float %1394, float %1368, float %1410)  ; FMad(a,b,c)
  %1412 = call float @dx.op.tertiary.f32(i32 46, float %1395, float %1377, float %1411)  ; FMad(a,b,c)
  %1413 = fmul fast float %1362, %1393
  %1414 = call float @dx.op.tertiary.f32(i32 46, float %1394, float %1371, float %1413)  ; FMad(a,b,c)
  %1415 = call float @dx.op.tertiary.f32(i32 46, float %1395, float %1380, float %1414)  ; FMad(a,b,c)
  %1416 = fmul fast float %1365, %1393
  %1417 = call float @dx.op.tertiary.f32(i32 46, float %1394, float %1374, float %1416)  ; FMad(a,b,c)
  %1418 = call float @dx.op.tertiary.f32(i32 46, float %1395, float %1383, float %1417)  ; FMad(a,b,c)
  %1419 = fmul fast float %1359, %1407
  %1420 = call float @dx.op.tertiary.f32(i32 46, float %1408, float %1368, float %1419)  ; FMad(a,b,c)
  %1421 = call float @dx.op.tertiary.f32(i32 46, float %1409, float %1377, float %1420)  ; FMad(a,b,c)
  %1422 = fmul fast float %1362, %1407
  %1423 = call float @dx.op.tertiary.f32(i32 46, float %1408, float %1371, float %1422)  ; FMad(a,b,c)
  %1424 = call float @dx.op.tertiary.f32(i32 46, float %1409, float %1380, float %1423)  ; FMad(a,b,c)
  %1425 = fmul fast float %1365, %1407
  %1426 = call float @dx.op.tertiary.f32(i32 46, float %1408, float %1374, float %1425)  ; FMad(a,b,c)
  %1427 = call float @dx.op.tertiary.f32(i32 46, float %1409, float %1383, float %1426)  ; FMad(a,b,c)
  %1428 = fmul fast float %1359, %1387
  %1429 = call float @dx.op.tertiary.f32(i32 46, float %1388, float %1368, float %1428)  ; FMad(a,b,c)
  %1430 = call float @dx.op.tertiary.f32(i32 46, float %1389, float %1377, float %1429)  ; FMad(a,b,c)
  %1431 = fmul fast float %1362, %1387
  %1432 = call float @dx.op.tertiary.f32(i32 46, float %1388, float %1371, float %1431)  ; FMad(a,b,c)
  %1433 = call float @dx.op.tertiary.f32(i32 46, float %1389, float %1380, float %1432)  ; FMad(a,b,c)
  %1434 = fmul fast float %1365, %1387
  %1435 = call float @dx.op.tertiary.f32(i32 46, float %1388, float %1374, float %1434)  ; FMad(a,b,c)
  %1436 = call float @dx.op.tertiary.f32(i32 46, float %1389, float %1383, float %1435)  ; FMad(a,b,c)
  %1437 = call float @dx.op.dot3.f32(i32 55, float %1430, float %1433, float %1436, float %1430, float %1433, float %1436)  ; Dot3(ax,ay,az,bx,by,bz)
  %1438 = call float @dx.op.unary.f32(i32 25, float %1437)  ; Rsqrt(value)
  %1439 = fmul fast float %1438, %1430
  %1440 = fmul fast float %1438, %1433
  %1441 = fmul fast float %1438, %1436
  %1442 = call float @dx.op.dot3.f32(i32 55, float %1421, float %1424, float %1427, float %1421, float %1424, float %1427)  ; Dot3(ax,ay,az,bx,by,bz)
  %1443 = call float @dx.op.unary.f32(i32 25, float %1442)  ; Rsqrt(value)
  %1444 = fmul fast float %1443, %1421
  %1445 = fmul fast float %1443, %1424
  %1446 = fmul fast float %1443, %1427
  %1447 = call float @dx.op.dot3.f32(i32 55, float %1412, float %1415, float %1418, float %1412, float %1415, float %1418)  ; Dot3(ax,ay,az,bx,by,bz)
  %1448 = call float @dx.op.unary.f32(i32 25, float %1447)  ; Rsqrt(value)
  %1449 = fmul fast float %1448, %1412
  %1450 = fmul fast float %1448, %1415
  %1451 = fmul fast float %1448, %1418
  %1452 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %1453 = extractvalue %dx.types.CBufRet.f32 %1452, 1
  %1454 = fptosi float %1453 to i32
  %1455 = icmp sgt i32 %1454, 0
  br i1 %1455, label %1456, label %1543

; <label>:1456                                    ; preds = %1274
  br label %1457

; <label>:1457                                    ; preds = %1528, %1456
  %1458 = phi float [ %1536, %1528 ], [ 0.000000e+00, %1456 ]
  %1459 = phi float [ %1539, %1528 ], [ 0.000000e+00, %1456 ]
  %1460 = phi i32 [ %1540, %1528 ], [ 0, %1456 ]
  %1461 = mul i32 %1460, 9
  %1462 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %6, i32 %1461)  ; CBufferLoadLegacy(handle,regIndex)
  %1463 = extractvalue %dx.types.CBufRet.i32 %1462, 0
  %1464 = icmp eq i32 %1463, 0
  br i1 %1464, label %1528, label %1465

; <label>:1465                                    ; preds = %1457
  br label %1466

; <label>:1466                                    ; preds = %1519, %1465
  %1467 = phi float [ %1522, %1519 ], [ 0.000000e+00, %1465 ]
  %1468 = phi i32 [ %1523, %1519 ], [ 0, %1465 ]
  %1469 = add i32 %1461, 5
  %1470 = add i32 %1469, %1468
  %1471 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 %1470)  ; CBufferLoadLegacy(handle,regIndex)
  %1472 = extractvalue %dx.types.CBufRet.f32 %1471, 0
  %1473 = extractvalue %dx.types.CBufRet.f32 %1471, 1
  %1474 = extractvalue %dx.types.CBufRet.f32 %1471, 2
  %1475 = extractvalue %dx.types.CBufRet.f32 %1471, 3
  %1476 = add i32 %1461, 1
  %1477 = add i32 %1476, %1468
  %1478 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 %1477)  ; CBufferLoadLegacy(handle,regIndex)
  %1479 = extractvalue %dx.types.CBufRet.f32 %1478, 0
  %1480 = extractvalue %dx.types.CBufRet.f32 %1478, 1
  %1481 = extractvalue %dx.types.CBufRet.f32 %1478, 2
  %1482 = extractvalue %dx.types.CBufRet.f32 %1478, 3
  %1483 = fcmp fast olt float %27, %1472
  %1484 = fcmp fast ogt float %27, %1474
  %1485 = or i1 %1483, %1484
  br i1 %1485, label %1500, label %1486

; <label>:1486                                    ; preds = %1466
  %1487 = fcmp fast oge float %27, %1479
  %1488 = fcmp fast ole float %27, %1481
  %1489 = and i1 %1487, %1488
  br i1 %1489, label %1500, label %1490

; <label>:1490                                    ; preds = %1486
  %1491 = fcmp fast olt float %27, %1479
  br i1 %1491, label %1492, label %1496

; <label>:1492                                    ; preds = %1490
  %1493 = fsub fast float %27, %1472
  %1494 = fsub fast float %1479, %1472
  %1495 = fdiv fast float %1493, %1494
  br label %1500

; <label>:1496                                    ; preds = %1490
  %1497 = fsub fast float %1474, %27
  %1498 = fsub fast float %1474, %1481
  %1499 = fdiv fast float %1497, %1498
  br label %1500

; <label>:1500                                    ; preds = %1496, %1492, %1486, %1466
  %1501 = phi float [ 0.000000e+00, %1466 ], [ %1495, %1492 ], [ %1499, %1496 ], [ 1.000000e+00, %1486 ]
  %1502 = fcmp fast olt float %28, %1473
  %1503 = fcmp fast ogt float %28, %1475
  %1504 = or i1 %1502, %1503
  br i1 %1504, label %1519, label %1505

; <label>:1505                                    ; preds = %1500
  %1506 = fcmp fast oge float %28, %1480
  %1507 = fcmp fast ole float %28, %1482
  %1508 = and i1 %1506, %1507
  br i1 %1508, label %1519, label %1509

; <label>:1509                                    ; preds = %1505
  %1510 = fcmp fast olt float %28, %1480
  br i1 %1510, label %1511, label %1515

; <label>:1511                                    ; preds = %1509
  %1512 = fsub fast float %28, %1473
  %1513 = fsub fast float %1480, %1473
  %1514 = fdiv fast float %1512, %1513
  br label %1519

; <label>:1515                                    ; preds = %1509
  %1516 = fsub fast float %1475, %28
  %1517 = fsub fast float %1475, %1482
  %1518 = fdiv fast float %1516, %1517
  br label %1519

; <label>:1519                                    ; preds = %1515, %1511, %1505, %1500
  %1520 = phi float [ 0.000000e+00, %1500 ], [ %1514, %1511 ], [ %1518, %1515 ], [ 1.000000e+00, %1505 ]
  %1521 = fmul fast float %1520, %1501
  %1522 = call float @dx.op.binary.f32(i32 35, float %1467, float %1521)  ; FMax(a,b)
  %1523 = add i32 %1468, 1
  %1524 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %6, i32 %1461)  ; CBufferLoadLegacy(handle,regIndex)
  %1525 = extractvalue %dx.types.CBufRet.i32 %1524, 0
  %1526 = icmp ult i32 %1523, %1525
  br i1 %1526, label %1466, label %1527

; <label>:1527                                    ; preds = %1519
  br label %1528

; <label>:1528                                    ; preds = %1527, %1457
  %1529 = phi float [ 0.000000e+00, %1457 ], [ %1522, %1527 ]
  %1530 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 %1460)  ; CBufferLoadLegacy(handle,regIndex)
  %1531 = extractvalue %dx.types.CBufRet.f32 %1530, 0
  %1532 = fmul fast float %1531, %1529
  %1533 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 %1461)  ; CBufferLoadLegacy(handle,regIndex)
  %1534 = extractvalue %dx.types.CBufRet.f32 %1533, 1
  %1535 = fmul fast float %1532, %1534
  %1536 = fadd fast float %1535, %1458
  %1537 = extractvalue %dx.types.CBufRet.f32 %1533, 2
  %1538 = fmul fast float %1532, %1537
  %1539 = fadd fast float %1538, %1459
  %1540 = add nuw nsw i32 %1460, 1
  %1541 = icmp eq i32 %1540, %1454
  br i1 %1541, label %1542, label %1457

; <label>:1542                                    ; preds = %1528
  br label %1543

; <label>:1543                                    ; preds = %1542, %1274
  %1544 = phi float [ 0.000000e+00, %1274 ], [ %1536, %1542 ]
  %1545 = phi float [ 0.000000e+00, %1274 ], [ %1539, %1542 ]
  %1546 = call float @dx.op.unary.f32(i32 7, float %1544)  ; Saturate(value)
  %1547 = call float @dx.op.unary.f32(i32 7, float %1545)  ; Saturate(value)
  %1548 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %1549 = extractvalue %dx.types.CBufRet.f32 %1548, 0
  %1550 = extractvalue %dx.types.CBufRet.f32 %1548, 1
  %1551 = fmul fast float %1549, %766
  %1552 = fmul fast float %1550, %766
  %1553 = fsub fast float %754, %1551
  %1554 = fsub fast float %758, %1552
  %1555 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %1556 = extractvalue %dx.types.CBufRet.f32 %1555, 0
  %1557 = extractvalue %dx.types.CBufRet.f32 %1555, 1
  %1558 = extractvalue %dx.types.CBufRet.f32 %1555, 2
  %1559 = extractvalue %dx.types.CBufRet.f32 %1555, 3
  %1560 = call float @dx.op.dot4.f32(i32 56, float %1556, float %1557, float %1558, float %1559, float %728, float %729, float %730, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %754)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %758)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %762)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %766)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %1439)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %1440)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %1441)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %1444)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %1445)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %1446)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %1449)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float %1450)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %1451)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %27)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %28)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %728)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %729)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float %730)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float %16)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float %17)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 0, float %18)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 1, float %19)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 2, float %723)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 3, float %1546)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 0, float %1547)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 1, float %1553)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 2, float %1554)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 3, float %762)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 0, float %766)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 1, float %1344)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 2, float %1348)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 3, float %1352)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 8, i32 0, i8 0, float %1356)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 8, i32 0, i8 1, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 9, i32 0, i8 0, float %1560)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!16}
!dx.entryPoints = !{!17}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{!5, null, !9, null}
!5 = !{!6, !7}
!6 = !{i32 0, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 10, i32 1, i32 11, i32 0, null}
!7 = !{i32 1, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 77, i32 1, i32 2, i32 0, !8}
!8 = !{i32 0, i32 9}
!9 = !{!10, !11, !12, !13, !14, !15}
!10 = !{i32 0, %MaterialModifiersConsts* undef, !"", i32 0, i32 7, i32 1, i32 496, null}
!11 = !{i32 1, %hostlayout.CameraShaderConsts* undef, !"", i32 0, i32 1, i32 1, i32 848, null}
!12 = !{i32 2, %TextureRegionsCB* undef, !"", i32 0, i32 9, i32 1, i32 5760, null}
!13 = !{i32 3, %FloatTracksDataCB* undef, !"", i32 0, i32 10, i32 1, i32 640, null}
!14 = !{i32 4, %hostlayout.FrequentVertexConsts* undef, !"", i32 0, i32 5, i32 1, i32 112, null}
!15 = !{i32 5, %CullObjectsCB* undef, !"", i32 0, i32 8, i32 1, i32 512, null}
!16 = !{[108 x i32] [i32 53, i32 37, i32 -29130737, i32 17, i32 -29130737, i32 17, i32 -29130737, i32 17, i32 0, i32 0, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 25174016, i32 0, i32 25182208, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1008, i32 0, i32 1008, i32 0, i32 1008, i32 0, i32 0, i32 0, i32 8064, i32 0, i32 8064, i32 0, i32 8064, i32 0, i32 896, i32 0, i32 262144, i32 0, i32 524288, i32 0, i32 1048576, i32 0, i32 2097152, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 507551743, i32 16, i32 507551743, i32 16, i32 507551743, i32 16, i32 507543567, i32 16, i32 507584511, i32 16, i32 507584511, i32 16, i32 507584511, i32 16, i32 507576335, i32 16, i32 507650047, i32 16, i32 507650047, i32 16, i32 507650047, i32 16, i32 507641871, i32 16, i32 507748351, i32 16, i32 -29122561, i32 17, i32 -536870912, i32 1, i32 0, i32 0, i32 -29130737, i32 17, i32 -29130737, i32 17, i32 -29130737, i32 17, i32 0, i32 0, i32 -29130737, i32 17]}
!17 = !{void ()* @vs_main_, !"vs_main_", !18, !4, !56}
!18 = !{!19, !39, null}
!19 = !{!20, !23, !25, !26, !28, !29, !30, !31, !33, !35, !36, !37}
!20 = !{i32 0, !"POSITION", i8 9, i8 0, !21, i8 0, i32 1, i8 3, i32 0, i8 0, !22}
!21 = !{i32 0}
!22 = !{i32 3, i32 7}
!23 = !{i32 1, !"BLENDINDICES", i8 5, i8 0, !21, i8 0, i32 1, i8 4, i32 1, i8 0, !24}
!24 = !{i32 3, i32 15}
!25 = !{i32 2, !"BLENDWEIGHT", i8 9, i8 0, !21, i8 0, i32 1, i8 4, i32 2, i8 0, !24}
!26 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !21, i8 0, i32 1, i8 2, i32 3, i8 0, !27}
!27 = !{i32 3, i32 3}
!28 = !{i32 4, !"NORMAL", i8 9, i8 0, !21, i8 0, i32 1, i8 3, i32 4, i8 0, !22}
!29 = !{i32 5, !"TANGENT", i8 9, i8 0, !21, i8 0, i32 1, i8 4, i32 5, i8 0, !24}
!30 = !{i32 6, !"COLOR", i8 9, i8 0, !21, i8 0, i32 1, i8 4, i32 6, i8 0, !24}
!31 = !{i32 7, !"TEXCOORD", i8 9, i8 0, !32, i8 0, i32 1, i8 2, i32 7, i8 0, null}
!32 = !{i32 1}
!33 = !{i32 8, !"INSTANCE_TRANSFORM", i8 9, i8 0, !34, i8 0, i32 3, i8 4, i32 8, i8 0, !24}
!34 = !{i32 0, i32 1, i32 2}
!35 = !{i32 9, !"INSTANCE_SKINNING_DATA", i8 5, i8 0, !21, i8 0, i32 1, i8 4, i32 11, i8 0, !22}
!36 = !{i32 10, !"EXTRA_DATA", i8 9, i8 0, !21, i8 0, i32 1, i8 3, i32 12, i8 0, !22}
!37 = !{i32 11, !"SV_VertexID", i8 5, i8 1, !21, i8 0, i32 1, i8 1, i32 13, i8 0, !38}
!38 = !{i32 3, i32 1}
!39 = !{!40, !41, !42, !43, !45, !47, !49, !51, !53, !55}
!40 = !{i32 0, !"SV_Position", i8 9, i8 3, !21, i8 4, i32 1, i8 4, i32 0, i8 0, !24}
!41 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !21, i8 2, i32 1, i8 4, i32 1, i8 0, !24}
!42 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !32, i8 2, i32 1, i8 4, i32 2, i8 0, !24}
!43 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !44, i8 2, i32 1, i8 4, i32 3, i8 0, !24}
!44 = !{i32 2}
!45 = !{i32 4, !"TEXCOORD", i8 9, i8 0, !46, i8 2, i32 1, i8 4, i32 4, i8 0, !24}
!46 = !{i32 3}
!47 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !48, i8 2, i32 1, i8 4, i32 5, i8 0, !24}
!48 = !{i32 4}
!49 = !{i32 6, !"TEXCOORD", i8 9, i8 0, !50, i8 2, i32 1, i8 4, i32 6, i8 0, !24}
!50 = !{i32 5}
!51 = !{i32 7, !"TEXCOORD", i8 9, i8 0, !52, i8 2, i32 1, i8 4, i32 7, i8 0, !24}
!52 = !{i32 6}
!53 = !{i32 8, !"TEXCOORD", i8 9, i8 0, !54, i8 2, i32 1, i8 2, i32 8, i8 0, !27}
!54 = !{i32 7}
!55 = !{i32 9, !"SV_ClipDistance", i8 9, i8 6, !21, i8 2, i32 1, i8 1, i32 9, i8 0, !38}
!56 = !{i32 0, i64 16}
!57 = distinct !{!57, !"dx.controlflow.hints", i32 1}
!58 = distinct !{!58, !59}
!59 = !{!"llvm.loop.unroll.disable"}
 