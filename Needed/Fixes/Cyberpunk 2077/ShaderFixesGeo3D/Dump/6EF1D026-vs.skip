;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; POSITION                 0   xyz         0     NONE   float   xyz 
; BLENDINDICES             0   xyzw        1     NONE    uint   xyzw
; BLENDWEIGHT              0   xyzw        2     NONE   float   xyzw
; BLENDINDICES             1   xyzw        3     NONE    uint   xyzw
; BLENDWEIGHT              1   xyzw        4     NONE   float   xyzw
; TEXCOORD                 0   xy          5     NONE   float   xy  
; NORMAL                   0   xyz         6     NONE   float   xyz 
; TANGENT                  0   xyzw        7     NONE   float   xyzw
; COLOR                    0   xyzw        8     NONE   float   xyzw
; TEXCOORD                 1   xy          9     NONE   float       
; INSTANCE_TRANSFORM       0   xyzw       10     NONE   float   xyzw
; INSTANCE_TRANSFORM       1   xyzw       11     NONE   float   xyzw
; INSTANCE_TRANSFORM       2   xyzw       12     NONE   float   xyzw
; INSTANCE_SKINNING_DATA     0   xyzw       13     NONE    uint   xy  
; SV_VertexID              0   x          14   VERTID    uint       
; LIGHT_BLOCKER_INTENSITY     0   x          15     NONE   float   x   
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; TEXCOORD                 0   xyzw        1     NONE   float   xyzw
; TEXCOORD                 1   xyzw        2     NONE   float   xyzw
; TEXCOORD                 2   xyzw        3     NONE   float   xyzw
; TEXCOORD                 3   xyzw        4     NONE   float   xyzw
; TEXCOORD                 4   xyzw        5     NONE   float   xyzw
; TEXCOORD                 5   xy          6     NONE   float   xy  
; SV_ClipDistance          0   x           7  CLIPDST   float   x   
;
; shader hash: 1e852ea4a6432219bf4c7b06839fa603
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; POSITION                 0                              
; BLENDINDICES             0                              
; BLENDWEIGHT              0                              
; BLENDINDICES             1                              
; BLENDWEIGHT              1                              
; TEXCOORD                 0                              
; NORMAL                   0                              
; TANGENT                  0                              
; COLOR                    0                              
; TEXCOORD                 1                              
; INSTANCE_TRANSFORM       0                              
; INSTANCE_SKINNING_DATA     0                              
; SV_VertexID              0                              
; LIGHT_BLOCKER_INTENSITY     0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; TEXCOORD                 3                 linear       
; TEXCOORD                 4                 linear       
; TEXCOORD                 5                 linear       
; SV_ClipDistance          0                 linear       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [496 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [848 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [5760 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [640 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [112 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [512 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb7     1
;                                   cbuffer      NA          NA     CB1            cb1     1
;                                   cbuffer      NA          NA     CB2           cb10     1
;                                   cbuffer      NA          NA     CB3            cb9     1
;                                   cbuffer      NA          NA     CB4            cb5     1
;                                   cbuffer      NA          NA     CB5            cb8     1
;                                   texture    byte         r/o      T0            t10     1
;
;
; ViewId state:
;
; Number of inputs: 61, outputs: 29
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 1 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 2 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 3 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 4 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 5 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 6 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 7 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 28, 29, 30, 31, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 8 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 28, 29, 30, 31, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 9 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 28, 29, 30, 31, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 10 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 11 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 12 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 13 depends on inputs: { 20 }
;   output 14 depends on inputs: { 21 }
;   output 15 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 52, 53 }
;   output 16 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 44, 45, 46, 47, 52, 53 }
;   output 17 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 48, 49, 50, 51, 52, 53 }
;   output 18 depends on inputs: { 32 }
;   output 19 depends on inputs: { 33 }
;   output 20 depends on inputs: { 34 }
;   output 21 depends on inputs: { 35 }
;   output 22 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 23 depends on inputs: { 20, 21 }
;   output 24 depends on inputs: { 20, 21 }
;   output 25 depends on inputs: { 60 }
;   output 28 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%struct.ByteAddressBuffer = type { i32 }
%MaterialModifiersConsts = type { [31 x <4 x float>] }
%hostlayout.CameraShaderConsts = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, i32, i32, <2 x i32>, float, float }
%TextureRegionsCB = type { [40 x %struct.SRegion] }
%struct.SRegion = type { i32, float, float, [4 x <4 x float>], [4 x <4 x float>] }
%FloatTracksDataCB = type { [40 x <4 x float>] }
%hostlayout.FrequentVertexConsts = type { [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float> }
%CullObjectsCB = type { [8 x %struct.CullObjectPacked] }
%struct.CullObjectPacked = type { <2 x i32>, <2 x i32>, <3 x float>, float, <3 x float>, float, <3 x float>, i32 }

define void @vs_main_() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 10, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 5, i32 8, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 4, i32 5, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 3, i32 9, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 2, i32 10, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 7, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 13, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call i32 @dx.op.loadInput.i32(i32 4, i32 11, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call i32 @dx.op.loadInput.i32(i32 4, i32 11, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %20 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %21 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %22 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %23 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %24 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %25 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %26 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %27 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %28 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %29 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %30 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %31 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %32 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %33 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %34 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %35 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %36 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %37 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %38 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %39 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %40 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %41 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %42 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %43 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %44 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %45 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %46 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %47 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %48 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %49 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %50 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %51 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %52 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %53 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %54 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %55 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %6, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %56 = extractvalue %dx.types.CBufRet.i32 %55, 0
  %57 = extractvalue %dx.types.CBufRet.i32 %55, 1
  %58 = extractvalue %dx.types.CBufRet.i32 %55, 2
  %59 = bitcast float %46 to i32
  %60 = bitcast float %50 to i32
  %61 = bitcast float %54 to i32
  %62 = sub i32 %59, %56
  %63 = sub i32 %60, %57
  %64 = sub i32 %61, %58
  %65 = sitofp i32 %62 to float
  %66 = sitofp i32 %63 to float
  %67 = sitofp i32 %64 to float
  %68 = fmul fast float %65, 0x3EE0000000000000
  %69 = fmul fast float %66, 0x3EE0000000000000
  %70 = fmul fast float %67, 0x3EE0000000000000
  %71 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %72 = extractvalue %dx.types.CBufRet.f32 %71, 0
  %73 = extractvalue %dx.types.CBufRet.f32 %71, 1
  %74 = extractvalue %dx.types.CBufRet.f32 %71, 2
  %75 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %76 = extractvalue %dx.types.CBufRet.f32 %75, 0
  %77 = extractvalue %dx.types.CBufRet.f32 %75, 1
  %78 = extractvalue %dx.types.CBufRet.f32 %75, 2
  %79 = fmul fast float %76, %40
  %80 = fmul fast float %77, %41
  %81 = fmul fast float %78, %42
  %82 = fadd fast float %79, %72
  %83 = fadd fast float %80, %73
  %84 = fadd fast float %81, %74
  %85 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %86 = extractvalue %dx.types.CBufRet.f32 %85, 1
  %87 = extractvalue %dx.types.CBufRet.f32 %85, 2
  %88 = call float @dx.op.dot4.f32(i32 56, float %32, float %33, float %34, float %35, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %89 = call float @dx.op.dot4.f32(i32 56, float %24, float %25, float %26, float %27, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %90 = fadd fast float %89, %88
  %91 = call float @dx.op.binary.f32(i32 35, float 0x3EE4F8B580000000, float %90)  ; FMax(a,b)
  %92 = fdiv fast float %32, %91
  %93 = fdiv fast float %33, %91
  %94 = fdiv fast float %34, %91
  %95 = fdiv fast float %35, %91
  %96 = fdiv fast float %24, %91
  %97 = fdiv fast float %25, %91
  %98 = fdiv fast float %26, %91
  %99 = fdiv fast float %27, %91
  %100 = mul i32 %36, %10
  %101 = add i32 %100, %9
  %102 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %101, i32 undef)  ; BufferLoad(srv,index,wot)
  %103 = extractvalue %dx.types.ResRet.i32 %102, 0
  %104 = extractvalue %dx.types.ResRet.i32 %102, 1
  %105 = extractvalue %dx.types.ResRet.i32 %102, 2
  %106 = extractvalue %dx.types.ResRet.i32 %102, 3
  %107 = bitcast i32 %103 to float
  %108 = bitcast i32 %104 to float
  %109 = bitcast i32 %105 to float
  %110 = bitcast i32 %106 to float
  %111 = add i32 %101, 16
  %112 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %111, i32 undef)  ; BufferLoad(srv,index,wot)
  %113 = extractvalue %dx.types.ResRet.i32 %112, 0
  %114 = extractvalue %dx.types.ResRet.i32 %112, 1
  %115 = extractvalue %dx.types.ResRet.i32 %112, 2
  %116 = extractvalue %dx.types.ResRet.i32 %112, 3
  %117 = bitcast i32 %113 to float
  %118 = bitcast i32 %114 to float
  %119 = bitcast i32 %115 to float
  %120 = bitcast i32 %116 to float
  %121 = add i32 %101, 32
  %122 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %121, i32 undef)  ; BufferLoad(srv,index,wot)
  %123 = extractvalue %dx.types.ResRet.i32 %122, 0
  %124 = extractvalue %dx.types.ResRet.i32 %122, 1
  %125 = extractvalue %dx.types.ResRet.i32 %122, 2
  %126 = extractvalue %dx.types.ResRet.i32 %122, 3
  %127 = bitcast i32 %123 to float
  %128 = bitcast i32 %124 to float
  %129 = bitcast i32 %125 to float
  %130 = bitcast i32 %126 to float
  %131 = mul i32 %28, %10
  %132 = add i32 %131, %9
  %133 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %132, i32 undef)  ; BufferLoad(srv,index,wot)
  %134 = extractvalue %dx.types.ResRet.i32 %133, 0
  %135 = extractvalue %dx.types.ResRet.i32 %133, 1
  %136 = extractvalue %dx.types.ResRet.i32 %133, 2
  %137 = extractvalue %dx.types.ResRet.i32 %133, 3
  %138 = bitcast i32 %134 to float
  %139 = bitcast i32 %135 to float
  %140 = bitcast i32 %136 to float
  %141 = bitcast i32 %137 to float
  %142 = add i32 %132, 16
  %143 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %142, i32 undef)  ; BufferLoad(srv,index,wot)
  %144 = extractvalue %dx.types.ResRet.i32 %143, 0
  %145 = extractvalue %dx.types.ResRet.i32 %143, 1
  %146 = extractvalue %dx.types.ResRet.i32 %143, 2
  %147 = extractvalue %dx.types.ResRet.i32 %143, 3
  %148 = bitcast i32 %144 to float
  %149 = bitcast i32 %145 to float
  %150 = bitcast i32 %146 to float
  %151 = bitcast i32 %147 to float
  %152 = add i32 %132, 32
  %153 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %152, i32 undef)  ; BufferLoad(srv,index,wot)
  %154 = extractvalue %dx.types.ResRet.i32 %153, 0
  %155 = extractvalue %dx.types.ResRet.i32 %153, 1
  %156 = extractvalue %dx.types.ResRet.i32 %153, 2
  %157 = extractvalue %dx.types.ResRet.i32 %153, 3
  %158 = bitcast i32 %154 to float
  %159 = bitcast i32 %155 to float
  %160 = bitcast i32 %156 to float
  %161 = bitcast i32 %157 to float
  %162 = fmul fast float %107, %92
  %163 = fmul fast float %117, %92
  %164 = fmul fast float %127, %92
  %165 = fmul fast float %108, %92
  %166 = fmul fast float %118, %92
  %167 = fmul fast float %128, %92
  %168 = fmul fast float %109, %92
  %169 = fmul fast float %119, %92
  %170 = fmul fast float %129, %92
  %171 = fmul fast float %110, %92
  %172 = fmul fast float %120, %92
  %173 = fmul fast float %130, %92
  %174 = fmul fast float %138, %96
  %175 = fmul fast float %148, %96
  %176 = fmul fast float %158, %96
  %177 = fmul fast float %139, %96
  %178 = fmul fast float %149, %96
  %179 = fmul fast float %159, %96
  %180 = fmul fast float %140, %96
  %181 = fmul fast float %150, %96
  %182 = fmul fast float %160, %96
  %183 = fmul fast float %141, %96
  %184 = fmul fast float %151, %96
  %185 = fmul fast float %161, %96
  %186 = fadd fast float %174, %162
  %187 = fadd fast float %175, %163
  %188 = fadd fast float %176, %164
  %189 = fadd fast float %177, %165
  %190 = fadd fast float %178, %166
  %191 = fadd fast float %179, %167
  %192 = fadd fast float %180, %168
  %193 = fadd fast float %181, %169
  %194 = fadd fast float %182, %170
  %195 = fadd fast float %183, %171
  %196 = fadd fast float %184, %172
  %197 = fadd fast float %185, %173
  %198 = mul i32 %37, %10
  %199 = add i32 %198, %9
  %200 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %199, i32 undef)  ; BufferLoad(srv,index,wot)
  %201 = extractvalue %dx.types.ResRet.i32 %200, 0
  %202 = extractvalue %dx.types.ResRet.i32 %200, 1
  %203 = extractvalue %dx.types.ResRet.i32 %200, 2
  %204 = extractvalue %dx.types.ResRet.i32 %200, 3
  %205 = bitcast i32 %201 to float
  %206 = bitcast i32 %202 to float
  %207 = bitcast i32 %203 to float
  %208 = bitcast i32 %204 to float
  %209 = add i32 %199, 16
  %210 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %209, i32 undef)  ; BufferLoad(srv,index,wot)
  %211 = extractvalue %dx.types.ResRet.i32 %210, 0
  %212 = extractvalue %dx.types.ResRet.i32 %210, 1
  %213 = extractvalue %dx.types.ResRet.i32 %210, 2
  %214 = extractvalue %dx.types.ResRet.i32 %210, 3
  %215 = bitcast i32 %211 to float
  %216 = bitcast i32 %212 to float
  %217 = bitcast i32 %213 to float
  %218 = bitcast i32 %214 to float
  %219 = add i32 %199, 32
  %220 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %219, i32 undef)  ; BufferLoad(srv,index,wot)
  %221 = extractvalue %dx.types.ResRet.i32 %220, 0
  %222 = extractvalue %dx.types.ResRet.i32 %220, 1
  %223 = extractvalue %dx.types.ResRet.i32 %220, 2
  %224 = extractvalue %dx.types.ResRet.i32 %220, 3
  %225 = bitcast i32 %221 to float
  %226 = bitcast i32 %222 to float
  %227 = bitcast i32 %223 to float
  %228 = bitcast i32 %224 to float
  %229 = mul i32 %29, %10
  %230 = add i32 %229, %9
  %231 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %230, i32 undef)  ; BufferLoad(srv,index,wot)
  %232 = extractvalue %dx.types.ResRet.i32 %231, 0
  %233 = extractvalue %dx.types.ResRet.i32 %231, 1
  %234 = extractvalue %dx.types.ResRet.i32 %231, 2
  %235 = extractvalue %dx.types.ResRet.i32 %231, 3
  %236 = bitcast i32 %232 to float
  %237 = bitcast i32 %233 to float
  %238 = bitcast i32 %234 to float
  %239 = bitcast i32 %235 to float
  %240 = add i32 %230, 16
  %241 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %240, i32 undef)  ; BufferLoad(srv,index,wot)
  %242 = extractvalue %dx.types.ResRet.i32 %241, 0
  %243 = extractvalue %dx.types.ResRet.i32 %241, 1
  %244 = extractvalue %dx.types.ResRet.i32 %241, 2
  %245 = extractvalue %dx.types.ResRet.i32 %241, 3
  %246 = bitcast i32 %242 to float
  %247 = bitcast i32 %243 to float
  %248 = bitcast i32 %244 to float
  %249 = bitcast i32 %245 to float
  %250 = add i32 %230, 32
  %251 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %250, i32 undef)  ; BufferLoad(srv,index,wot)
  %252 = extractvalue %dx.types.ResRet.i32 %251, 0
  %253 = extractvalue %dx.types.ResRet.i32 %251, 1
  %254 = extractvalue %dx.types.ResRet.i32 %251, 2
  %255 = extractvalue %dx.types.ResRet.i32 %251, 3
  %256 = bitcast i32 %252 to float
  %257 = bitcast i32 %253 to float
  %258 = bitcast i32 %254 to float
  %259 = bitcast i32 %255 to float
  %260 = fmul fast float %205, %93
  %261 = fmul fast float %215, %93
  %262 = fmul fast float %225, %93
  %263 = fmul fast float %206, %93
  %264 = fmul fast float %216, %93
  %265 = fmul fast float %226, %93
  %266 = fmul fast float %207, %93
  %267 = fmul fast float %217, %93
  %268 = fmul fast float %227, %93
  %269 = fmul fast float %208, %93
  %270 = fmul fast float %218, %93
  %271 = fmul fast float %228, %93
  %272 = fadd fast float %186, %260
  %273 = fadd fast float %187, %261
  %274 = fadd fast float %188, %262
  %275 = fadd fast float %189, %263
  %276 = fadd fast float %190, %264
  %277 = fadd fast float %191, %265
  %278 = fadd fast float %192, %266
  %279 = fadd fast float %193, %267
  %280 = fadd fast float %194, %268
  %281 = fadd fast float %195, %269
  %282 = fadd fast float %196, %270
  %283 = fadd fast float %197, %271
  %284 = fmul fast float %236, %97
  %285 = fmul fast float %246, %97
  %286 = fmul fast float %256, %97
  %287 = fmul fast float %237, %97
  %288 = fmul fast float %247, %97
  %289 = fmul fast float %257, %97
  %290 = fmul fast float %238, %97
  %291 = fmul fast float %248, %97
  %292 = fmul fast float %258, %97
  %293 = fmul fast float %239, %97
  %294 = fmul fast float %249, %97
  %295 = fmul fast float %259, %97
  %296 = fadd fast float %272, %284
  %297 = fadd fast float %273, %285
  %298 = fadd fast float %274, %286
  %299 = fadd fast float %275, %287
  %300 = fadd fast float %276, %288
  %301 = fadd fast float %277, %289
  %302 = fadd fast float %278, %290
  %303 = fadd fast float %279, %291
  %304 = fadd fast float %280, %292
  %305 = fadd fast float %281, %293
  %306 = fadd fast float %282, %294
  %307 = fadd fast float %283, %295
  %308 = mul i32 %38, %10
  %309 = add i32 %308, %9
  %310 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %309, i32 undef)  ; BufferLoad(srv,index,wot)
  %311 = extractvalue %dx.types.ResRet.i32 %310, 0
  %312 = extractvalue %dx.types.ResRet.i32 %310, 1
  %313 = extractvalue %dx.types.ResRet.i32 %310, 2
  %314 = extractvalue %dx.types.ResRet.i32 %310, 3
  %315 = bitcast i32 %311 to float
  %316 = bitcast i32 %312 to float
  %317 = bitcast i32 %313 to float
  %318 = bitcast i32 %314 to float
  %319 = add i32 %309, 16
  %320 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %319, i32 undef)  ; BufferLoad(srv,index,wot)
  %321 = extractvalue %dx.types.ResRet.i32 %320, 0
  %322 = extractvalue %dx.types.ResRet.i32 %320, 1
  %323 = extractvalue %dx.types.ResRet.i32 %320, 2
  %324 = extractvalue %dx.types.ResRet.i32 %320, 3
  %325 = bitcast i32 %321 to float
  %326 = bitcast i32 %322 to float
  %327 = bitcast i32 %323 to float
  %328 = bitcast i32 %324 to float
  %329 = add i32 %309, 32
  %330 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %329, i32 undef)  ; BufferLoad(srv,index,wot)
  %331 = extractvalue %dx.types.ResRet.i32 %330, 0
  %332 = extractvalue %dx.types.ResRet.i32 %330, 1
  %333 = extractvalue %dx.types.ResRet.i32 %330, 2
  %334 = extractvalue %dx.types.ResRet.i32 %330, 3
  %335 = bitcast i32 %331 to float
  %336 = bitcast i32 %332 to float
  %337 = bitcast i32 %333 to float
  %338 = bitcast i32 %334 to float
  %339 = mul i32 %30, %10
  %340 = add i32 %339, %9
  %341 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %340, i32 undef)  ; BufferLoad(srv,index,wot)
  %342 = extractvalue %dx.types.ResRet.i32 %341, 0
  %343 = extractvalue %dx.types.ResRet.i32 %341, 1
  %344 = extractvalue %dx.types.ResRet.i32 %341, 2
  %345 = extractvalue %dx.types.ResRet.i32 %341, 3
  %346 = bitcast i32 %342 to float
  %347 = bitcast i32 %343 to float
  %348 = bitcast i32 %344 to float
  %349 = bitcast i32 %345 to float
  %350 = add i32 %340, 16
  %351 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %350, i32 undef)  ; BufferLoad(srv,index,wot)
  %352 = extractvalue %dx.types.ResRet.i32 %351, 0
  %353 = extractvalue %dx.types.ResRet.i32 %351, 1
  %354 = extractvalue %dx.types.ResRet.i32 %351, 2
  %355 = extractvalue %dx.types.ResRet.i32 %351, 3
  %356 = bitcast i32 %352 to float
  %357 = bitcast i32 %353 to float
  %358 = bitcast i32 %354 to float
  %359 = bitcast i32 %355 to float
  %360 = add i32 %340, 32
  %361 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %360, i32 undef)  ; BufferLoad(srv,index,wot)
  %362 = extractvalue %dx.types.ResRet.i32 %361, 0
  %363 = extractvalue %dx.types.ResRet.i32 %361, 1
  %364 = extractvalue %dx.types.ResRet.i32 %361, 2
  %365 = extractvalue %dx.types.ResRet.i32 %361, 3
  %366 = bitcast i32 %362 to float
  %367 = bitcast i32 %363 to float
  %368 = bitcast i32 %364 to float
  %369 = bitcast i32 %365 to float
  %370 = fmul fast float %315, %94
  %371 = fmul fast float %325, %94
  %372 = fmul fast float %335, %94
  %373 = fmul fast float %316, %94
  %374 = fmul fast float %326, %94
  %375 = fmul fast float %336, %94
  %376 = fmul fast float %317, %94
  %377 = fmul fast float %327, %94
  %378 = fmul fast float %337, %94
  %379 = fmul fast float %318, %94
  %380 = fmul fast float %328, %94
  %381 = fmul fast float %338, %94
  %382 = fadd fast float %296, %370
  %383 = fadd fast float %297, %371
  %384 = fadd fast float %298, %372
  %385 = fadd fast float %299, %373
  %386 = fadd fast float %300, %374
  %387 = fadd fast float %301, %375
  %388 = fadd fast float %302, %376
  %389 = fadd fast float %303, %377
  %390 = fadd fast float %304, %378
  %391 = fadd fast float %305, %379
  %392 = fadd fast float %306, %380
  %393 = fadd fast float %307, %381
  %394 = fmul fast float %346, %98
  %395 = fmul fast float %356, %98
  %396 = fmul fast float %366, %98
  %397 = fmul fast float %347, %98
  %398 = fmul fast float %357, %98
  %399 = fmul fast float %367, %98
  %400 = fmul fast float %348, %98
  %401 = fmul fast float %358, %98
  %402 = fmul fast float %368, %98
  %403 = fmul fast float %349, %98
  %404 = fmul fast float %359, %98
  %405 = fmul fast float %369, %98
  %406 = fadd fast float %382, %394
  %407 = fadd fast float %383, %395
  %408 = fadd fast float %384, %396
  %409 = fadd fast float %385, %397
  %410 = fadd fast float %386, %398
  %411 = fadd fast float %387, %399
  %412 = fadd fast float %388, %400
  %413 = fadd fast float %389, %401
  %414 = fadd fast float %390, %402
  %415 = fadd fast float %391, %403
  %416 = fadd fast float %392, %404
  %417 = fadd fast float %393, %405
  %418 = mul i32 %39, %10
  %419 = add i32 %418, %9
  %420 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %419, i32 undef)  ; BufferLoad(srv,index,wot)
  %421 = extractvalue %dx.types.ResRet.i32 %420, 0
  %422 = extractvalue %dx.types.ResRet.i32 %420, 1
  %423 = extractvalue %dx.types.ResRet.i32 %420, 2
  %424 = extractvalue %dx.types.ResRet.i32 %420, 3
  %425 = bitcast i32 %421 to float
  %426 = bitcast i32 %422 to float
  %427 = bitcast i32 %423 to float
  %428 = bitcast i32 %424 to float
  %429 = add i32 %419, 16
  %430 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %429, i32 undef)  ; BufferLoad(srv,index,wot)
  %431 = extractvalue %dx.types.ResRet.i32 %430, 0
  %432 = extractvalue %dx.types.ResRet.i32 %430, 1
  %433 = extractvalue %dx.types.ResRet.i32 %430, 2
  %434 = extractvalue %dx.types.ResRet.i32 %430, 3
  %435 = bitcast i32 %431 to float
  %436 = bitcast i32 %432 to float
  %437 = bitcast i32 %433 to float
  %438 = bitcast i32 %434 to float
  %439 = add i32 %419, 32
  %440 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %439, i32 undef)  ; BufferLoad(srv,index,wot)
  %441 = extractvalue %dx.types.ResRet.i32 %440, 0
  %442 = extractvalue %dx.types.ResRet.i32 %440, 1
  %443 = extractvalue %dx.types.ResRet.i32 %440, 2
  %444 = extractvalue %dx.types.ResRet.i32 %440, 3
  %445 = bitcast i32 %441 to float
  %446 = bitcast i32 %442 to float
  %447 = bitcast i32 %443 to float
  %448 = bitcast i32 %444 to float
  %449 = mul i32 %31, %10
  %450 = add i32 %449, %9
  %451 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %450, i32 undef)  ; BufferLoad(srv,index,wot)
  %452 = extractvalue %dx.types.ResRet.i32 %451, 0
  %453 = extractvalue %dx.types.ResRet.i32 %451, 1
  %454 = extractvalue %dx.types.ResRet.i32 %451, 2
  %455 = extractvalue %dx.types.ResRet.i32 %451, 3
  %456 = bitcast i32 %452 to float
  %457 = bitcast i32 %453 to float
  %458 = bitcast i32 %454 to float
  %459 = bitcast i32 %455 to float
  %460 = add i32 %450, 16
  %461 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %460, i32 undef)  ; BufferLoad(srv,index,wot)
  %462 = extractvalue %dx.types.ResRet.i32 %461, 0
  %463 = extractvalue %dx.types.ResRet.i32 %461, 1
  %464 = extractvalue %dx.types.ResRet.i32 %461, 2
  %465 = extractvalue %dx.types.ResRet.i32 %461, 3
  %466 = bitcast i32 %462 to float
  %467 = bitcast i32 %463 to float
  %468 = bitcast i32 %464 to float
  %469 = bitcast i32 %465 to float
  %470 = add i32 %450, 32
  %471 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %470, i32 undef)  ; BufferLoad(srv,index,wot)
  %472 = extractvalue %dx.types.ResRet.i32 %471, 0
  %473 = extractvalue %dx.types.ResRet.i32 %471, 1
  %474 = extractvalue %dx.types.ResRet.i32 %471, 2
  %475 = extractvalue %dx.types.ResRet.i32 %471, 3
  %476 = bitcast i32 %472 to float
  %477 = bitcast i32 %473 to float
  %478 = bitcast i32 %474 to float
  %479 = bitcast i32 %475 to float
  %480 = fmul fast float %425, %95
  %481 = fmul fast float %435, %95
  %482 = fmul fast float %445, %95
  %483 = fmul fast float %426, %95
  %484 = fmul fast float %436, %95
  %485 = fmul fast float %446, %95
  %486 = fmul fast float %427, %95
  %487 = fmul fast float %437, %95
  %488 = fmul fast float %447, %95
  %489 = fmul fast float %428, %95
  %490 = fmul fast float %438, %95
  %491 = fmul fast float %448, %95
  %492 = fadd fast float %406, %480
  %493 = fadd fast float %407, %481
  %494 = fadd fast float %408, %482
  %495 = fadd fast float %409, %483
  %496 = fadd fast float %410, %484
  %497 = fadd fast float %411, %485
  %498 = fadd fast float %412, %486
  %499 = fadd fast float %413, %487
  %500 = fadd fast float %414, %488
  %501 = fadd fast float %415, %489
  %502 = fadd fast float %416, %490
  %503 = fadd fast float %417, %491
  %504 = fmul fast float %456, %99
  %505 = fmul fast float %466, %99
  %506 = fmul fast float %476, %99
  %507 = fmul fast float %457, %99
  %508 = fmul fast float %467, %99
  %509 = fmul fast float %477, %99
  %510 = fmul fast float %458, %99
  %511 = fmul fast float %468, %99
  %512 = fmul fast float %478, %99
  %513 = fmul fast float %459, %99
  %514 = fmul fast float %469, %99
  %515 = fmul fast float %479, %99
  %516 = fadd fast float %492, %504
  %517 = fadd fast float %493, %505
  %518 = fadd fast float %494, %506
  %519 = fadd fast float %495, %507
  %520 = fadd fast float %496, %508
  %521 = fadd fast float %497, %509
  %522 = fadd fast float %498, %510
  %523 = fadd fast float %499, %511
  %524 = fadd fast float %500, %512
  %525 = fadd fast float %501, %513
  %526 = fadd fast float %502, %514
  %527 = fadd fast float %503, %515
  %528 = fmul fast float %516, %82
  %529 = call float @dx.op.tertiary.f32(i32 46, float %83, float %519, float %528)  ; FMad(a,b,c)
  %530 = call float @dx.op.tertiary.f32(i32 46, float %84, float %522, float %529)  ; FMad(a,b,c)
  %531 = fadd fast float %530, %525
  %532 = fmul fast float %517, %82
  %533 = call float @dx.op.tertiary.f32(i32 46, float %83, float %520, float %532)  ; FMad(a,b,c)
  %534 = call float @dx.op.tertiary.f32(i32 46, float %84, float %523, float %533)  ; FMad(a,b,c)
  %535 = fadd fast float %534, %526
  %536 = fmul fast float %518, %82
  %537 = call float @dx.op.tertiary.f32(i32 46, float %83, float %521, float %536)  ; FMad(a,b,c)
  %538 = call float @dx.op.tertiary.f32(i32 46, float %84, float %524, float %537)  ; FMad(a,b,c)
  %539 = fadd fast float %538, %527
  %540 = fcmp ule float %86, 5.000000e-01
  %541 = fcmp ule float %87, 5.000000e-01
  %542 = and i1 %540, %541
  br i1 %542, label %543, label %678

; <label>:543                                     ; preds = %0
  %544 = extractvalue %dx.types.CBufRet.f32 %85, 0
  %545 = fptoui float %544 to i32
  %546 = call i32 @dx.op.binary.i32(i32 40, i32 %545, i32 8)  ; UMin(a,b)
  %547 = icmp eq i32 %546, 0
  br i1 %547, label %678, label %548

; <label>:548                                     ; preds = %543
  br label %549

; <label>:549                                     ; preds = %674, %548
  %550 = phi i32 [ %675, %674 ], [ 0, %548 ]
  %551 = shl i32 %550, 2
  %552 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %2, i32 %551)  ; CBufferLoadLegacy(handle,regIndex)
  %553 = extractvalue %dx.types.CBufRet.i32 %552, 0
  %554 = extractvalue %dx.types.CBufRet.i32 %552, 1
  %555 = call float @dx.op.legacyF16ToF32(i32 131, i32 %553)  ; LegacyF16ToF32(value)
  %556 = lshr i32 %553, 16
  %557 = call float @dx.op.legacyF16ToF32(i32 131, i32 %556)  ; LegacyF16ToF32(value)
  %558 = call float @dx.op.legacyF16ToF32(i32 131, i32 %554)  ; LegacyF16ToF32(value)
  %559 = lshr i32 %554, 16
  %560 = call float @dx.op.legacyF16ToF32(i32 131, i32 %559)  ; LegacyF16ToF32(value)
  %561 = extractvalue %dx.types.CBufRet.i32 %552, 2
  %562 = extractvalue %dx.types.CBufRet.i32 %552, 3
  %563 = call float @dx.op.legacyF16ToF32(i32 131, i32 %561)  ; LegacyF16ToF32(value)
  %564 = lshr i32 %561, 16
  %565 = call float @dx.op.legacyF16ToF32(i32 131, i32 %564)  ; LegacyF16ToF32(value)
  %566 = call float @dx.op.legacyF16ToF32(i32 131, i32 %562)  ; LegacyF16ToF32(value)
  %567 = lshr i32 %562, 16
  %568 = call float @dx.op.legacyF16ToF32(i32 131, i32 %567)  ; LegacyF16ToF32(value)
  %569 = or i32 %551, 1
  %570 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 %569)  ; CBufferLoadLegacy(handle,regIndex)
  %571 = extractvalue %dx.types.CBufRet.f32 %570, 0
  %572 = extractvalue %dx.types.CBufRet.f32 %570, 1
  %573 = extractvalue %dx.types.CBufRet.f32 %570, 2
  %574 = extractvalue %dx.types.CBufRet.f32 %570, 3
  %575 = or i32 %551, 2
  %576 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 %575)  ; CBufferLoadLegacy(handle,regIndex)
  %577 = extractvalue %dx.types.CBufRet.f32 %576, 0
  %578 = extractvalue %dx.types.CBufRet.f32 %576, 1
  %579 = extractvalue %dx.types.CBufRet.f32 %576, 2
  %580 = or i32 %551, 3
  %581 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %2, i32 %580)  ; CBufferLoadLegacy(handle,regIndex)
  %582 = extractvalue %dx.types.CBufRet.i32 %581, 3
  %583 = icmp eq i32 %582, 0
  %584 = fsub fast float %82, %571
  %585 = fsub fast float %83, %572
  %586 = fsub fast float %84, %573
  %587 = fsub fast float %577, %571
  %588 = fsub fast float %578, %572
  %589 = fsub fast float %579, %573
  %590 = call float @dx.op.dot3.f32(i32 55, float %584, float %585, float %586, float %587, float %588, float %589)  ; Dot3(ax,ay,az,bx,by,bz)
  %591 = call float @dx.op.dot3.f32(i32 55, float %587, float %588, float %589, float %587, float %588, float %589)  ; Dot3(ax,ay,az,bx,by,bz)
  %592 = fdiv fast float %590, %591
  %593 = fmul fast float %592, %587
  %594 = fmul fast float %592, %588
  %595 = fmul fast float %592, %589
  %596 = fsub fast float %571, %82
  %597 = fadd fast float %596, %593
  %598 = fsub fast float %572, %83
  %599 = fadd fast float %598, %594
  %600 = fsub fast float %573, %84
  %601 = fadd fast float %600, %595
  %602 = call float @dx.op.dot3.f32(i32 55, float %597, float %599, float %601, float %597, float %599, float %601)  ; Dot3(ax,ay,az,bx,by,bz)
  %603 = fmul fast float %574, %574
  %604 = fcmp fast ole float %602, %603
  %605 = call float @dx.op.dot4.f32(i32 56, float %563, float %565, float %566, float %568, float %82, float %83, float %84, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  br i1 %583, label %606, label %636, !dx.controlflow.hints !53

; <label>:606                                     ; preds = %549
  %607 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 %580)  ; CBufferLoadLegacy(handle,regIndex)
  %608 = call float @dx.op.dot4.f32(i32 56, float %555, float %557, float %558, float %560, float %82, float %83, float %84, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %609 = fcmp fast ogt float %608, 0.000000e+00
  %610 = and i1 %604, %609
  %611 = fcmp fast ogt float %605, 0.000000e+00
  %612 = and i1 %610, %611
  br i1 %612, label %613, label %674

; <label>:613                                     ; preds = %606
  %614 = extractvalue %dx.types.CBufRet.f32 %607, 0
  %615 = extractvalue %dx.types.CBufRet.f32 %607, 1
  %616 = extractvalue %dx.types.CBufRet.f32 %607, 2
  %617 = call float @dx.op.dot4.f32(i32 56, float %82, float %83, float %84, float 1.000000e+00, float %555, float %557, float %558, float %560)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %618 = fmul fast float %555, %617
  %619 = fsub fast float -0.000000e+00, %618
  %620 = fmul fast float %557, %617
  %621 = fsub fast float -0.000000e+00, %620
  %622 = fmul fast float %558, %617
  %623 = fsub fast float -0.000000e+00, %622
  %624 = call float @dx.op.dot3.f32(i32 55, float %619, float %621, float %623, float %619, float %621, float %623)  ; Dot3(ax,ay,az,bx,by,bz)
  %625 = fmul fast float %624, 0x408F3FFFE0000000
  %626 = call float @dx.op.unary.f32(i32 7, float %625)  ; Saturate(value)
  %627 = fsub fast float %614, %531
  %628 = fsub fast float %615, %535
  %629 = fsub fast float %616, %539
  %630 = fmul fast float %626, %627
  %631 = fmul fast float %626, %628
  %632 = fmul fast float %626, %629
  %633 = fadd fast float %630, %531
  %634 = fadd fast float %631, %535
  %635 = fadd fast float %632, %539
  br label %678

; <label>:636                                     ; preds = %549
  %637 = fcmp fast oge float %605, 0.000000e+00
  %638 = and i1 %604, %637
  br i1 %638, label %639, label %674

; <label>:639                                     ; preds = %636
  %640 = fadd fast float %593, %571
  %641 = fadd fast float %594, %572
  %642 = fadd fast float %595, %573
  %643 = call float @dx.op.dot4.f32(i32 56, float %82, float %83, float %84, float 1.000000e+00, float %555, float %557, float %558, float %560)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %644 = fmul fast float %643, %555
  %645 = fmul fast float %643, %557
  %646 = fmul fast float %643, %558
  %647 = fsub fast float %82, %644
  %648 = fsub fast float %83, %645
  %649 = fsub fast float %84, %646
  %650 = fsub fast float %647, %640
  %651 = fsub fast float %648, %641
  %652 = fsub fast float %649, %642
  %653 = call float @dx.op.dot3.f32(i32 55, float %650, float %651, float %652, float %650, float %651, float %652)  ; Dot3(ax,ay,az,bx,by,bz)
  %654 = call float @dx.op.unary.f32(i32 25, float %653)  ; Rsqrt(value)
  %655 = fmul fast float %654, %574
  %656 = fmul fast float %655, %650
  %657 = fmul fast float %655, %651
  %658 = fmul fast float %655, %652
  %659 = fadd fast float %656, %640
  %660 = fadd fast float %657, %641
  %661 = fadd fast float %658, %642
  %662 = fmul fast float %659, %516
  %663 = call float @dx.op.tertiary.f32(i32 46, float %660, float %519, float %662)  ; FMad(a,b,c)
  %664 = call float @dx.op.tertiary.f32(i32 46, float %661, float %522, float %663)  ; FMad(a,b,c)
  %665 = fadd fast float %664, %525
  %666 = fmul fast float %659, %517
  %667 = call float @dx.op.tertiary.f32(i32 46, float %660, float %520, float %666)  ; FMad(a,b,c)
  %668 = call float @dx.op.tertiary.f32(i32 46, float %661, float %523, float %667)  ; FMad(a,b,c)
  %669 = fadd fast float %668, %526
  %670 = fmul fast float %659, %518
  %671 = call float @dx.op.tertiary.f32(i32 46, float %660, float %521, float %670)  ; FMad(a,b,c)
  %672 = call float @dx.op.tertiary.f32(i32 46, float %661, float %524, float %671)  ; FMad(a,b,c)
  %673 = fadd fast float %672, %527
  br label %678

; <label>:674                                     ; preds = %636, %606
  %675 = add nuw i32 %550, 1
  %676 = icmp ult i32 %675, %546
  br i1 %676, label %549, label %677, !llvm.loop !54

; <label>:677                                     ; preds = %674
  br label %678

; <label>:678                                     ; preds = %677, %639, %613, %543, %0
  %679 = phi float [ %531, %0 ], [ %633, %613 ], [ %665, %639 ], [ %531, %543 ], [ %531, %677 ]
  %680 = phi float [ %535, %0 ], [ %634, %613 ], [ %669, %639 ], [ %535, %543 ], [ %535, %677 ]
  %681 = phi float [ %539, %0 ], [ %635, %613 ], [ %673, %639 ], [ %539, %543 ], [ %539, %677 ]
  %682 = fmul fast float %679, %43
  %683 = call float @dx.op.tertiary.f32(i32 46, float %680, float %44, float %682)  ; FMad(a,b,c)
  %684 = call float @dx.op.tertiary.f32(i32 46, float %681, float %45, float %683)  ; FMad(a,b,c)
  %685 = fadd fast float %684, %68
  %686 = fmul fast float %679, %47
  %687 = call float @dx.op.tertiary.f32(i32 46, float %680, float %48, float %686)  ; FMad(a,b,c)
  %688 = call float @dx.op.tertiary.f32(i32 46, float %681, float %49, float %687)  ; FMad(a,b,c)
  %689 = fadd fast float %688, %69
  %690 = fmul fast float %679, %51
  %691 = call float @dx.op.tertiary.f32(i32 46, float %680, float %52, float %690)  ; FMad(a,b,c)
  %692 = call float @dx.op.tertiary.f32(i32 46, float %681, float %53, float %691)  ; FMad(a,b,c)
  %693 = fadd fast float %692, %70
  %694 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %695 = extractvalue %dx.types.CBufRet.f32 %694, 0
  %696 = extractvalue %dx.types.CBufRet.f32 %694, 1
  %697 = extractvalue %dx.types.CBufRet.f32 %694, 2
  %698 = extractvalue %dx.types.CBufRet.f32 %694, 3
  %699 = fmul fast float %695, %685
  %700 = call float @dx.op.tertiary.f32(i32 46, float %689, float %696, float %699)  ; FMad(a,b,c)
  %701 = call float @dx.op.tertiary.f32(i32 46, float %693, float %697, float %700)  ; FMad(a,b,c)
  %702 = fadd fast float %701, %698
  %703 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 37)  ; CBufferLoadLegacy(handle,regIndex)
  %704 = extractvalue %dx.types.CBufRet.f32 %703, 0
  %705 = extractvalue %dx.types.CBufRet.f32 %703, 1
  %706 = extractvalue %dx.types.CBufRet.f32 %703, 2
  %707 = fadd fast float %704, %685
  %708 = fadd fast float %705, %689
  %709 = fadd fast float %706, %693
  %710 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %711 = extractvalue %dx.types.CBufRet.f32 %710, 0
  %712 = extractvalue %dx.types.CBufRet.f32 %710, 1
  %713 = extractvalue %dx.types.CBufRet.f32 %710, 2
  %714 = extractvalue %dx.types.CBufRet.f32 %710, 3
  %715 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %716 = extractvalue %dx.types.CBufRet.f32 %715, 0
  %717 = extractvalue %dx.types.CBufRet.f32 %715, 1
  %718 = extractvalue %dx.types.CBufRet.f32 %715, 2
  %719 = extractvalue %dx.types.CBufRet.f32 %715, 3
  %720 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %721 = extractvalue %dx.types.CBufRet.f32 %720, 0
  %722 = extractvalue %dx.types.CBufRet.f32 %720, 1
  %723 = extractvalue %dx.types.CBufRet.f32 %720, 2
  %724 = extractvalue %dx.types.CBufRet.f32 %720, 3
  %725 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %726 = extractvalue %dx.types.CBufRet.f32 %725, 0
  %727 = extractvalue %dx.types.CBufRet.f32 %725, 1
  %728 = extractvalue %dx.types.CBufRet.f32 %725, 2
  %729 = extractvalue %dx.types.CBufRet.f32 %725, 3
  %730 = fmul fast float %711, %685
  %731 = call float @dx.op.tertiary.f32(i32 46, float %689, float %712, float %730)  ; FMad(a,b,c)
  %732 = call float @dx.op.tertiary.f32(i32 46, float %693, float %713, float %731)  ; FMad(a,b,c)
  %733 = fadd fast float %732, %714
  %734 = fmul fast float %716, %685
  %735 = call float @dx.op.tertiary.f32(i32 46, float %689, float %717, float %734)  ; FMad(a,b,c)
  %736 = call float @dx.op.tertiary.f32(i32 46, float %693, float %718, float %735)  ; FMad(a,b,c)
  %737 = fadd fast float %736, %719
  %738 = fmul fast float %721, %685
  %739 = call float @dx.op.tertiary.f32(i32 46, float %689, float %722, float %738)  ; FMad(a,b,c)
  %740 = call float @dx.op.tertiary.f32(i32 46, float %693, float %723, float %739)  ; FMad(a,b,c)
  %741 = fadd fast float %740, %724
  %742 = fmul fast float %726, %685
  %743 = call float @dx.op.tertiary.f32(i32 46, float %689, float %727, float %742)  ; FMad(a,b,c)
  %744 = call float @dx.op.tertiary.f32(i32 46, float %693, float %728, float %743)  ; FMad(a,b,c)
  %745 = fadd fast float %744, %729
  %746 = fmul fast float %516, %43
  %747 = call float @dx.op.tertiary.f32(i32 46, float %517, float %44, float %746)  ; FMad(a,b,c)
  %748 = call float @dx.op.tertiary.f32(i32 46, float %518, float %45, float %747)  ; FMad(a,b,c)
  %749 = fmul fast float %516, %47
  %750 = call float @dx.op.tertiary.f32(i32 46, float %517, float %48, float %749)  ; FMad(a,b,c)
  %751 = call float @dx.op.tertiary.f32(i32 46, float %518, float %49, float %750)  ; FMad(a,b,c)
  %752 = fmul fast float %516, %51
  %753 = call float @dx.op.tertiary.f32(i32 46, float %517, float %52, float %752)  ; FMad(a,b,c)
  %754 = call float @dx.op.tertiary.f32(i32 46, float %518, float %53, float %753)  ; FMad(a,b,c)
  %755 = fmul fast float %519, %43
  %756 = call float @dx.op.tertiary.f32(i32 46, float %520, float %44, float %755)  ; FMad(a,b,c)
  %757 = call float @dx.op.tertiary.f32(i32 46, float %521, float %45, float %756)  ; FMad(a,b,c)
  %758 = fmul fast float %519, %47
  %759 = call float @dx.op.tertiary.f32(i32 46, float %520, float %48, float %758)  ; FMad(a,b,c)
  %760 = call float @dx.op.tertiary.f32(i32 46, float %521, float %49, float %759)  ; FMad(a,b,c)
  %761 = fmul fast float %519, %51
  %762 = call float @dx.op.tertiary.f32(i32 46, float %520, float %52, float %761)  ; FMad(a,b,c)
  %763 = call float @dx.op.tertiary.f32(i32 46, float %521, float %53, float %762)  ; FMad(a,b,c)
  %764 = fmul fast float %522, %43
  %765 = call float @dx.op.tertiary.f32(i32 46, float %523, float %44, float %764)  ; FMad(a,b,c)
  %766 = call float @dx.op.tertiary.f32(i32 46, float %524, float %45, float %765)  ; FMad(a,b,c)
  %767 = fmul fast float %522, %47
  %768 = call float @dx.op.tertiary.f32(i32 46, float %523, float %48, float %767)  ; FMad(a,b,c)
  %769 = call float @dx.op.tertiary.f32(i32 46, float %524, float %49, float %768)  ; FMad(a,b,c)
  %770 = fmul fast float %522, %51
  %771 = call float @dx.op.tertiary.f32(i32 46, float %523, float %52, float %770)  ; FMad(a,b,c)
  %772 = call float @dx.op.tertiary.f32(i32 46, float %524, float %53, float %771)  ; FMad(a,b,c)
  %773 = fmul fast float %19, 2.000000e+00
  %774 = fmul fast float %20, 2.000000e+00
  %775 = fmul fast float %21, 2.000000e+00
  %776 = fadd fast float %773, -1.000000e+00
  %777 = fadd fast float %774, -1.000000e+00
  %778 = fadd fast float %775, -1.000000e+00
  %779 = fmul fast float %15, 2.000000e+00
  %780 = fmul fast float %16, 2.000000e+00
  %781 = fmul fast float %17, 2.000000e+00
  %782 = fadd fast float %779, -1.000000e+00
  %783 = fadd fast float %780, -1.000000e+00
  %784 = fadd fast float %781, -1.000000e+00
  %785 = fmul fast float %18, 2.000000e+00
  %786 = fadd fast float %785, -1.000000e+00
  %787 = fmul fast float %777, %784
  %788 = fmul fast float %778, %783
  %789 = fsub fast float %787, %788
  %790 = fmul fast float %778, %782
  %791 = fmul fast float %776, %784
  %792 = fsub fast float %790, %791
  %793 = fmul fast float %776, %783
  %794 = fmul fast float %777, %782
  %795 = fsub fast float %793, %794
  %796 = fmul fast float %789, %786
  %797 = fmul fast float %792, %786
  %798 = fmul fast float %795, %786
  %799 = fmul fast float %748, %782
  %800 = call float @dx.op.tertiary.f32(i32 46, float %783, float %757, float %799)  ; FMad(a,b,c)
  %801 = call float @dx.op.tertiary.f32(i32 46, float %784, float %766, float %800)  ; FMad(a,b,c)
  %802 = fmul fast float %751, %782
  %803 = call float @dx.op.tertiary.f32(i32 46, float %783, float %760, float %802)  ; FMad(a,b,c)
  %804 = call float @dx.op.tertiary.f32(i32 46, float %784, float %769, float %803)  ; FMad(a,b,c)
  %805 = fmul fast float %754, %782
  %806 = call float @dx.op.tertiary.f32(i32 46, float %783, float %763, float %805)  ; FMad(a,b,c)
  %807 = call float @dx.op.tertiary.f32(i32 46, float %784, float %772, float %806)  ; FMad(a,b,c)
  %808 = fmul fast float %748, %796
  %809 = call float @dx.op.tertiary.f32(i32 46, float %797, float %757, float %808)  ; FMad(a,b,c)
  %810 = call float @dx.op.tertiary.f32(i32 46, float %798, float %766, float %809)  ; FMad(a,b,c)
  %811 = fmul fast float %751, %796
  %812 = call float @dx.op.tertiary.f32(i32 46, float %797, float %760, float %811)  ; FMad(a,b,c)
  %813 = call float @dx.op.tertiary.f32(i32 46, float %798, float %769, float %812)  ; FMad(a,b,c)
  %814 = fmul fast float %754, %796
  %815 = call float @dx.op.tertiary.f32(i32 46, float %797, float %763, float %814)  ; FMad(a,b,c)
  %816 = call float @dx.op.tertiary.f32(i32 46, float %798, float %772, float %815)  ; FMad(a,b,c)
  %817 = fmul fast float %748, %776
  %818 = call float @dx.op.tertiary.f32(i32 46, float %777, float %757, float %817)  ; FMad(a,b,c)
  %819 = call float @dx.op.tertiary.f32(i32 46, float %778, float %766, float %818)  ; FMad(a,b,c)
  %820 = fmul fast float %751, %776
  %821 = call float @dx.op.tertiary.f32(i32 46, float %777, float %760, float %820)  ; FMad(a,b,c)
  %822 = call float @dx.op.tertiary.f32(i32 46, float %778, float %769, float %821)  ; FMad(a,b,c)
  %823 = fmul fast float %754, %776
  %824 = call float @dx.op.tertiary.f32(i32 46, float %777, float %763, float %823)  ; FMad(a,b,c)
  %825 = call float @dx.op.tertiary.f32(i32 46, float %778, float %772, float %824)  ; FMad(a,b,c)
  %826 = call float @dx.op.dot3.f32(i32 55, float %819, float %822, float %825, float %819, float %822, float %825)  ; Dot3(ax,ay,az,bx,by,bz)
  %827 = call float @dx.op.unary.f32(i32 25, float %826)  ; Rsqrt(value)
  %828 = fmul fast float %827, %819
  %829 = fmul fast float %827, %822
  %830 = fmul fast float %827, %825
  %831 = call float @dx.op.dot3.f32(i32 55, float %810, float %813, float %816, float %810, float %813, float %816)  ; Dot3(ax,ay,az,bx,by,bz)
  %832 = call float @dx.op.unary.f32(i32 25, float %831)  ; Rsqrt(value)
  %833 = fmul fast float %832, %810
  %834 = fmul fast float %832, %813
  %835 = fmul fast float %832, %816
  %836 = call float @dx.op.dot3.f32(i32 55, float %801, float %804, float %807, float %801, float %804, float %807)  ; Dot3(ax,ay,az,bx,by,bz)
  %837 = call float @dx.op.unary.f32(i32 25, float %836)  ; Rsqrt(value)
  %838 = fmul fast float %837, %801
  %839 = fmul fast float %837, %804
  %840 = fmul fast float %837, %807
  %841 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %842 = extractvalue %dx.types.CBufRet.f32 %841, 1
  %843 = fptosi float %842 to i32
  %844 = icmp sgt i32 %843, 0
  br i1 %844, label %845, label %932

; <label>:845                                     ; preds = %678
  br label %846

; <label>:846                                     ; preds = %917, %845
  %847 = phi float [ %925, %917 ], [ 0.000000e+00, %845 ]
  %848 = phi float [ %928, %917 ], [ 0.000000e+00, %845 ]
  %849 = phi i32 [ %929, %917 ], [ 0, %845 ]
  %850 = mul i32 %849, 9
  %851 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 %850)  ; CBufferLoadLegacy(handle,regIndex)
  %852 = extractvalue %dx.types.CBufRet.i32 %851, 0
  %853 = icmp eq i32 %852, 0
  br i1 %853, label %917, label %854

; <label>:854                                     ; preds = %846
  br label %855

; <label>:855                                     ; preds = %908, %854
  %856 = phi float [ %911, %908 ], [ 0.000000e+00, %854 ]
  %857 = phi i32 [ %912, %908 ], [ 0, %854 ]
  %858 = add i32 %850, 5
  %859 = add i32 %858, %857
  %860 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 %859)  ; CBufferLoadLegacy(handle,regIndex)
  %861 = extractvalue %dx.types.CBufRet.f32 %860, 0
  %862 = extractvalue %dx.types.CBufRet.f32 %860, 1
  %863 = extractvalue %dx.types.CBufRet.f32 %860, 2
  %864 = extractvalue %dx.types.CBufRet.f32 %860, 3
  %865 = add i32 %850, 1
  %866 = add i32 %865, %857
  %867 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 %866)  ; CBufferLoadLegacy(handle,regIndex)
  %868 = extractvalue %dx.types.CBufRet.f32 %867, 0
  %869 = extractvalue %dx.types.CBufRet.f32 %867, 1
  %870 = extractvalue %dx.types.CBufRet.f32 %867, 2
  %871 = extractvalue %dx.types.CBufRet.f32 %867, 3
  %872 = fcmp fast olt float %22, %861
  %873 = fcmp fast ogt float %22, %863
  %874 = or i1 %872, %873
  br i1 %874, label %889, label %875

; <label>:875                                     ; preds = %855
  %876 = fcmp fast oge float %22, %868
  %877 = fcmp fast ole float %22, %870
  %878 = and i1 %876, %877
  br i1 %878, label %889, label %879

; <label>:879                                     ; preds = %875
  %880 = fcmp fast olt float %22, %868
  br i1 %880, label %881, label %885

; <label>:881                                     ; preds = %879
  %882 = fsub fast float %22, %861
  %883 = fsub fast float %868, %861
  %884 = fdiv fast float %882, %883
  br label %889

; <label>:885                                     ; preds = %879
  %886 = fsub fast float %863, %22
  %887 = fsub fast float %863, %870
  %888 = fdiv fast float %886, %887
  br label %889

; <label>:889                                     ; preds = %885, %881, %875, %855
  %890 = phi float [ 0.000000e+00, %855 ], [ %884, %881 ], [ %888, %885 ], [ 1.000000e+00, %875 ]
  %891 = fcmp fast olt float %23, %862
  %892 = fcmp fast ogt float %23, %864
  %893 = or i1 %891, %892
  br i1 %893, label %908, label %894

; <label>:894                                     ; preds = %889
  %895 = fcmp fast oge float %23, %869
  %896 = fcmp fast ole float %23, %871
  %897 = and i1 %895, %896
  br i1 %897, label %908, label %898

; <label>:898                                     ; preds = %894
  %899 = fcmp fast olt float %23, %869
  br i1 %899, label %900, label %904

; <label>:900                                     ; preds = %898
  %901 = fsub fast float %23, %862
  %902 = fsub fast float %869, %862
  %903 = fdiv fast float %901, %902
  br label %908

; <label>:904                                     ; preds = %898
  %905 = fsub fast float %864, %23
  %906 = fsub fast float %864, %871
  %907 = fdiv fast float %905, %906
  br label %908

; <label>:908                                     ; preds = %904, %900, %894, %889
  %909 = phi float [ 0.000000e+00, %889 ], [ %903, %900 ], [ %907, %904 ], [ 1.000000e+00, %894 ]
  %910 = fmul fast float %909, %890
  %911 = call float @dx.op.binary.f32(i32 35, float %856, float %910)  ; FMax(a,b)
  %912 = add i32 %857, 1
  %913 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 %850)  ; CBufferLoadLegacy(handle,regIndex)
  %914 = extractvalue %dx.types.CBufRet.i32 %913, 0
  %915 = icmp ult i32 %912, %914
  br i1 %915, label %855, label %916

; <label>:916                                     ; preds = %908
  br label %917

; <label>:917                                     ; preds = %916, %846
  %918 = phi float [ 0.000000e+00, %846 ], [ %911, %916 ]
  %919 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 %849)  ; CBufferLoadLegacy(handle,regIndex)
  %920 = extractvalue %dx.types.CBufRet.f32 %919, 0
  %921 = fmul fast float %920, %918
  %922 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 %850)  ; CBufferLoadLegacy(handle,regIndex)
  %923 = extractvalue %dx.types.CBufRet.f32 %922, 1
  %924 = fmul fast float %921, %923
  %925 = fadd fast float %924, %847
  %926 = extractvalue %dx.types.CBufRet.f32 %922, 2
  %927 = fmul fast float %921, %926
  %928 = fadd fast float %927, %848
  %929 = add nuw nsw i32 %849, 1
  %930 = icmp eq i32 %929, %843
  br i1 %930, label %931, label %846

; <label>:931                                     ; preds = %917
  br label %932

; <label>:932                                     ; preds = %931, %678
  %933 = phi float [ 0.000000e+00, %678 ], [ %925, %931 ]
  %934 = phi float [ 0.000000e+00, %678 ], [ %928, %931 ]
  %935 = call float @dx.op.unary.f32(i32 7, float %933)  ; Saturate(value)
  %936 = call float @dx.op.unary.f32(i32 7, float %934)  ; Saturate(value)
  %937 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %938 = extractvalue %dx.types.CBufRet.f32 %937, 0
  %939 = extractvalue %dx.types.CBufRet.f32 %937, 1
  %940 = extractvalue %dx.types.CBufRet.f32 %937, 2
  %941 = extractvalue %dx.types.CBufRet.f32 %937, 3
  %942 = call float @dx.op.dot4.f32(i32 56, float %938, float %939, float %940, float %941, float %707, float %708, float %709, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %733)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %737)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %741)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %745)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %828)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %829)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %830)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %833)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %834)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %835)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %838)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float %839)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %840)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %22)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %23)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %707)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %708)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float %709)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float %11)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float %12)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 0, float %13)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 1, float %14)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 2, float %702)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 3, float %935)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 0, float %936)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 1, float %8)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 0, float %942)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!14}
!dx.entryPoints = !{!15}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{!5, null, !7, null}
!5 = !{!6}
!6 = !{i32 0, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 10, i32 1, i32 11, i32 0, null}
!7 = !{!8, !9, !10, !11, !12, !13}
!8 = !{i32 0, %MaterialModifiersConsts* undef, !"", i32 0, i32 7, i32 1, i32 496, null}
!9 = !{i32 1, %hostlayout.CameraShaderConsts* undef, !"", i32 0, i32 1, i32 1, i32 848, null}
!10 = !{i32 2, %TextureRegionsCB* undef, !"", i32 0, i32 10, i32 1, i32 5760, null}
!11 = !{i32 3, %FloatTracksDataCB* undef, !"", i32 0, i32 9, i32 1, i32 640, null}
!12 = !{i32 4, %hostlayout.FrequentVertexConsts* undef, !"", i32 0, i32 5, i32 1, i32 112, null}
!13 = !{i32 5, %CullObjectsCB* undef, !"", i32 0, i32 8, i32 1, i32 512, null}
!14 = !{[63 x i32] [i32 61, i32 29, i32 272859151, i32 272859151, i32 272859151, i32 0, i32 272867327, i32 272867327, i32 272867327, i32 272867327, i32 272867327, i32 272867327, i32 272867327, i32 272867327, i32 272867327, i32 272867327, i32 272867327, i32 272867327, i32 272867327, i32 272867327, i32 272867327, i32 272867327, i32 25174016, i32 25182208, i32 0, i32 0, i32 1008, i32 1008, i32 1008, i32 0, i32 8064, i32 8064, i32 8064, i32 896, i32 262144, i32 524288, i32 1048576, i32 2097152, i32 0, i32 0, i32 0, i32 0, i32 272670719, i32 272670719, i32 272670719, i32 272662543, i32 272703487, i32 272703487, i32 272703487, i32 272695311, i32 272769023, i32 272769023, i32 272769023, i32 272760847, i32 272867327, i32 272867327, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 33554432]}
!15 = !{void ()* @vs_main_, !"vs_main_", !16, !4, !52}
!16 = !{!17, !39, null}
!17 = !{!18, !21, !23, !24, !26, !27, !29, !30, !31, !32, !33, !35, !36, !37}
!18 = !{i32 0, !"POSITION", i8 9, i8 0, !19, i8 0, i32 1, i8 3, i32 0, i8 0, !20}
!19 = !{i32 0}
!20 = !{i32 3, i32 7}
!21 = !{i32 1, !"BLENDINDICES", i8 5, i8 0, !19, i8 0, i32 1, i8 4, i32 1, i8 0, !22}
!22 = !{i32 3, i32 15}
!23 = !{i32 2, !"BLENDWEIGHT", i8 9, i8 0, !19, i8 0, i32 1, i8 4, i32 2, i8 0, !22}
!24 = !{i32 3, !"BLENDINDICES", i8 5, i8 0, !25, i8 0, i32 1, i8 4, i32 3, i8 0, !22}
!25 = !{i32 1}
!26 = !{i32 4, !"BLENDWEIGHT", i8 9, i8 0, !25, i8 0, i32 1, i8 4, i32 4, i8 0, !22}
!27 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !19, i8 0, i32 1, i8 2, i32 5, i8 0, !28}
!28 = !{i32 3, i32 3}
!29 = !{i32 6, !"NORMAL", i8 9, i8 0, !19, i8 0, i32 1, i8 3, i32 6, i8 0, !20}
!30 = !{i32 7, !"TANGENT", i8 9, i8 0, !19, i8 0, i32 1, i8 4, i32 7, i8 0, !22}
!31 = !{i32 8, !"COLOR", i8 9, i8 0, !19, i8 0, i32 1, i8 4, i32 8, i8 0, !22}
!32 = !{i32 9, !"TEXCOORD", i8 9, i8 0, !25, i8 0, i32 1, i8 2, i32 9, i8 0, null}
!33 = !{i32 10, !"INSTANCE_TRANSFORM", i8 9, i8 0, !34, i8 0, i32 3, i8 4, i32 10, i8 0, !22}
!34 = !{i32 0, i32 1, i32 2}
!35 = !{i32 11, !"INSTANCE_SKINNING_DATA", i8 5, i8 0, !19, i8 0, i32 1, i8 4, i32 13, i8 0, !28}
!36 = !{i32 12, !"SV_VertexID", i8 5, i8 1, !19, i8 0, i32 1, i8 1, i32 14, i8 0, null}
!37 = !{i32 13, !"LIGHT_BLOCKER_INTENSITY", i8 9, i8 0, !19, i8 0, i32 1, i8 1, i32 15, i8 0, !38}
!38 = !{i32 3, i32 1}
!39 = !{!40, !41, !42, !43, !45, !47, !49, !51}
!40 = !{i32 0, !"SV_Position", i8 9, i8 3, !19, i8 4, i32 1, i8 4, i32 0, i8 0, !22}
!41 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !19, i8 2, i32 1, i8 4, i32 1, i8 0, !22}
!42 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !25, i8 2, i32 1, i8 4, i32 2, i8 0, !22}
!43 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !44, i8 2, i32 1, i8 4, i32 3, i8 0, !22}
!44 = !{i32 2}
!45 = !{i32 4, !"TEXCOORD", i8 9, i8 0, !46, i8 2, i32 1, i8 4, i32 4, i8 0, !22}
!46 = !{i32 3}
!47 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !48, i8 2, i32 1, i8 4, i32 5, i8 0, !22}
!48 = !{i32 4}
!49 = !{i32 6, !"TEXCOORD", i8 9, i8 0, !50, i8 2, i32 1, i8 2, i32 6, i8 0, !28}
!50 = !{i32 5}
!51 = !{i32 7, !"SV_ClipDistance", i8 9, i8 6, !19, i8 2, i32 1, i8 1, i32 7, i8 0, !38}
!52 = !{i32 0, i64 16}
!53 = distinct !{!53, !"dx.controlflow.hints", i32 1}
!54 = distinct !{!54, !55}
!55 = !{!"llvm.loop.unroll.disable"}
 