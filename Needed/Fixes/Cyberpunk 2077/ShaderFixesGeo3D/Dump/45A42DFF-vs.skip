;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; POSITION                 0   xyz         0     NONE   float   xyz 
; BLENDINDICES             0   xyzw        1     NONE    uint   xyzw
; BLENDWEIGHT              0   xyzw        2     NONE   float   xyzw
; BLENDINDICES             1   xyzw        3     NONE    uint   xyzw
; BLENDWEIGHT              1   xyzw        4     NONE   float   xyzw
; TEXCOORD                 0   xy          5     NONE   float   xy  
; NORMAL                   0   xyz         6     NONE   float   xyz 
; TANGENT                  0   xyzw        7     NONE   float   xyzw
; COLOR                    0   xyzw        8     NONE   float       
; TEXCOORD                 1   xy          9     NONE   float       
; INSTANCE_TRANSFORM       0   xyzw       10     NONE   float   xyzw
; INSTANCE_TRANSFORM       1   xyzw       11     NONE   float   xyzw
; INSTANCE_TRANSFORM       2   xyzw       12     NONE   float   xyzw
; INSTANCE_SKINNING_DATA     0   xyzw       13     NONE    uint   xy  
; EXTRA_DATA               0   xyz        14     NONE   float   xyz 
; SV_VertexID              0   x          15   VERTID    uint   x   
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; TEXCOORD                 0   xyzw        1     NONE   float   xyzw
; TEXCOORD                 1   xyzw        2     NONE   float   xyzw
; TEXCOORD                 2   xyzw        3     NONE   float   xyzw
; TEXCOORD                 3   xyzw        4     NONE   float   xyzw
; TEXCOORD                 4   x           5     NONE   float   x   
; SV_ClipDistance          0   x           6  CLIPDST   float   x   
;
; shader hash: 5da7f357c405f11670930e0eabfad964
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; POSITION                 0                              
; BLENDINDICES             0                              
; BLENDWEIGHT              0                              
; BLENDINDICES             1                              
; BLENDWEIGHT              1                              
; TEXCOORD                 0                              
; NORMAL                   0                              
; TANGENT                  0                              
; COLOR                    0                              
; TEXCOORD                 1                              
; INSTANCE_TRANSFORM       0                              
; INSTANCE_SKINNING_DATA     0                              
; EXTRA_DATA               0                              
; SV_VertexID              0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; TEXCOORD                 3                 linear       
; TEXCOORD                 4                 linear       
; SV_ClipDistance          0                 linear       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [496 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [848 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [112 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [512 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb7     1
;                                   cbuffer      NA          NA     CB1            cb1     1
;                                   cbuffer      NA          NA     CB2            cb5     1
;                                   cbuffer      NA          NA     CB3            cb8     1
;                                   texture    byte         r/o      T0            t10     1
;                                   texture     f32          2d      T1            t77     1
;
;
; ViewId state:
;
; Number of inputs: 61, outputs: 25
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 1 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 2 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 3 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 4 depends on inputs: { 20 }
;   output 5 depends on inputs: { 21 }
;   output 6 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 7 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 8 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 9 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 28, 29, 30, 31, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 10 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 28, 29, 30, 31, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 11 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 28, 29, 30, 31, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 12 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 13 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 14 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 15 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 24 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%MaterialModifiersConsts = type { [31 x <4 x float>] }
%hostlayout.CameraShaderConsts = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, i32, i32, <2 x i32>, float, float }
%hostlayout.FrequentVertexConsts = type { [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float> }
%CullObjectsCB = type { [8 x %struct.CullObjectPacked] }
%struct.CullObjectPacked = type { <2 x i32>, <2 x i32>, <3 x float>, float, <3 x float>, float, <3 x float>, i32 }

define void @vs_main_() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 77, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 10, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 3, i32 8, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 2, i32 5, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 7, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %7 = call i32 @dx.op.loadInput.i32(i32 4, i32 13, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 12, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 12, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 12, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call i32 @dx.op.loadInput.i32(i32 4, i32 11, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call i32 @dx.op.loadInput.i32(i32 4, i32 11, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %20 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %21 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %22 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %23 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %24 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %25 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %26 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %27 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %28 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %29 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %30 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %31 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %32 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %33 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %34 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %35 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %36 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %37 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %38 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %39 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %40 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %41 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %42 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %43 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %44 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %45 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %46 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %47 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %48 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %49 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %50 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %51 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %52 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %53 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %54 = extractvalue %dx.types.CBufRet.i32 %53, 0
  %55 = extractvalue %dx.types.CBufRet.i32 %53, 1
  %56 = extractvalue %dx.types.CBufRet.i32 %53, 2
  %57 = bitcast float %44 to i32
  %58 = bitcast float %48 to i32
  %59 = bitcast float %52 to i32
  %60 = sub i32 %57, %54
  %61 = sub i32 %58, %55
  %62 = sub i32 %59, %56
  %63 = sitofp i32 %60 to float
  %64 = sitofp i32 %61 to float
  %65 = sitofp i32 %62 to float
  %66 = fmul fast float %63, 0x3EE0000000000000
  %67 = fmul fast float %64, 0x3EE0000000000000
  %68 = fmul fast float %65, 0x3EE0000000000000
  %69 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %70 = extractvalue %dx.types.CBufRet.f32 %69, 0
  %71 = extractvalue %dx.types.CBufRet.f32 %69, 1
  %72 = extractvalue %dx.types.CBufRet.f32 %69, 2
  %73 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %74 = extractvalue %dx.types.CBufRet.f32 %73, 0
  %75 = extractvalue %dx.types.CBufRet.f32 %73, 1
  %76 = extractvalue %dx.types.CBufRet.f32 %73, 2
  %77 = fmul fast float %74, %38
  %78 = fmul fast float %75, %39
  %79 = fmul fast float %76, %40
  %80 = fadd fast float %77, %70
  %81 = fadd fast float %78, %71
  %82 = fadd fast float %79, %72
  %83 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %84 = extractvalue %dx.types.CBufRet.f32 %83, 0
  %85 = fcmp fast ogt float %84, 5.000000e-01
  br i1 %85, label %86, label %92

; <label>:86                                      ; preds = %0
  %87 = and i32 %7, 255
  %88 = lshr i32 %7, 8
  %89 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1, i32 0, i32 %87, i32 %88, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %90 = extractvalue %dx.types.ResRet.f32 %89, 0
  %91 = fmul float %90, 2.500000e+00
  br label %92

; <label>:92                                      ; preds = %86, %0
  %93 = phi float [ %91, %86 ], [ 0.000000e+00, %0 ]
  %94 = fmul fast float %93, %8
  %95 = fmul fast float %93, %9
  %96 = fmul fast float %93, %10
  %97 = fadd fast float %80, %94
  %98 = fadd fast float %81, %95
  %99 = fadd fast float %82, %96
  %100 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %101 = extractvalue %dx.types.CBufRet.f32 %100, 0
  %102 = fptoui float %101 to i32
  %103 = call i32 @dx.op.binary.i32(i32 40, i32 %102, i32 8)  ; UMin(a,b)
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %170, label %105

; <label>:105                                     ; preds = %92
  br label %106

; <label>:106                                     ; preds = %106, %105
  %107 = phi float [ %166, %106 ], [ 0.000000e+00, %105 ]
  %108 = phi i32 [ %167, %106 ], [ 0, %105 ]
  %109 = shl i32 %108, 2
  %110 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %109)  ; CBufferLoadLegacy(handle,regIndex)
  %111 = extractvalue %dx.types.CBufRet.i32 %110, 0
  %112 = extractvalue %dx.types.CBufRet.i32 %110, 1
  %113 = call float @dx.op.legacyF16ToF32(i32 131, i32 %111)  ; LegacyF16ToF32(value)
  %114 = lshr i32 %111, 16
  %115 = call float @dx.op.legacyF16ToF32(i32 131, i32 %114)  ; LegacyF16ToF32(value)
  %116 = call float @dx.op.legacyF16ToF32(i32 131, i32 %112)  ; LegacyF16ToF32(value)
  %117 = lshr i32 %112, 16
  %118 = call float @dx.op.legacyF16ToF32(i32 131, i32 %117)  ; LegacyF16ToF32(value)
  %119 = or i32 %109, 1
  %120 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %119)  ; CBufferLoadLegacy(handle,regIndex)
  %121 = extractvalue %dx.types.CBufRet.f32 %120, 0
  %122 = extractvalue %dx.types.CBufRet.f32 %120, 1
  %123 = extractvalue %dx.types.CBufRet.f32 %120, 2
  %124 = extractvalue %dx.types.CBufRet.f32 %120, 3
  %125 = or i32 %109, 2
  %126 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %125)  ; CBufferLoadLegacy(handle,regIndex)
  %127 = extractvalue %dx.types.CBufRet.f32 %126, 0
  %128 = extractvalue %dx.types.CBufRet.f32 %126, 1
  %129 = extractvalue %dx.types.CBufRet.f32 %126, 2
  %130 = extractvalue %dx.types.CBufRet.f32 %126, 3
  %131 = call float @dx.op.dot4.f32(i32 56, float %113, float %115, float %116, float %118, float %97, float %98, float %99, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %132 = fmul fast float %131, -1.000000e+01
  %133 = call float @dx.op.unary.f32(i32 7, float %132)  ; Saturate(value)
  %134 = fsub fast float 1.000000e+00, %133
  %135 = fsub fast float %97, %121
  %136 = fsub fast float %98, %122
  %137 = fsub fast float %99, %123
  %138 = fsub fast float %127, %121
  %139 = fsub fast float %128, %122
  %140 = fsub fast float %129, %123
  %141 = call float @dx.op.dot3.f32(i32 55, float %135, float %136, float %137, float %138, float %139, float %140)  ; Dot3(ax,ay,az,bx,by,bz)
  %142 = call float @dx.op.dot3.f32(i32 55, float %138, float %139, float %140, float %138, float %139, float %140)  ; Dot3(ax,ay,az,bx,by,bz)
  %143 = fdiv fast float %141, %142
  %144 = fmul fast float %143, %138
  %145 = fmul fast float %143, %139
  %146 = fmul fast float %143, %140
  %147 = fsub fast float %121, %97
  %148 = fadd fast float %147, %144
  %149 = fsub fast float %122, %98
  %150 = fadd fast float %149, %145
  %151 = fsub fast float %123, %99
  %152 = fadd fast float %151, %146
  %153 = call float @dx.op.dot3.f32(i32 55, float %148, float %150, float %152, float %148, float %150, float %152)  ; Dot3(ax,ay,az,bx,by,bz)
  %154 = call float @dx.op.unary.f32(i32 24, float %153)  ; Sqrt(value)
  %155 = fmul fast float %124, 5.000000e-01
  %156 = fsub fast float %154, %155
  %157 = fdiv fast float %156, %155
  %158 = call float @dx.op.unary.f32(i32 7, float %157)  ; Saturate(value)
  %159 = fmul fast float %158, 2.000000e+00
  %160 = fsub fast float 3.000000e+00, %159
  %161 = fmul fast float %158, %158
  %162 = fmul fast float %161, %160
  %163 = fsub fast float 1.000000e+00, %162
  %164 = fmul fast float %134, %130
  %165 = fmul fast float %164, %163
  %166 = call float @dx.op.binary.f32(i32 35, float %165, float %107)  ; FMax(a,b)
  %167 = add nuw i32 %108, 1
  %168 = icmp eq i32 %167, %103
  br i1 %168, label %169, label %106

; <label>:169                                     ; preds = %106
  br label %170

; <label>:170                                     ; preds = %169, %92
  %171 = phi float [ 0.000000e+00, %92 ], [ %166, %169 ]
  %172 = call float @dx.op.unary.f32(i32 7, float %171)  ; Saturate(value)
  %173 = fmul fast float %172, %8
  %174 = fmul fast float %172, %9
  %175 = fmul fast float %172, %10
  %176 = fadd fast float %173, %97
  %177 = fadd fast float %174, %98
  %178 = fadd fast float %175, %99
  %179 = extractvalue %dx.types.CBufRet.f32 %100, 2
  %180 = fcmp fast ogt float %179, 5.000000e-01
  br i1 %180, label %256, label %181

; <label>:181                                     ; preds = %170
  br i1 %104, label %247, label %182

; <label>:182                                     ; preds = %181
  br label %183

; <label>:183                                     ; preds = %183, %182
  %184 = phi float [ %243, %183 ], [ 0.000000e+00, %182 ]
  %185 = phi i32 [ %244, %183 ], [ 0, %182 ]
  %186 = shl i32 %185, 2
  %187 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %186)  ; CBufferLoadLegacy(handle,regIndex)
  %188 = extractvalue %dx.types.CBufRet.i32 %187, 0
  %189 = extractvalue %dx.types.CBufRet.i32 %187, 1
  %190 = call float @dx.op.legacyF16ToF32(i32 131, i32 %188)  ; LegacyF16ToF32(value)
  %191 = lshr i32 %188, 16
  %192 = call float @dx.op.legacyF16ToF32(i32 131, i32 %191)  ; LegacyF16ToF32(value)
  %193 = call float @dx.op.legacyF16ToF32(i32 131, i32 %189)  ; LegacyF16ToF32(value)
  %194 = lshr i32 %189, 16
  %195 = call float @dx.op.legacyF16ToF32(i32 131, i32 %194)  ; LegacyF16ToF32(value)
  %196 = or i32 %186, 1
  %197 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %196)  ; CBufferLoadLegacy(handle,regIndex)
  %198 = extractvalue %dx.types.CBufRet.f32 %197, 0
  %199 = extractvalue %dx.types.CBufRet.f32 %197, 1
  %200 = extractvalue %dx.types.CBufRet.f32 %197, 2
  %201 = extractvalue %dx.types.CBufRet.f32 %197, 3
  %202 = or i32 %186, 2
  %203 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %202)  ; CBufferLoadLegacy(handle,regIndex)
  %204 = extractvalue %dx.types.CBufRet.f32 %203, 0
  %205 = extractvalue %dx.types.CBufRet.f32 %203, 1
  %206 = extractvalue %dx.types.CBufRet.f32 %203, 2
  %207 = extractvalue %dx.types.CBufRet.f32 %203, 3
  %208 = call float @dx.op.dot4.f32(i32 56, float %190, float %192, float %193, float %195, float %176, float %177, float %178, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %209 = fmul fast float %208, -1.000000e+01
  %210 = call float @dx.op.unary.f32(i32 7, float %209)  ; Saturate(value)
  %211 = fsub fast float 1.000000e+00, %210
  %212 = fsub fast float %176, %198
  %213 = fsub fast float %177, %199
  %214 = fsub fast float %178, %200
  %215 = fsub fast float %204, %198
  %216 = fsub fast float %205, %199
  %217 = fsub fast float %206, %200
  %218 = call float @dx.op.dot3.f32(i32 55, float %212, float %213, float %214, float %215, float %216, float %217)  ; Dot3(ax,ay,az,bx,by,bz)
  %219 = call float @dx.op.dot3.f32(i32 55, float %215, float %216, float %217, float %215, float %216, float %217)  ; Dot3(ax,ay,az,bx,by,bz)
  %220 = fdiv fast float %218, %219
  %221 = fmul fast float %220, %215
  %222 = fmul fast float %220, %216
  %223 = fmul fast float %220, %217
  %224 = fsub fast float %198, %176
  %225 = fadd fast float %224, %221
  %226 = fsub fast float %199, %177
  %227 = fadd fast float %226, %222
  %228 = fsub fast float %200, %178
  %229 = fadd fast float %228, %223
  %230 = call float @dx.op.dot3.f32(i32 55, float %225, float %227, float %229, float %225, float %227, float %229)  ; Dot3(ax,ay,az,bx,by,bz)
  %231 = call float @dx.op.unary.f32(i32 24, float %230)  ; Sqrt(value)
  %232 = fmul fast float %201, 5.000000e-01
  %233 = fsub fast float %231, %232
  %234 = fdiv fast float %233, %232
  %235 = call float @dx.op.unary.f32(i32 7, float %234)  ; Saturate(value)
  %236 = fmul fast float %235, 2.000000e+00
  %237 = fsub fast float 3.000000e+00, %236
  %238 = fmul fast float %235, %235
  %239 = fmul fast float %238, %237
  %240 = fsub fast float 1.000000e+00, %239
  %241 = fmul fast float %211, %207
  %242 = fmul fast float %241, %240
  %243 = call float @dx.op.binary.f32(i32 35, float %242, float %184)  ; FMax(a,b)
  %244 = add nuw i32 %185, 1
  %245 = icmp eq i32 %244, %103
  br i1 %245, label %246, label %183

; <label>:246                                     ; preds = %183
  br label %247

; <label>:247                                     ; preds = %246, %181
  %248 = phi float [ 0.000000e+00, %181 ], [ %243, %246 ]
  %249 = call float @dx.op.unary.f32(i32 7, float %248)  ; Saturate(value)
  %250 = fmul fast float %249, %8
  %251 = fmul fast float %249, %9
  %252 = fmul fast float %249, %10
  %253 = fadd fast float %250, %176
  %254 = fadd fast float %251, %177
  %255 = fadd fast float %252, %178
  br label %256

; <label>:256                                     ; preds = %247, %170
  %257 = phi float [ %176, %170 ], [ %253, %247 ]
  %258 = phi float [ %177, %170 ], [ %254, %247 ]
  %259 = phi float [ %178, %170 ], [ %255, %247 ]
  %260 = call float @dx.op.dot4.f32(i32 56, float %30, float %31, float %32, float %33, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %261 = call float @dx.op.dot4.f32(i32 56, float %22, float %23, float %24, float %25, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %262 = fadd fast float %261, %260
  %263 = call float @dx.op.binary.f32(i32 35, float 0x3EE4F8B580000000, float %262)  ; FMax(a,b)
  %264 = fdiv fast float %30, %263
  %265 = fdiv fast float %31, %263
  %266 = fdiv fast float %32, %263
  %267 = fdiv fast float %33, %263
  %268 = fdiv fast float %22, %263
  %269 = fdiv fast float %23, %263
  %270 = fdiv fast float %24, %263
  %271 = fdiv fast float %25, %263
  %272 = mul i32 %34, %12
  %273 = add i32 %272, %11
  %274 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %273, i32 undef)  ; BufferLoad(srv,index,wot)
  %275 = extractvalue %dx.types.ResRet.i32 %274, 0
  %276 = extractvalue %dx.types.ResRet.i32 %274, 1
  %277 = extractvalue %dx.types.ResRet.i32 %274, 2
  %278 = extractvalue %dx.types.ResRet.i32 %274, 3
  %279 = bitcast i32 %275 to float
  %280 = bitcast i32 %276 to float
  %281 = bitcast i32 %277 to float
  %282 = bitcast i32 %278 to float
  %283 = add i32 %273, 16
  %284 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %283, i32 undef)  ; BufferLoad(srv,index,wot)
  %285 = extractvalue %dx.types.ResRet.i32 %284, 0
  %286 = extractvalue %dx.types.ResRet.i32 %284, 1
  %287 = extractvalue %dx.types.ResRet.i32 %284, 2
  %288 = extractvalue %dx.types.ResRet.i32 %284, 3
  %289 = bitcast i32 %285 to float
  %290 = bitcast i32 %286 to float
  %291 = bitcast i32 %287 to float
  %292 = bitcast i32 %288 to float
  %293 = add i32 %273, 32
  %294 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %293, i32 undef)  ; BufferLoad(srv,index,wot)
  %295 = extractvalue %dx.types.ResRet.i32 %294, 0
  %296 = extractvalue %dx.types.ResRet.i32 %294, 1
  %297 = extractvalue %dx.types.ResRet.i32 %294, 2
  %298 = extractvalue %dx.types.ResRet.i32 %294, 3
  %299 = bitcast i32 %295 to float
  %300 = bitcast i32 %296 to float
  %301 = bitcast i32 %297 to float
  %302 = bitcast i32 %298 to float
  %303 = mul i32 %26, %12
  %304 = add i32 %303, %11
  %305 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %304, i32 undef)  ; BufferLoad(srv,index,wot)
  %306 = extractvalue %dx.types.ResRet.i32 %305, 0
  %307 = extractvalue %dx.types.ResRet.i32 %305, 1
  %308 = extractvalue %dx.types.ResRet.i32 %305, 2
  %309 = extractvalue %dx.types.ResRet.i32 %305, 3
  %310 = bitcast i32 %306 to float
  %311 = bitcast i32 %307 to float
  %312 = bitcast i32 %308 to float
  %313 = bitcast i32 %309 to float
  %314 = add i32 %304, 16
  %315 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %314, i32 undef)  ; BufferLoad(srv,index,wot)
  %316 = extractvalue %dx.types.ResRet.i32 %315, 0
  %317 = extractvalue %dx.types.ResRet.i32 %315, 1
  %318 = extractvalue %dx.types.ResRet.i32 %315, 2
  %319 = extractvalue %dx.types.ResRet.i32 %315, 3
  %320 = bitcast i32 %316 to float
  %321 = bitcast i32 %317 to float
  %322 = bitcast i32 %318 to float
  %323 = bitcast i32 %319 to float
  %324 = add i32 %304, 32
  %325 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %324, i32 undef)  ; BufferLoad(srv,index,wot)
  %326 = extractvalue %dx.types.ResRet.i32 %325, 0
  %327 = extractvalue %dx.types.ResRet.i32 %325, 1
  %328 = extractvalue %dx.types.ResRet.i32 %325, 2
  %329 = extractvalue %dx.types.ResRet.i32 %325, 3
  %330 = bitcast i32 %326 to float
  %331 = bitcast i32 %327 to float
  %332 = bitcast i32 %328 to float
  %333 = bitcast i32 %329 to float
  %334 = fmul fast float %279, %264
  %335 = fmul fast float %289, %264
  %336 = fmul fast float %299, %264
  %337 = fmul fast float %280, %264
  %338 = fmul fast float %290, %264
  %339 = fmul fast float %300, %264
  %340 = fmul fast float %281, %264
  %341 = fmul fast float %291, %264
  %342 = fmul fast float %301, %264
  %343 = fmul fast float %282, %264
  %344 = fmul fast float %292, %264
  %345 = fmul fast float %302, %264
  %346 = fmul fast float %310, %268
  %347 = fmul fast float %320, %268
  %348 = fmul fast float %330, %268
  %349 = fmul fast float %311, %268
  %350 = fmul fast float %321, %268
  %351 = fmul fast float %331, %268
  %352 = fmul fast float %312, %268
  %353 = fmul fast float %322, %268
  %354 = fmul fast float %332, %268
  %355 = fmul fast float %313, %268
  %356 = fmul fast float %323, %268
  %357 = fmul fast float %333, %268
  %358 = fadd fast float %346, %334
  %359 = fadd fast float %347, %335
  %360 = fadd fast float %348, %336
  %361 = fadd fast float %349, %337
  %362 = fadd fast float %350, %338
  %363 = fadd fast float %351, %339
  %364 = fadd fast float %352, %340
  %365 = fadd fast float %353, %341
  %366 = fadd fast float %354, %342
  %367 = fadd fast float %355, %343
  %368 = fadd fast float %356, %344
  %369 = fadd fast float %357, %345
  %370 = mul i32 %35, %12
  %371 = add i32 %370, %11
  %372 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %371, i32 undef)  ; BufferLoad(srv,index,wot)
  %373 = extractvalue %dx.types.ResRet.i32 %372, 0
  %374 = extractvalue %dx.types.ResRet.i32 %372, 1
  %375 = extractvalue %dx.types.ResRet.i32 %372, 2
  %376 = extractvalue %dx.types.ResRet.i32 %372, 3
  %377 = bitcast i32 %373 to float
  %378 = bitcast i32 %374 to float
  %379 = bitcast i32 %375 to float
  %380 = bitcast i32 %376 to float
  %381 = add i32 %371, 16
  %382 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %381, i32 undef)  ; BufferLoad(srv,index,wot)
  %383 = extractvalue %dx.types.ResRet.i32 %382, 0
  %384 = extractvalue %dx.types.ResRet.i32 %382, 1
  %385 = extractvalue %dx.types.ResRet.i32 %382, 2
  %386 = extractvalue %dx.types.ResRet.i32 %382, 3
  %387 = bitcast i32 %383 to float
  %388 = bitcast i32 %384 to float
  %389 = bitcast i32 %385 to float
  %390 = bitcast i32 %386 to float
  %391 = add i32 %371, 32
  %392 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %391, i32 undef)  ; BufferLoad(srv,index,wot)
  %393 = extractvalue %dx.types.ResRet.i32 %392, 0
  %394 = extractvalue %dx.types.ResRet.i32 %392, 1
  %395 = extractvalue %dx.types.ResRet.i32 %392, 2
  %396 = extractvalue %dx.types.ResRet.i32 %392, 3
  %397 = bitcast i32 %393 to float
  %398 = bitcast i32 %394 to float
  %399 = bitcast i32 %395 to float
  %400 = bitcast i32 %396 to float
  %401 = mul i32 %27, %12
  %402 = add i32 %401, %11
  %403 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %402, i32 undef)  ; BufferLoad(srv,index,wot)
  %404 = extractvalue %dx.types.ResRet.i32 %403, 0
  %405 = extractvalue %dx.types.ResRet.i32 %403, 1
  %406 = extractvalue %dx.types.ResRet.i32 %403, 2
  %407 = extractvalue %dx.types.ResRet.i32 %403, 3
  %408 = bitcast i32 %404 to float
  %409 = bitcast i32 %405 to float
  %410 = bitcast i32 %406 to float
  %411 = bitcast i32 %407 to float
  %412 = add i32 %402, 16
  %413 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %412, i32 undef)  ; BufferLoad(srv,index,wot)
  %414 = extractvalue %dx.types.ResRet.i32 %413, 0
  %415 = extractvalue %dx.types.ResRet.i32 %413, 1
  %416 = extractvalue %dx.types.ResRet.i32 %413, 2
  %417 = extractvalue %dx.types.ResRet.i32 %413, 3
  %418 = bitcast i32 %414 to float
  %419 = bitcast i32 %415 to float
  %420 = bitcast i32 %416 to float
  %421 = bitcast i32 %417 to float
  %422 = add i32 %402, 32
  %423 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %422, i32 undef)  ; BufferLoad(srv,index,wot)
  %424 = extractvalue %dx.types.ResRet.i32 %423, 0
  %425 = extractvalue %dx.types.ResRet.i32 %423, 1
  %426 = extractvalue %dx.types.ResRet.i32 %423, 2
  %427 = extractvalue %dx.types.ResRet.i32 %423, 3
  %428 = bitcast i32 %424 to float
  %429 = bitcast i32 %425 to float
  %430 = bitcast i32 %426 to float
  %431 = bitcast i32 %427 to float
  %432 = fmul fast float %377, %265
  %433 = fmul fast float %387, %265
  %434 = fmul fast float %397, %265
  %435 = fmul fast float %378, %265
  %436 = fmul fast float %388, %265
  %437 = fmul fast float %398, %265
  %438 = fmul fast float %379, %265
  %439 = fmul fast float %389, %265
  %440 = fmul fast float %399, %265
  %441 = fmul fast float %380, %265
  %442 = fmul fast float %390, %265
  %443 = fmul fast float %400, %265
  %444 = fadd fast float %358, %432
  %445 = fadd fast float %359, %433
  %446 = fadd fast float %360, %434
  %447 = fadd fast float %361, %435
  %448 = fadd fast float %362, %436
  %449 = fadd fast float %363, %437
  %450 = fadd fast float %364, %438
  %451 = fadd fast float %365, %439
  %452 = fadd fast float %366, %440
  %453 = fadd fast float %367, %441
  %454 = fadd fast float %368, %442
  %455 = fadd fast float %369, %443
  %456 = fmul fast float %408, %269
  %457 = fmul fast float %418, %269
  %458 = fmul fast float %428, %269
  %459 = fmul fast float %409, %269
  %460 = fmul fast float %419, %269
  %461 = fmul fast float %429, %269
  %462 = fmul fast float %410, %269
  %463 = fmul fast float %420, %269
  %464 = fmul fast float %430, %269
  %465 = fmul fast float %411, %269
  %466 = fmul fast float %421, %269
  %467 = fmul fast float %431, %269
  %468 = fadd fast float %444, %456
  %469 = fadd fast float %445, %457
  %470 = fadd fast float %446, %458
  %471 = fadd fast float %447, %459
  %472 = fadd fast float %448, %460
  %473 = fadd fast float %449, %461
  %474 = fadd fast float %450, %462
  %475 = fadd fast float %451, %463
  %476 = fadd fast float %452, %464
  %477 = fadd fast float %453, %465
  %478 = fadd fast float %454, %466
  %479 = fadd fast float %455, %467
  %480 = mul i32 %36, %12
  %481 = add i32 %480, %11
  %482 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %481, i32 undef)  ; BufferLoad(srv,index,wot)
  %483 = extractvalue %dx.types.ResRet.i32 %482, 0
  %484 = extractvalue %dx.types.ResRet.i32 %482, 1
  %485 = extractvalue %dx.types.ResRet.i32 %482, 2
  %486 = extractvalue %dx.types.ResRet.i32 %482, 3
  %487 = bitcast i32 %483 to float
  %488 = bitcast i32 %484 to float
  %489 = bitcast i32 %485 to float
  %490 = bitcast i32 %486 to float
  %491 = add i32 %481, 16
  %492 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %491, i32 undef)  ; BufferLoad(srv,index,wot)
  %493 = extractvalue %dx.types.ResRet.i32 %492, 0
  %494 = extractvalue %dx.types.ResRet.i32 %492, 1
  %495 = extractvalue %dx.types.ResRet.i32 %492, 2
  %496 = extractvalue %dx.types.ResRet.i32 %492, 3
  %497 = bitcast i32 %493 to float
  %498 = bitcast i32 %494 to float
  %499 = bitcast i32 %495 to float
  %500 = bitcast i32 %496 to float
  %501 = add i32 %481, 32
  %502 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %501, i32 undef)  ; BufferLoad(srv,index,wot)
  %503 = extractvalue %dx.types.ResRet.i32 %502, 0
  %504 = extractvalue %dx.types.ResRet.i32 %502, 1
  %505 = extractvalue %dx.types.ResRet.i32 %502, 2
  %506 = extractvalue %dx.types.ResRet.i32 %502, 3
  %507 = bitcast i32 %503 to float
  %508 = bitcast i32 %504 to float
  %509 = bitcast i32 %505 to float
  %510 = bitcast i32 %506 to float
  %511 = mul i32 %28, %12
  %512 = add i32 %511, %11
  %513 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %512, i32 undef)  ; BufferLoad(srv,index,wot)
  %514 = extractvalue %dx.types.ResRet.i32 %513, 0
  %515 = extractvalue %dx.types.ResRet.i32 %513, 1
  %516 = extractvalue %dx.types.ResRet.i32 %513, 2
  %517 = extractvalue %dx.types.ResRet.i32 %513, 3
  %518 = bitcast i32 %514 to float
  %519 = bitcast i32 %515 to float
  %520 = bitcast i32 %516 to float
  %521 = bitcast i32 %517 to float
  %522 = add i32 %512, 16
  %523 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %522, i32 undef)  ; BufferLoad(srv,index,wot)
  %524 = extractvalue %dx.types.ResRet.i32 %523, 0
  %525 = extractvalue %dx.types.ResRet.i32 %523, 1
  %526 = extractvalue %dx.types.ResRet.i32 %523, 2
  %527 = extractvalue %dx.types.ResRet.i32 %523, 3
  %528 = bitcast i32 %524 to float
  %529 = bitcast i32 %525 to float
  %530 = bitcast i32 %526 to float
  %531 = bitcast i32 %527 to float
  %532 = add i32 %512, 32
  %533 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %532, i32 undef)  ; BufferLoad(srv,index,wot)
  %534 = extractvalue %dx.types.ResRet.i32 %533, 0
  %535 = extractvalue %dx.types.ResRet.i32 %533, 1
  %536 = extractvalue %dx.types.ResRet.i32 %533, 2
  %537 = extractvalue %dx.types.ResRet.i32 %533, 3
  %538 = bitcast i32 %534 to float
  %539 = bitcast i32 %535 to float
  %540 = bitcast i32 %536 to float
  %541 = bitcast i32 %537 to float
  %542 = fmul fast float %487, %266
  %543 = fmul fast float %497, %266
  %544 = fmul fast float %507, %266
  %545 = fmul fast float %488, %266
  %546 = fmul fast float %498, %266
  %547 = fmul fast float %508, %266
  %548 = fmul fast float %489, %266
  %549 = fmul fast float %499, %266
  %550 = fmul fast float %509, %266
  %551 = fmul fast float %490, %266
  %552 = fmul fast float %500, %266
  %553 = fmul fast float %510, %266
  %554 = fadd fast float %468, %542
  %555 = fadd fast float %469, %543
  %556 = fadd fast float %470, %544
  %557 = fadd fast float %471, %545
  %558 = fadd fast float %472, %546
  %559 = fadd fast float %473, %547
  %560 = fadd fast float %474, %548
  %561 = fadd fast float %475, %549
  %562 = fadd fast float %476, %550
  %563 = fadd fast float %477, %551
  %564 = fadd fast float %478, %552
  %565 = fadd fast float %479, %553
  %566 = fmul fast float %518, %270
  %567 = fmul fast float %528, %270
  %568 = fmul fast float %538, %270
  %569 = fmul fast float %519, %270
  %570 = fmul fast float %529, %270
  %571 = fmul fast float %539, %270
  %572 = fmul fast float %520, %270
  %573 = fmul fast float %530, %270
  %574 = fmul fast float %540, %270
  %575 = fmul fast float %521, %270
  %576 = fmul fast float %531, %270
  %577 = fmul fast float %541, %270
  %578 = fadd fast float %554, %566
  %579 = fadd fast float %555, %567
  %580 = fadd fast float %556, %568
  %581 = fadd fast float %557, %569
  %582 = fadd fast float %558, %570
  %583 = fadd fast float %559, %571
  %584 = fadd fast float %560, %572
  %585 = fadd fast float %561, %573
  %586 = fadd fast float %562, %574
  %587 = fadd fast float %563, %575
  %588 = fadd fast float %564, %576
  %589 = fadd fast float %565, %577
  %590 = mul i32 %37, %12
  %591 = add i32 %590, %11
  %592 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %591, i32 undef)  ; BufferLoad(srv,index,wot)
  %593 = extractvalue %dx.types.ResRet.i32 %592, 0
  %594 = extractvalue %dx.types.ResRet.i32 %592, 1
  %595 = extractvalue %dx.types.ResRet.i32 %592, 2
  %596 = extractvalue %dx.types.ResRet.i32 %592, 3
  %597 = bitcast i32 %593 to float
  %598 = bitcast i32 %594 to float
  %599 = bitcast i32 %595 to float
  %600 = bitcast i32 %596 to float
  %601 = add i32 %591, 16
  %602 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %601, i32 undef)  ; BufferLoad(srv,index,wot)
  %603 = extractvalue %dx.types.ResRet.i32 %602, 0
  %604 = extractvalue %dx.types.ResRet.i32 %602, 1
  %605 = extractvalue %dx.types.ResRet.i32 %602, 2
  %606 = extractvalue %dx.types.ResRet.i32 %602, 3
  %607 = bitcast i32 %603 to float
  %608 = bitcast i32 %604 to float
  %609 = bitcast i32 %605 to float
  %610 = bitcast i32 %606 to float
  %611 = add i32 %591, 32
  %612 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %611, i32 undef)  ; BufferLoad(srv,index,wot)
  %613 = extractvalue %dx.types.ResRet.i32 %612, 0
  %614 = extractvalue %dx.types.ResRet.i32 %612, 1
  %615 = extractvalue %dx.types.ResRet.i32 %612, 2
  %616 = extractvalue %dx.types.ResRet.i32 %612, 3
  %617 = bitcast i32 %613 to float
  %618 = bitcast i32 %614 to float
  %619 = bitcast i32 %615 to float
  %620 = bitcast i32 %616 to float
  %621 = mul i32 %29, %12
  %622 = add i32 %621, %11
  %623 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %622, i32 undef)  ; BufferLoad(srv,index,wot)
  %624 = extractvalue %dx.types.ResRet.i32 %623, 0
  %625 = extractvalue %dx.types.ResRet.i32 %623, 1
  %626 = extractvalue %dx.types.ResRet.i32 %623, 2
  %627 = extractvalue %dx.types.ResRet.i32 %623, 3
  %628 = bitcast i32 %624 to float
  %629 = bitcast i32 %625 to float
  %630 = bitcast i32 %626 to float
  %631 = bitcast i32 %627 to float
  %632 = add i32 %622, 16
  %633 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %632, i32 undef)  ; BufferLoad(srv,index,wot)
  %634 = extractvalue %dx.types.ResRet.i32 %633, 0
  %635 = extractvalue %dx.types.ResRet.i32 %633, 1
  %636 = extractvalue %dx.types.ResRet.i32 %633, 2
  %637 = extractvalue %dx.types.ResRet.i32 %633, 3
  %638 = bitcast i32 %634 to float
  %639 = bitcast i32 %635 to float
  %640 = bitcast i32 %636 to float
  %641 = bitcast i32 %637 to float
  %642 = add i32 %622, 32
  %643 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %642, i32 undef)  ; BufferLoad(srv,index,wot)
  %644 = extractvalue %dx.types.ResRet.i32 %643, 0
  %645 = extractvalue %dx.types.ResRet.i32 %643, 1
  %646 = extractvalue %dx.types.ResRet.i32 %643, 2
  %647 = extractvalue %dx.types.ResRet.i32 %643, 3
  %648 = bitcast i32 %644 to float
  %649 = bitcast i32 %645 to float
  %650 = bitcast i32 %646 to float
  %651 = bitcast i32 %647 to float
  %652 = fmul fast float %597, %267
  %653 = fmul fast float %607, %267
  %654 = fmul fast float %617, %267
  %655 = fmul fast float %598, %267
  %656 = fmul fast float %608, %267
  %657 = fmul fast float %618, %267
  %658 = fmul fast float %599, %267
  %659 = fmul fast float %609, %267
  %660 = fmul fast float %619, %267
  %661 = fmul fast float %600, %267
  %662 = fmul fast float %610, %267
  %663 = fmul fast float %620, %267
  %664 = fadd fast float %578, %652
  %665 = fadd fast float %579, %653
  %666 = fadd fast float %580, %654
  %667 = fadd fast float %581, %655
  %668 = fadd fast float %582, %656
  %669 = fadd fast float %583, %657
  %670 = fadd fast float %584, %658
  %671 = fadd fast float %585, %659
  %672 = fadd fast float %586, %660
  %673 = fadd fast float %587, %661
  %674 = fadd fast float %588, %662
  %675 = fadd fast float %589, %663
  %676 = fmul fast float %628, %271
  %677 = fmul fast float %638, %271
  %678 = fmul fast float %648, %271
  %679 = fmul fast float %629, %271
  %680 = fmul fast float %639, %271
  %681 = fmul fast float %649, %271
  %682 = fmul fast float %630, %271
  %683 = fmul fast float %640, %271
  %684 = fmul fast float %650, %271
  %685 = fmul fast float %631, %271
  %686 = fmul fast float %641, %271
  %687 = fmul fast float %651, %271
  %688 = fadd fast float %664, %676
  %689 = fadd fast float %665, %677
  %690 = fadd fast float %666, %678
  %691 = fadd fast float %667, %679
  %692 = fadd fast float %668, %680
  %693 = fadd fast float %669, %681
  %694 = fadd fast float %670, %682
  %695 = fadd fast float %671, %683
  %696 = fadd fast float %672, %684
  %697 = fadd fast float %673, %685
  %698 = fadd fast float %674, %686
  %699 = fadd fast float %675, %687
  %700 = fmul fast float %688, %257
  %701 = call float @dx.op.tertiary.f32(i32 46, float %258, float %691, float %700)  ; FMad(a,b,c)
  %702 = call float @dx.op.tertiary.f32(i32 46, float %259, float %694, float %701)  ; FMad(a,b,c)
  %703 = fadd fast float %697, %702
  %704 = fmul fast float %689, %257
  %705 = call float @dx.op.tertiary.f32(i32 46, float %258, float %692, float %704)  ; FMad(a,b,c)
  %706 = call float @dx.op.tertiary.f32(i32 46, float %259, float %695, float %705)  ; FMad(a,b,c)
  %707 = fadd fast float %698, %706
  %708 = fmul fast float %690, %257
  %709 = call float @dx.op.tertiary.f32(i32 46, float %258, float %693, float %708)  ; FMad(a,b,c)
  %710 = call float @dx.op.tertiary.f32(i32 46, float %259, float %696, float %709)  ; FMad(a,b,c)
  %711 = fadd fast float %699, %710
  br i1 %180, label %712, label %787

; <label>:712                                     ; preds = %256
  br i1 %104, label %778, label %713

; <label>:713                                     ; preds = %712
  br label %714

; <label>:714                                     ; preds = %714, %713
  %715 = phi float [ %774, %714 ], [ 0.000000e+00, %713 ]
  %716 = phi i32 [ %775, %714 ], [ 0, %713 ]
  %717 = shl i32 %716, 2
  %718 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %717)  ; CBufferLoadLegacy(handle,regIndex)
  %719 = extractvalue %dx.types.CBufRet.i32 %718, 0
  %720 = extractvalue %dx.types.CBufRet.i32 %718, 1
  %721 = call float @dx.op.legacyF16ToF32(i32 131, i32 %719)  ; LegacyF16ToF32(value)
  %722 = lshr i32 %719, 16
  %723 = call float @dx.op.legacyF16ToF32(i32 131, i32 %722)  ; LegacyF16ToF32(value)
  %724 = call float @dx.op.legacyF16ToF32(i32 131, i32 %720)  ; LegacyF16ToF32(value)
  %725 = lshr i32 %720, 16
  %726 = call float @dx.op.legacyF16ToF32(i32 131, i32 %725)  ; LegacyF16ToF32(value)
  %727 = or i32 %717, 1
  %728 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %727)  ; CBufferLoadLegacy(handle,regIndex)
  %729 = extractvalue %dx.types.CBufRet.f32 %728, 0
  %730 = extractvalue %dx.types.CBufRet.f32 %728, 1
  %731 = extractvalue %dx.types.CBufRet.f32 %728, 2
  %732 = extractvalue %dx.types.CBufRet.f32 %728, 3
  %733 = or i32 %717, 2
  %734 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %733)  ; CBufferLoadLegacy(handle,regIndex)
  %735 = extractvalue %dx.types.CBufRet.f32 %734, 0
  %736 = extractvalue %dx.types.CBufRet.f32 %734, 1
  %737 = extractvalue %dx.types.CBufRet.f32 %734, 2
  %738 = extractvalue %dx.types.CBufRet.f32 %734, 3
  %739 = call float @dx.op.dot4.f32(i32 56, float %721, float %723, float %724, float %726, float %703, float %707, float %711, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %740 = fmul fast float %739, -1.000000e+01
  %741 = call float @dx.op.unary.f32(i32 7, float %740)  ; Saturate(value)
  %742 = fsub fast float 1.000000e+00, %741
  %743 = fsub fast float %703, %729
  %744 = fsub fast float %707, %730
  %745 = fsub fast float %711, %731
  %746 = fsub fast float %735, %729
  %747 = fsub fast float %736, %730
  %748 = fsub fast float %737, %731
  %749 = call float @dx.op.dot3.f32(i32 55, float %743, float %744, float %745, float %746, float %747, float %748)  ; Dot3(ax,ay,az,bx,by,bz)
  %750 = call float @dx.op.dot3.f32(i32 55, float %746, float %747, float %748, float %746, float %747, float %748)  ; Dot3(ax,ay,az,bx,by,bz)
  %751 = fdiv fast float %749, %750
  %752 = fmul fast float %751, %746
  %753 = fmul fast float %751, %747
  %754 = fmul fast float %751, %748
  %755 = fsub fast float %729, %703
  %756 = fadd fast float %755, %752
  %757 = fsub fast float %730, %707
  %758 = fadd fast float %757, %753
  %759 = fsub fast float %731, %711
  %760 = fadd fast float %759, %754
  %761 = call float @dx.op.dot3.f32(i32 55, float %756, float %758, float %760, float %756, float %758, float %760)  ; Dot3(ax,ay,az,bx,by,bz)
  %762 = call float @dx.op.unary.f32(i32 24, float %761)  ; Sqrt(value)
  %763 = fmul fast float %732, 5.000000e-01
  %764 = fsub fast float %762, %763
  %765 = fdiv fast float %764, %763
  %766 = call float @dx.op.unary.f32(i32 7, float %765)  ; Saturate(value)
  %767 = fmul fast float %766, 2.000000e+00
  %768 = fsub fast float 3.000000e+00, %767
  %769 = fmul fast float %766, %766
  %770 = fmul fast float %769, %768
  %771 = fsub fast float 1.000000e+00, %770
  %772 = fmul fast float %742, %738
  %773 = fmul fast float %772, %771
  %774 = call float @dx.op.binary.f32(i32 35, float %773, float %715)  ; FMax(a,b)
  %775 = add nuw i32 %716, 1
  %776 = icmp eq i32 %775, %103
  br i1 %776, label %777, label %714

; <label>:777                                     ; preds = %714
  br label %778

; <label>:778                                     ; preds = %777, %712
  %779 = phi float [ 0.000000e+00, %712 ], [ %774, %777 ]
  %780 = call float @dx.op.unary.f32(i32 7, float %779)  ; Saturate(value)
  %781 = fmul fast float %780, %8
  %782 = fmul fast float %780, %9
  %783 = fmul fast float %780, %10
  %784 = fadd fast float %781, %703
  %785 = fadd fast float %782, %707
  %786 = fadd fast float %783, %711
  br label %787

; <label>:787                                     ; preds = %778, %256
  %788 = phi float [ %784, %778 ], [ %703, %256 ]
  %789 = phi float [ %785, %778 ], [ %707, %256 ]
  %790 = phi float [ %786, %778 ], [ %711, %256 ]
  %791 = fmul fast float %788, %41
  %792 = call float @dx.op.tertiary.f32(i32 46, float %789, float %42, float %791)  ; FMad(a,b,c)
  %793 = call float @dx.op.tertiary.f32(i32 46, float %790, float %43, float %792)  ; FMad(a,b,c)
  %794 = fadd fast float %793, %66
  %795 = fmul fast float %788, %45
  %796 = call float @dx.op.tertiary.f32(i32 46, float %789, float %46, float %795)  ; FMad(a,b,c)
  %797 = call float @dx.op.tertiary.f32(i32 46, float %790, float %47, float %796)  ; FMad(a,b,c)
  %798 = fadd fast float %797, %67
  %799 = fmul fast float %788, %49
  %800 = call float @dx.op.tertiary.f32(i32 46, float %789, float %50, float %799)  ; FMad(a,b,c)
  %801 = call float @dx.op.tertiary.f32(i32 46, float %790, float %51, float %800)  ; FMad(a,b,c)
  %802 = fadd fast float %801, %68
  %803 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %804 = extractvalue %dx.types.CBufRet.f32 %803, 0
  %805 = extractvalue %dx.types.CBufRet.f32 %803, 1
  %806 = extractvalue %dx.types.CBufRet.f32 %803, 2
  %807 = extractvalue %dx.types.CBufRet.f32 %803, 3
  %808 = fmul fast float %804, %794
  %809 = call float @dx.op.tertiary.f32(i32 46, float %798, float %805, float %808)  ; FMad(a,b,c)
  %810 = call float @dx.op.tertiary.f32(i32 46, float %802, float %806, float %809)  ; FMad(a,b,c)
  %811 = fadd fast float %810, %807
  %812 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 37)  ; CBufferLoadLegacy(handle,regIndex)
  %813 = extractvalue %dx.types.CBufRet.f32 %812, 0
  %814 = extractvalue %dx.types.CBufRet.f32 %812, 1
  %815 = extractvalue %dx.types.CBufRet.f32 %812, 2
  %816 = fadd fast float %813, %794
  %817 = fadd fast float %814, %798
  %818 = fadd fast float %815, %802
  %819 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %820 = extractvalue %dx.types.CBufRet.f32 %819, 0
  %821 = extractvalue %dx.types.CBufRet.f32 %819, 1
  %822 = extractvalue %dx.types.CBufRet.f32 %819, 2
  %823 = extractvalue %dx.types.CBufRet.f32 %819, 3
  %824 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %825 = extractvalue %dx.types.CBufRet.f32 %824, 0
  %826 = extractvalue %dx.types.CBufRet.f32 %824, 1
  %827 = extractvalue %dx.types.CBufRet.f32 %824, 2
  %828 = extractvalue %dx.types.CBufRet.f32 %824, 3
  %829 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %830 = extractvalue %dx.types.CBufRet.f32 %829, 0
  %831 = extractvalue %dx.types.CBufRet.f32 %829, 1
  %832 = extractvalue %dx.types.CBufRet.f32 %829, 2
  %833 = extractvalue %dx.types.CBufRet.f32 %829, 3
  %834 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %835 = extractvalue %dx.types.CBufRet.f32 %834, 0
  %836 = extractvalue %dx.types.CBufRet.f32 %834, 1
  %837 = extractvalue %dx.types.CBufRet.f32 %834, 2
  %838 = extractvalue %dx.types.CBufRet.f32 %834, 3
  %839 = fmul fast float %820, %794
  %840 = call float @dx.op.tertiary.f32(i32 46, float %798, float %821, float %839)  ; FMad(a,b,c)
  %841 = call float @dx.op.tertiary.f32(i32 46, float %802, float %822, float %840)  ; FMad(a,b,c)
  %842 = fadd fast float %841, %823
  %843 = fmul fast float %825, %794
  %844 = call float @dx.op.tertiary.f32(i32 46, float %798, float %826, float %843)  ; FMad(a,b,c)
  %845 = call float @dx.op.tertiary.f32(i32 46, float %802, float %827, float %844)  ; FMad(a,b,c)
  %846 = fadd fast float %845, %828
  %847 = fmul fast float %830, %794
  %848 = call float @dx.op.tertiary.f32(i32 46, float %798, float %831, float %847)  ; FMad(a,b,c)
  %849 = call float @dx.op.tertiary.f32(i32 46, float %802, float %832, float %848)  ; FMad(a,b,c)
  %850 = fadd fast float %849, %833
  %851 = fmul fast float %835, %794
  %852 = call float @dx.op.tertiary.f32(i32 46, float %798, float %836, float %851)  ; FMad(a,b,c)
  %853 = call float @dx.op.tertiary.f32(i32 46, float %802, float %837, float %852)  ; FMad(a,b,c)
  %854 = fadd fast float %853, %838
  %855 = fmul fast float %688, %41
  %856 = call float @dx.op.tertiary.f32(i32 46, float %689, float %42, float %855)  ; FMad(a,b,c)
  %857 = call float @dx.op.tertiary.f32(i32 46, float %690, float %43, float %856)  ; FMad(a,b,c)
  %858 = fmul fast float %688, %45
  %859 = call float @dx.op.tertiary.f32(i32 46, float %689, float %46, float %858)  ; FMad(a,b,c)
  %860 = call float @dx.op.tertiary.f32(i32 46, float %690, float %47, float %859)  ; FMad(a,b,c)
  %861 = fmul fast float %688, %49
  %862 = call float @dx.op.tertiary.f32(i32 46, float %689, float %50, float %861)  ; FMad(a,b,c)
  %863 = call float @dx.op.tertiary.f32(i32 46, float %690, float %51, float %862)  ; FMad(a,b,c)
  %864 = fmul fast float %691, %41
  %865 = call float @dx.op.tertiary.f32(i32 46, float %692, float %42, float %864)  ; FMad(a,b,c)
  %866 = call float @dx.op.tertiary.f32(i32 46, float %693, float %43, float %865)  ; FMad(a,b,c)
  %867 = fmul fast float %691, %45
  %868 = call float @dx.op.tertiary.f32(i32 46, float %692, float %46, float %867)  ; FMad(a,b,c)
  %869 = call float @dx.op.tertiary.f32(i32 46, float %693, float %47, float %868)  ; FMad(a,b,c)
  %870 = fmul fast float %691, %49
  %871 = call float @dx.op.tertiary.f32(i32 46, float %692, float %50, float %870)  ; FMad(a,b,c)
  %872 = call float @dx.op.tertiary.f32(i32 46, float %693, float %51, float %871)  ; FMad(a,b,c)
  %873 = fmul fast float %694, %41
  %874 = call float @dx.op.tertiary.f32(i32 46, float %695, float %42, float %873)  ; FMad(a,b,c)
  %875 = call float @dx.op.tertiary.f32(i32 46, float %696, float %43, float %874)  ; FMad(a,b,c)
  %876 = fmul fast float %694, %45
  %877 = call float @dx.op.tertiary.f32(i32 46, float %695, float %46, float %876)  ; FMad(a,b,c)
  %878 = call float @dx.op.tertiary.f32(i32 46, float %696, float %47, float %877)  ; FMad(a,b,c)
  %879 = fmul fast float %694, %49
  %880 = call float @dx.op.tertiary.f32(i32 46, float %695, float %50, float %879)  ; FMad(a,b,c)
  %881 = call float @dx.op.tertiary.f32(i32 46, float %696, float %51, float %880)  ; FMad(a,b,c)
  %882 = fmul fast float %17, 2.000000e+00
  %883 = fmul fast float %18, 2.000000e+00
  %884 = fmul fast float %19, 2.000000e+00
  %885 = fadd fast float %882, -1.000000e+00
  %886 = fadd fast float %883, -1.000000e+00
  %887 = fadd fast float %884, -1.000000e+00
  %888 = fmul fast float %13, 2.000000e+00
  %889 = fmul fast float %14, 2.000000e+00
  %890 = fmul fast float %15, 2.000000e+00
  %891 = fadd fast float %888, -1.000000e+00
  %892 = fadd fast float %889, -1.000000e+00
  %893 = fadd fast float %890, -1.000000e+00
  %894 = fmul fast float %16, 2.000000e+00
  %895 = fadd fast float %894, -1.000000e+00
  %896 = fmul fast float %886, %893
  %897 = fmul fast float %887, %892
  %898 = fsub fast float %896, %897
  %899 = fmul fast float %887, %891
  %900 = fmul fast float %885, %893
  %901 = fsub fast float %899, %900
  %902 = fmul fast float %885, %892
  %903 = fmul fast float %886, %891
  %904 = fsub fast float %902, %903
  %905 = fmul fast float %898, %895
  %906 = fmul fast float %901, %895
  %907 = fmul fast float %904, %895
  %908 = fmul fast float %857, %891
  %909 = call float @dx.op.tertiary.f32(i32 46, float %892, float %866, float %908)  ; FMad(a,b,c)
  %910 = call float @dx.op.tertiary.f32(i32 46, float %893, float %875, float %909)  ; FMad(a,b,c)
  %911 = fmul fast float %860, %891
  %912 = call float @dx.op.tertiary.f32(i32 46, float %892, float %869, float %911)  ; FMad(a,b,c)
  %913 = call float @dx.op.tertiary.f32(i32 46, float %893, float %878, float %912)  ; FMad(a,b,c)
  %914 = fmul fast float %863, %891
  %915 = call float @dx.op.tertiary.f32(i32 46, float %892, float %872, float %914)  ; FMad(a,b,c)
  %916 = call float @dx.op.tertiary.f32(i32 46, float %893, float %881, float %915)  ; FMad(a,b,c)
  %917 = fmul fast float %857, %905
  %918 = call float @dx.op.tertiary.f32(i32 46, float %906, float %866, float %917)  ; FMad(a,b,c)
  %919 = call float @dx.op.tertiary.f32(i32 46, float %907, float %875, float %918)  ; FMad(a,b,c)
  %920 = fmul fast float %860, %905
  %921 = call float @dx.op.tertiary.f32(i32 46, float %906, float %869, float %920)  ; FMad(a,b,c)
  %922 = call float @dx.op.tertiary.f32(i32 46, float %907, float %878, float %921)  ; FMad(a,b,c)
  %923 = fmul fast float %863, %905
  %924 = call float @dx.op.tertiary.f32(i32 46, float %906, float %872, float %923)  ; FMad(a,b,c)
  %925 = call float @dx.op.tertiary.f32(i32 46, float %907, float %881, float %924)  ; FMad(a,b,c)
  %926 = fmul fast float %857, %885
  %927 = call float @dx.op.tertiary.f32(i32 46, float %886, float %866, float %926)  ; FMad(a,b,c)
  %928 = call float @dx.op.tertiary.f32(i32 46, float %887, float %875, float %927)  ; FMad(a,b,c)
  %929 = fmul fast float %860, %885
  %930 = call float @dx.op.tertiary.f32(i32 46, float %886, float %869, float %929)  ; FMad(a,b,c)
  %931 = call float @dx.op.tertiary.f32(i32 46, float %887, float %878, float %930)  ; FMad(a,b,c)
  %932 = fmul fast float %863, %885
  %933 = call float @dx.op.tertiary.f32(i32 46, float %886, float %872, float %932)  ; FMad(a,b,c)
  %934 = call float @dx.op.tertiary.f32(i32 46, float %887, float %881, float %933)  ; FMad(a,b,c)
  %935 = call float @dx.op.dot3.f32(i32 55, float %928, float %931, float %934, float %928, float %931, float %934)  ; Dot3(ax,ay,az,bx,by,bz)
  %936 = call float @dx.op.unary.f32(i32 25, float %935)  ; Rsqrt(value)
  %937 = fmul fast float %936, %928
  %938 = fmul fast float %936, %931
  %939 = fmul fast float %936, %934
  %940 = call float @dx.op.dot3.f32(i32 55, float %919, float %922, float %925, float %919, float %922, float %925)  ; Dot3(ax,ay,az,bx,by,bz)
  %941 = call float @dx.op.unary.f32(i32 25, float %940)  ; Rsqrt(value)
  %942 = fmul fast float %941, %919
  %943 = fmul fast float %941, %922
  %944 = fmul fast float %941, %925
  %945 = call float @dx.op.dot3.f32(i32 55, float %910, float %913, float %916, float %910, float %913, float %916)  ; Dot3(ax,ay,az,bx,by,bz)
  %946 = call float @dx.op.unary.f32(i32 25, float %945)  ; Rsqrt(value)
  %947 = fmul fast float %946, %910
  %948 = fmul fast float %946, %913
  %949 = fmul fast float %946, %916
  %950 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %951 = extractvalue %dx.types.CBufRet.f32 %950, 0
  %952 = extractvalue %dx.types.CBufRet.f32 %950, 1
  %953 = extractvalue %dx.types.CBufRet.f32 %950, 2
  %954 = extractvalue %dx.types.CBufRet.f32 %950, 3
  %955 = call float @dx.op.dot4.f32(i32 56, float %951, float %952, float %953, float %954, float %816, float %817, float %818, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %842)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %846)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %850)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %854)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %20)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %21)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %937)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %938)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %939)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %942)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %943)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float %944)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %947)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %948)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %949)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %811)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 0, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 0, float %955)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!14}
!dx.entryPoints = !{!15}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{!5, null, !9, null}
!5 = !{!6, !7}
!6 = !{i32 0, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 10, i32 1, i32 11, i32 0, null}
!7 = !{i32 1, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 77, i32 1, i32 2, i32 0, !8}
!8 = !{i32 0, i32 9}
!9 = !{!10, !11, !12, !13}
!10 = !{i32 0, %MaterialModifiersConsts* undef, !"", i32 0, i32 7, i32 1, i32 496, null}
!11 = !{i32 1, %hostlayout.CameraShaderConsts* undef, !"", i32 0, i32 1, i32 1, i32 848, null}
!12 = !{i32 2, %hostlayout.FrequentVertexConsts* undef, !"", i32 0, i32 5, i32 1, i32 112, null}
!13 = !{i32 3, %CullObjectsCB* undef, !"", i32 0, i32 8, i32 1, i32 512, null}
!14 = !{[63 x i32] [i32 61, i32 25, i32 16809999, i32 16809999, i32 16809999, i32 0, i32 16842703, i32 16842703, i32 16842703, i32 16842703, i32 16842703, i32 16842703, i32 16842703, i32 16842703, i32 16842703, i32 16842703, i32 16842703, i32 16842703, i32 16842703, i32 16842703, i32 16842703, i32 16842703, i32 16, i32 32, i32 0, i32 0, i32 4032, i32 4032, i32 4032, i32 0, i32 32256, i32 32256, i32 32256, i32 3584, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 16842703, i32 16842703, i32 16842703, i32 16809999, i32 16842703, i32 16842703, i32 16842703, i32 16809999, i32 16842703, i32 16842703, i32 16842703, i32 16809999, i32 16842703, i32 16842703, i32 0, i32 0, i32 16809999, i32 16809999, i32 16809999, i32 0, i32 16809999]}
!15 = !{void ()* @vs_main_, !"vs_main_", !16, !4, !50}
!16 = !{!17, !39, null}
!17 = !{!18, !21, !23, !24, !26, !27, !29, !30, !31, !32, !33, !35, !36, !37}
!18 = !{i32 0, !"POSITION", i8 9, i8 0, !19, i8 0, i32 1, i8 3, i32 0, i8 0, !20}
!19 = !{i32 0}
!20 = !{i32 3, i32 7}
!21 = !{i32 1, !"BLENDINDICES", i8 5, i8 0, !19, i8 0, i32 1, i8 4, i32 1, i8 0, !22}
!22 = !{i32 3, i32 15}
!23 = !{i32 2, !"BLENDWEIGHT", i8 9, i8 0, !19, i8 0, i32 1, i8 4, i32 2, i8 0, !22}
!24 = !{i32 3, !"BLENDINDICES", i8 5, i8 0, !25, i8 0, i32 1, i8 4, i32 3, i8 0, !22}
!25 = !{i32 1}
!26 = !{i32 4, !"BLENDWEIGHT", i8 9, i8 0, !25, i8 0, i32 1, i8 4, i32 4, i8 0, !22}
!27 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !19, i8 0, i32 1, i8 2, i32 5, i8 0, !28}
!28 = !{i32 3, i32 3}
!29 = !{i32 6, !"NORMAL", i8 9, i8 0, !19, i8 0, i32 1, i8 3, i32 6, i8 0, !20}
!30 = !{i32 7, !"TANGENT", i8 9, i8 0, !19, i8 0, i32 1, i8 4, i32 7, i8 0, !22}
!31 = !{i32 8, !"COLOR", i8 9, i8 0, !19, i8 0, i32 1, i8 4, i32 8, i8 0, null}
!32 = !{i32 9, !"TEXCOORD", i8 9, i8 0, !25, i8 0, i32 1, i8 2, i32 9, i8 0, null}
!33 = !{i32 10, !"INSTANCE_TRANSFORM", i8 9, i8 0, !34, i8 0, i32 3, i8 4, i32 10, i8 0, !22}
!34 = !{i32 0, i32 1, i32 2}
!35 = !{i32 11, !"INSTANCE_SKINNING_DATA", i8 5, i8 0, !19, i8 0, i32 1, i8 4, i32 13, i8 0, !28}
!36 = !{i32 12, !"EXTRA_DATA", i8 9, i8 0, !19, i8 0, i32 1, i8 3, i32 14, i8 0, !20}
!37 = !{i32 13, !"SV_VertexID", i8 5, i8 1, !19, i8 0, i32 1, i8 1, i32 15, i8 0, !38}
!38 = !{i32 3, i32 1}
!39 = !{!40, !41, !42, !43, !45, !47, !49}
!40 = !{i32 0, !"SV_Position", i8 9, i8 3, !19, i8 4, i32 1, i8 4, i32 0, i8 0, !22}
!41 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !19, i8 2, i32 1, i8 4, i32 1, i8 0, !22}
!42 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !25, i8 2, i32 1, i8 4, i32 2, i8 0, !22}
!43 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !44, i8 2, i32 1, i8 4, i32 3, i8 0, !22}
!44 = !{i32 2}
!45 = !{i32 4, !"TEXCOORD", i8 9, i8 0, !46, i8 2, i32 1, i8 4, i32 4, i8 0, !22}
!46 = !{i32 3}
!47 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !48, i8 2, i32 1, i8 1, i32 5, i8 0, !38}
!48 = !{i32 4}
!49 = !{i32 6, !"SV_ClipDistance", i8 9, i8 6, !19, i8 2, i32 1, i8 1, i32 6, i8 0, !38}
!50 = !{i32 0, i64 16}
 