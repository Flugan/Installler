;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; POSITION                 0   xyz         0     NONE   float   xyz 
; BLENDINDICES             0   xyzw        1     NONE    uint   xyzw
; BLENDWEIGHT              0   xyzw        2     NONE   float   xyzw
; BLENDINDICES             1   xyzw        3     NONE    uint   xyzw
; BLENDWEIGHT              1   xyzw        4     NONE   float   xyzw
; TEXCOORD                 0   xy          5     NONE   float   xy  
; NORMAL                   0   xyz         6     NONE   float   xyz 
; TANGENT                  0   xyzw        7     NONE   float   xyzw
; COLOR                    0   xyzw        8     NONE   float       
; TEXCOORD                 1   xy          9     NONE   float       
; INSTANCE_TRANSFORM       0   xyzw       10     NONE   float   xyzw
; INSTANCE_TRANSFORM       1   xyzw       11     NONE   float   xyzw
; INSTANCE_TRANSFORM       2   xyzw       12     NONE   float   xyzw
; INSTANCE_SKINNING_DATA     0   xyzw       13     NONE    uint   xy  
; EXTRA_DATA               0   xyz        14     NONE   float   xyz 
; SV_VertexID              0   x          15   VERTID    uint   x   
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; TEXCOORD                 0   xyzw        1     NONE   float   xyzw
; TEXCOORD                 1   xyzw        2     NONE   float   xyzw
; TEXCOORD                 2   xyzw        3     NONE   float   xyzw
; SV_ClipDistance          0   x           4  CLIPDST   float   x   
;
; shader hash: e02bc5ee4ec627e2ae4894144548dd8a
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; POSITION                 0                              
; BLENDINDICES             0                              
; BLENDWEIGHT              0                              
; BLENDINDICES             1                              
; BLENDWEIGHT              1                              
; TEXCOORD                 0                              
; NORMAL                   0                              
; TANGENT                  0                              
; COLOR                    0                              
; TEXCOORD                 1                              
; INSTANCE_TRANSFORM       0                              
; INSTANCE_SKINNING_DATA     0                              
; EXTRA_DATA               0                              
; SV_VertexID              0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; SV_ClipDistance          0                 linear       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [496 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [848 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [4 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [112 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [512 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb7     1
;                                   cbuffer      NA          NA     CB1            cb1     1
;                                   cbuffer      NA          NA     CB2            cb4     1
;                                   cbuffer      NA          NA     CB3            cb5     1
;                                   cbuffer      NA          NA     CB4            cb8     1
;                                   texture    byte         r/o      T0            t10     1
;                                   texture     f32          2d      T1            t77     1
;
;
; ViewId state:
;
; Number of inputs: 61, outputs: 17
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 1 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 2 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 3 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 4 depends on inputs: { 20 }
;   output 5 depends on inputs: { 21 }
;   output 6 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 7 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 8 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 9 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 10 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 11 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 12 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 28, 29, 30, 31, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 13 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 28, 29, 30, 31, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 14 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 28, 29, 30, 31, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 15 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 16 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%MaterialModifiersConsts = type { [31 x <4 x float>] }
%hostlayout.CameraShaderConsts = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, i32, i32, <2 x i32>, float, float }
%ShaderSpecificConstants = type { float }
%hostlayout.FrequentVertexConsts = type { [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float> }
%CullObjectsCB = type { [8 x %struct.CullObjectPacked] }
%struct.CullObjectPacked = type { <2 x i32>, <2 x i32>, <3 x float>, float, <3 x float>, float, <3 x float>, i32 }

define void @vs_main_() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 77, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 10, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 4, i32 8, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 3, i32 5, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 2, i32 4, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 7, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %8 = call i32 @dx.op.loadInput.i32(i32 4, i32 13, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 12, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 12, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 12, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call i32 @dx.op.loadInput.i32(i32 4, i32 11, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call i32 @dx.op.loadInput.i32(i32 4, i32 11, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %20 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %21 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %22 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %23 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %24 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %25 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %26 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %27 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %28 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %29 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %30 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %31 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %32 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %33 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %34 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %35 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %36 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %37 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %38 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %39 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %40 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %41 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %42 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %43 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %44 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %45 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %46 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %47 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %48 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %49 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %50 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %51 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %52 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %53 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %54 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %6, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %55 = extractvalue %dx.types.CBufRet.i32 %54, 0
  %56 = extractvalue %dx.types.CBufRet.i32 %54, 1
  %57 = extractvalue %dx.types.CBufRet.i32 %54, 2
  %58 = bitcast float %45 to i32
  %59 = bitcast float %49 to i32
  %60 = bitcast float %53 to i32
  %61 = sub i32 %58, %55
  %62 = sub i32 %59, %56
  %63 = sub i32 %60, %57
  %64 = sitofp i32 %61 to float
  %65 = sitofp i32 %62 to float
  %66 = sitofp i32 %63 to float
  %67 = fmul fast float %64, 0x3EE0000000000000
  %68 = fmul fast float %65, 0x3EE0000000000000
  %69 = fmul fast float %66, 0x3EE0000000000000
  %70 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %71 = extractvalue %dx.types.CBufRet.f32 %70, 0
  %72 = extractvalue %dx.types.CBufRet.f32 %70, 1
  %73 = extractvalue %dx.types.CBufRet.f32 %70, 2
  %74 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %75 = extractvalue %dx.types.CBufRet.f32 %74, 0
  %76 = extractvalue %dx.types.CBufRet.f32 %74, 1
  %77 = extractvalue %dx.types.CBufRet.f32 %74, 2
  %78 = fmul fast float %75, %39
  %79 = fmul fast float %76, %40
  %80 = fmul fast float %77, %41
  %81 = fadd fast float %78, %71
  %82 = fadd fast float %79, %72
  %83 = fadd fast float %80, %73
  %84 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %85 = extractvalue %dx.types.CBufRet.f32 %84, 0
  %86 = fcmp fast ogt float %85, 5.000000e-01
  br i1 %86, label %87, label %93

; <label>:87                                      ; preds = %0
  %88 = and i32 %8, 255
  %89 = lshr i32 %8, 8
  %90 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1, i32 0, i32 %88, i32 %89, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %91 = extractvalue %dx.types.ResRet.f32 %90, 0
  %92 = fmul float %91, 2.500000e+00
  br label %93

; <label>:93                                      ; preds = %87, %0
  %94 = phi float [ %92, %87 ], [ 0.000000e+00, %0 ]
  %95 = fmul fast float %94, %9
  %96 = fmul fast float %94, %10
  %97 = fmul fast float %94, %11
  %98 = fadd fast float %81, %95
  %99 = fadd fast float %82, %96
  %100 = fadd fast float %83, %97
  %101 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %7, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %102 = extractvalue %dx.types.CBufRet.f32 %101, 0
  %103 = fptoui float %102 to i32
  %104 = call i32 @dx.op.binary.i32(i32 40, i32 %103, i32 8)  ; UMin(a,b)
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %171, label %106

; <label>:106                                     ; preds = %93
  br label %107

; <label>:107                                     ; preds = %107, %106
  %108 = phi float [ %167, %107 ], [ 0.000000e+00, %106 ]
  %109 = phi i32 [ %168, %107 ], [ 0, %106 ]
  %110 = shl i32 %109, 2
  %111 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %110)  ; CBufferLoadLegacy(handle,regIndex)
  %112 = extractvalue %dx.types.CBufRet.i32 %111, 0
  %113 = extractvalue %dx.types.CBufRet.i32 %111, 1
  %114 = call float @dx.op.legacyF16ToF32(i32 131, i32 %112)  ; LegacyF16ToF32(value)
  %115 = lshr i32 %112, 16
  %116 = call float @dx.op.legacyF16ToF32(i32 131, i32 %115)  ; LegacyF16ToF32(value)
  %117 = call float @dx.op.legacyF16ToF32(i32 131, i32 %113)  ; LegacyF16ToF32(value)
  %118 = lshr i32 %113, 16
  %119 = call float @dx.op.legacyF16ToF32(i32 131, i32 %118)  ; LegacyF16ToF32(value)
  %120 = or i32 %110, 1
  %121 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %120)  ; CBufferLoadLegacy(handle,regIndex)
  %122 = extractvalue %dx.types.CBufRet.f32 %121, 0
  %123 = extractvalue %dx.types.CBufRet.f32 %121, 1
  %124 = extractvalue %dx.types.CBufRet.f32 %121, 2
  %125 = extractvalue %dx.types.CBufRet.f32 %121, 3
  %126 = or i32 %110, 2
  %127 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %126)  ; CBufferLoadLegacy(handle,regIndex)
  %128 = extractvalue %dx.types.CBufRet.f32 %127, 0
  %129 = extractvalue %dx.types.CBufRet.f32 %127, 1
  %130 = extractvalue %dx.types.CBufRet.f32 %127, 2
  %131 = extractvalue %dx.types.CBufRet.f32 %127, 3
  %132 = call float @dx.op.dot4.f32(i32 56, float %114, float %116, float %117, float %119, float %98, float %99, float %100, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %133 = fmul fast float %132, -1.000000e+01
  %134 = call float @dx.op.unary.f32(i32 7, float %133)  ; Saturate(value)
  %135 = fsub fast float 1.000000e+00, %134
  %136 = fsub fast float %98, %122
  %137 = fsub fast float %99, %123
  %138 = fsub fast float %100, %124
  %139 = fsub fast float %128, %122
  %140 = fsub fast float %129, %123
  %141 = fsub fast float %130, %124
  %142 = call float @dx.op.dot3.f32(i32 55, float %136, float %137, float %138, float %139, float %140, float %141)  ; Dot3(ax,ay,az,bx,by,bz)
  %143 = call float @dx.op.dot3.f32(i32 55, float %139, float %140, float %141, float %139, float %140, float %141)  ; Dot3(ax,ay,az,bx,by,bz)
  %144 = fdiv fast float %142, %143
  %145 = fmul fast float %144, %139
  %146 = fmul fast float %144, %140
  %147 = fmul fast float %144, %141
  %148 = fsub fast float %122, %98
  %149 = fadd fast float %148, %145
  %150 = fsub fast float %123, %99
  %151 = fadd fast float %150, %146
  %152 = fsub fast float %124, %100
  %153 = fadd fast float %152, %147
  %154 = call float @dx.op.dot3.f32(i32 55, float %149, float %151, float %153, float %149, float %151, float %153)  ; Dot3(ax,ay,az,bx,by,bz)
  %155 = call float @dx.op.unary.f32(i32 24, float %154)  ; Sqrt(value)
  %156 = fmul fast float %125, 5.000000e-01
  %157 = fsub fast float %155, %156
  %158 = fdiv fast float %157, %156
  %159 = call float @dx.op.unary.f32(i32 7, float %158)  ; Saturate(value)
  %160 = fmul fast float %159, 2.000000e+00
  %161 = fsub fast float 3.000000e+00, %160
  %162 = fmul fast float %159, %159
  %163 = fmul fast float %162, %161
  %164 = fsub fast float 1.000000e+00, %163
  %165 = fmul fast float %135, %131
  %166 = fmul fast float %165, %164
  %167 = call float @dx.op.binary.f32(i32 35, float %166, float %108)  ; FMax(a,b)
  %168 = add nuw i32 %109, 1
  %169 = icmp eq i32 %168, %104
  br i1 %169, label %170, label %107

; <label>:170                                     ; preds = %107
  br label %171

; <label>:171                                     ; preds = %170, %93
  %172 = phi float [ 0.000000e+00, %93 ], [ %167, %170 ]
  %173 = call float @dx.op.unary.f32(i32 7, float %172)  ; Saturate(value)
  %174 = fmul fast float %173, %9
  %175 = fmul fast float %173, %10
  %176 = fmul fast float %173, %11
  %177 = fadd fast float %174, %98
  %178 = fadd fast float %175, %99
  %179 = fadd fast float %176, %100
  %180 = call float @dx.op.dot4.f32(i32 56, float %31, float %32, float %33, float %34, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %181 = call float @dx.op.dot4.f32(i32 56, float %23, float %24, float %25, float %26, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %182 = fadd fast float %181, %180
  %183 = call float @dx.op.binary.f32(i32 35, float 0x3EE4F8B580000000, float %182)  ; FMax(a,b)
  %184 = fdiv fast float %31, %183
  %185 = fdiv fast float %32, %183
  %186 = fdiv fast float %33, %183
  %187 = fdiv fast float %34, %183
  %188 = fdiv fast float %23, %183
  %189 = fdiv fast float %24, %183
  %190 = fdiv fast float %25, %183
  %191 = fdiv fast float %26, %183
  %192 = mul i32 %35, %13
  %193 = add i32 %192, %12
  %194 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %193, i32 undef)  ; BufferLoad(srv,index,wot)
  %195 = extractvalue %dx.types.ResRet.i32 %194, 0
  %196 = extractvalue %dx.types.ResRet.i32 %194, 1
  %197 = extractvalue %dx.types.ResRet.i32 %194, 2
  %198 = extractvalue %dx.types.ResRet.i32 %194, 3
  %199 = bitcast i32 %195 to float
  %200 = bitcast i32 %196 to float
  %201 = bitcast i32 %197 to float
  %202 = bitcast i32 %198 to float
  %203 = add i32 %193, 16
  %204 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %203, i32 undef)  ; BufferLoad(srv,index,wot)
  %205 = extractvalue %dx.types.ResRet.i32 %204, 0
  %206 = extractvalue %dx.types.ResRet.i32 %204, 1
  %207 = extractvalue %dx.types.ResRet.i32 %204, 2
  %208 = extractvalue %dx.types.ResRet.i32 %204, 3
  %209 = bitcast i32 %205 to float
  %210 = bitcast i32 %206 to float
  %211 = bitcast i32 %207 to float
  %212 = bitcast i32 %208 to float
  %213 = add i32 %193, 32
  %214 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %213, i32 undef)  ; BufferLoad(srv,index,wot)
  %215 = extractvalue %dx.types.ResRet.i32 %214, 0
  %216 = extractvalue %dx.types.ResRet.i32 %214, 1
  %217 = extractvalue %dx.types.ResRet.i32 %214, 2
  %218 = extractvalue %dx.types.ResRet.i32 %214, 3
  %219 = bitcast i32 %215 to float
  %220 = bitcast i32 %216 to float
  %221 = bitcast i32 %217 to float
  %222 = bitcast i32 %218 to float
  %223 = mul i32 %27, %13
  %224 = add i32 %223, %12
  %225 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %224, i32 undef)  ; BufferLoad(srv,index,wot)
  %226 = extractvalue %dx.types.ResRet.i32 %225, 0
  %227 = extractvalue %dx.types.ResRet.i32 %225, 1
  %228 = extractvalue %dx.types.ResRet.i32 %225, 2
  %229 = extractvalue %dx.types.ResRet.i32 %225, 3
  %230 = bitcast i32 %226 to float
  %231 = bitcast i32 %227 to float
  %232 = bitcast i32 %228 to float
  %233 = bitcast i32 %229 to float
  %234 = add i32 %224, 16
  %235 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %234, i32 undef)  ; BufferLoad(srv,index,wot)
  %236 = extractvalue %dx.types.ResRet.i32 %235, 0
  %237 = extractvalue %dx.types.ResRet.i32 %235, 1
  %238 = extractvalue %dx.types.ResRet.i32 %235, 2
  %239 = extractvalue %dx.types.ResRet.i32 %235, 3
  %240 = bitcast i32 %236 to float
  %241 = bitcast i32 %237 to float
  %242 = bitcast i32 %238 to float
  %243 = bitcast i32 %239 to float
  %244 = add i32 %224, 32
  %245 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %244, i32 undef)  ; BufferLoad(srv,index,wot)
  %246 = extractvalue %dx.types.ResRet.i32 %245, 0
  %247 = extractvalue %dx.types.ResRet.i32 %245, 1
  %248 = extractvalue %dx.types.ResRet.i32 %245, 2
  %249 = extractvalue %dx.types.ResRet.i32 %245, 3
  %250 = bitcast i32 %246 to float
  %251 = bitcast i32 %247 to float
  %252 = bitcast i32 %248 to float
  %253 = bitcast i32 %249 to float
  %254 = fmul fast float %199, %184
  %255 = fmul fast float %209, %184
  %256 = fmul fast float %219, %184
  %257 = fmul fast float %200, %184
  %258 = fmul fast float %210, %184
  %259 = fmul fast float %220, %184
  %260 = fmul fast float %201, %184
  %261 = fmul fast float %211, %184
  %262 = fmul fast float %221, %184
  %263 = fmul fast float %202, %184
  %264 = fmul fast float %212, %184
  %265 = fmul fast float %222, %184
  %266 = fmul fast float %230, %188
  %267 = fmul fast float %240, %188
  %268 = fmul fast float %250, %188
  %269 = fmul fast float %231, %188
  %270 = fmul fast float %241, %188
  %271 = fmul fast float %251, %188
  %272 = fmul fast float %232, %188
  %273 = fmul fast float %242, %188
  %274 = fmul fast float %252, %188
  %275 = fmul fast float %233, %188
  %276 = fmul fast float %243, %188
  %277 = fmul fast float %253, %188
  %278 = fadd fast float %266, %254
  %279 = fadd fast float %267, %255
  %280 = fadd fast float %268, %256
  %281 = fadd fast float %269, %257
  %282 = fadd fast float %270, %258
  %283 = fadd fast float %271, %259
  %284 = fadd fast float %272, %260
  %285 = fadd fast float %273, %261
  %286 = fadd fast float %274, %262
  %287 = fadd fast float %275, %263
  %288 = fadd fast float %276, %264
  %289 = fadd fast float %277, %265
  %290 = mul i32 %36, %13
  %291 = add i32 %290, %12
  %292 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %291, i32 undef)  ; BufferLoad(srv,index,wot)
  %293 = extractvalue %dx.types.ResRet.i32 %292, 0
  %294 = extractvalue %dx.types.ResRet.i32 %292, 1
  %295 = extractvalue %dx.types.ResRet.i32 %292, 2
  %296 = extractvalue %dx.types.ResRet.i32 %292, 3
  %297 = bitcast i32 %293 to float
  %298 = bitcast i32 %294 to float
  %299 = bitcast i32 %295 to float
  %300 = bitcast i32 %296 to float
  %301 = add i32 %291, 16
  %302 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %301, i32 undef)  ; BufferLoad(srv,index,wot)
  %303 = extractvalue %dx.types.ResRet.i32 %302, 0
  %304 = extractvalue %dx.types.ResRet.i32 %302, 1
  %305 = extractvalue %dx.types.ResRet.i32 %302, 2
  %306 = extractvalue %dx.types.ResRet.i32 %302, 3
  %307 = bitcast i32 %303 to float
  %308 = bitcast i32 %304 to float
  %309 = bitcast i32 %305 to float
  %310 = bitcast i32 %306 to float
  %311 = add i32 %291, 32
  %312 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %311, i32 undef)  ; BufferLoad(srv,index,wot)
  %313 = extractvalue %dx.types.ResRet.i32 %312, 0
  %314 = extractvalue %dx.types.ResRet.i32 %312, 1
  %315 = extractvalue %dx.types.ResRet.i32 %312, 2
  %316 = extractvalue %dx.types.ResRet.i32 %312, 3
  %317 = bitcast i32 %313 to float
  %318 = bitcast i32 %314 to float
  %319 = bitcast i32 %315 to float
  %320 = bitcast i32 %316 to float
  %321 = mul i32 %28, %13
  %322 = add i32 %321, %12
  %323 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %322, i32 undef)  ; BufferLoad(srv,index,wot)
  %324 = extractvalue %dx.types.ResRet.i32 %323, 0
  %325 = extractvalue %dx.types.ResRet.i32 %323, 1
  %326 = extractvalue %dx.types.ResRet.i32 %323, 2
  %327 = extractvalue %dx.types.ResRet.i32 %323, 3
  %328 = bitcast i32 %324 to float
  %329 = bitcast i32 %325 to float
  %330 = bitcast i32 %326 to float
  %331 = bitcast i32 %327 to float
  %332 = add i32 %322, 16
  %333 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %332, i32 undef)  ; BufferLoad(srv,index,wot)
  %334 = extractvalue %dx.types.ResRet.i32 %333, 0
  %335 = extractvalue %dx.types.ResRet.i32 %333, 1
  %336 = extractvalue %dx.types.ResRet.i32 %333, 2
  %337 = extractvalue %dx.types.ResRet.i32 %333, 3
  %338 = bitcast i32 %334 to float
  %339 = bitcast i32 %335 to float
  %340 = bitcast i32 %336 to float
  %341 = bitcast i32 %337 to float
  %342 = add i32 %322, 32
  %343 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %342, i32 undef)  ; BufferLoad(srv,index,wot)
  %344 = extractvalue %dx.types.ResRet.i32 %343, 0
  %345 = extractvalue %dx.types.ResRet.i32 %343, 1
  %346 = extractvalue %dx.types.ResRet.i32 %343, 2
  %347 = extractvalue %dx.types.ResRet.i32 %343, 3
  %348 = bitcast i32 %344 to float
  %349 = bitcast i32 %345 to float
  %350 = bitcast i32 %346 to float
  %351 = bitcast i32 %347 to float
  %352 = fmul fast float %297, %185
  %353 = fmul fast float %307, %185
  %354 = fmul fast float %317, %185
  %355 = fmul fast float %298, %185
  %356 = fmul fast float %308, %185
  %357 = fmul fast float %318, %185
  %358 = fmul fast float %299, %185
  %359 = fmul fast float %309, %185
  %360 = fmul fast float %319, %185
  %361 = fmul fast float %300, %185
  %362 = fmul fast float %310, %185
  %363 = fmul fast float %320, %185
  %364 = fadd fast float %278, %352
  %365 = fadd fast float %279, %353
  %366 = fadd fast float %280, %354
  %367 = fadd fast float %281, %355
  %368 = fadd fast float %282, %356
  %369 = fadd fast float %283, %357
  %370 = fadd fast float %284, %358
  %371 = fadd fast float %285, %359
  %372 = fadd fast float %286, %360
  %373 = fadd fast float %287, %361
  %374 = fadd fast float %288, %362
  %375 = fadd fast float %289, %363
  %376 = fmul fast float %328, %189
  %377 = fmul fast float %338, %189
  %378 = fmul fast float %348, %189
  %379 = fmul fast float %329, %189
  %380 = fmul fast float %339, %189
  %381 = fmul fast float %349, %189
  %382 = fmul fast float %330, %189
  %383 = fmul fast float %340, %189
  %384 = fmul fast float %350, %189
  %385 = fmul fast float %331, %189
  %386 = fmul fast float %341, %189
  %387 = fmul fast float %351, %189
  %388 = fadd fast float %364, %376
  %389 = fadd fast float %365, %377
  %390 = fadd fast float %366, %378
  %391 = fadd fast float %367, %379
  %392 = fadd fast float %368, %380
  %393 = fadd fast float %369, %381
  %394 = fadd fast float %370, %382
  %395 = fadd fast float %371, %383
  %396 = fadd fast float %372, %384
  %397 = fadd fast float %373, %385
  %398 = fadd fast float %374, %386
  %399 = fadd fast float %375, %387
  %400 = mul i32 %37, %13
  %401 = add i32 %400, %12
  %402 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %401, i32 undef)  ; BufferLoad(srv,index,wot)
  %403 = extractvalue %dx.types.ResRet.i32 %402, 0
  %404 = extractvalue %dx.types.ResRet.i32 %402, 1
  %405 = extractvalue %dx.types.ResRet.i32 %402, 2
  %406 = extractvalue %dx.types.ResRet.i32 %402, 3
  %407 = bitcast i32 %403 to float
  %408 = bitcast i32 %404 to float
  %409 = bitcast i32 %405 to float
  %410 = bitcast i32 %406 to float
  %411 = add i32 %401, 16
  %412 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %411, i32 undef)  ; BufferLoad(srv,index,wot)
  %413 = extractvalue %dx.types.ResRet.i32 %412, 0
  %414 = extractvalue %dx.types.ResRet.i32 %412, 1
  %415 = extractvalue %dx.types.ResRet.i32 %412, 2
  %416 = extractvalue %dx.types.ResRet.i32 %412, 3
  %417 = bitcast i32 %413 to float
  %418 = bitcast i32 %414 to float
  %419 = bitcast i32 %415 to float
  %420 = bitcast i32 %416 to float
  %421 = add i32 %401, 32
  %422 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %421, i32 undef)  ; BufferLoad(srv,index,wot)
  %423 = extractvalue %dx.types.ResRet.i32 %422, 0
  %424 = extractvalue %dx.types.ResRet.i32 %422, 1
  %425 = extractvalue %dx.types.ResRet.i32 %422, 2
  %426 = extractvalue %dx.types.ResRet.i32 %422, 3
  %427 = bitcast i32 %423 to float
  %428 = bitcast i32 %424 to float
  %429 = bitcast i32 %425 to float
  %430 = bitcast i32 %426 to float
  %431 = mul i32 %29, %13
  %432 = add i32 %431, %12
  %433 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %432, i32 undef)  ; BufferLoad(srv,index,wot)
  %434 = extractvalue %dx.types.ResRet.i32 %433, 0
  %435 = extractvalue %dx.types.ResRet.i32 %433, 1
  %436 = extractvalue %dx.types.ResRet.i32 %433, 2
  %437 = extractvalue %dx.types.ResRet.i32 %433, 3
  %438 = bitcast i32 %434 to float
  %439 = bitcast i32 %435 to float
  %440 = bitcast i32 %436 to float
  %441 = bitcast i32 %437 to float
  %442 = add i32 %432, 16
  %443 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %442, i32 undef)  ; BufferLoad(srv,index,wot)
  %444 = extractvalue %dx.types.ResRet.i32 %443, 0
  %445 = extractvalue %dx.types.ResRet.i32 %443, 1
  %446 = extractvalue %dx.types.ResRet.i32 %443, 2
  %447 = extractvalue %dx.types.ResRet.i32 %443, 3
  %448 = bitcast i32 %444 to float
  %449 = bitcast i32 %445 to float
  %450 = bitcast i32 %446 to float
  %451 = bitcast i32 %447 to float
  %452 = add i32 %432, 32
  %453 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %452, i32 undef)  ; BufferLoad(srv,index,wot)
  %454 = extractvalue %dx.types.ResRet.i32 %453, 0
  %455 = extractvalue %dx.types.ResRet.i32 %453, 1
  %456 = extractvalue %dx.types.ResRet.i32 %453, 2
  %457 = extractvalue %dx.types.ResRet.i32 %453, 3
  %458 = bitcast i32 %454 to float
  %459 = bitcast i32 %455 to float
  %460 = bitcast i32 %456 to float
  %461 = bitcast i32 %457 to float
  %462 = fmul fast float %407, %186
  %463 = fmul fast float %417, %186
  %464 = fmul fast float %427, %186
  %465 = fmul fast float %408, %186
  %466 = fmul fast float %418, %186
  %467 = fmul fast float %428, %186
  %468 = fmul fast float %409, %186
  %469 = fmul fast float %419, %186
  %470 = fmul fast float %429, %186
  %471 = fmul fast float %410, %186
  %472 = fmul fast float %420, %186
  %473 = fmul fast float %430, %186
  %474 = fadd fast float %388, %462
  %475 = fadd fast float %389, %463
  %476 = fadd fast float %390, %464
  %477 = fadd fast float %391, %465
  %478 = fadd fast float %392, %466
  %479 = fadd fast float %393, %467
  %480 = fadd fast float %394, %468
  %481 = fadd fast float %395, %469
  %482 = fadd fast float %396, %470
  %483 = fadd fast float %397, %471
  %484 = fadd fast float %398, %472
  %485 = fadd fast float %399, %473
  %486 = fmul fast float %438, %190
  %487 = fmul fast float %448, %190
  %488 = fmul fast float %458, %190
  %489 = fmul fast float %439, %190
  %490 = fmul fast float %449, %190
  %491 = fmul fast float %459, %190
  %492 = fmul fast float %440, %190
  %493 = fmul fast float %450, %190
  %494 = fmul fast float %460, %190
  %495 = fmul fast float %441, %190
  %496 = fmul fast float %451, %190
  %497 = fmul fast float %461, %190
  %498 = fadd fast float %474, %486
  %499 = fadd fast float %475, %487
  %500 = fadd fast float %476, %488
  %501 = fadd fast float %477, %489
  %502 = fadd fast float %478, %490
  %503 = fadd fast float %479, %491
  %504 = fadd fast float %480, %492
  %505 = fadd fast float %481, %493
  %506 = fadd fast float %482, %494
  %507 = fadd fast float %483, %495
  %508 = fadd fast float %484, %496
  %509 = fadd fast float %485, %497
  %510 = mul i32 %38, %13
  %511 = add i32 %510, %12
  %512 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %511, i32 undef)  ; BufferLoad(srv,index,wot)
  %513 = extractvalue %dx.types.ResRet.i32 %512, 0
  %514 = extractvalue %dx.types.ResRet.i32 %512, 1
  %515 = extractvalue %dx.types.ResRet.i32 %512, 2
  %516 = extractvalue %dx.types.ResRet.i32 %512, 3
  %517 = bitcast i32 %513 to float
  %518 = bitcast i32 %514 to float
  %519 = bitcast i32 %515 to float
  %520 = bitcast i32 %516 to float
  %521 = add i32 %511, 16
  %522 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %521, i32 undef)  ; BufferLoad(srv,index,wot)
  %523 = extractvalue %dx.types.ResRet.i32 %522, 0
  %524 = extractvalue %dx.types.ResRet.i32 %522, 1
  %525 = extractvalue %dx.types.ResRet.i32 %522, 2
  %526 = extractvalue %dx.types.ResRet.i32 %522, 3
  %527 = bitcast i32 %523 to float
  %528 = bitcast i32 %524 to float
  %529 = bitcast i32 %525 to float
  %530 = bitcast i32 %526 to float
  %531 = add i32 %511, 32
  %532 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %531, i32 undef)  ; BufferLoad(srv,index,wot)
  %533 = extractvalue %dx.types.ResRet.i32 %532, 0
  %534 = extractvalue %dx.types.ResRet.i32 %532, 1
  %535 = extractvalue %dx.types.ResRet.i32 %532, 2
  %536 = extractvalue %dx.types.ResRet.i32 %532, 3
  %537 = bitcast i32 %533 to float
  %538 = bitcast i32 %534 to float
  %539 = bitcast i32 %535 to float
  %540 = bitcast i32 %536 to float
  %541 = mul i32 %30, %13
  %542 = add i32 %541, %12
  %543 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %542, i32 undef)  ; BufferLoad(srv,index,wot)
  %544 = extractvalue %dx.types.ResRet.i32 %543, 0
  %545 = extractvalue %dx.types.ResRet.i32 %543, 1
  %546 = extractvalue %dx.types.ResRet.i32 %543, 2
  %547 = extractvalue %dx.types.ResRet.i32 %543, 3
  %548 = bitcast i32 %544 to float
  %549 = bitcast i32 %545 to float
  %550 = bitcast i32 %546 to float
  %551 = bitcast i32 %547 to float
  %552 = add i32 %542, 16
  %553 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %552, i32 undef)  ; BufferLoad(srv,index,wot)
  %554 = extractvalue %dx.types.ResRet.i32 %553, 0
  %555 = extractvalue %dx.types.ResRet.i32 %553, 1
  %556 = extractvalue %dx.types.ResRet.i32 %553, 2
  %557 = extractvalue %dx.types.ResRet.i32 %553, 3
  %558 = bitcast i32 %554 to float
  %559 = bitcast i32 %555 to float
  %560 = bitcast i32 %556 to float
  %561 = bitcast i32 %557 to float
  %562 = add i32 %542, 32
  %563 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %562, i32 undef)  ; BufferLoad(srv,index,wot)
  %564 = extractvalue %dx.types.ResRet.i32 %563, 0
  %565 = extractvalue %dx.types.ResRet.i32 %563, 1
  %566 = extractvalue %dx.types.ResRet.i32 %563, 2
  %567 = extractvalue %dx.types.ResRet.i32 %563, 3
  %568 = bitcast i32 %564 to float
  %569 = bitcast i32 %565 to float
  %570 = bitcast i32 %566 to float
  %571 = bitcast i32 %567 to float
  %572 = fmul fast float %517, %187
  %573 = fmul fast float %527, %187
  %574 = fmul fast float %537, %187
  %575 = fmul fast float %518, %187
  %576 = fmul fast float %528, %187
  %577 = fmul fast float %538, %187
  %578 = fmul fast float %519, %187
  %579 = fmul fast float %529, %187
  %580 = fmul fast float %539, %187
  %581 = fmul fast float %520, %187
  %582 = fmul fast float %530, %187
  %583 = fmul fast float %540, %187
  %584 = fadd fast float %498, %572
  %585 = fadd fast float %499, %573
  %586 = fadd fast float %500, %574
  %587 = fadd fast float %501, %575
  %588 = fadd fast float %502, %576
  %589 = fadd fast float %503, %577
  %590 = fadd fast float %504, %578
  %591 = fadd fast float %505, %579
  %592 = fadd fast float %506, %580
  %593 = fadd fast float %507, %581
  %594 = fadd fast float %508, %582
  %595 = fadd fast float %509, %583
  %596 = fmul fast float %548, %191
  %597 = fmul fast float %558, %191
  %598 = fmul fast float %568, %191
  %599 = fmul fast float %549, %191
  %600 = fmul fast float %559, %191
  %601 = fmul fast float %569, %191
  %602 = fmul fast float %550, %191
  %603 = fmul fast float %560, %191
  %604 = fmul fast float %570, %191
  %605 = fmul fast float %551, %191
  %606 = fmul fast float %561, %191
  %607 = fmul fast float %571, %191
  %608 = fadd fast float %584, %596
  %609 = fadd fast float %585, %597
  %610 = fadd fast float %586, %598
  %611 = fadd fast float %587, %599
  %612 = fadd fast float %588, %600
  %613 = fadd fast float %589, %601
  %614 = fadd fast float %590, %602
  %615 = fadd fast float %591, %603
  %616 = fadd fast float %592, %604
  %617 = fadd fast float %593, %605
  %618 = fadd fast float %594, %606
  %619 = fadd fast float %595, %607
  %620 = fadd fast float %24, %23
  %621 = fadd fast float %620, %25
  %622 = fadd fast float %621, %26
  %623 = fadd fast float %622, %31
  %624 = fadd fast float %623, %32
  %625 = fadd fast float %624, %33
  %626 = fadd fast float %625, %34
  %627 = fdiv fast float %626, %183
  %628 = fmul fast float %608, %42
  %629 = call float @dx.op.tertiary.f32(i32 46, float %609, float %43, float %628)  ; FMad(a,b,c)
  %630 = call float @dx.op.tertiary.f32(i32 46, float %610, float %44, float %629)  ; FMad(a,b,c)
  %631 = fmul fast float %608, %46
  %632 = call float @dx.op.tertiary.f32(i32 46, float %609, float %47, float %631)  ; FMad(a,b,c)
  %633 = call float @dx.op.tertiary.f32(i32 46, float %610, float %48, float %632)  ; FMad(a,b,c)
  %634 = fmul fast float %608, %50
  %635 = call float @dx.op.tertiary.f32(i32 46, float %609, float %51, float %634)  ; FMad(a,b,c)
  %636 = call float @dx.op.tertiary.f32(i32 46, float %610, float %52, float %635)  ; FMad(a,b,c)
  %637 = fmul fast float %611, %42
  %638 = call float @dx.op.tertiary.f32(i32 46, float %612, float %43, float %637)  ; FMad(a,b,c)
  %639 = call float @dx.op.tertiary.f32(i32 46, float %613, float %44, float %638)  ; FMad(a,b,c)
  %640 = fmul fast float %611, %46
  %641 = call float @dx.op.tertiary.f32(i32 46, float %612, float %47, float %640)  ; FMad(a,b,c)
  %642 = call float @dx.op.tertiary.f32(i32 46, float %613, float %48, float %641)  ; FMad(a,b,c)
  %643 = fmul fast float %611, %50
  %644 = call float @dx.op.tertiary.f32(i32 46, float %612, float %51, float %643)  ; FMad(a,b,c)
  %645 = call float @dx.op.tertiary.f32(i32 46, float %613, float %52, float %644)  ; FMad(a,b,c)
  %646 = fmul fast float %614, %42
  %647 = call float @dx.op.tertiary.f32(i32 46, float %615, float %43, float %646)  ; FMad(a,b,c)
  %648 = call float @dx.op.tertiary.f32(i32 46, float %616, float %44, float %647)  ; FMad(a,b,c)
  %649 = fmul fast float %614, %46
  %650 = call float @dx.op.tertiary.f32(i32 46, float %615, float %47, float %649)  ; FMad(a,b,c)
  %651 = call float @dx.op.tertiary.f32(i32 46, float %616, float %48, float %650)  ; FMad(a,b,c)
  %652 = fmul fast float %614, %50
  %653 = call float @dx.op.tertiary.f32(i32 46, float %615, float %51, float %652)  ; FMad(a,b,c)
  %654 = call float @dx.op.tertiary.f32(i32 46, float %616, float %52, float %653)  ; FMad(a,b,c)
  %655 = fmul fast float %617, %42
  %656 = call float @dx.op.tertiary.f32(i32 46, float %618, float %43, float %655)  ; FMad(a,b,c)
  %657 = call float @dx.op.tertiary.f32(i32 46, float %619, float %44, float %656)  ; FMad(a,b,c)
  %658 = call float @dx.op.tertiary.f32(i32 46, float %627, float %67, float %657)  ; FMad(a,b,c)
  %659 = fmul fast float %617, %46
  %660 = call float @dx.op.tertiary.f32(i32 46, float %618, float %47, float %659)  ; FMad(a,b,c)
  %661 = call float @dx.op.tertiary.f32(i32 46, float %619, float %48, float %660)  ; FMad(a,b,c)
  %662 = call float @dx.op.tertiary.f32(i32 46, float %627, float %68, float %661)  ; FMad(a,b,c)
  %663 = fmul fast float %617, %50
  %664 = call float @dx.op.tertiary.f32(i32 46, float %618, float %51, float %663)  ; FMad(a,b,c)
  %665 = call float @dx.op.tertiary.f32(i32 46, float %619, float %52, float %664)  ; FMad(a,b,c)
  %666 = call float @dx.op.tertiary.f32(i32 46, float %627, float %69, float %665)  ; FMad(a,b,c)
  %667 = fmul fast float %18, 2.000000e+00
  %668 = fmul fast float %19, 2.000000e+00
  %669 = fmul fast float %20, 2.000000e+00
  %670 = fadd fast float %667, -1.000000e+00
  %671 = fadd fast float %668, -1.000000e+00
  %672 = fadd fast float %669, -1.000000e+00
  %673 = fmul fast float %14, 2.000000e+00
  %674 = fmul fast float %15, 2.000000e+00
  %675 = fmul fast float %16, 2.000000e+00
  %676 = fadd fast float %673, -1.000000e+00
  %677 = fadd fast float %674, -1.000000e+00
  %678 = fadd fast float %675, -1.000000e+00
  %679 = fmul fast float %17, 2.000000e+00
  %680 = fadd fast float %679, -1.000000e+00
  %681 = fmul fast float %671, %678
  %682 = fmul fast float %672, %677
  %683 = fsub fast float %681, %682
  %684 = fmul fast float %672, %676
  %685 = fmul fast float %670, %678
  %686 = fsub fast float %684, %685
  %687 = fmul fast float %670, %677
  %688 = fmul fast float %671, %676
  %689 = fsub fast float %687, %688
  %690 = fmul fast float %683, %680
  %691 = fmul fast float %686, %680
  %692 = fmul fast float %689, %680
  %693 = fmul fast float %630, %676
  %694 = call float @dx.op.tertiary.f32(i32 46, float %677, float %639, float %693)  ; FMad(a,b,c)
  %695 = call float @dx.op.tertiary.f32(i32 46, float %678, float %648, float %694)  ; FMad(a,b,c)
  %696 = fmul fast float %633, %676
  %697 = call float @dx.op.tertiary.f32(i32 46, float %677, float %642, float %696)  ; FMad(a,b,c)
  %698 = call float @dx.op.tertiary.f32(i32 46, float %678, float %651, float %697)  ; FMad(a,b,c)
  %699 = fmul fast float %636, %676
  %700 = call float @dx.op.tertiary.f32(i32 46, float %677, float %645, float %699)  ; FMad(a,b,c)
  %701 = call float @dx.op.tertiary.f32(i32 46, float %678, float %654, float %700)  ; FMad(a,b,c)
  %702 = fmul fast float %630, %690
  %703 = call float @dx.op.tertiary.f32(i32 46, float %691, float %639, float %702)  ; FMad(a,b,c)
  %704 = call float @dx.op.tertiary.f32(i32 46, float %692, float %648, float %703)  ; FMad(a,b,c)
  %705 = fmul fast float %633, %690
  %706 = call float @dx.op.tertiary.f32(i32 46, float %691, float %642, float %705)  ; FMad(a,b,c)
  %707 = call float @dx.op.tertiary.f32(i32 46, float %692, float %651, float %706)  ; FMad(a,b,c)
  %708 = fmul fast float %636, %690
  %709 = call float @dx.op.tertiary.f32(i32 46, float %691, float %645, float %708)  ; FMad(a,b,c)
  %710 = call float @dx.op.tertiary.f32(i32 46, float %692, float %654, float %709)  ; FMad(a,b,c)
  %711 = fmul fast float %630, %670
  %712 = call float @dx.op.tertiary.f32(i32 46, float %671, float %639, float %711)  ; FMad(a,b,c)
  %713 = call float @dx.op.tertiary.f32(i32 46, float %672, float %648, float %712)  ; FMad(a,b,c)
  %714 = fmul fast float %633, %670
  %715 = call float @dx.op.tertiary.f32(i32 46, float %671, float %642, float %714)  ; FMad(a,b,c)
  %716 = call float @dx.op.tertiary.f32(i32 46, float %672, float %651, float %715)  ; FMad(a,b,c)
  %717 = fmul fast float %636, %670
  %718 = call float @dx.op.tertiary.f32(i32 46, float %671, float %645, float %717)  ; FMad(a,b,c)
  %719 = call float @dx.op.tertiary.f32(i32 46, float %672, float %654, float %718)  ; FMad(a,b,c)
  %720 = call float @dx.op.dot3.f32(i32 55, float %713, float %716, float %719, float %713, float %716, float %719)  ; Dot3(ax,ay,az,bx,by,bz)
  %721 = call float @dx.op.unary.f32(i32 25, float %720)  ; Rsqrt(value)
  %722 = fmul fast float %721, %713
  %723 = fmul fast float %721, %716
  %724 = fmul fast float %721, %719
  %725 = call float @dx.op.dot3.f32(i32 55, float %704, float %707, float %710, float %704, float %707, float %710)  ; Dot3(ax,ay,az,bx,by,bz)
  %726 = call float @dx.op.unary.f32(i32 25, float %725)  ; Rsqrt(value)
  %727 = fmul fast float %726, %704
  %728 = fmul fast float %726, %707
  %729 = fmul fast float %726, %710
  %730 = call float @dx.op.dot3.f32(i32 55, float %695, float %698, float %701, float %695, float %698, float %701)  ; Dot3(ax,ay,az,bx,by,bz)
  %731 = call float @dx.op.unary.f32(i32 25, float %730)  ; Rsqrt(value)
  %732 = fmul fast float %731, %695
  %733 = fmul fast float %731, %698
  %734 = fmul fast float %731, %701
  %735 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %736 = extractvalue %dx.types.CBufRet.f32 %735, 0
  %737 = fmul fast float %736, %722
  %738 = fmul fast float %736, %723
  %739 = fmul fast float %736, %724
  %740 = fadd fast float %737, %177
  %741 = fadd fast float %738, %178
  %742 = fadd fast float %739, %179
  %743 = fmul fast float %740, %630
  %744 = call float @dx.op.tertiary.f32(i32 46, float %741, float %639, float %743)  ; FMad(a,b,c)
  %745 = call float @dx.op.tertiary.f32(i32 46, float %742, float %648, float %744)  ; FMad(a,b,c)
  %746 = fadd fast float %745, %658
  %747 = fmul fast float %740, %633
  %748 = call float @dx.op.tertiary.f32(i32 46, float %741, float %642, float %747)  ; FMad(a,b,c)
  %749 = call float @dx.op.tertiary.f32(i32 46, float %742, float %651, float %748)  ; FMad(a,b,c)
  %750 = fadd fast float %749, %662
  %751 = fmul fast float %740, %636
  %752 = call float @dx.op.tertiary.f32(i32 46, float %741, float %645, float %751)  ; FMad(a,b,c)
  %753 = call float @dx.op.tertiary.f32(i32 46, float %742, float %654, float %752)  ; FMad(a,b,c)
  %754 = fadd fast float %753, %666
  %755 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %756 = extractvalue %dx.types.CBufRet.f32 %755, 0
  %757 = extractvalue %dx.types.CBufRet.f32 %755, 1
  %758 = extractvalue %dx.types.CBufRet.f32 %755, 2
  %759 = extractvalue %dx.types.CBufRet.f32 %755, 3
  %760 = fmul fast float %756, %746
  %761 = call float @dx.op.tertiary.f32(i32 46, float %750, float %757, float %760)  ; FMad(a,b,c)
  %762 = call float @dx.op.tertiary.f32(i32 46, float %754, float %758, float %761)  ; FMad(a,b,c)
  %763 = fadd fast float %762, %759
  %764 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 37)  ; CBufferLoadLegacy(handle,regIndex)
  %765 = extractvalue %dx.types.CBufRet.f32 %764, 0
  %766 = extractvalue %dx.types.CBufRet.f32 %764, 1
  %767 = extractvalue %dx.types.CBufRet.f32 %764, 2
  %768 = fadd fast float %765, %746
  %769 = fadd fast float %766, %750
  %770 = fadd fast float %767, %754
  %771 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %772 = extractvalue %dx.types.CBufRet.f32 %771, 0
  %773 = extractvalue %dx.types.CBufRet.f32 %771, 1
  %774 = extractvalue %dx.types.CBufRet.f32 %771, 2
  %775 = extractvalue %dx.types.CBufRet.f32 %771, 3
  %776 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %777 = extractvalue %dx.types.CBufRet.f32 %776, 0
  %778 = extractvalue %dx.types.CBufRet.f32 %776, 1
  %779 = extractvalue %dx.types.CBufRet.f32 %776, 2
  %780 = extractvalue %dx.types.CBufRet.f32 %776, 3
  %781 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %782 = extractvalue %dx.types.CBufRet.f32 %781, 0
  %783 = extractvalue %dx.types.CBufRet.f32 %781, 1
  %784 = extractvalue %dx.types.CBufRet.f32 %781, 2
  %785 = extractvalue %dx.types.CBufRet.f32 %781, 3
  %786 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %787 = extractvalue %dx.types.CBufRet.f32 %786, 0
  %788 = extractvalue %dx.types.CBufRet.f32 %786, 1
  %789 = extractvalue %dx.types.CBufRet.f32 %786, 2
  %790 = extractvalue %dx.types.CBufRet.f32 %786, 3
  %791 = fmul fast float %772, %746
  %792 = call float @dx.op.tertiary.f32(i32 46, float %750, float %773, float %791)  ; FMad(a,b,c)
  %793 = call float @dx.op.tertiary.f32(i32 46, float %754, float %774, float %792)  ; FMad(a,b,c)
  %794 = fadd fast float %793, %775
  %795 = fmul fast float %777, %746
  %796 = call float @dx.op.tertiary.f32(i32 46, float %750, float %778, float %795)  ; FMad(a,b,c)
  %797 = call float @dx.op.tertiary.f32(i32 46, float %754, float %779, float %796)  ; FMad(a,b,c)
  %798 = fadd fast float %797, %780
  %799 = fmul fast float %782, %746
  %800 = call float @dx.op.tertiary.f32(i32 46, float %750, float %783, float %799)  ; FMad(a,b,c)
  %801 = call float @dx.op.tertiary.f32(i32 46, float %754, float %784, float %800)  ; FMad(a,b,c)
  %802 = fadd fast float %801, %785
  %803 = fmul fast float %787, %746
  %804 = call float @dx.op.tertiary.f32(i32 46, float %750, float %788, float %803)  ; FMad(a,b,c)
  %805 = call float @dx.op.tertiary.f32(i32 46, float %754, float %789, float %804)  ; FMad(a,b,c)
  %806 = fadd fast float %805, %790
  %807 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %808 = extractvalue %dx.types.CBufRet.f32 %807, 0
  %809 = extractvalue %dx.types.CBufRet.f32 %807, 1
  %810 = extractvalue %dx.types.CBufRet.f32 %807, 2
  %811 = extractvalue %dx.types.CBufRet.f32 %807, 3
  %812 = call float @dx.op.dot4.f32(i32 56, float %808, float %809, float %810, float %811, float %768, float %769, float %770, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %794)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %798)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %802)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %806)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %21)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %22)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %722)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %723)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %724)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %732)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %733)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float %734)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %727)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %728)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %729)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %763)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %812)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!15}
!dx.entryPoints = !{!16}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{!5, null, !9, null}
!5 = !{!6, !7}
!6 = !{i32 0, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 10, i32 1, i32 11, i32 0, null}
!7 = !{i32 1, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 77, i32 1, i32 2, i32 0, !8}
!8 = !{i32 0, i32 9}
!9 = !{!10, !11, !12, !13, !14}
!10 = !{i32 0, %MaterialModifiersConsts* undef, !"", i32 0, i32 7, i32 1, i32 496, null}
!11 = !{i32 1, %hostlayout.CameraShaderConsts* undef, !"", i32 0, i32 1, i32 1, i32 848, null}
!12 = !{i32 2, %ShaderSpecificConstants* undef, !"", i32 0, i32 4, i32 1, i32 4, null}
!13 = !{i32 3, %hostlayout.FrequentVertexConsts* undef, !"", i32 0, i32 5, i32 1, i32 112, null}
!14 = !{i32 4, %CullObjectsCB* undef, !"", i32 0, i32 8, i32 1, i32 512, null}
!15 = !{[63 x i32] [i32 61, i32 17, i32 98319, i32 98319, i32 98319, i32 0, i32 131023, i32 131023, i32 131023, i32 131023, i32 131023, i32 131023, i32 131023, i32 131023, i32 131023, i32 131023, i32 131023, i32 131023, i32 131023, i32 131023, i32 131023, i32 131023, i32 16, i32 32, i32 0, i32 0, i32 127439, i32 127439, i32 127439, i32 0, i32 32256, i32 32256, i32 32256, i32 28672, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 131023, i32 131023, i32 131023, i32 98319, i32 131023, i32 131023, i32 131023, i32 98319, i32 131023, i32 131023, i32 131023, i32 98319, i32 131023, i32 131023, i32 0, i32 0, i32 98319, i32 98319, i32 98319, i32 0, i32 98319]}
!16 = !{void ()* @vs_main_, !"vs_main_", !17, !4, !47}
!17 = !{!18, !40, null}
!18 = !{!19, !22, !24, !25, !27, !28, !30, !31, !32, !33, !34, !36, !37, !38}
!19 = !{i32 0, !"POSITION", i8 9, i8 0, !20, i8 0, i32 1, i8 3, i32 0, i8 0, !21}
!20 = !{i32 0}
!21 = !{i32 3, i32 7}
!22 = !{i32 1, !"BLENDINDICES", i8 5, i8 0, !20, i8 0, i32 1, i8 4, i32 1, i8 0, !23}
!23 = !{i32 3, i32 15}
!24 = !{i32 2, !"BLENDWEIGHT", i8 9, i8 0, !20, i8 0, i32 1, i8 4, i32 2, i8 0, !23}
!25 = !{i32 3, !"BLENDINDICES", i8 5, i8 0, !26, i8 0, i32 1, i8 4, i32 3, i8 0, !23}
!26 = !{i32 1}
!27 = !{i32 4, !"BLENDWEIGHT", i8 9, i8 0, !26, i8 0, i32 1, i8 4, i32 4, i8 0, !23}
!28 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !20, i8 0, i32 1, i8 2, i32 5, i8 0, !29}
!29 = !{i32 3, i32 3}
!30 = !{i32 6, !"NORMAL", i8 9, i8 0, !20, i8 0, i32 1, i8 3, i32 6, i8 0, !21}
!31 = !{i32 7, !"TANGENT", i8 9, i8 0, !20, i8 0, i32 1, i8 4, i32 7, i8 0, !23}
!32 = !{i32 8, !"COLOR", i8 9, i8 0, !20, i8 0, i32 1, i8 4, i32 8, i8 0, null}
!33 = !{i32 9, !"TEXCOORD", i8 9, i8 0, !26, i8 0, i32 1, i8 2, i32 9, i8 0, null}
!34 = !{i32 10, !"INSTANCE_TRANSFORM", i8 9, i8 0, !35, i8 0, i32 3, i8 4, i32 10, i8 0, !23}
!35 = !{i32 0, i32 1, i32 2}
!36 = !{i32 11, !"INSTANCE_SKINNING_DATA", i8 5, i8 0, !20, i8 0, i32 1, i8 4, i32 13, i8 0, !29}
!37 = !{i32 12, !"EXTRA_DATA", i8 9, i8 0, !20, i8 0, i32 1, i8 3, i32 14, i8 0, !21}
!38 = !{i32 13, !"SV_VertexID", i8 5, i8 1, !20, i8 0, i32 1, i8 1, i32 15, i8 0, !39}
!39 = !{i32 3, i32 1}
!40 = !{!41, !42, !43, !44, !46}
!41 = !{i32 0, !"SV_Position", i8 9, i8 3, !20, i8 4, i32 1, i8 4, i32 0, i8 0, !23}
!42 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !20, i8 2, i32 1, i8 4, i32 1, i8 0, !23}
!43 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !26, i8 2, i32 1, i8 4, i32 2, i8 0, !23}
!44 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !45, i8 2, i32 1, i8 4, i32 3, i8 0, !23}
!45 = !{i32 2}
!46 = !{i32 4, !"SV_ClipDistance", i8 9, i8 6, !20, i8 2, i32 1, i8 1, i32 4, i8 0, !39}
!47 = !{i32 0, i64 16}
 