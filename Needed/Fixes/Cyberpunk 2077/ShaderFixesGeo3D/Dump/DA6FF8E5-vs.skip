;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; POSITION                 0   xyz         0     NONE   float   xyz 
; BLENDINDICES             0   xyzw        1     NONE    uint   xyzw
; BLENDWEIGHT              0   xyzw        2     NONE   float   xyzw
; TEXCOORD                 0   xy          3     NONE   float   xy  
; NORMAL                   0   xyz         4     NONE   float   xyz 
; TANGENT                  0   xyzw        5     NONE   float   xyzw
; COLOR                    0   xyzw        6     NONE   float       
; TEXCOORD                 1   xy          7     NONE   float       
; INSTANCE_TRANSFORM       0   xyzw        8     NONE   float   xyzw
; INSTANCE_TRANSFORM       1   xyzw        9     NONE   float   xyzw
; INSTANCE_TRANSFORM       2   xyzw       10     NONE   float   xyzw
; INSTANCE_SKINNING_DATA     0   xyzw       11     NONE    uint   xyz 
; EXTRA_DATA               0   xyz        12     NONE   float   xyz 
; SV_VertexID              0   x          13   VERTID    uint   x   
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; TEXCOORD                 0   xyzw        1     NONE   float   xyzw
; TEXCOORD                 1   xyzw        2     NONE   float   xyzw
; TEXCOORD                 2   xyzw        3     NONE   float   xyzw
; TEXCOORD                 3   xyzw        4     NONE   float   xyzw
; TEXCOORD                 4   xyzw        5     NONE   float   xyzw
; TEXCOORD                 5   xyzw        6     NONE   float   xyzw
; TEXCOORD                 6   xyzw        7     NONE   float   xyzw
; TEXCOORD                 7   xyz         8     NONE   float   xyz 
; SV_ClipDistance          0   x           9  CLIPDST   float   x   
;
; shader hash: 70926fb6f5ba480620683f920c5a95e6
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; POSITION                 0                              
; BLENDINDICES             0                              
; BLENDWEIGHT              0                              
; TEXCOORD                 0                              
; NORMAL                   0                              
; TANGENT                  0                              
; COLOR                    0                              
; TEXCOORD                 1                              
; INSTANCE_TRANSFORM       0                              
; INSTANCE_SKINNING_DATA     0                              
; EXTRA_DATA               0                              
; SV_VertexID              0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; TEXCOORD                 3                 linear       
; TEXCOORD                 4                 linear       
; TEXCOORD                 5                 linear       
; TEXCOORD                 6                 linear       
; TEXCOORD                 7                 linear       
; SV_ClipDistance          0                 linear       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [496 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [848 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [112 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [512 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb7     1
;                                   cbuffer      NA          NA     CB1            cb1     1
;                                   cbuffer      NA          NA     CB2            cb5     1
;                                   cbuffer      NA          NA     CB3            cb8     1
;                                   texture    byte         r/o      T0            t10     1
;                                   texture     f32          2d      T1            t77     1
;
;
; ViewId state:
;
; Number of inputs: 53, outputs: 37
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;   output 1 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;   output 2 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;   output 3 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;   output 4 depends on inputs: { 12 }
;   output 5 depends on inputs: { 13 }
;   output 6 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 7 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 8 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 9 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 20, 21, 22, 23, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 10 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 20, 21, 22, 23, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 11 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 20, 21, 22, 23, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 12 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 20, 21, 22, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 13 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 20, 21, 22, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 14 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 20, 21, 22, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 15 depends on inputs: { 16 }
;   output 16 depends on inputs: { 17 }
;   output 17 depends on inputs: { 18 }
;   output 18 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 44, 45, 48, 49, 50, 52 }
;   output 19 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 36, 37, 38, 39, 44, 45, 48, 49, 50, 52 }
;   output 20 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;   output 21 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;   output 22 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;   output 23 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;   output 24 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;   output 25 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;   output 26 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 45, 46, 48, 49, 50, 52 }
;   output 27 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 45, 46, 48, 49, 50, 52 }
;   output 28 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 45, 46, 48, 49, 50, 52 }
;   output 29 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 45, 46, 48, 49, 50, 52 }
;   output 36 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%MaterialModifiersConsts = type { [31 x <4 x float>] }
%hostlayout.CameraShaderConsts = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, i32, i32, <2 x i32>, float, float }
%hostlayout.FrequentVertexConsts = type { [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float> }
%CullObjectsCB = type { [8 x %struct.CullObjectPacked] }
%struct.CullObjectPacked = type { <2 x i32>, <2 x i32>, <3 x float>, float, <3 x float>, float, <3 x float>, i32 }

define void @vs_main_() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 77, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 10, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 3, i32 8, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 2, i32 5, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 7, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %7 = call i32 @dx.op.loadInput.i32(i32 4, i32 11, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call i32 @dx.op.loadInput.i32(i32 4, i32 9, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call i32 @dx.op.loadInput.i32(i32 4, i32 9, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call i32 @dx.op.loadInput.i32(i32 4, i32 9, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %20 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %21 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %22 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %23 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %24 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %25 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %26 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %27 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %28 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %29 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %30 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %31 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %32 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %33 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %34 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %35 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %36 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %37 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %38 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 1, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %39 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 1, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %40 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 1, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %41 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 1, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %42 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 2, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %43 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 2, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %44 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 2, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %45 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 2, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %46 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %47 = extractvalue %dx.types.CBufRet.i32 %46, 0
  %48 = extractvalue %dx.types.CBufRet.i32 %46, 1
  %49 = extractvalue %dx.types.CBufRet.i32 %46, 2
  %50 = bitcast float %37 to i32
  %51 = bitcast float %41 to i32
  %52 = bitcast float %45 to i32
  %53 = sub i32 %50, %47
  %54 = sub i32 %51, %48
  %55 = sub i32 %52, %49
  %56 = sitofp i32 %53 to float
  %57 = sitofp i32 %54 to float
  %58 = sitofp i32 %55 to float
  %59 = fmul fast float %56, 0x3EE0000000000000
  %60 = fmul fast float %57, 0x3EE0000000000000
  %61 = fmul fast float %58, 0x3EE0000000000000
  %62 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %63 = extractvalue %dx.types.CBufRet.f32 %62, 0
  %64 = extractvalue %dx.types.CBufRet.f32 %62, 1
  %65 = extractvalue %dx.types.CBufRet.f32 %62, 2
  %66 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %67 = extractvalue %dx.types.CBufRet.f32 %66, 0
  %68 = extractvalue %dx.types.CBufRet.f32 %66, 1
  %69 = extractvalue %dx.types.CBufRet.f32 %66, 2
  %70 = fmul fast float %67, %31
  %71 = fmul fast float %68, %32
  %72 = fmul fast float %69, %33
  %73 = fadd fast float %70, %63
  %74 = fadd fast float %71, %64
  %75 = fadd fast float %72, %65
  %76 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %77 = extractvalue %dx.types.CBufRet.f32 %76, 0
  %78 = fcmp fast ogt float %77, 5.000000e-01
  br i1 %78, label %79, label %85

; <label>:79                                      ; preds = %0
  %80 = and i32 %7, 255
  %81 = lshr i32 %7, 8
  %82 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1, i32 0, i32 %80, i32 %81, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %83 = extractvalue %dx.types.ResRet.f32 %82, 0
  %84 = fmul float %83, 2.500000e+00
  br label %85

; <label>:85                                      ; preds = %79, %0
  %86 = phi float [ %84, %79 ], [ 0.000000e+00, %0 ]
  %87 = fmul fast float %86, %8
  %88 = fmul fast float %86, %9
  %89 = fmul fast float %86, %10
  %90 = fadd fast float %73, %87
  %91 = fadd fast float %74, %88
  %92 = fadd fast float %75, %89
  %93 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %94 = extractvalue %dx.types.CBufRet.f32 %93, 0
  %95 = fptoui float %94 to i32
  %96 = call i32 @dx.op.binary.i32(i32 40, i32 %95, i32 8)  ; UMin(a,b)
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %163, label %98

; <label>:98                                      ; preds = %85
  br label %99

; <label>:99                                      ; preds = %99, %98
  %100 = phi float [ %159, %99 ], [ 0.000000e+00, %98 ]
  %101 = phi i32 [ %160, %99 ], [ 0, %98 ]
  %102 = shl i32 %101, 2
  %103 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %102)  ; CBufferLoadLegacy(handle,regIndex)
  %104 = extractvalue %dx.types.CBufRet.i32 %103, 0
  %105 = extractvalue %dx.types.CBufRet.i32 %103, 1
  %106 = call float @dx.op.legacyF16ToF32(i32 131, i32 %104)  ; LegacyF16ToF32(value)
  %107 = lshr i32 %104, 16
  %108 = call float @dx.op.legacyF16ToF32(i32 131, i32 %107)  ; LegacyF16ToF32(value)
  %109 = call float @dx.op.legacyF16ToF32(i32 131, i32 %105)  ; LegacyF16ToF32(value)
  %110 = lshr i32 %105, 16
  %111 = call float @dx.op.legacyF16ToF32(i32 131, i32 %110)  ; LegacyF16ToF32(value)
  %112 = or i32 %102, 1
  %113 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %112)  ; CBufferLoadLegacy(handle,regIndex)
  %114 = extractvalue %dx.types.CBufRet.f32 %113, 0
  %115 = extractvalue %dx.types.CBufRet.f32 %113, 1
  %116 = extractvalue %dx.types.CBufRet.f32 %113, 2
  %117 = extractvalue %dx.types.CBufRet.f32 %113, 3
  %118 = or i32 %102, 2
  %119 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %118)  ; CBufferLoadLegacy(handle,regIndex)
  %120 = extractvalue %dx.types.CBufRet.f32 %119, 0
  %121 = extractvalue %dx.types.CBufRet.f32 %119, 1
  %122 = extractvalue %dx.types.CBufRet.f32 %119, 2
  %123 = extractvalue %dx.types.CBufRet.f32 %119, 3
  %124 = call float @dx.op.dot4.f32(i32 56, float %106, float %108, float %109, float %111, float %90, float %91, float %92, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %125 = fmul fast float %124, -1.000000e+01
  %126 = call float @dx.op.unary.f32(i32 7, float %125)  ; Saturate(value)
  %127 = fsub fast float 1.000000e+00, %126
  %128 = fsub fast float %90, %114
  %129 = fsub fast float %91, %115
  %130 = fsub fast float %92, %116
  %131 = fsub fast float %120, %114
  %132 = fsub fast float %121, %115
  %133 = fsub fast float %122, %116
  %134 = call float @dx.op.dot3.f32(i32 55, float %128, float %129, float %130, float %131, float %132, float %133)  ; Dot3(ax,ay,az,bx,by,bz)
  %135 = call float @dx.op.dot3.f32(i32 55, float %131, float %132, float %133, float %131, float %132, float %133)  ; Dot3(ax,ay,az,bx,by,bz)
  %136 = fdiv fast float %134, %135
  %137 = fmul fast float %136, %131
  %138 = fmul fast float %136, %132
  %139 = fmul fast float %136, %133
  %140 = fsub fast float %114, %90
  %141 = fadd fast float %140, %137
  %142 = fsub fast float %115, %91
  %143 = fadd fast float %142, %138
  %144 = fsub fast float %116, %92
  %145 = fadd fast float %144, %139
  %146 = call float @dx.op.dot3.f32(i32 55, float %141, float %143, float %145, float %141, float %143, float %145)  ; Dot3(ax,ay,az,bx,by,bz)
  %147 = call float @dx.op.unary.f32(i32 24, float %146)  ; Sqrt(value)
  %148 = fmul fast float %117, 5.000000e-01
  %149 = fsub fast float %147, %148
  %150 = fdiv fast float %149, %148
  %151 = call float @dx.op.unary.f32(i32 7, float %150)  ; Saturate(value)
  %152 = fmul fast float %151, 2.000000e+00
  %153 = fsub fast float 3.000000e+00, %152
  %154 = fmul fast float %151, %151
  %155 = fmul fast float %154, %153
  %156 = fsub fast float 1.000000e+00, %155
  %157 = fmul fast float %127, %123
  %158 = fmul fast float %157, %156
  %159 = call float @dx.op.binary.f32(i32 35, float %158, float %100)  ; FMax(a,b)
  %160 = add nuw i32 %101, 1
  %161 = icmp eq i32 %160, %96
  br i1 %161, label %162, label %99

; <label>:162                                     ; preds = %99
  br label %163

; <label>:163                                     ; preds = %162, %85
  %164 = phi float [ 0.000000e+00, %85 ], [ %159, %162 ]
  %165 = call float @dx.op.unary.f32(i32 7, float %164)  ; Saturate(value)
  %166 = fmul fast float %165, %8
  %167 = fmul fast float %165, %9
  %168 = fmul fast float %165, %10
  %169 = fadd fast float %166, %90
  %170 = fadd fast float %167, %91
  %171 = fadd fast float %168, %92
  %172 = extractvalue %dx.types.CBufRet.f32 %93, 2
  %173 = fcmp fast ogt float %172, 5.000000e-01
  br i1 %173, label %249, label %174

; <label>:174                                     ; preds = %163
  br i1 %97, label %240, label %175

; <label>:175                                     ; preds = %174
  br label %176

; <label>:176                                     ; preds = %176, %175
  %177 = phi float [ %236, %176 ], [ 0.000000e+00, %175 ]
  %178 = phi i32 [ %237, %176 ], [ 0, %175 ]
  %179 = shl i32 %178, 2
  %180 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %179)  ; CBufferLoadLegacy(handle,regIndex)
  %181 = extractvalue %dx.types.CBufRet.i32 %180, 0
  %182 = extractvalue %dx.types.CBufRet.i32 %180, 1
  %183 = call float @dx.op.legacyF16ToF32(i32 131, i32 %181)  ; LegacyF16ToF32(value)
  %184 = lshr i32 %181, 16
  %185 = call float @dx.op.legacyF16ToF32(i32 131, i32 %184)  ; LegacyF16ToF32(value)
  %186 = call float @dx.op.legacyF16ToF32(i32 131, i32 %182)  ; LegacyF16ToF32(value)
  %187 = lshr i32 %182, 16
  %188 = call float @dx.op.legacyF16ToF32(i32 131, i32 %187)  ; LegacyF16ToF32(value)
  %189 = or i32 %179, 1
  %190 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %189)  ; CBufferLoadLegacy(handle,regIndex)
  %191 = extractvalue %dx.types.CBufRet.f32 %190, 0
  %192 = extractvalue %dx.types.CBufRet.f32 %190, 1
  %193 = extractvalue %dx.types.CBufRet.f32 %190, 2
  %194 = extractvalue %dx.types.CBufRet.f32 %190, 3
  %195 = or i32 %179, 2
  %196 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %195)  ; CBufferLoadLegacy(handle,regIndex)
  %197 = extractvalue %dx.types.CBufRet.f32 %196, 0
  %198 = extractvalue %dx.types.CBufRet.f32 %196, 1
  %199 = extractvalue %dx.types.CBufRet.f32 %196, 2
  %200 = extractvalue %dx.types.CBufRet.f32 %196, 3
  %201 = call float @dx.op.dot4.f32(i32 56, float %183, float %185, float %186, float %188, float %169, float %170, float %171, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %202 = fmul fast float %201, -1.000000e+01
  %203 = call float @dx.op.unary.f32(i32 7, float %202)  ; Saturate(value)
  %204 = fsub fast float 1.000000e+00, %203
  %205 = fsub fast float %169, %191
  %206 = fsub fast float %170, %192
  %207 = fsub fast float %171, %193
  %208 = fsub fast float %197, %191
  %209 = fsub fast float %198, %192
  %210 = fsub fast float %199, %193
  %211 = call float @dx.op.dot3.f32(i32 55, float %205, float %206, float %207, float %208, float %209, float %210)  ; Dot3(ax,ay,az,bx,by,bz)
  %212 = call float @dx.op.dot3.f32(i32 55, float %208, float %209, float %210, float %208, float %209, float %210)  ; Dot3(ax,ay,az,bx,by,bz)
  %213 = fdiv fast float %211, %212
  %214 = fmul fast float %213, %208
  %215 = fmul fast float %213, %209
  %216 = fmul fast float %213, %210
  %217 = fsub fast float %191, %169
  %218 = fadd fast float %217, %214
  %219 = fsub fast float %192, %170
  %220 = fadd fast float %219, %215
  %221 = fsub fast float %193, %171
  %222 = fadd fast float %221, %216
  %223 = call float @dx.op.dot3.f32(i32 55, float %218, float %220, float %222, float %218, float %220, float %222)  ; Dot3(ax,ay,az,bx,by,bz)
  %224 = call float @dx.op.unary.f32(i32 24, float %223)  ; Sqrt(value)
  %225 = fmul fast float %194, 5.000000e-01
  %226 = fsub fast float %224, %225
  %227 = fdiv fast float %226, %225
  %228 = call float @dx.op.unary.f32(i32 7, float %227)  ; Saturate(value)
  %229 = fmul fast float %228, 2.000000e+00
  %230 = fsub fast float 3.000000e+00, %229
  %231 = fmul fast float %228, %228
  %232 = fmul fast float %231, %230
  %233 = fsub fast float 1.000000e+00, %232
  %234 = fmul fast float %204, %200
  %235 = fmul fast float %234, %233
  %236 = call float @dx.op.binary.f32(i32 35, float %235, float %177)  ; FMax(a,b)
  %237 = add nuw i32 %178, 1
  %238 = icmp eq i32 %237, %96
  br i1 %238, label %239, label %176

; <label>:239                                     ; preds = %176
  br label %240

; <label>:240                                     ; preds = %239, %174
  %241 = phi float [ 0.000000e+00, %174 ], [ %236, %239 ]
  %242 = call float @dx.op.unary.f32(i32 7, float %241)  ; Saturate(value)
  %243 = fmul fast float %242, %8
  %244 = fmul fast float %242, %9
  %245 = fmul fast float %242, %10
  %246 = fadd fast float %243, %169
  %247 = fadd fast float %244, %170
  %248 = fadd fast float %245, %171
  br label %249

; <label>:249                                     ; preds = %240, %163
  %250 = phi float [ %169, %163 ], [ %246, %240 ]
  %251 = phi float [ %170, %163 ], [ %247, %240 ]
  %252 = phi float [ %171, %163 ], [ %248, %240 ]
  %253 = call float @dx.op.dot4.f32(i32 56, float %23, float %24, float %25, float %26, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %254 = call float @dx.op.binary.f32(i32 35, float 0x3EE4F8B580000000, float %253)  ; FMax(a,b)
  %255 = fdiv fast float %23, %254
  %256 = fdiv fast float %24, %254
  %257 = fdiv fast float %25, %254
  %258 = fdiv fast float %26, %254
  %259 = mul i32 %27, %12
  %260 = add i32 %259, %11
  %261 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %260, i32 undef)  ; BufferLoad(srv,index,wot)
  %262 = extractvalue %dx.types.ResRet.i32 %261, 0
  %263 = extractvalue %dx.types.ResRet.i32 %261, 1
  %264 = extractvalue %dx.types.ResRet.i32 %261, 2
  %265 = extractvalue %dx.types.ResRet.i32 %261, 3
  %266 = bitcast i32 %262 to float
  %267 = bitcast i32 %263 to float
  %268 = bitcast i32 %264 to float
  %269 = bitcast i32 %265 to float
  %270 = add i32 %260, 16
  %271 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %270, i32 undef)  ; BufferLoad(srv,index,wot)
  %272 = extractvalue %dx.types.ResRet.i32 %271, 0
  %273 = extractvalue %dx.types.ResRet.i32 %271, 1
  %274 = extractvalue %dx.types.ResRet.i32 %271, 2
  %275 = extractvalue %dx.types.ResRet.i32 %271, 3
  %276 = bitcast i32 %272 to float
  %277 = bitcast i32 %273 to float
  %278 = bitcast i32 %274 to float
  %279 = bitcast i32 %275 to float
  %280 = add i32 %260, 32
  %281 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %280, i32 undef)  ; BufferLoad(srv,index,wot)
  %282 = extractvalue %dx.types.ResRet.i32 %281, 0
  %283 = extractvalue %dx.types.ResRet.i32 %281, 1
  %284 = extractvalue %dx.types.ResRet.i32 %281, 2
  %285 = extractvalue %dx.types.ResRet.i32 %281, 3
  %286 = bitcast i32 %282 to float
  %287 = bitcast i32 %283 to float
  %288 = bitcast i32 %284 to float
  %289 = bitcast i32 %285 to float
  %290 = fmul fast float %266, %255
  %291 = fmul fast float %276, %255
  %292 = fmul fast float %286, %255
  %293 = fmul fast float %267, %255
  %294 = fmul fast float %277, %255
  %295 = fmul fast float %287, %255
  %296 = fmul fast float %268, %255
  %297 = fmul fast float %278, %255
  %298 = fmul fast float %288, %255
  %299 = fmul fast float %269, %255
  %300 = fmul fast float %279, %255
  %301 = fmul fast float %289, %255
  %302 = mul i32 %28, %12
  %303 = add i32 %302, %11
  %304 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %303, i32 undef)  ; BufferLoad(srv,index,wot)
  %305 = extractvalue %dx.types.ResRet.i32 %304, 0
  %306 = extractvalue %dx.types.ResRet.i32 %304, 1
  %307 = extractvalue %dx.types.ResRet.i32 %304, 2
  %308 = extractvalue %dx.types.ResRet.i32 %304, 3
  %309 = bitcast i32 %305 to float
  %310 = bitcast i32 %306 to float
  %311 = bitcast i32 %307 to float
  %312 = bitcast i32 %308 to float
  %313 = add i32 %303, 16
  %314 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %313, i32 undef)  ; BufferLoad(srv,index,wot)
  %315 = extractvalue %dx.types.ResRet.i32 %314, 0
  %316 = extractvalue %dx.types.ResRet.i32 %314, 1
  %317 = extractvalue %dx.types.ResRet.i32 %314, 2
  %318 = extractvalue %dx.types.ResRet.i32 %314, 3
  %319 = bitcast i32 %315 to float
  %320 = bitcast i32 %316 to float
  %321 = bitcast i32 %317 to float
  %322 = bitcast i32 %318 to float
  %323 = add i32 %303, 32
  %324 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %323, i32 undef)  ; BufferLoad(srv,index,wot)
  %325 = extractvalue %dx.types.ResRet.i32 %324, 0
  %326 = extractvalue %dx.types.ResRet.i32 %324, 1
  %327 = extractvalue %dx.types.ResRet.i32 %324, 2
  %328 = extractvalue %dx.types.ResRet.i32 %324, 3
  %329 = bitcast i32 %325 to float
  %330 = bitcast i32 %326 to float
  %331 = bitcast i32 %327 to float
  %332 = bitcast i32 %328 to float
  %333 = fmul fast float %309, %256
  %334 = fmul fast float %319, %256
  %335 = fmul fast float %329, %256
  %336 = fmul fast float %310, %256
  %337 = fmul fast float %320, %256
  %338 = fmul fast float %330, %256
  %339 = fmul fast float %311, %256
  %340 = fmul fast float %321, %256
  %341 = fmul fast float %331, %256
  %342 = fmul fast float %312, %256
  %343 = fmul fast float %322, %256
  %344 = fmul fast float %332, %256
  %345 = fadd fast float %333, %290
  %346 = fadd fast float %334, %291
  %347 = fadd fast float %335, %292
  %348 = fadd fast float %336, %293
  %349 = fadd fast float %337, %294
  %350 = fadd fast float %338, %295
  %351 = fadd fast float %339, %296
  %352 = fadd fast float %340, %297
  %353 = fadd fast float %341, %298
  %354 = fadd fast float %342, %299
  %355 = fadd fast float %343, %300
  %356 = fadd fast float %344, %301
  %357 = mul i32 %29, %12
  %358 = add i32 %357, %11
  %359 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %358, i32 undef)  ; BufferLoad(srv,index,wot)
  %360 = extractvalue %dx.types.ResRet.i32 %359, 0
  %361 = extractvalue %dx.types.ResRet.i32 %359, 1
  %362 = extractvalue %dx.types.ResRet.i32 %359, 2
  %363 = extractvalue %dx.types.ResRet.i32 %359, 3
  %364 = bitcast i32 %360 to float
  %365 = bitcast i32 %361 to float
  %366 = bitcast i32 %362 to float
  %367 = bitcast i32 %363 to float
  %368 = add i32 %358, 16
  %369 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %368, i32 undef)  ; BufferLoad(srv,index,wot)
  %370 = extractvalue %dx.types.ResRet.i32 %369, 0
  %371 = extractvalue %dx.types.ResRet.i32 %369, 1
  %372 = extractvalue %dx.types.ResRet.i32 %369, 2
  %373 = extractvalue %dx.types.ResRet.i32 %369, 3
  %374 = bitcast i32 %370 to float
  %375 = bitcast i32 %371 to float
  %376 = bitcast i32 %372 to float
  %377 = bitcast i32 %373 to float
  %378 = add i32 %358, 32
  %379 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %378, i32 undef)  ; BufferLoad(srv,index,wot)
  %380 = extractvalue %dx.types.ResRet.i32 %379, 0
  %381 = extractvalue %dx.types.ResRet.i32 %379, 1
  %382 = extractvalue %dx.types.ResRet.i32 %379, 2
  %383 = extractvalue %dx.types.ResRet.i32 %379, 3
  %384 = bitcast i32 %380 to float
  %385 = bitcast i32 %381 to float
  %386 = bitcast i32 %382 to float
  %387 = bitcast i32 %383 to float
  %388 = fmul fast float %364, %257
  %389 = fmul fast float %374, %257
  %390 = fmul fast float %384, %257
  %391 = fmul fast float %365, %257
  %392 = fmul fast float %375, %257
  %393 = fmul fast float %385, %257
  %394 = fmul fast float %366, %257
  %395 = fmul fast float %376, %257
  %396 = fmul fast float %386, %257
  %397 = fmul fast float %367, %257
  %398 = fmul fast float %377, %257
  %399 = fmul fast float %387, %257
  %400 = fadd fast float %345, %388
  %401 = fadd fast float %346, %389
  %402 = fadd fast float %347, %390
  %403 = fadd fast float %348, %391
  %404 = fadd fast float %349, %392
  %405 = fadd fast float %350, %393
  %406 = fadd fast float %351, %394
  %407 = fadd fast float %352, %395
  %408 = fadd fast float %353, %396
  %409 = fadd fast float %354, %397
  %410 = fadd fast float %355, %398
  %411 = fadd fast float %356, %399
  %412 = mul i32 %30, %12
  %413 = add i32 %412, %11
  %414 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %413, i32 undef)  ; BufferLoad(srv,index,wot)
  %415 = extractvalue %dx.types.ResRet.i32 %414, 0
  %416 = extractvalue %dx.types.ResRet.i32 %414, 1
  %417 = extractvalue %dx.types.ResRet.i32 %414, 2
  %418 = extractvalue %dx.types.ResRet.i32 %414, 3
  %419 = bitcast i32 %415 to float
  %420 = bitcast i32 %416 to float
  %421 = bitcast i32 %417 to float
  %422 = bitcast i32 %418 to float
  %423 = add i32 %413, 16
  %424 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %423, i32 undef)  ; BufferLoad(srv,index,wot)
  %425 = extractvalue %dx.types.ResRet.i32 %424, 0
  %426 = extractvalue %dx.types.ResRet.i32 %424, 1
  %427 = extractvalue %dx.types.ResRet.i32 %424, 2
  %428 = extractvalue %dx.types.ResRet.i32 %424, 3
  %429 = bitcast i32 %425 to float
  %430 = bitcast i32 %426 to float
  %431 = bitcast i32 %427 to float
  %432 = bitcast i32 %428 to float
  %433 = add i32 %413, 32
  %434 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %433, i32 undef)  ; BufferLoad(srv,index,wot)
  %435 = extractvalue %dx.types.ResRet.i32 %434, 0
  %436 = extractvalue %dx.types.ResRet.i32 %434, 1
  %437 = extractvalue %dx.types.ResRet.i32 %434, 2
  %438 = extractvalue %dx.types.ResRet.i32 %434, 3
  %439 = bitcast i32 %435 to float
  %440 = bitcast i32 %436 to float
  %441 = bitcast i32 %437 to float
  %442 = bitcast i32 %438 to float
  %443 = fmul fast float %419, %258
  %444 = fmul fast float %429, %258
  %445 = fmul fast float %439, %258
  %446 = fmul fast float %420, %258
  %447 = fmul fast float %430, %258
  %448 = fmul fast float %440, %258
  %449 = fmul fast float %421, %258
  %450 = fmul fast float %431, %258
  %451 = fmul fast float %441, %258
  %452 = fmul fast float %422, %258
  %453 = fmul fast float %432, %258
  %454 = fmul fast float %442, %258
  %455 = fadd fast float %400, %443
  %456 = fadd fast float %401, %444
  %457 = fadd fast float %402, %445
  %458 = fadd fast float %403, %446
  %459 = fadd fast float %404, %447
  %460 = fadd fast float %405, %448
  %461 = fadd fast float %406, %449
  %462 = fadd fast float %407, %450
  %463 = fadd fast float %408, %451
  %464 = fadd fast float %409, %452
  %465 = fadd fast float %410, %453
  %466 = fadd fast float %411, %454
  %467 = fmul fast float %455, %250
  %468 = call float @dx.op.tertiary.f32(i32 46, float %251, float %458, float %467)  ; FMad(a,b,c)
  %469 = call float @dx.op.tertiary.f32(i32 46, float %252, float %461, float %468)  ; FMad(a,b,c)
  %470 = fadd fast float %464, %469
  %471 = fmul fast float %456, %250
  %472 = call float @dx.op.tertiary.f32(i32 46, float %251, float %459, float %471)  ; FMad(a,b,c)
  %473 = call float @dx.op.tertiary.f32(i32 46, float %252, float %462, float %472)  ; FMad(a,b,c)
  %474 = fadd fast float %465, %473
  %475 = fmul fast float %457, %250
  %476 = call float @dx.op.tertiary.f32(i32 46, float %251, float %460, float %475)  ; FMad(a,b,c)
  %477 = call float @dx.op.tertiary.f32(i32 46, float %252, float %463, float %476)  ; FMad(a,b,c)
  %478 = fadd fast float %466, %477
  br i1 %173, label %479, label %554

; <label>:479                                     ; preds = %249
  br i1 %97, label %545, label %480

; <label>:480                                     ; preds = %479
  br label %481

; <label>:481                                     ; preds = %481, %480
  %482 = phi float [ %541, %481 ], [ 0.000000e+00, %480 ]
  %483 = phi i32 [ %542, %481 ], [ 0, %480 ]
  %484 = shl i32 %483, 2
  %485 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %484)  ; CBufferLoadLegacy(handle,regIndex)
  %486 = extractvalue %dx.types.CBufRet.i32 %485, 0
  %487 = extractvalue %dx.types.CBufRet.i32 %485, 1
  %488 = call float @dx.op.legacyF16ToF32(i32 131, i32 %486)  ; LegacyF16ToF32(value)
  %489 = lshr i32 %486, 16
  %490 = call float @dx.op.legacyF16ToF32(i32 131, i32 %489)  ; LegacyF16ToF32(value)
  %491 = call float @dx.op.legacyF16ToF32(i32 131, i32 %487)  ; LegacyF16ToF32(value)
  %492 = lshr i32 %487, 16
  %493 = call float @dx.op.legacyF16ToF32(i32 131, i32 %492)  ; LegacyF16ToF32(value)
  %494 = or i32 %484, 1
  %495 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %494)  ; CBufferLoadLegacy(handle,regIndex)
  %496 = extractvalue %dx.types.CBufRet.f32 %495, 0
  %497 = extractvalue %dx.types.CBufRet.f32 %495, 1
  %498 = extractvalue %dx.types.CBufRet.f32 %495, 2
  %499 = extractvalue %dx.types.CBufRet.f32 %495, 3
  %500 = or i32 %484, 2
  %501 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %500)  ; CBufferLoadLegacy(handle,regIndex)
  %502 = extractvalue %dx.types.CBufRet.f32 %501, 0
  %503 = extractvalue %dx.types.CBufRet.f32 %501, 1
  %504 = extractvalue %dx.types.CBufRet.f32 %501, 2
  %505 = extractvalue %dx.types.CBufRet.f32 %501, 3
  %506 = call float @dx.op.dot4.f32(i32 56, float %488, float %490, float %491, float %493, float %470, float %474, float %478, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %507 = fmul fast float %506, -1.000000e+01
  %508 = call float @dx.op.unary.f32(i32 7, float %507)  ; Saturate(value)
  %509 = fsub fast float 1.000000e+00, %508
  %510 = fsub fast float %470, %496
  %511 = fsub fast float %474, %497
  %512 = fsub fast float %478, %498
  %513 = fsub fast float %502, %496
  %514 = fsub fast float %503, %497
  %515 = fsub fast float %504, %498
  %516 = call float @dx.op.dot3.f32(i32 55, float %510, float %511, float %512, float %513, float %514, float %515)  ; Dot3(ax,ay,az,bx,by,bz)
  %517 = call float @dx.op.dot3.f32(i32 55, float %513, float %514, float %515, float %513, float %514, float %515)  ; Dot3(ax,ay,az,bx,by,bz)
  %518 = fdiv fast float %516, %517
  %519 = fmul fast float %518, %513
  %520 = fmul fast float %518, %514
  %521 = fmul fast float %518, %515
  %522 = fsub fast float %496, %470
  %523 = fadd fast float %522, %519
  %524 = fsub fast float %497, %474
  %525 = fadd fast float %524, %520
  %526 = fsub fast float %498, %478
  %527 = fadd fast float %526, %521
  %528 = call float @dx.op.dot3.f32(i32 55, float %523, float %525, float %527, float %523, float %525, float %527)  ; Dot3(ax,ay,az,bx,by,bz)
  %529 = call float @dx.op.unary.f32(i32 24, float %528)  ; Sqrt(value)
  %530 = fmul fast float %499, 5.000000e-01
  %531 = fsub fast float %529, %530
  %532 = fdiv fast float %531, %530
  %533 = call float @dx.op.unary.f32(i32 7, float %532)  ; Saturate(value)
  %534 = fmul fast float %533, 2.000000e+00
  %535 = fsub fast float 3.000000e+00, %534
  %536 = fmul fast float %533, %533
  %537 = fmul fast float %536, %535
  %538 = fsub fast float 1.000000e+00, %537
  %539 = fmul fast float %509, %505
  %540 = fmul fast float %539, %538
  %541 = call float @dx.op.binary.f32(i32 35, float %540, float %482)  ; FMax(a,b)
  %542 = add nuw i32 %483, 1
  %543 = icmp eq i32 %542, %96
  br i1 %543, label %544, label %481

; <label>:544                                     ; preds = %481
  br label %545

; <label>:545                                     ; preds = %544, %479
  %546 = phi float [ 0.000000e+00, %479 ], [ %541, %544 ]
  %547 = call float @dx.op.unary.f32(i32 7, float %546)  ; Saturate(value)
  %548 = fmul fast float %547, %8
  %549 = fmul fast float %547, %9
  %550 = fmul fast float %547, %10
  %551 = fadd fast float %548, %470
  %552 = fadd fast float %549, %474
  %553 = fadd fast float %550, %478
  br label %554

; <label>:554                                     ; preds = %545, %249
  %555 = phi float [ %551, %545 ], [ %470, %249 ]
  %556 = phi float [ %552, %545 ], [ %474, %249 ]
  %557 = phi float [ %553, %545 ], [ %478, %249 ]
  %558 = fmul fast float %555, %34
  %559 = call float @dx.op.tertiary.f32(i32 46, float %556, float %35, float %558)  ; FMad(a,b,c)
  %560 = call float @dx.op.tertiary.f32(i32 46, float %557, float %36, float %559)  ; FMad(a,b,c)
  %561 = fadd fast float %560, %59
  %562 = fmul fast float %555, %38
  %563 = call float @dx.op.tertiary.f32(i32 46, float %556, float %39, float %562)  ; FMad(a,b,c)
  %564 = call float @dx.op.tertiary.f32(i32 46, float %557, float %40, float %563)  ; FMad(a,b,c)
  %565 = fadd fast float %564, %60
  %566 = fmul fast float %555, %42
  %567 = call float @dx.op.tertiary.f32(i32 46, float %556, float %43, float %566)  ; FMad(a,b,c)
  %568 = call float @dx.op.tertiary.f32(i32 46, float %557, float %44, float %567)  ; FMad(a,b,c)
  %569 = fadd fast float %568, %61
  %570 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %571 = extractvalue %dx.types.CBufRet.f32 %570, 0
  %572 = extractvalue %dx.types.CBufRet.f32 %570, 1
  %573 = extractvalue %dx.types.CBufRet.f32 %570, 2
  %574 = extractvalue %dx.types.CBufRet.f32 %570, 3
  %575 = fmul fast float %571, %561
  %576 = call float @dx.op.tertiary.f32(i32 46, float %565, float %572, float %575)  ; FMad(a,b,c)
  %577 = call float @dx.op.tertiary.f32(i32 46, float %569, float %573, float %576)  ; FMad(a,b,c)
  %578 = fadd fast float %577, %574
  %579 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 37)  ; CBufferLoadLegacy(handle,regIndex)
  %580 = extractvalue %dx.types.CBufRet.f32 %579, 0
  %581 = extractvalue %dx.types.CBufRet.f32 %579, 1
  %582 = extractvalue %dx.types.CBufRet.f32 %579, 2
  %583 = fadd fast float %580, %561
  %584 = fadd fast float %581, %565
  %585 = fadd fast float %582, %569
  %586 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %587 = extractvalue %dx.types.CBufRet.f32 %586, 0
  %588 = extractvalue %dx.types.CBufRet.f32 %586, 1
  %589 = extractvalue %dx.types.CBufRet.f32 %586, 2
  %590 = extractvalue %dx.types.CBufRet.f32 %586, 3
  %591 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %592 = extractvalue %dx.types.CBufRet.f32 %591, 0
  %593 = extractvalue %dx.types.CBufRet.f32 %591, 1
  %594 = extractvalue %dx.types.CBufRet.f32 %591, 2
  %595 = extractvalue %dx.types.CBufRet.f32 %591, 3
  %596 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %597 = extractvalue %dx.types.CBufRet.f32 %596, 0
  %598 = extractvalue %dx.types.CBufRet.f32 %596, 1
  %599 = extractvalue %dx.types.CBufRet.f32 %596, 2
  %600 = extractvalue %dx.types.CBufRet.f32 %596, 3
  %601 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %602 = extractvalue %dx.types.CBufRet.f32 %601, 0
  %603 = extractvalue %dx.types.CBufRet.f32 %601, 1
  %604 = extractvalue %dx.types.CBufRet.f32 %601, 2
  %605 = extractvalue %dx.types.CBufRet.f32 %601, 3
  %606 = fmul fast float %587, %561
  %607 = call float @dx.op.tertiary.f32(i32 46, float %565, float %588, float %606)  ; FMad(a,b,c)
  %608 = call float @dx.op.tertiary.f32(i32 46, float %569, float %589, float %607)  ; FMad(a,b,c)
  %609 = fadd fast float %608, %590
  %610 = fmul fast float %592, %561
  %611 = call float @dx.op.tertiary.f32(i32 46, float %565, float %593, float %610)  ; FMad(a,b,c)
  %612 = call float @dx.op.tertiary.f32(i32 46, float %569, float %594, float %611)  ; FMad(a,b,c)
  %613 = fadd fast float %612, %595
  %614 = fmul fast float %597, %561
  %615 = call float @dx.op.tertiary.f32(i32 46, float %565, float %598, float %614)  ; FMad(a,b,c)
  %616 = call float @dx.op.tertiary.f32(i32 46, float %569, float %599, float %615)  ; FMad(a,b,c)
  %617 = fadd fast float %616, %600
  %618 = fmul fast float %602, %561
  %619 = call float @dx.op.tertiary.f32(i32 46, float %565, float %603, float %618)  ; FMad(a,b,c)
  %620 = call float @dx.op.tertiary.f32(i32 46, float %569, float %604, float %619)  ; FMad(a,b,c)
  %621 = fadd fast float %620, %605
  br i1 %173, label %697, label %622

; <label>:622                                     ; preds = %554
  br i1 %97, label %688, label %623

; <label>:623                                     ; preds = %622
  br label %624

; <label>:624                                     ; preds = %624, %623
  %625 = phi float [ %684, %624 ], [ 0.000000e+00, %623 ]
  %626 = phi i32 [ %685, %624 ], [ 0, %623 ]
  %627 = shl i32 %626, 2
  %628 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %627)  ; CBufferLoadLegacy(handle,regIndex)
  %629 = extractvalue %dx.types.CBufRet.i32 %628, 0
  %630 = extractvalue %dx.types.CBufRet.i32 %628, 1
  %631 = call float @dx.op.legacyF16ToF32(i32 131, i32 %629)  ; LegacyF16ToF32(value)
  %632 = lshr i32 %629, 16
  %633 = call float @dx.op.legacyF16ToF32(i32 131, i32 %632)  ; LegacyF16ToF32(value)
  %634 = call float @dx.op.legacyF16ToF32(i32 131, i32 %630)  ; LegacyF16ToF32(value)
  %635 = lshr i32 %630, 16
  %636 = call float @dx.op.legacyF16ToF32(i32 131, i32 %635)  ; LegacyF16ToF32(value)
  %637 = or i32 %627, 1
  %638 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %637)  ; CBufferLoadLegacy(handle,regIndex)
  %639 = extractvalue %dx.types.CBufRet.f32 %638, 0
  %640 = extractvalue %dx.types.CBufRet.f32 %638, 1
  %641 = extractvalue %dx.types.CBufRet.f32 %638, 2
  %642 = extractvalue %dx.types.CBufRet.f32 %638, 3
  %643 = or i32 %627, 2
  %644 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %643)  ; CBufferLoadLegacy(handle,regIndex)
  %645 = extractvalue %dx.types.CBufRet.f32 %644, 0
  %646 = extractvalue %dx.types.CBufRet.f32 %644, 1
  %647 = extractvalue %dx.types.CBufRet.f32 %644, 2
  %648 = extractvalue %dx.types.CBufRet.f32 %644, 3
  %649 = call float @dx.op.dot4.f32(i32 56, float %631, float %633, float %634, float %636, float %169, float %170, float %171, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %650 = fmul fast float %649, -1.000000e+01
  %651 = call float @dx.op.unary.f32(i32 7, float %650)  ; Saturate(value)
  %652 = fsub fast float 1.000000e+00, %651
  %653 = fsub fast float %169, %639
  %654 = fsub fast float %170, %640
  %655 = fsub fast float %171, %641
  %656 = fsub fast float %645, %639
  %657 = fsub fast float %646, %640
  %658 = fsub fast float %647, %641
  %659 = call float @dx.op.dot3.f32(i32 55, float %653, float %654, float %655, float %656, float %657, float %658)  ; Dot3(ax,ay,az,bx,by,bz)
  %660 = call float @dx.op.dot3.f32(i32 55, float %656, float %657, float %658, float %656, float %657, float %658)  ; Dot3(ax,ay,az,bx,by,bz)
  %661 = fdiv fast float %659, %660
  %662 = fmul fast float %661, %656
  %663 = fmul fast float %661, %657
  %664 = fmul fast float %661, %658
  %665 = fsub fast float %639, %169
  %666 = fadd fast float %665, %662
  %667 = fsub fast float %640, %170
  %668 = fadd fast float %667, %663
  %669 = fsub fast float %641, %171
  %670 = fadd fast float %669, %664
  %671 = call float @dx.op.dot3.f32(i32 55, float %666, float %668, float %670, float %666, float %668, float %670)  ; Dot3(ax,ay,az,bx,by,bz)
  %672 = call float @dx.op.unary.f32(i32 24, float %671)  ; Sqrt(value)
  %673 = fmul fast float %642, 5.000000e-01
  %674 = fsub fast float %672, %673
  %675 = fdiv fast float %674, %673
  %676 = call float @dx.op.unary.f32(i32 7, float %675)  ; Saturate(value)
  %677 = fmul fast float %676, 2.000000e+00
  %678 = fsub fast float 3.000000e+00, %677
  %679 = fmul fast float %676, %676
  %680 = fmul fast float %679, %678
  %681 = fsub fast float 1.000000e+00, %680
  %682 = fmul fast float %652, %648
  %683 = fmul fast float %682, %681
  %684 = call float @dx.op.binary.f32(i32 35, float %683, float %625)  ; FMax(a,b)
  %685 = add nuw i32 %626, 1
  %686 = icmp eq i32 %685, %96
  br i1 %686, label %687, label %624

; <label>:687                                     ; preds = %624
  br label %688

; <label>:688                                     ; preds = %687, %622
  %689 = phi float [ 0.000000e+00, %622 ], [ %684, %687 ]
  %690 = call float @dx.op.unary.f32(i32 7, float %689)  ; Saturate(value)
  %691 = fmul fast float %690, %8
  %692 = fmul fast float %690, %9
  %693 = fmul fast float %690, %10
  %694 = fadd fast float %691, %169
  %695 = fadd fast float %692, %170
  %696 = fadd fast float %693, %171
  br label %697

; <label>:697                                     ; preds = %688, %554
  %698 = phi float [ %169, %554 ], [ %694, %688 ]
  %699 = phi float [ %170, %554 ], [ %695, %688 ]
  %700 = phi float [ %171, %554 ], [ %696, %688 ]
  %701 = add i32 %259, %13
  %702 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %701, i32 undef)  ; BufferLoad(srv,index,wot)
  %703 = extractvalue %dx.types.ResRet.i32 %702, 0
  %704 = extractvalue %dx.types.ResRet.i32 %702, 1
  %705 = extractvalue %dx.types.ResRet.i32 %702, 2
  %706 = extractvalue %dx.types.ResRet.i32 %702, 3
  %707 = bitcast i32 %703 to float
  %708 = bitcast i32 %704 to float
  %709 = bitcast i32 %705 to float
  %710 = bitcast i32 %706 to float
  %711 = add i32 %701, 16
  %712 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %711, i32 undef)  ; BufferLoad(srv,index,wot)
  %713 = extractvalue %dx.types.ResRet.i32 %712, 0
  %714 = extractvalue %dx.types.ResRet.i32 %712, 1
  %715 = extractvalue %dx.types.ResRet.i32 %712, 2
  %716 = extractvalue %dx.types.ResRet.i32 %712, 3
  %717 = bitcast i32 %713 to float
  %718 = bitcast i32 %714 to float
  %719 = bitcast i32 %715 to float
  %720 = bitcast i32 %716 to float
  %721 = add i32 %701, 32
  %722 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %721, i32 undef)  ; BufferLoad(srv,index,wot)
  %723 = extractvalue %dx.types.ResRet.i32 %722, 0
  %724 = extractvalue %dx.types.ResRet.i32 %722, 1
  %725 = extractvalue %dx.types.ResRet.i32 %722, 2
  %726 = extractvalue %dx.types.ResRet.i32 %722, 3
  %727 = bitcast i32 %723 to float
  %728 = bitcast i32 %724 to float
  %729 = bitcast i32 %725 to float
  %730 = bitcast i32 %726 to float
  %731 = fmul fast float %707, %255
  %732 = fmul fast float %717, %255
  %733 = fmul fast float %727, %255
  %734 = fmul fast float %708, %255
  %735 = fmul fast float %718, %255
  %736 = fmul fast float %728, %255
  %737 = fmul fast float %709, %255
  %738 = fmul fast float %719, %255
  %739 = fmul fast float %729, %255
  %740 = fmul fast float %710, %255
  %741 = fmul fast float %720, %255
  %742 = fmul fast float %730, %255
  %743 = add i32 %302, %13
  %744 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %743, i32 undef)  ; BufferLoad(srv,index,wot)
  %745 = extractvalue %dx.types.ResRet.i32 %744, 0
  %746 = extractvalue %dx.types.ResRet.i32 %744, 1
  %747 = extractvalue %dx.types.ResRet.i32 %744, 2
  %748 = extractvalue %dx.types.ResRet.i32 %744, 3
  %749 = bitcast i32 %745 to float
  %750 = bitcast i32 %746 to float
  %751 = bitcast i32 %747 to float
  %752 = bitcast i32 %748 to float
  %753 = add i32 %743, 16
  %754 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %753, i32 undef)  ; BufferLoad(srv,index,wot)
  %755 = extractvalue %dx.types.ResRet.i32 %754, 0
  %756 = extractvalue %dx.types.ResRet.i32 %754, 1
  %757 = extractvalue %dx.types.ResRet.i32 %754, 2
  %758 = extractvalue %dx.types.ResRet.i32 %754, 3
  %759 = bitcast i32 %755 to float
  %760 = bitcast i32 %756 to float
  %761 = bitcast i32 %757 to float
  %762 = bitcast i32 %758 to float
  %763 = add i32 %743, 32
  %764 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %763, i32 undef)  ; BufferLoad(srv,index,wot)
  %765 = extractvalue %dx.types.ResRet.i32 %764, 0
  %766 = extractvalue %dx.types.ResRet.i32 %764, 1
  %767 = extractvalue %dx.types.ResRet.i32 %764, 2
  %768 = extractvalue %dx.types.ResRet.i32 %764, 3
  %769 = bitcast i32 %765 to float
  %770 = bitcast i32 %766 to float
  %771 = bitcast i32 %767 to float
  %772 = bitcast i32 %768 to float
  %773 = fmul fast float %749, %256
  %774 = fmul fast float %759, %256
  %775 = fmul fast float %769, %256
  %776 = fmul fast float %750, %256
  %777 = fmul fast float %760, %256
  %778 = fmul fast float %770, %256
  %779 = fmul fast float %751, %256
  %780 = fmul fast float %761, %256
  %781 = fmul fast float %771, %256
  %782 = fmul fast float %752, %256
  %783 = fmul fast float %762, %256
  %784 = fmul fast float %772, %256
  %785 = fadd fast float %773, %731
  %786 = fadd fast float %774, %732
  %787 = fadd fast float %775, %733
  %788 = fadd fast float %776, %734
  %789 = fadd fast float %777, %735
  %790 = fadd fast float %778, %736
  %791 = fadd fast float %779, %737
  %792 = fadd fast float %780, %738
  %793 = fadd fast float %781, %739
  %794 = fadd fast float %782, %740
  %795 = fadd fast float %783, %741
  %796 = fadd fast float %784, %742
  %797 = add i32 %357, %13
  %798 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %797, i32 undef)  ; BufferLoad(srv,index,wot)
  %799 = extractvalue %dx.types.ResRet.i32 %798, 0
  %800 = extractvalue %dx.types.ResRet.i32 %798, 1
  %801 = extractvalue %dx.types.ResRet.i32 %798, 2
  %802 = extractvalue %dx.types.ResRet.i32 %798, 3
  %803 = bitcast i32 %799 to float
  %804 = bitcast i32 %800 to float
  %805 = bitcast i32 %801 to float
  %806 = bitcast i32 %802 to float
  %807 = add i32 %797, 16
  %808 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %807, i32 undef)  ; BufferLoad(srv,index,wot)
  %809 = extractvalue %dx.types.ResRet.i32 %808, 0
  %810 = extractvalue %dx.types.ResRet.i32 %808, 1
  %811 = extractvalue %dx.types.ResRet.i32 %808, 2
  %812 = extractvalue %dx.types.ResRet.i32 %808, 3
  %813 = bitcast i32 %809 to float
  %814 = bitcast i32 %810 to float
  %815 = bitcast i32 %811 to float
  %816 = bitcast i32 %812 to float
  %817 = add i32 %797, 32
  %818 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %817, i32 undef)  ; BufferLoad(srv,index,wot)
  %819 = extractvalue %dx.types.ResRet.i32 %818, 0
  %820 = extractvalue %dx.types.ResRet.i32 %818, 1
  %821 = extractvalue %dx.types.ResRet.i32 %818, 2
  %822 = extractvalue %dx.types.ResRet.i32 %818, 3
  %823 = bitcast i32 %819 to float
  %824 = bitcast i32 %820 to float
  %825 = bitcast i32 %821 to float
  %826 = bitcast i32 %822 to float
  %827 = fmul fast float %803, %257
  %828 = fmul fast float %813, %257
  %829 = fmul fast float %823, %257
  %830 = fmul fast float %804, %257
  %831 = fmul fast float %814, %257
  %832 = fmul fast float %824, %257
  %833 = fmul fast float %805, %257
  %834 = fmul fast float %815, %257
  %835 = fmul fast float %825, %257
  %836 = fmul fast float %806, %257
  %837 = fmul fast float %816, %257
  %838 = fmul fast float %826, %257
  %839 = fadd fast float %785, %827
  %840 = fadd fast float %786, %828
  %841 = fadd fast float %787, %829
  %842 = fadd fast float %788, %830
  %843 = fadd fast float %789, %831
  %844 = fadd fast float %790, %832
  %845 = fadd fast float %791, %833
  %846 = fadd fast float %792, %834
  %847 = fadd fast float %793, %835
  %848 = fadd fast float %794, %836
  %849 = fadd fast float %795, %837
  %850 = fadd fast float %796, %838
  %851 = add i32 %412, %13
  %852 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %851, i32 undef)  ; BufferLoad(srv,index,wot)
  %853 = extractvalue %dx.types.ResRet.i32 %852, 0
  %854 = extractvalue %dx.types.ResRet.i32 %852, 1
  %855 = extractvalue %dx.types.ResRet.i32 %852, 2
  %856 = extractvalue %dx.types.ResRet.i32 %852, 3
  %857 = bitcast i32 %853 to float
  %858 = bitcast i32 %854 to float
  %859 = bitcast i32 %855 to float
  %860 = bitcast i32 %856 to float
  %861 = add i32 %851, 16
  %862 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %861, i32 undef)  ; BufferLoad(srv,index,wot)
  %863 = extractvalue %dx.types.ResRet.i32 %862, 0
  %864 = extractvalue %dx.types.ResRet.i32 %862, 1
  %865 = extractvalue %dx.types.ResRet.i32 %862, 2
  %866 = extractvalue %dx.types.ResRet.i32 %862, 3
  %867 = bitcast i32 %863 to float
  %868 = bitcast i32 %864 to float
  %869 = bitcast i32 %865 to float
  %870 = bitcast i32 %866 to float
  %871 = add i32 %851, 32
  %872 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %871, i32 undef)  ; BufferLoad(srv,index,wot)
  %873 = extractvalue %dx.types.ResRet.i32 %872, 0
  %874 = extractvalue %dx.types.ResRet.i32 %872, 1
  %875 = extractvalue %dx.types.ResRet.i32 %872, 2
  %876 = extractvalue %dx.types.ResRet.i32 %872, 3
  %877 = bitcast i32 %873 to float
  %878 = bitcast i32 %874 to float
  %879 = bitcast i32 %875 to float
  %880 = bitcast i32 %876 to float
  %881 = fmul fast float %857, %258
  %882 = fmul fast float %867, %258
  %883 = fmul fast float %877, %258
  %884 = fmul fast float %858, %258
  %885 = fmul fast float %868, %258
  %886 = fmul fast float %878, %258
  %887 = fmul fast float %859, %258
  %888 = fmul fast float %869, %258
  %889 = fmul fast float %879, %258
  %890 = fmul fast float %860, %258
  %891 = fmul fast float %870, %258
  %892 = fmul fast float %880, %258
  %893 = fadd fast float %839, %881
  %894 = fadd fast float %840, %882
  %895 = fadd fast float %841, %883
  %896 = fadd fast float %842, %884
  %897 = fadd fast float %843, %885
  %898 = fadd fast float %844, %886
  %899 = fadd fast float %845, %887
  %900 = fadd fast float %846, %888
  %901 = fadd fast float %847, %889
  %902 = fadd fast float %848, %890
  %903 = fadd fast float %849, %891
  %904 = fadd fast float %850, %892
  %905 = fmul fast float %893, %698
  %906 = call float @dx.op.tertiary.f32(i32 46, float %699, float %896, float %905)  ; FMad(a,b,c)
  %907 = call float @dx.op.tertiary.f32(i32 46, float %700, float %899, float %906)  ; FMad(a,b,c)
  %908 = fadd fast float %902, %907
  %909 = fmul fast float %894, %698
  %910 = call float @dx.op.tertiary.f32(i32 46, float %699, float %897, float %909)  ; FMad(a,b,c)
  %911 = call float @dx.op.tertiary.f32(i32 46, float %700, float %900, float %910)  ; FMad(a,b,c)
  %912 = fadd fast float %903, %911
  %913 = fmul fast float %895, %698
  %914 = call float @dx.op.tertiary.f32(i32 46, float %699, float %898, float %913)  ; FMad(a,b,c)
  %915 = call float @dx.op.tertiary.f32(i32 46, float %700, float %901, float %914)  ; FMad(a,b,c)
  %916 = fadd fast float %904, %915
  br i1 %173, label %917, label %992

; <label>:917                                     ; preds = %697
  br i1 %97, label %983, label %918

; <label>:918                                     ; preds = %917
  br label %919

; <label>:919                                     ; preds = %919, %918
  %920 = phi float [ %979, %919 ], [ 0.000000e+00, %918 ]
  %921 = phi i32 [ %980, %919 ], [ 0, %918 ]
  %922 = shl i32 %921, 2
  %923 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %922)  ; CBufferLoadLegacy(handle,regIndex)
  %924 = extractvalue %dx.types.CBufRet.i32 %923, 0
  %925 = extractvalue %dx.types.CBufRet.i32 %923, 1
  %926 = call float @dx.op.legacyF16ToF32(i32 131, i32 %924)  ; LegacyF16ToF32(value)
  %927 = lshr i32 %924, 16
  %928 = call float @dx.op.legacyF16ToF32(i32 131, i32 %927)  ; LegacyF16ToF32(value)
  %929 = call float @dx.op.legacyF16ToF32(i32 131, i32 %925)  ; LegacyF16ToF32(value)
  %930 = lshr i32 %925, 16
  %931 = call float @dx.op.legacyF16ToF32(i32 131, i32 %930)  ; LegacyF16ToF32(value)
  %932 = or i32 %922, 1
  %933 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %932)  ; CBufferLoadLegacy(handle,regIndex)
  %934 = extractvalue %dx.types.CBufRet.f32 %933, 0
  %935 = extractvalue %dx.types.CBufRet.f32 %933, 1
  %936 = extractvalue %dx.types.CBufRet.f32 %933, 2
  %937 = extractvalue %dx.types.CBufRet.f32 %933, 3
  %938 = or i32 %922, 2
  %939 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %938)  ; CBufferLoadLegacy(handle,regIndex)
  %940 = extractvalue %dx.types.CBufRet.f32 %939, 0
  %941 = extractvalue %dx.types.CBufRet.f32 %939, 1
  %942 = extractvalue %dx.types.CBufRet.f32 %939, 2
  %943 = extractvalue %dx.types.CBufRet.f32 %939, 3
  %944 = call float @dx.op.dot4.f32(i32 56, float %926, float %928, float %929, float %931, float %908, float %912, float %916, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %945 = fmul fast float %944, -1.000000e+01
  %946 = call float @dx.op.unary.f32(i32 7, float %945)  ; Saturate(value)
  %947 = fsub fast float 1.000000e+00, %946
  %948 = fsub fast float %908, %934
  %949 = fsub fast float %912, %935
  %950 = fsub fast float %916, %936
  %951 = fsub fast float %940, %934
  %952 = fsub fast float %941, %935
  %953 = fsub fast float %942, %936
  %954 = call float @dx.op.dot3.f32(i32 55, float %948, float %949, float %950, float %951, float %952, float %953)  ; Dot3(ax,ay,az,bx,by,bz)
  %955 = call float @dx.op.dot3.f32(i32 55, float %951, float %952, float %953, float %951, float %952, float %953)  ; Dot3(ax,ay,az,bx,by,bz)
  %956 = fdiv fast float %954, %955
  %957 = fmul fast float %956, %951
  %958 = fmul fast float %956, %952
  %959 = fmul fast float %956, %953
  %960 = fsub fast float %934, %908
  %961 = fadd fast float %960, %957
  %962 = fsub fast float %935, %912
  %963 = fadd fast float %962, %958
  %964 = fsub fast float %936, %916
  %965 = fadd fast float %964, %959
  %966 = call float @dx.op.dot3.f32(i32 55, float %961, float %963, float %965, float %961, float %963, float %965)  ; Dot3(ax,ay,az,bx,by,bz)
  %967 = call float @dx.op.unary.f32(i32 24, float %966)  ; Sqrt(value)
  %968 = fmul fast float %937, 5.000000e-01
  %969 = fsub fast float %967, %968
  %970 = fdiv fast float %969, %968
  %971 = call float @dx.op.unary.f32(i32 7, float %970)  ; Saturate(value)
  %972 = fmul fast float %971, 2.000000e+00
  %973 = fsub fast float 3.000000e+00, %972
  %974 = fmul fast float %971, %971
  %975 = fmul fast float %974, %973
  %976 = fsub fast float 1.000000e+00, %975
  %977 = fmul fast float %947, %943
  %978 = fmul fast float %977, %976
  %979 = call float @dx.op.binary.f32(i32 35, float %978, float %920)  ; FMax(a,b)
  %980 = add nuw i32 %921, 1
  %981 = icmp eq i32 %980, %96
  br i1 %981, label %982, label %919

; <label>:982                                     ; preds = %919
  br label %983

; <label>:983                                     ; preds = %982, %917
  %984 = phi float [ 0.000000e+00, %917 ], [ %979, %982 ]
  %985 = call float @dx.op.unary.f32(i32 7, float %984)  ; Saturate(value)
  %986 = fmul fast float %985, %8
  %987 = fmul fast float %985, %9
  %988 = fmul fast float %985, %10
  %989 = fadd fast float %986, %908
  %990 = fadd fast float %987, %912
  %991 = fadd fast float %988, %916
  br label %992

; <label>:992                                     ; preds = %983, %697
  %993 = phi float [ %989, %983 ], [ %908, %697 ]
  %994 = phi float [ %990, %983 ], [ %912, %697 ]
  %995 = phi float [ %991, %983 ], [ %916, %697 ]
  %996 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %997 = extractvalue %dx.types.CBufRet.f32 %996, 0
  %998 = extractvalue %dx.types.CBufRet.f32 %996, 1
  %999 = extractvalue %dx.types.CBufRet.f32 %996, 2
  %1000 = extractvalue %dx.types.CBufRet.f32 %996, 3
  %1001 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1002 = extractvalue %dx.types.CBufRet.f32 %1001, 0
  %1003 = extractvalue %dx.types.CBufRet.f32 %1001, 1
  %1004 = extractvalue %dx.types.CBufRet.f32 %1001, 2
  %1005 = extractvalue %dx.types.CBufRet.f32 %1001, 3
  %1006 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1007 = extractvalue %dx.types.CBufRet.f32 %1006, 0
  %1008 = extractvalue %dx.types.CBufRet.f32 %1006, 1
  %1009 = extractvalue %dx.types.CBufRet.f32 %1006, 2
  %1010 = extractvalue %dx.types.CBufRet.f32 %1006, 3
  %1011 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %1012 = extractvalue %dx.types.CBufRet.i32 %1011, 0
  %1013 = extractvalue %dx.types.CBufRet.i32 %1011, 1
  %1014 = extractvalue %dx.types.CBufRet.i32 %1011, 2
  %1015 = bitcast float %1000 to i32
  %1016 = bitcast float %1005 to i32
  %1017 = bitcast float %1010 to i32
  %1018 = sub i32 %1015, %1012
  %1019 = sub i32 %1016, %1013
  %1020 = sub i32 %1017, %1014
  %1021 = sitofp i32 %1018 to float
  %1022 = sitofp i32 %1019 to float
  %1023 = sitofp i32 %1020 to float
  %1024 = fmul fast float %1021, 0x3EE0000000000000
  %1025 = fmul fast float %1022, 0x3EE0000000000000
  %1026 = fmul fast float %1023, 0x3EE0000000000000
  %1027 = fmul fast float %997, %993
  %1028 = call float @dx.op.tertiary.f32(i32 46, float %998, float %994, float %1027)  ; FMad(a,b,c)
  %1029 = call float @dx.op.tertiary.f32(i32 46, float %999, float %995, float %1028)  ; FMad(a,b,c)
  %1030 = fadd fast float %1024, %1029
  %1031 = fmul fast float %1002, %993
  %1032 = call float @dx.op.tertiary.f32(i32 46, float %1003, float %994, float %1031)  ; FMad(a,b,c)
  %1033 = call float @dx.op.tertiary.f32(i32 46, float %1004, float %995, float %1032)  ; FMad(a,b,c)
  %1034 = fadd fast float %1025, %1033
  %1035 = fmul fast float %1007, %993
  %1036 = call float @dx.op.tertiary.f32(i32 46, float %1008, float %994, float %1035)  ; FMad(a,b,c)
  %1037 = call float @dx.op.tertiary.f32(i32 46, float %1009, float %995, float %1036)  ; FMad(a,b,c)
  %1038 = fadd fast float %1037, %1026
  %1039 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %1040 = extractvalue %dx.types.CBufRet.f32 %1039, 0
  %1041 = extractvalue %dx.types.CBufRet.f32 %1039, 1
  %1042 = extractvalue %dx.types.CBufRet.f32 %1039, 2
  %1043 = extractvalue %dx.types.CBufRet.f32 %1039, 3
  %1044 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %1045 = extractvalue %dx.types.CBufRet.f32 %1044, 0
  %1046 = extractvalue %dx.types.CBufRet.f32 %1044, 1
  %1047 = extractvalue %dx.types.CBufRet.f32 %1044, 2
  %1048 = extractvalue %dx.types.CBufRet.f32 %1044, 3
  %1049 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 18)  ; CBufferLoadLegacy(handle,regIndex)
  %1050 = extractvalue %dx.types.CBufRet.f32 %1049, 0
  %1051 = extractvalue %dx.types.CBufRet.f32 %1049, 1
  %1052 = extractvalue %dx.types.CBufRet.f32 %1049, 2
  %1053 = extractvalue %dx.types.CBufRet.f32 %1049, 3
  %1054 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %1055 = extractvalue %dx.types.CBufRet.f32 %1054, 0
  %1056 = extractvalue %dx.types.CBufRet.f32 %1054, 1
  %1057 = extractvalue %dx.types.CBufRet.f32 %1054, 2
  %1058 = extractvalue %dx.types.CBufRet.f32 %1054, 3
  %1059 = fmul fast float %1040, %1030
  %1060 = call float @dx.op.tertiary.f32(i32 46, float %1034, float %1041, float %1059)  ; FMad(a,b,c)
  %1061 = call float @dx.op.tertiary.f32(i32 46, float %1038, float %1042, float %1060)  ; FMad(a,b,c)
  %1062 = fadd fast float %1061, %1043
  %1063 = fmul fast float %1045, %1030
  %1064 = call float @dx.op.tertiary.f32(i32 46, float %1034, float %1046, float %1063)  ; FMad(a,b,c)
  %1065 = call float @dx.op.tertiary.f32(i32 46, float %1038, float %1047, float %1064)  ; FMad(a,b,c)
  %1066 = fadd fast float %1065, %1048
  %1067 = fmul fast float %1050, %1030
  %1068 = call float @dx.op.tertiary.f32(i32 46, float %1034, float %1051, float %1067)  ; FMad(a,b,c)
  %1069 = call float @dx.op.tertiary.f32(i32 46, float %1038, float %1052, float %1068)  ; FMad(a,b,c)
  %1070 = fadd fast float %1069, %1053
  %1071 = fmul fast float %1055, %1030
  %1072 = call float @dx.op.tertiary.f32(i32 46, float %1034, float %1056, float %1071)  ; FMad(a,b,c)
  %1073 = call float @dx.op.tertiary.f32(i32 46, float %1038, float %1057, float %1072)  ; FMad(a,b,c)
  %1074 = fadd fast float %1073, %1058
  %1075 = fmul fast float %455, %34
  %1076 = call float @dx.op.tertiary.f32(i32 46, float %456, float %35, float %1075)  ; FMad(a,b,c)
  %1077 = call float @dx.op.tertiary.f32(i32 46, float %457, float %36, float %1076)  ; FMad(a,b,c)
  %1078 = fmul fast float %455, %38
  %1079 = call float @dx.op.tertiary.f32(i32 46, float %456, float %39, float %1078)  ; FMad(a,b,c)
  %1080 = call float @dx.op.tertiary.f32(i32 46, float %457, float %40, float %1079)  ; FMad(a,b,c)
  %1081 = fmul fast float %455, %42
  %1082 = call float @dx.op.tertiary.f32(i32 46, float %456, float %43, float %1081)  ; FMad(a,b,c)
  %1083 = call float @dx.op.tertiary.f32(i32 46, float %457, float %44, float %1082)  ; FMad(a,b,c)
  %1084 = fmul fast float %458, %34
  %1085 = call float @dx.op.tertiary.f32(i32 46, float %459, float %35, float %1084)  ; FMad(a,b,c)
  %1086 = call float @dx.op.tertiary.f32(i32 46, float %460, float %36, float %1085)  ; FMad(a,b,c)
  %1087 = fmul fast float %458, %38
  %1088 = call float @dx.op.tertiary.f32(i32 46, float %459, float %39, float %1087)  ; FMad(a,b,c)
  %1089 = call float @dx.op.tertiary.f32(i32 46, float %460, float %40, float %1088)  ; FMad(a,b,c)
  %1090 = fmul fast float %458, %42
  %1091 = call float @dx.op.tertiary.f32(i32 46, float %459, float %43, float %1090)  ; FMad(a,b,c)
  %1092 = call float @dx.op.tertiary.f32(i32 46, float %460, float %44, float %1091)  ; FMad(a,b,c)
  %1093 = fmul fast float %461, %34
  %1094 = call float @dx.op.tertiary.f32(i32 46, float %462, float %35, float %1093)  ; FMad(a,b,c)
  %1095 = call float @dx.op.tertiary.f32(i32 46, float %463, float %36, float %1094)  ; FMad(a,b,c)
  %1096 = fmul fast float %461, %38
  %1097 = call float @dx.op.tertiary.f32(i32 46, float %462, float %39, float %1096)  ; FMad(a,b,c)
  %1098 = call float @dx.op.tertiary.f32(i32 46, float %463, float %40, float %1097)  ; FMad(a,b,c)
  %1099 = fmul fast float %461, %42
  %1100 = call float @dx.op.tertiary.f32(i32 46, float %462, float %43, float %1099)  ; FMad(a,b,c)
  %1101 = call float @dx.op.tertiary.f32(i32 46, float %463, float %44, float %1100)  ; FMad(a,b,c)
  %1102 = fmul fast float %18, 2.000000e+00
  %1103 = fmul fast float %19, 2.000000e+00
  %1104 = fmul fast float %20, 2.000000e+00
  %1105 = fadd fast float %1102, -1.000000e+00
  %1106 = fadd fast float %1103, -1.000000e+00
  %1107 = fadd fast float %1104, -1.000000e+00
  %1108 = fmul fast float %14, 2.000000e+00
  %1109 = fmul fast float %15, 2.000000e+00
  %1110 = fmul fast float %16, 2.000000e+00
  %1111 = fadd fast float %1108, -1.000000e+00
  %1112 = fadd fast float %1109, -1.000000e+00
  %1113 = fadd fast float %1110, -1.000000e+00
  %1114 = fmul fast float %17, 2.000000e+00
  %1115 = fadd fast float %1114, -1.000000e+00
  %1116 = fmul fast float %1106, %1113
  %1117 = fmul fast float %1107, %1112
  %1118 = fsub fast float %1116, %1117
  %1119 = fmul fast float %1107, %1111
  %1120 = fmul fast float %1105, %1113
  %1121 = fsub fast float %1119, %1120
  %1122 = fmul fast float %1105, %1112
  %1123 = fmul fast float %1106, %1111
  %1124 = fsub fast float %1122, %1123
  %1125 = fmul fast float %1118, %1115
  %1126 = fmul fast float %1121, %1115
  %1127 = fmul fast float %1124, %1115
  %1128 = fmul fast float %1077, %1111
  %1129 = call float @dx.op.tertiary.f32(i32 46, float %1112, float %1086, float %1128)  ; FMad(a,b,c)
  %1130 = call float @dx.op.tertiary.f32(i32 46, float %1113, float %1095, float %1129)  ; FMad(a,b,c)
  %1131 = fmul fast float %1080, %1111
  %1132 = call float @dx.op.tertiary.f32(i32 46, float %1112, float %1089, float %1131)  ; FMad(a,b,c)
  %1133 = call float @dx.op.tertiary.f32(i32 46, float %1113, float %1098, float %1132)  ; FMad(a,b,c)
  %1134 = fmul fast float %1083, %1111
  %1135 = call float @dx.op.tertiary.f32(i32 46, float %1112, float %1092, float %1134)  ; FMad(a,b,c)
  %1136 = call float @dx.op.tertiary.f32(i32 46, float %1113, float %1101, float %1135)  ; FMad(a,b,c)
  %1137 = fmul fast float %1077, %1125
  %1138 = call float @dx.op.tertiary.f32(i32 46, float %1126, float %1086, float %1137)  ; FMad(a,b,c)
  %1139 = call float @dx.op.tertiary.f32(i32 46, float %1127, float %1095, float %1138)  ; FMad(a,b,c)
  %1140 = fmul fast float %1080, %1125
  %1141 = call float @dx.op.tertiary.f32(i32 46, float %1126, float %1089, float %1140)  ; FMad(a,b,c)
  %1142 = call float @dx.op.tertiary.f32(i32 46, float %1127, float %1098, float %1141)  ; FMad(a,b,c)
  %1143 = fmul fast float %1083, %1125
  %1144 = call float @dx.op.tertiary.f32(i32 46, float %1126, float %1092, float %1143)  ; FMad(a,b,c)
  %1145 = call float @dx.op.tertiary.f32(i32 46, float %1127, float %1101, float %1144)  ; FMad(a,b,c)
  %1146 = fmul fast float %1077, %1105
  %1147 = call float @dx.op.tertiary.f32(i32 46, float %1106, float %1086, float %1146)  ; FMad(a,b,c)
  %1148 = call float @dx.op.tertiary.f32(i32 46, float %1107, float %1095, float %1147)  ; FMad(a,b,c)
  %1149 = fmul fast float %1080, %1105
  %1150 = call float @dx.op.tertiary.f32(i32 46, float %1106, float %1089, float %1149)  ; FMad(a,b,c)
  %1151 = call float @dx.op.tertiary.f32(i32 46, float %1107, float %1098, float %1150)  ; FMad(a,b,c)
  %1152 = fmul fast float %1083, %1105
  %1153 = call float @dx.op.tertiary.f32(i32 46, float %1106, float %1092, float %1152)  ; FMad(a,b,c)
  %1154 = call float @dx.op.tertiary.f32(i32 46, float %1107, float %1101, float %1153)  ; FMad(a,b,c)
  %1155 = call float @dx.op.dot3.f32(i32 55, float %1148, float %1151, float %1154, float %1148, float %1151, float %1154)  ; Dot3(ax,ay,az,bx,by,bz)
  %1156 = call float @dx.op.unary.f32(i32 25, float %1155)  ; Rsqrt(value)
  %1157 = fmul fast float %1156, %1148
  %1158 = fmul fast float %1156, %1151
  %1159 = fmul fast float %1156, %1154
  %1160 = call float @dx.op.dot3.f32(i32 55, float %1139, float %1142, float %1145, float %1139, float %1142, float %1145)  ; Dot3(ax,ay,az,bx,by,bz)
  %1161 = call float @dx.op.unary.f32(i32 25, float %1160)  ; Rsqrt(value)
  %1162 = fmul fast float %1161, %1139
  %1163 = fmul fast float %1161, %1142
  %1164 = fmul fast float %1161, %1145
  %1165 = call float @dx.op.dot3.f32(i32 55, float %1130, float %1133, float %1136, float %1130, float %1133, float %1136)  ; Dot3(ax,ay,az,bx,by,bz)
  %1166 = call float @dx.op.unary.f32(i32 25, float %1165)  ; Rsqrt(value)
  %1167 = fmul fast float %1166, %1130
  %1168 = fmul fast float %1166, %1133
  %1169 = fmul fast float %1166, %1136
  %1170 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %1171 = extractvalue %dx.types.CBufRet.f32 %1170, 0
  %1172 = extractvalue %dx.types.CBufRet.f32 %1170, 1
  %1173 = fmul fast float %1171, %621
  %1174 = fmul fast float %1172, %621
  %1175 = fsub fast float %609, %1173
  %1176 = fsub fast float %613, %1174
  %1177 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %1178 = extractvalue %dx.types.CBufRet.f32 %1177, 0
  %1179 = extractvalue %dx.types.CBufRet.f32 %1177, 1
  %1180 = extractvalue %dx.types.CBufRet.f32 %1177, 2
  %1181 = extractvalue %dx.types.CBufRet.f32 %1177, 3
  %1182 = call float @dx.op.dot4.f32(i32 56, float %1178, float %1179, float %1180, float %1181, float %583, float %584, float %585, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %609)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %613)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %617)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %621)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %21)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %22)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %1157)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %1158)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %1159)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %1162)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %1163)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float %1164)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %1167)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %1168)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %1169)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %1105)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %1106)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float %1107)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float %583)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float %584)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 0, float %585)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 1, float %578)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 2, float %1175)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 3, float %1176)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 0, float %617)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 1, float %621)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 2, float %1062)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 3, float %1066)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 0, float %1070)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 1, float %1074)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 2, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 3, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 8, i32 0, i8 0, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 8, i32 0, i8 1, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 8, i32 0, i8 2, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 9, i32 0, i8 0, float %1182)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!14}
!dx.entryPoints = !{!15}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{!5, null, !9, null}
!5 = !{!6, !7}
!6 = !{i32 0, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 10, i32 1, i32 11, i32 0, null}
!7 = !{i32 1, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 77, i32 1, i32 2, i32 0, !8}
!8 = !{i32 0, i32 9}
!9 = !{!10, !11, !12, !13}
!10 = !{i32 0, %MaterialModifiersConsts* undef, !"", i32 0, i32 7, i32 1, i32 496, null}
!11 = !{i32 1, %hostlayout.CameraShaderConsts* undef, !"", i32 0, i32 1, i32 1, i32 848, null}
!12 = !{i32 2, %hostlayout.FrequentVertexConsts* undef, !"", i32 0, i32 5, i32 1, i32 112, null}
!13 = !{i32 3, %CullObjectsCB* undef, !"", i32 0, i32 8, i32 1, i32 512, null}
!14 = !{[108 x i32] [i32 53, i32 37, i32 1073479695, i32 16, i32 1073479695, i32 16, i32 1073479695, i32 16, i32 0, i32 0, i32 1073512399, i32 16, i32 1073512399, i32 16, i32 1073512399, i32 16, i32 1073512399, i32 16, i32 1073512399, i32 16, i32 1073512399, i32 16, i32 1073512399, i32 16, i32 1073512399, i32 16, i32 16, i32 0, i32 32, i32 0, i32 0, i32 0, i32 0, i32 0, i32 36800, i32 0, i32 69568, i32 0, i32 135104, i32 0, i32 0, i32 0, i32 32256, i32 0, i32 32256, i32 0, i32 32256, i32 0, i32 3584, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 65306575, i32 16, i32 65306575, i32 16, i32 65306575, i32 16, i32 65273871, i32 16, i32 65568719, i32 16, i32 65568719, i32 16, i32 65568719, i32 16, i32 65536015, i32 16, i32 66093007, i32 16, i32 66093007, i32 16, i32 66093007, i32 16, i32 66060303, i32 16, i32 66879439, i32 16, i32 1073512399, i32 16, i32 1006632960, i32 0, i32 0, i32 0, i32 1073479695, i32 16, i32 1073479695, i32 16, i32 1073479695, i32 16, i32 0, i32 0, i32 1073479695, i32 16]}
!15 = !{void ()* @vs_main_, !"vs_main_", !16, !4, !54}
!16 = !{!17, !37, null}
!17 = !{!18, !21, !23, !24, !26, !27, !28, !29, !31, !33, !34, !35}
!18 = !{i32 0, !"POSITION", i8 9, i8 0, !19, i8 0, i32 1, i8 3, i32 0, i8 0, !20}
!19 = !{i32 0}
!20 = !{i32 3, i32 7}
!21 = !{i32 1, !"BLENDINDICES", i8 5, i8 0, !19, i8 0, i32 1, i8 4, i32 1, i8 0, !22}
!22 = !{i32 3, i32 15}
!23 = !{i32 2, !"BLENDWEIGHT", i8 9, i8 0, !19, i8 0, i32 1, i8 4, i32 2, i8 0, !22}
!24 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !19, i8 0, i32 1, i8 2, i32 3, i8 0, !25}
!25 = !{i32 3, i32 3}
!26 = !{i32 4, !"NORMAL", i8 9, i8 0, !19, i8 0, i32 1, i8 3, i32 4, i8 0, !20}
!27 = !{i32 5, !"TANGENT", i8 9, i8 0, !19, i8 0, i32 1, i8 4, i32 5, i8 0, !22}
!28 = !{i32 6, !"COLOR", i8 9, i8 0, !19, i8 0, i32 1, i8 4, i32 6, i8 0, null}
!29 = !{i32 7, !"TEXCOORD", i8 9, i8 0, !30, i8 0, i32 1, i8 2, i32 7, i8 0, null}
!30 = !{i32 1}
!31 = !{i32 8, !"INSTANCE_TRANSFORM", i8 9, i8 0, !32, i8 0, i32 3, i8 4, i32 8, i8 0, !22}
!32 = !{i32 0, i32 1, i32 2}
!33 = !{i32 9, !"INSTANCE_SKINNING_DATA", i8 5, i8 0, !19, i8 0, i32 1, i8 4, i32 11, i8 0, !20}
!34 = !{i32 10, !"EXTRA_DATA", i8 9, i8 0, !19, i8 0, i32 1, i8 3, i32 12, i8 0, !20}
!35 = !{i32 11, !"SV_VertexID", i8 5, i8 1, !19, i8 0, i32 1, i8 1, i32 13, i8 0, !36}
!36 = !{i32 3, i32 1}
!37 = !{!38, !39, !40, !41, !43, !45, !47, !49, !51, !53}
!38 = !{i32 0, !"SV_Position", i8 9, i8 3, !19, i8 4, i32 1, i8 4, i32 0, i8 0, !22}
!39 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !19, i8 2, i32 1, i8 4, i32 1, i8 0, !22}
!40 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !30, i8 2, i32 1, i8 4, i32 2, i8 0, !22}
!41 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !42, i8 2, i32 1, i8 4, i32 3, i8 0, !22}
!42 = !{i32 2}
!43 = !{i32 4, !"TEXCOORD", i8 9, i8 0, !44, i8 2, i32 1, i8 4, i32 4, i8 0, !22}
!44 = !{i32 3}
!45 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !46, i8 2, i32 1, i8 4, i32 5, i8 0, !22}
!46 = !{i32 4}
!47 = !{i32 6, !"TEXCOORD", i8 9, i8 0, !48, i8 2, i32 1, i8 4, i32 6, i8 0, !22}
!48 = !{i32 5}
!49 = !{i32 7, !"TEXCOORD", i8 9, i8 0, !50, i8 2, i32 1, i8 4, i32 7, i8 0, !22}
!50 = !{i32 6}
!51 = !{i32 8, !"TEXCOORD", i8 9, i8 0, !52, i8 2, i32 1, i8 3, i32 8, i8 0, !20}
!52 = !{i32 7}
!53 = !{i32 9, !"SV_ClipDistance", i8 9, i8 6, !19, i8 2, i32 1, i8 1, i32 9, i8 0, !36}
!54 = !{i32 0, i64 16}
 