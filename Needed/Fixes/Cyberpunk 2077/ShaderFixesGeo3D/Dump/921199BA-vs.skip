;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; POSITION                 0   xyz         0     NONE   float   xyz 
; TEXCOORD                 0   xy          1     NONE   float   xy  
; NORMAL                   0   xyz         2     NONE   float   xyz 
; TANGENT                  0   xyzw        3     NONE   float   xyzw
; COLOR                    0   xyzw        4     NONE   float   xyz 
; TEXCOORD                 1   xy          5     NONE   float       
; EXTRA_DATA               0   xyzw        6     NONE   float       
; EXTRA_DATA               1   xyzw        7     NONE   float       
; EXTRA_DATA               2   xyzw        8     NONE   float       
; INSTANCE_TRANSFORM       0   xyzw        9     NONE   float   xyzw
; INSTANCE_TRANSFORM       1   xyzw       10     NONE   float   xyzw
; INSTANCE_TRANSFORM       2   xyzw       11     NONE   float   xyzw
; SV_InstanceID            0   x          12   INSTID    uint       
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; TEXCOORD                 0   xyzw        1     NONE   float   xyzw
; TEXCOORD                 1   xyzw        2     NONE   float   xyzw
; TEXCOORD                 2   xyzw        3     NONE   float   xyzw
; TEXCOORD                 3   xyzw        4     NONE   float   xyzw
; TEXCOORD                 4   x           5     NONE   float   x   
; TEXCOORD                 5   xyz         6     NONE   float   xyz 
;
; shader hash: 21369acce2a1fb14e730681358bdf5d7
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; POSITION                 0                              
; TEXCOORD                 0                              
; NORMAL                   0                              
; TANGENT                  0                              
; COLOR                    0                              
; TEXCOORD                 1                              
; EXTRA_DATA               0                              
; EXTRA_DATA               1                              
; EXTRA_DATA               2                              
; INSTANCE_TRANSFORM       0                              
; SV_InstanceID            0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; TEXCOORD                 3                 linear       
; TEXCOORD                 4                 linear       
; TEXCOORD                 5        nointerpolation       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [848 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [112 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb1     1
;                                   cbuffer      NA          NA     CB1            cb5     1
;
;
; ViewId state:
;
; Number of inputs: 49, outputs: 27
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 }
;   output 1 depends on inputs: { 0, 1, 2, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 }
;   output 2 depends on inputs: { 0, 1, 2, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 }
;   output 3 depends on inputs: { 0, 1, 2, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 }
;   output 4 depends on inputs: { 4 }
;   output 5 depends on inputs: { 5 }
;   output 6 depends on inputs: { 8, 9, 10, 36, 37, 38, 40, 41, 42, 44, 45, 46 }
;   output 7 depends on inputs: { 8, 9, 10, 36, 37, 38, 40, 41, 42, 44, 45, 46 }
;   output 8 depends on inputs: { 8, 9, 10, 36, 37, 38, 40, 41, 42, 44, 45, 46 }
;   output 9 depends on inputs: { 8, 9, 10, 12, 13, 14, 15, 36, 37, 38, 40, 41, 42, 44, 45, 46 }
;   output 10 depends on inputs: { 8, 9, 10, 12, 13, 14, 15, 36, 37, 38, 40, 41, 42, 44, 45, 46 }
;   output 11 depends on inputs: { 8, 9, 10, 12, 13, 14, 15, 36, 37, 38, 40, 41, 42, 44, 45, 46 }
;   output 12 depends on inputs: { 12, 13, 14, 36, 37, 38, 40, 41, 42, 44, 45, 46 }
;   output 13 depends on inputs: { 12, 13, 14, 36, 37, 38, 40, 41, 42, 44, 45, 46 }
;   output 14 depends on inputs: { 12, 13, 14, 36, 37, 38, 40, 41, 42, 44, 45, 46 }
;   output 15 depends on inputs: { 16 }
;   output 16 depends on inputs: { 17 }
;   output 17 depends on inputs: { 18 }
;   output 18 depends on inputs: { 0, 1, 2, 36, 37, 38, 39 }
;   output 19 depends on inputs: { 0, 1, 2, 40, 41, 42, 43 }
;   output 20 depends on inputs: { 0, 1, 2, 44, 45, 46, 47 }
;   output 24 depends on inputs: { 39 }
;   output 25 depends on inputs: { 43 }
;   output 26 depends on inputs: { 47 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%hostlayout.CameraShaderConsts = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, i32, i32, <2 x i32>, float, float }
%hostlayout.FrequentVertexConsts = type { [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float> }

define void @vs_main_() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 1, i32 5, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 9, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call float @dx.op.loadInput.f32(i32 4, i32 9, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %20 = call float @dx.op.loadInput.f32(i32 4, i32 9, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %21 = call float @dx.op.loadInput.f32(i32 4, i32 9, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %22 = call float @dx.op.loadInput.f32(i32 4, i32 9, i32 1, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %23 = call float @dx.op.loadInput.f32(i32 4, i32 9, i32 1, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %24 = call float @dx.op.loadInput.f32(i32 4, i32 9, i32 1, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %25 = call float @dx.op.loadInput.f32(i32 4, i32 9, i32 1, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %26 = call float @dx.op.loadInput.f32(i32 4, i32 9, i32 2, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %27 = call float @dx.op.loadInput.f32(i32 4, i32 9, i32 2, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %28 = call float @dx.op.loadInput.f32(i32 4, i32 9, i32 2, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %29 = call float @dx.op.loadInput.f32(i32 4, i32 9, i32 2, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %30 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %2, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %31 = extractvalue %dx.types.CBufRet.i32 %30, 0
  %32 = extractvalue %dx.types.CBufRet.i32 %30, 1
  %33 = extractvalue %dx.types.CBufRet.i32 %30, 2
  %34 = bitcast float %21 to i32
  %35 = bitcast float %25 to i32
  %36 = bitcast float %29 to i32
  %37 = sub i32 %34, %31
  %38 = sub i32 %35, %32
  %39 = sub i32 %36, %33
  %40 = sitofp i32 %37 to float
  %41 = sitofp i32 %38 to float
  %42 = sitofp i32 %39 to float
  %43 = fmul fast float %40, 0x3EE0000000000000
  %44 = fmul fast float %41, 0x3EE0000000000000
  %45 = fmul fast float %42, 0x3EE0000000000000
  %46 = fmul fast float %10, 2.000000e+00
  %47 = fmul fast float %11, 2.000000e+00
  %48 = fmul fast float %12, 2.000000e+00
  %49 = fadd fast float %46, -1.000000e+00
  %50 = fadd fast float %47, -1.000000e+00
  %51 = fadd fast float %48, -1.000000e+00
  %52 = fmul fast float %6, 2.000000e+00
  %53 = fmul fast float %7, 2.000000e+00
  %54 = fmul fast float %8, 2.000000e+00
  %55 = fadd fast float %52, -1.000000e+00
  %56 = fadd fast float %53, -1.000000e+00
  %57 = fadd fast float %54, -1.000000e+00
  %58 = fmul fast float %9, 2.000000e+00
  %59 = fadd fast float %58, -1.000000e+00
  %60 = fmul fast float %50, %57
  %61 = fmul fast float %51, %56
  %62 = fsub fast float %60, %61
  %63 = fmul fast float %51, %55
  %64 = fmul fast float %49, %57
  %65 = fsub fast float %63, %64
  %66 = fmul fast float %49, %56
  %67 = fmul fast float %50, %55
  %68 = fsub fast float %66, %67
  %69 = fmul fast float %62, %59
  %70 = fmul fast float %65, %59
  %71 = fmul fast float %68, %59
  %72 = call float @dx.op.dot3.f32(i32 55, float %69, float %70, float %71, float %69, float %70, float %71)  ; Dot3(ax,ay,az,bx,by,bz)
  %73 = call float @dx.op.unary.f32(i32 25, float %72)  ; Rsqrt(value)
  %74 = fmul fast float %73, %69
  %75 = fmul fast float %73, %70
  %76 = fmul fast float %73, %71
  %77 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %78 = extractvalue %dx.types.CBufRet.f32 %77, 0
  %79 = extractvalue %dx.types.CBufRet.f32 %77, 1
  %80 = extractvalue %dx.types.CBufRet.f32 %77, 2
  %81 = fmul fast float %78, %15
  %82 = fmul fast float %79, %16
  %83 = fmul fast float %80, %17
  %84 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %85 = extractvalue %dx.types.CBufRet.f32 %84, 0
  %86 = extractvalue %dx.types.CBufRet.f32 %84, 1
  %87 = extractvalue %dx.types.CBufRet.f32 %84, 2
  %88 = fadd fast float %81, %85
  %89 = fadd fast float %82, %86
  %90 = fadd fast float %83, %87
  %91 = fmul fast float %18, %49
  %92 = call float @dx.op.tertiary.f32(i32 46, float %50, float %19, float %91)  ; FMad(a,b,c)
  %93 = call float @dx.op.tertiary.f32(i32 46, float %51, float %20, float %92)  ; FMad(a,b,c)
  %94 = fmul fast float %22, %49
  %95 = call float @dx.op.tertiary.f32(i32 46, float %50, float %23, float %94)  ; FMad(a,b,c)
  %96 = call float @dx.op.tertiary.f32(i32 46, float %51, float %24, float %95)  ; FMad(a,b,c)
  %97 = fmul fast float %26, %49
  %98 = call float @dx.op.tertiary.f32(i32 46, float %50, float %27, float %97)  ; FMad(a,b,c)
  %99 = call float @dx.op.tertiary.f32(i32 46, float %51, float %28, float %98)  ; FMad(a,b,c)
  %100 = call float @dx.op.dot3.f32(i32 55, float %93, float %96, float %99, float %93, float %96, float %99)  ; Dot3(ax,ay,az,bx,by,bz)
  %101 = call float @dx.op.unary.f32(i32 25, float %100)  ; Rsqrt(value)
  %102 = fmul fast float %101, %93
  %103 = fmul fast float %101, %96
  %104 = fmul fast float %101, %99
  %105 = fmul fast float %74, %18
  %106 = call float @dx.op.tertiary.f32(i32 46, float %75, float %19, float %105)  ; FMad(a,b,c)
  %107 = call float @dx.op.tertiary.f32(i32 46, float %76, float %20, float %106)  ; FMad(a,b,c)
  %108 = fmul fast float %74, %22
  %109 = call float @dx.op.tertiary.f32(i32 46, float %75, float %23, float %108)  ; FMad(a,b,c)
  %110 = call float @dx.op.tertiary.f32(i32 46, float %76, float %24, float %109)  ; FMad(a,b,c)
  %111 = fmul fast float %74, %26
  %112 = call float @dx.op.tertiary.f32(i32 46, float %75, float %27, float %111)  ; FMad(a,b,c)
  %113 = call float @dx.op.tertiary.f32(i32 46, float %76, float %28, float %112)  ; FMad(a,b,c)
  %114 = call float @dx.op.dot3.f32(i32 55, float %107, float %110, float %113, float %107, float %110, float %113)  ; Dot3(ax,ay,az,bx,by,bz)
  %115 = call float @dx.op.unary.f32(i32 25, float %114)  ; Rsqrt(value)
  %116 = fmul fast float %115, %107
  %117 = fmul fast float %115, %110
  %118 = fmul fast float %115, %113
  %119 = fmul fast float %18, %55
  %120 = call float @dx.op.tertiary.f32(i32 46, float %56, float %19, float %119)  ; FMad(a,b,c)
  %121 = call float @dx.op.tertiary.f32(i32 46, float %57, float %20, float %120)  ; FMad(a,b,c)
  %122 = fmul fast float %22, %55
  %123 = call float @dx.op.tertiary.f32(i32 46, float %56, float %23, float %122)  ; FMad(a,b,c)
  %124 = call float @dx.op.tertiary.f32(i32 46, float %57, float %24, float %123)  ; FMad(a,b,c)
  %125 = fmul fast float %26, %55
  %126 = call float @dx.op.tertiary.f32(i32 46, float %56, float %27, float %125)  ; FMad(a,b,c)
  %127 = call float @dx.op.tertiary.f32(i32 46, float %57, float %28, float %126)  ; FMad(a,b,c)
  %128 = call float @dx.op.dot3.f32(i32 55, float %121, float %124, float %127, float %121, float %124, float %127)  ; Dot3(ax,ay,az,bx,by,bz)
  %129 = call float @dx.op.unary.f32(i32 25, float %128)  ; Rsqrt(value)
  %130 = fmul fast float %129, %121
  %131 = fmul fast float %129, %124
  %132 = fmul fast float %129, %127
  %133 = call float @dx.op.dot3.f32(i32 55, float %102, float %103, float %104, float %102, float %103, float %104)  ; Dot3(ax,ay,az,bx,by,bz)
  %134 = call float @dx.op.unary.f32(i32 25, float %133)  ; Rsqrt(value)
  %135 = fmul fast float %134, %102
  %136 = fmul fast float %134, %103
  %137 = fmul fast float %134, %104
  %138 = call float @dx.op.dot3.f32(i32 55, float %130, float %131, float %132, float %130, float %131, float %132)  ; Dot3(ax,ay,az,bx,by,bz)
  %139 = call float @dx.op.unary.f32(i32 25, float %138)  ; Rsqrt(value)
  %140 = fmul fast float %139, %130
  %141 = fmul fast float %139, %131
  %142 = fmul fast float %139, %132
  %143 = call float @dx.op.dot3.f32(i32 55, float %116, float %117, float %118, float %116, float %117, float %118)  ; Dot3(ax,ay,az,bx,by,bz)
  %144 = call float @dx.op.unary.f32(i32 25, float %143)  ; Rsqrt(value)
  %145 = fmul fast float %144, %116
  %146 = fmul fast float %144, %117
  %147 = fmul fast float %144, %118
  %148 = sitofp i32 %34 to float
  %149 = sitofp i32 %35 to float
  %150 = sitofp i32 %36 to float
  %151 = fmul fast float %148, 0x3EE0000000000000
  %152 = fmul fast float %149, 0x3EE0000000000000
  %153 = fmul fast float %150, 0x3EE0000000000000
  %154 = fmul fast float %88, %18
  %155 = call float @dx.op.tertiary.f32(i32 46, float %89, float %19, float %154)  ; FMad(a,b,c)
  %156 = call float @dx.op.tertiary.f32(i32 46, float %90, float %20, float %155)  ; FMad(a,b,c)
  %157 = fmul fast float %88, %22
  %158 = call float @dx.op.tertiary.f32(i32 46, float %89, float %23, float %157)  ; FMad(a,b,c)
  %159 = call float @dx.op.tertiary.f32(i32 46, float %90, float %24, float %158)  ; FMad(a,b,c)
  %160 = fmul fast float %88, %26
  %161 = call float @dx.op.tertiary.f32(i32 46, float %89, float %27, float %160)  ; FMad(a,b,c)
  %162 = call float @dx.op.tertiary.f32(i32 46, float %90, float %28, float %161)  ; FMad(a,b,c)
  %163 = fadd fast float %156, %43
  %164 = fadd fast float %159, %44
  %165 = fadd fast float %162, %45
  %166 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %167 = extractvalue %dx.types.CBufRet.f32 %166, 0
  %168 = extractvalue %dx.types.CBufRet.f32 %166, 1
  %169 = extractvalue %dx.types.CBufRet.f32 %166, 2
  %170 = extractvalue %dx.types.CBufRet.f32 %166, 3
  %171 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %172 = extractvalue %dx.types.CBufRet.f32 %171, 0
  %173 = extractvalue %dx.types.CBufRet.f32 %171, 1
  %174 = extractvalue %dx.types.CBufRet.f32 %171, 2
  %175 = extractvalue %dx.types.CBufRet.f32 %171, 3
  %176 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %177 = extractvalue %dx.types.CBufRet.f32 %176, 0
  %178 = extractvalue %dx.types.CBufRet.f32 %176, 1
  %179 = extractvalue %dx.types.CBufRet.f32 %176, 2
  %180 = extractvalue %dx.types.CBufRet.f32 %176, 3
  %181 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %182 = extractvalue %dx.types.CBufRet.f32 %181, 0
  %183 = extractvalue %dx.types.CBufRet.f32 %181, 1
  %184 = extractvalue %dx.types.CBufRet.f32 %181, 2
  %185 = extractvalue %dx.types.CBufRet.f32 %181, 3
  %186 = fmul fast float %167, %163
  %187 = call float @dx.op.tertiary.f32(i32 46, float %164, float %168, float %186)  ; FMad(a,b,c)
  %188 = call float @dx.op.tertiary.f32(i32 46, float %165, float %169, float %187)  ; FMad(a,b,c)
  %189 = fadd fast float %188, %170
  %190 = fmul fast float %172, %163
  %191 = call float @dx.op.tertiary.f32(i32 46, float %164, float %173, float %190)  ; FMad(a,b,c)
  %192 = call float @dx.op.tertiary.f32(i32 46, float %165, float %174, float %191)  ; FMad(a,b,c)
  %193 = fadd fast float %192, %175
  %194 = fmul fast float %177, %163
  %195 = call float @dx.op.tertiary.f32(i32 46, float %164, float %178, float %194)  ; FMad(a,b,c)
  %196 = call float @dx.op.tertiary.f32(i32 46, float %165, float %179, float %195)  ; FMad(a,b,c)
  %197 = fadd fast float %196, %180
  %198 = fmul fast float %182, %163
  %199 = call float @dx.op.tertiary.f32(i32 46, float %164, float %183, float %198)  ; FMad(a,b,c)
  %200 = call float @dx.op.tertiary.f32(i32 46, float %165, float %184, float %199)  ; FMad(a,b,c)
  %201 = fadd fast float %200, %185
  %202 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 37)  ; CBufferLoadLegacy(handle,regIndex)
  %203 = extractvalue %dx.types.CBufRet.f32 %202, 0
  %204 = extractvalue %dx.types.CBufRet.f32 %202, 1
  %205 = extractvalue %dx.types.CBufRet.f32 %202, 2
  %206 = fadd fast float %203, %163
  %207 = fadd fast float %204, %164
  %208 = fadd fast float %205, %165
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %189)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %193)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %197)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %201)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %13)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %14)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %135)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %136)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %137)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %145)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %146)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float %147)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %140)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %141)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %142)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %3)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %4)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float %5)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float %206)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float %207)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 0, float %208)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 0, float %151)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 1, float %152)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 2, float %153)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!8}
!dx.entryPoints = !{!9}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{null, null, !5, null}
!5 = !{!6, !7}
!6 = !{i32 0, %hostlayout.CameraShaderConsts* undef, !"", i32 0, i32 1, i32 1, i32 848, null}
!7 = !{i32 1, %hostlayout.FrequentVertexConsts* undef, !"", i32 0, i32 5, i32 1, i32 112, null}
!8 = !{[51 x i32] [i32 49, i32 27, i32 1835023, i32 1835023, i32 1835023, i32 0, i32 16, i32 32, i32 0, i32 0, i32 4032, i32 4032, i32 4032, i32 0, i32 32256, i32 32256, i32 32256, i32 3584, i32 32768, i32 65536, i32 131072, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 294863, i32 294863, i32 294863, i32 17039375, i32 557007, i32 557007, i32 557007, i32 34078735, i32 1081295, i32 1081295, i32 1081295, i32 68157455, i32 0]}
!9 = !{void ()* @vs_main_, !"vs_main_", !10, !4, null}
!10 = !{!11, !30, null}
!11 = !{!12, !15, !17, !18, !20, !21, !23, !24, !25, !27, !29}
!12 = !{i32 0, !"POSITION", i8 9, i8 0, !13, i8 0, i32 1, i8 3, i32 0, i8 0, !14}
!13 = !{i32 0}
!14 = !{i32 3, i32 7}
!15 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !13, i8 0, i32 1, i8 2, i32 1, i8 0, !16}
!16 = !{i32 3, i32 3}
!17 = !{i32 2, !"NORMAL", i8 9, i8 0, !13, i8 0, i32 1, i8 3, i32 2, i8 0, !14}
!18 = !{i32 3, !"TANGENT", i8 9, i8 0, !13, i8 0, i32 1, i8 4, i32 3, i8 0, !19}
!19 = !{i32 3, i32 15}
!20 = !{i32 4, !"COLOR", i8 9, i8 0, !13, i8 0, i32 1, i8 4, i32 4, i8 0, !14}
!21 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !22, i8 0, i32 1, i8 2, i32 5, i8 0, null}
!22 = !{i32 1}
!23 = !{i32 6, !"EXTRA_DATA", i8 9, i8 0, !13, i8 0, i32 1, i8 4, i32 6, i8 0, null}
!24 = !{i32 7, !"EXTRA_DATA", i8 9, i8 0, !22, i8 0, i32 1, i8 4, i32 7, i8 0, null}
!25 = !{i32 8, !"EXTRA_DATA", i8 9, i8 0, !26, i8 0, i32 1, i8 4, i32 8, i8 0, null}
!26 = !{i32 2}
!27 = !{i32 9, !"INSTANCE_TRANSFORM", i8 9, i8 0, !28, i8 0, i32 3, i8 4, i32 9, i8 0, !19}
!28 = !{i32 0, i32 1, i32 2}
!29 = !{i32 10, !"SV_InstanceID", i8 5, i8 2, !13, i8 0, i32 1, i8 1, i32 12, i8 0, null}
!30 = !{!31, !32, !33, !34, !35, !37, !40}
!31 = !{i32 0, !"SV_Position", i8 9, i8 3, !13, i8 4, i32 1, i8 4, i32 0, i8 0, !19}
!32 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !13, i8 2, i32 1, i8 4, i32 1, i8 0, !19}
!33 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !22, i8 2, i32 1, i8 4, i32 2, i8 0, !19}
!34 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !26, i8 2, i32 1, i8 4, i32 3, i8 0, !19}
!35 = !{i32 4, !"TEXCOORD", i8 9, i8 0, !36, i8 2, i32 1, i8 4, i32 4, i8 0, !19}
!36 = !{i32 3}
!37 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !38, i8 2, i32 1, i8 1, i32 5, i8 0, !39}
!38 = !{i32 4}
!39 = !{i32 3, i32 1}
!40 = !{i32 6, !"TEXCOORD", i8 9, i8 0, !41, i8 1, i32 1, i8 3, i32 6, i8 0, !14}
!41 = !{i32 5}
 