;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; POSITION                 0   xyz         0     NONE   float   xyz 
; COLOR                    0   xyzw        1     NONE   float       
; TEXCOORD                 1   xy          2     NONE   float       
; INSTANCE_TRANSFORM       0   xyzw        3     NONE   float   xyzw
; INSTANCE_TRANSFORM       1   xyzw        4     NONE   float   xyzw
; INSTANCE_TRANSFORM       2   xyzw        5     NONE   float   xyzw
; SV_VertexID              0   x           6   VERTID    uint       
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; TEXCOORD                 0   xyzw        1     NONE   float   xyzw
; TEXCOORD                 1   x           2     NONE    uint   x   
; TEXCOORD                 2    y          2     NONE   float    y  
;
; shader hash: 2ff583e0fcb7525644cb390214413e83
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; POSITION                 0                              
; COLOR                    0                              
; TEXCOORD                 1                              
; INSTANCE_TRANSFORM       0                              
; SV_VertexID              0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; TEXCOORD                 0        nointerpolation       
; TEXCOORD                 1        nointerpolation       
; TEXCOORD                 2        nointerpolation       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [476 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [848 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [112 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;                                   cbuffer      NA          NA     CB1            cb1     1
;                                   cbuffer      NA          NA     CB2            cb5     1
;
;
; ViewId state:
;
; Number of inputs: 25, outputs: 10
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 }
;   output 1 depends on inputs: { 0, 1, 2, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 }
;   output 2 depends on inputs: { 0, 1, 2, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 }
;   output 3 depends on inputs: { 0, 1, 2, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 }
;   output 4 depends on inputs: { 15, 19, 23 }
;   output 5 depends on inputs: { 15, 19, 23 }
;   output 6 depends on inputs: { 15, 19, 23 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%GlobalShaderConsts = type { <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, float, float, float, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, i32, float, [6 x <4 x float>], <4 x float>, <2 x i32>, i32, i32, float, i32, i32 }
%hostlayout.CameraShaderConsts = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, i32, i32, <2 x i32>, float, float }
%hostlayout.FrequentVertexConsts = type { [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float> }

define void @vs_main_() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 2, i32 5, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 1, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 1, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 1, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 1, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 2, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 2, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 2, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 2, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %2, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %20 = extractvalue %dx.types.CBufRet.i32 %19, 0
  %21 = extractvalue %dx.types.CBufRet.i32 %19, 1
  %22 = extractvalue %dx.types.CBufRet.i32 %19, 2
  %23 = bitcast float %10 to i32
  %24 = bitcast float %14 to i32
  %25 = bitcast float %18 to i32
  %26 = sub i32 %23, %20
  %27 = sub i32 %24, %21
  %28 = sub i32 %25, %22
  %29 = sitofp i32 %26 to float
  %30 = sitofp i32 %27 to float
  %31 = sitofp i32 %28 to float
  %32 = fmul fast float %29, 0x3EE0000000000000
  %33 = fmul fast float %30, 0x3EE0000000000000
  %34 = fmul fast float %31, 0x3EE0000000000000
  %35 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %36 = extractvalue %dx.types.CBufRet.f32 %35, 0
  %37 = extractvalue %dx.types.CBufRet.f32 %35, 1
  %38 = extractvalue %dx.types.CBufRet.f32 %35, 2
  %39 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %40 = extractvalue %dx.types.CBufRet.f32 %39, 0
  %41 = extractvalue %dx.types.CBufRet.f32 %39, 1
  %42 = extractvalue %dx.types.CBufRet.f32 %39, 2
  %43 = fmul fast float %40, %4
  %44 = fmul fast float %41, %5
  %45 = fmul fast float %42, %6
  %46 = fadd fast float %43, %36
  %47 = fadd fast float %44, %37
  %48 = fadd fast float %45, %38
  %49 = fmul fast float %46, %7
  %50 = call float @dx.op.tertiary.f32(i32 46, float %47, float %8, float %49)  ; FMad(a,b,c)
  %51 = call float @dx.op.tertiary.f32(i32 46, float %48, float %9, float %50)  ; FMad(a,b,c)
  %52 = fadd fast float %32, %51
  %53 = fmul fast float %46, %11
  %54 = call float @dx.op.tertiary.f32(i32 46, float %47, float %12, float %53)  ; FMad(a,b,c)
  %55 = call float @dx.op.tertiary.f32(i32 46, float %48, float %13, float %54)  ; FMad(a,b,c)
  %56 = fadd fast float %55, %33
  %57 = fmul fast float %46, %15
  %58 = call float @dx.op.tertiary.f32(i32 46, float %47, float %16, float %57)  ; FMad(a,b,c)
  %59 = call float @dx.op.tertiary.f32(i32 46, float %48, float %17, float %58)  ; FMad(a,b,c)
  %60 = fadd fast float %59, %34
  %61 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %62 = extractvalue %dx.types.CBufRet.f32 %61, 0
  %63 = extractvalue %dx.types.CBufRet.f32 %61, 1
  %64 = extractvalue %dx.types.CBufRet.f32 %61, 2
  %65 = extractvalue %dx.types.CBufRet.f32 %61, 3
  %66 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %67 = extractvalue %dx.types.CBufRet.f32 %66, 0
  %68 = extractvalue %dx.types.CBufRet.f32 %66, 1
  %69 = extractvalue %dx.types.CBufRet.f32 %66, 2
  %70 = extractvalue %dx.types.CBufRet.f32 %66, 3
  %71 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %72 = extractvalue %dx.types.CBufRet.f32 %71, 0
  %73 = extractvalue %dx.types.CBufRet.f32 %71, 1
  %74 = extractvalue %dx.types.CBufRet.f32 %71, 2
  %75 = extractvalue %dx.types.CBufRet.f32 %71, 3
  %76 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %77 = extractvalue %dx.types.CBufRet.f32 %76, 0
  %78 = extractvalue %dx.types.CBufRet.f32 %76, 1
  %79 = extractvalue %dx.types.CBufRet.f32 %76, 2
  %80 = extractvalue %dx.types.CBufRet.f32 %76, 3
  %81 = fmul fast float %62, %52
  %82 = call float @dx.op.tertiary.f32(i32 46, float %56, float %63, float %81)  ; FMad(a,b,c)
  %83 = call float @dx.op.tertiary.f32(i32 46, float %60, float %64, float %82)  ; FMad(a,b,c)
  %84 = fadd fast float %83, %65
  %85 = fmul fast float %67, %52
  %86 = call float @dx.op.tertiary.f32(i32 46, float %56, float %68, float %85)  ; FMad(a,b,c)
  %87 = call float @dx.op.tertiary.f32(i32 46, float %60, float %69, float %86)  ; FMad(a,b,c)
  %88 = fadd fast float %87, %70
  %89 = fmul fast float %72, %52
  %90 = call float @dx.op.tertiary.f32(i32 46, float %56, float %73, float %89)  ; FMad(a,b,c)
  %91 = call float @dx.op.tertiary.f32(i32 46, float %60, float %74, float %90)  ; FMad(a,b,c)
  %92 = fadd fast float %91, %75
  %93 = fmul fast float %77, %52
  %94 = call float @dx.op.tertiary.f32(i32 46, float %56, float %78, float %93)  ; FMad(a,b,c)
  %95 = call float @dx.op.tertiary.f32(i32 46, float %60, float %79, float %94)  ; FMad(a,b,c)
  %96 = fadd fast float %95, %80
  %97 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 37)  ; CBufferLoadLegacy(handle,regIndex)
  %98 = extractvalue %dx.types.CBufRet.f32 %97, 0
  %99 = extractvalue %dx.types.CBufRet.f32 %97, 1
  %100 = extractvalue %dx.types.CBufRet.f32 %97, 2
  %101 = fadd fast float %98, %32
  %102 = fadd fast float %99, %33
  %103 = fadd fast float %100, %34
  %104 = call float @dx.op.unary.f32(i32 27, float %101)  ; Round_ni(value)
  %105 = call float @dx.op.unary.f32(i32 27, float %102)  ; Round_ni(value)
  %106 = call float @dx.op.unary.f32(i32 27, float %103)  ; Round_ni(value)
  %107 = fmul fast float %104, 0x3FBA64C300000000
  %108 = fmul fast float %105, 0x3FBA5E3540000000
  %109 = fmul fast float %106, 0x3FB8E8A720000000
  %110 = fmul fast float %104, 0x3FBC226800000000
  %111 = call float @dx.op.unary.f32(i32 22, float %107)  ; Frc(value)
  %112 = call float @dx.op.unary.f32(i32 22, float %108)  ; Frc(value)
  %113 = call float @dx.op.unary.f32(i32 22, float %109)  ; Frc(value)
  %114 = call float @dx.op.unary.f32(i32 22, float %110)  ; Frc(value)
  %115 = fadd fast float %114, 0x4040AA3D80000000
  %116 = fadd fast float %113, 0x4040AA3D80000000
  %117 = fadd fast float %111, 0x4040AA3D80000000
  %118 = fadd fast float %112, 0x4040AA3D80000000
  %119 = call float @dx.op.dot4.f32(i32 56, float %111, float %112, float %113, float %114, float %115, float %116, float %117, float %118)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %120 = fadd fast float %119, %111
  %121 = fadd fast float %119, %112
  %122 = fadd fast float %119, %113
  %123 = fadd fast float %119, %114
  %124 = fadd fast float %120, %121
  %125 = fadd fast float %120, %122
  %126 = fadd fast float %121, %122
  %127 = fmul fast float %124, %122
  %128 = fmul fast float %125, %121
  %129 = fmul fast float %126, %123
  %130 = call float @dx.op.unary.f32(i32 22, float %127)  ; Frc(value)
  %131 = call float @dx.op.unary.f32(i32 22, float %128)  ; Frc(value)
  %132 = call float @dx.op.unary.f32(i32 22, float %129)  ; Frc(value)
  %133 = fmul fast float %130, 0x3FA47AE140000000
  %134 = fmul fast float %131, 0x3FA47AE140000000
  %135 = fmul fast float %132, 0x3FA47AE140000000
  %136 = fadd fast float %133, 0xBF947AE140000000
  %137 = fadd fast float %134, 0xBF947AE140000000
  %138 = fadd fast float %135, 0xBF947AE140000000
  %139 = call float @dx.op.unary.f32(i32 7, float %136)  ; Saturate(value)
  %140 = call float @dx.op.unary.f32(i32 7, float %137)  ; Saturate(value)
  %141 = call float @dx.op.unary.f32(i32 7, float %138)  ; Saturate(value)
  %142 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %143 = extractvalue %dx.types.CBufRet.f32 %142, 3
  %144 = fadd fast float %143, 0xBFEA555560000000
  %145 = fmul fast float %144, 0x407E001E00000000
  %146 = call float @dx.op.unary.f32(i32 7, float %145)  ; Saturate(value)
  %147 = fadd fast float %143, 0xBFCAAAAAA0000000
  %148 = fmul fast float %147, 0xC07E0001E0000000
  %149 = call float @dx.op.unary.f32(i32 7, float %148)  ; Saturate(value)
  %150 = call float @dx.op.binary.f32(i32 35, float %149, float %146)  ; FMax(a,b)
  %151 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %152 = extractvalue %dx.types.CBufRet.f32 %151, 0
  %153 = fsub fast float 1.000000e+00, %150
  %154 = fmul fast float %152, %153
  %155 = fadd fast float %154, %150
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %84)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %88)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %92)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %96)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %139)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %140)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %141)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.i32(i32 5, i32 2, i32 0, i8 0, i32 0)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %155)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind
declare void @dx.op.storeOutput.i32(i32, i32, i32, i8, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!9}
!dx.entryPoints = !{!10}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{null, null, !5, null}
!5 = !{!6, !7, !8}
!6 = !{i32 0, %GlobalShaderConsts* undef, !"", i32 0, i32 0, i32 1, i32 476, null}
!7 = !{i32 1, %hostlayout.CameraShaderConsts* undef, !"", i32 0, i32 1, i32 1, i32 848, null}
!8 = !{i32 2, %hostlayout.FrequentVertexConsts* undef, !"", i32 0, i32 5, i32 1, i32 112, null}
!9 = !{[27 x i32] [i32 25, i32 10, i32 15, i32 15, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 15, i32 15, i32 15, i32 127, i32 15, i32 15, i32 15, i32 127, i32 15, i32 15, i32 15, i32 127, i32 0]}
!10 = !{void ()* @vs_main_, !"vs_main_", !11, !4, null}
!11 = !{!12, !23, null}
!12 = !{!13, !16, !17, !19, !22}
!13 = !{i32 0, !"POSITION", i8 9, i8 0, !14, i8 0, i32 1, i8 3, i32 0, i8 0, !15}
!14 = !{i32 0}
!15 = !{i32 3, i32 7}
!16 = !{i32 1, !"COLOR", i8 9, i8 0, !14, i8 0, i32 1, i8 4, i32 1, i8 0, null}
!17 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !18, i8 0, i32 1, i8 2, i32 2, i8 0, null}
!18 = !{i32 1}
!19 = !{i32 3, !"INSTANCE_TRANSFORM", i8 9, i8 0, !20, i8 0, i32 3, i8 4, i32 3, i8 0, !21}
!20 = !{i32 0, i32 1, i32 2}
!21 = !{i32 3, i32 15}
!22 = !{i32 4, !"SV_VertexID", i8 5, i8 1, !14, i8 0, i32 1, i8 1, i32 6, i8 0, null}
!23 = !{!24, !25, !26, !28}
!24 = !{i32 0, !"SV_Position", i8 9, i8 3, !14, i8 4, i32 1, i8 4, i32 0, i8 0, !21}
!25 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !14, i8 1, i32 1, i8 4, i32 1, i8 0, !21}
!26 = !{i32 2, !"TEXCOORD", i8 1, i8 0, !18, i8 1, i32 1, i8 1, i32 2, i8 0, !27}
!27 = !{i32 3, i32 1}
!28 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !29, i8 1, i32 1, i8 1, i32 2, i8 1, !27}
!29 = !{i32 2}
 