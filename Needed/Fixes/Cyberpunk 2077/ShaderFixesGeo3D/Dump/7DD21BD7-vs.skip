;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; POSITION                 0   xyz         0     NONE   float   xyz 
; TEXCOORD                 0   xy          1     NONE   float   xy  
; NORMAL                   0   xyz         2     NONE   float   xyz 
; TANGENT                  0   xyzw        3     NONE   float   xyzw
; COLOR                    0   xyzw        4     NONE   float   xyz 
; TEXCOORD                 1   xy          5     NONE   float       
; EXTRA_DATA               0   xyzw        6     NONE   float   x   
; EXTRA_DATA               1   xyzw        7     NONE   float   xy w
; EXTRA_DATA               2   xyzw        8     NONE   float   xyzw
; INSTANCE_TRANSFORM       0   xyzw        9     NONE   float       
; INSTANCE_TRANSFORM       1   xyzw       10     NONE   float       
; INSTANCE_TRANSFORM       2   xyzw       11     NONE   float       
; SV_InstanceID            0   x          12   INSTID    uint   x   
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; TEXCOORD                 0   xyzw        1     NONE   float   xyzw
; TEXCOORD                 1   xyzw        2     NONE   float   xyzw
; TEXCOORD                 2   xyzw        3     NONE   float   xyzw
; TEXCOORD                 3   xyzw        4     NONE   float   xyzw
; TEXCOORD                 4   xy          5     NONE   float   xy  
; TEXCOORD                 5   xyz         6     NONE   float   xyz 
; TEXCOORD                 6   xyz         7     NONE   float   xyz 
; SV_ClipDistance          0   x           8  CLIPDST   float   x   
;
; shader hash: 4f6377776529ccb75abb23b73f3b340c
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; POSITION                 0                              
; TEXCOORD                 0                              
; NORMAL                   0                              
; TANGENT                  0                              
; COLOR                    0                              
; TEXCOORD                 1                              
; EXTRA_DATA               0                              
; EXTRA_DATA               1                              
; EXTRA_DATA               2                              
; INSTANCE_TRANSFORM       0                              
; SV_InstanceID            0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; TEXCOORD                 3                 linear       
; TEXCOORD                 4                 linear       
; TEXCOORD                 5        nointerpolation       
; TEXCOORD                 6        nointerpolation       
; SV_ClipDistance          0                 linear       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [496 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [848 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [1584 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [112 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [928 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [16 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [100 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [416 x i8] (type annotation not present)
;
; }
;
; Resource bind info for 
; {
;
;   [16 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb7     1
;                                   cbuffer      NA          NA     CB1            cb1     1
;                                   cbuffer      NA          NA     CB2           cb12     1
;                                   cbuffer      NA          NA     CB3            cb5     1
;                                   cbuffer      NA          NA     CB4           cb13     1
;                                   cbuffer      NA          NA     CB5            cb9     1
;                                   cbuffer      NA          NA     CB6            cb4     1
;                                   cbuffer      NA          NA     CB7            cb8     1
;                                   sampler      NA          NA      S0             s0     1
;                                   sampler      NA          NA      S1             s8     1
;                                   sampler      NA          NA      S2            s11     1
;                                   texture     f32          2d      T0      t0,space1 32768
;                                   texture     f32          3d      T1            t53     1
;                                   texture     f32          3d      T2            t54     1
;                                   texture  struct         r/o      T3            t77     1
;                                   texture    byte         r/o      T4            t78     1
;
;
; ViewId state:
;
; Number of inputs: 49, outputs: 33
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2, 8, 9, 10, 12, 13, 14, 24, 28, 29, 31, 32, 33, 34, 35, 48 }
;   output 1 depends on inputs: { 0, 1, 2, 8, 9, 10, 12, 13, 14, 24, 28, 29, 31, 32, 33, 34, 35, 48 }
;   output 2 depends on inputs: { 0, 1, 2, 8, 9, 10, 12, 13, 14, 24, 28, 29, 31, 32, 33, 34, 35, 48 }
;   output 3 depends on inputs: { 0, 1, 2, 8, 9, 10, 12, 13, 14, 24, 28, 29, 31, 32, 33, 34, 35, 48 }
;   output 4 depends on inputs: { 4 }
;   output 5 depends on inputs: { 5 }
;   output 6 depends on inputs: { 0, 1, 2, 8, 9, 10, 12, 13, 14, 24, 32, 33, 35, 48 }
;   output 7 depends on inputs: { 0, 1, 2, 8, 9, 10, 12, 13, 14, 24, 32, 33, 35, 48 }
;   output 8 depends on inputs: { 0, 1, 2, 8, 9, 10, 12, 13, 14, 24, 32, 33, 35, 48 }
;   output 9 depends on inputs: { 0, 1, 2, 8, 9, 10, 12, 13, 14, 15, 24, 48 }
;   output 10 depends on inputs: { 0, 1, 2, 8, 9, 10, 12, 13, 14, 15, 24, 48 }
;   output 11 depends on inputs: { 0, 1, 2, 8, 9, 10, 12, 13, 14, 15, 24, 48 }
;   output 12 depends on inputs: { 0, 1, 2, 8, 9, 10, 12, 13, 14, 24, 32, 33, 35, 48 }
;   output 13 depends on inputs: { 0, 1, 2, 8, 9, 10, 12, 13, 14, 24, 32, 33, 35, 48 }
;   output 14 depends on inputs: { 0, 1, 2, 8, 9, 10, 12, 13, 14, 24, 32, 33, 35, 48 }
;   output 15 depends on inputs: { 16 }
;   output 16 depends on inputs: { 17 }
;   output 17 depends on inputs: { 18 }
;   output 18 depends on inputs: { 0, 1, 2, 8, 9, 10, 12, 13, 14, 24, 28, 29, 31, 32, 33, 34, 35, 48 }
;   output 19 depends on inputs: { 0, 1, 2, 8, 9, 10, 12, 13, 14, 24, 28, 29, 31, 32, 33, 34, 35, 48 }
;   output 20 depends on inputs: { 0, 1, 2, 8, 9, 10, 12, 13, 14, 24, 28, 29, 31, 32, 33, 34, 35, 48 }
;   output 21 depends on inputs: { 2 }
;   output 24 depends on inputs: { 48 }
;   output 25 depends on inputs: { 48 }
;   output 26 depends on inputs: { 48 }
;   output 28 depends on inputs: { 48 }
;   output 29 depends on inputs: { 48 }
;   output 30 depends on inputs: { 48 }
;   output 32 depends on inputs: { 0, 1, 2, 8, 9, 10, 12, 13, 14, 24, 28, 29, 31, 32, 33, 34, 35, 48 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture3D<float>" = type { float, %"class.Texture3D<float>::mips_type" }
%"class.Texture3D<float>::mips_type" = type { i32 }
%"class.StructuredBuffer<vector<unsigned int, 4> >" = type { <4 x i32> }
%struct.ByteAddressBuffer = type { i32 }
%MaterialModifiersConsts = type { [31 x <4 x float>] }
%hostlayout.CameraShaderConsts = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, i32, i32, <2 x i32>, float, float }
%hostlayout.SharedPixelConsts = type { <4 x float>, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float>, <4 x float>, [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <3 x float>, float, float, float, float, float, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], <4 x float>, <3 x float>, float, float, <2 x float>, i32, <4 x float>, <4 x float>, <4 x float>, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float>, <4 x float>, [16 x <4 x float>], i32, float, i32, i32, float, i32, <2 x float> }
%hostlayout.FrequentVertexConsts = type { [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float> }
%hostlayout.CSConstants = type { <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, [4 x [4 x <4 x float>]], [4 x <4 x float>], <4 x float>, i32, <4 x float>, <4 x float>, <4 x float>, %hostlayout.struct.SDistantShadowParams, %struct.SRainMapParams, %struct.SContactShadowSettings }
%hostlayout.struct.SDistantShadowParams = type { [4 x <4 x float>], [4 x [4 x <4 x float>]], <4 x float>, i32, float, i32, float }
%struct.SRainMapParams = type { [2 x <4 x float>] }
%struct.SContactShadowSettings = type { float, float, float, i32, float, float, float, float, i32, i32, float, float }
%AutoSpawnCB = type { i32, i32, i32, i32 }
%ShaderSpecificConstants = type { i32, i32, i32, <4 x float>, float, float, float }
%WindDynamicsCB = type { %struct.SWindStateGames8, %struct.SWindStateGames8 }
%struct.SWindStateGames8 = type { <3 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, %struct.SWindBranchStateGames8, %struct.SWindBranchStateGames8, %struct.SWindRippleStateGames8, <3 x float>, float, <3 x float>, float, <3 x float>, float }
%struct.SWindBranchStateGames8 = type { <3 x float>, float, float, float, float, float }
%struct.SWindRippleStateGames8 = type { <3 x float>, float, float, float, float }
%struct.SamplerState = type { i32 }

define void @vs_main_() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 4, i32 78, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 3, i32 77, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 2, i32 54, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 53, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 2, i32 11, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 1, i32 8, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 7, i32 8, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 6, i32 4, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 5, i32 9, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 4, i32 13, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 3, i32 5, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 2, i32 12, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 7, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %16 = call i32 @dx.op.loadInput.i32(i32 4, i32 10, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %20 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %21 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %22 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %23 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %24 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %25 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %26 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %27 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %28 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %29 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %30 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %31 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %32 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %33 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %34 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %35 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %36 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %37 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %38 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %39 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %40 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %10, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %41 = extractvalue %dx.types.CBufRet.i32 %40, 1
  %42 = extractvalue %dx.types.CBufRet.i32 %40, 2
  %43 = shl i32 %42, 1
  %44 = add i32 %43, %41
  %45 = shl i32 %44, 2
  %46 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %45, i32 undef)  ; BufferLoad(srv,index,wot)
  %47 = extractvalue %dx.types.ResRet.i32 %46, 0
  %48 = extractvalue %dx.types.CBufRet.i32 %40, 0
  %49 = add i32 %47, %16
  %50 = add i32 %49, %48
  %51 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %50, i32 0)  ; BufferLoad(srv,index,wot)
  %52 = extractvalue %dx.types.ResRet.i32 %51, 0
  %53 = extractvalue %dx.types.ResRet.i32 %51, 1
  %54 = extractvalue %dx.types.ResRet.i32 %51, 2
  %55 = extractvalue %dx.types.ResRet.i32 %51, 3
  %56 = and i32 %52, 131071
  %57 = and i32 %53, 131071
  %58 = add nsw i32 %56, -65535
  %59 = add nsw i32 %57, -65535
  %60 = sitofp i32 %58 to float
  %61 = sitofp i32 %59 to float
  %62 = lshr i32 %52, 17
  %63 = and i32 %62, 127
  %64 = lshr i32 %53, 17
  %65 = and i32 %64, 127
  %66 = uitofp i32 %63 to float
  %67 = uitofp i32 %65 to float
  %68 = fmul fast float %66, 0x3F80204080000000
  %69 = fmul fast float %67, 0x3F80204080000000
  %70 = fadd fast float %68, %60
  %71 = fadd fast float %69, %61
  %72 = lshr i32 %52, 24
  %73 = lshr i32 %53, 24
  %74 = shl nuw nsw i32 %73, 8
  %75 = or i32 %74, %72
  %76 = uitofp i32 %75 to float
  %77 = fmul fast float %76, 0x3F8FF02000000000
  %78 = fadd fast float %77, -1.280000e+02
  %79 = and i32 %54, 65535
  %80 = uitofp i32 %79 to float
  %81 = lshr i32 %54, 16
  %82 = uitofp i32 %81 to float
  %83 = fmul fast float %80, 0x3F00002000000000
  %84 = fmul fast float %82, 0x3F00002000000000
  %85 = fadd fast float %83, -1.000000e+00
  %86 = fadd fast float %84, -1.000000e+00
  %87 = call float @dx.op.dot2.f32(i32 54, float %85, float %86, float %85, float %86)  ; Dot2(ax,ay,bx,by)
  %88 = fsub fast float 1.000000e+00, %87
  %89 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %88)  ; FMax(a,b)
  %90 = call float @dx.op.unary.f32(i32 24, float %89)  ; Sqrt(value)
  %91 = call float @dx.op.legacyF16ToF32(i32 131, i32 %55)  ; LegacyF16ToF32(value)
  %92 = lshr i32 %55, 16
  %93 = call float @dx.op.legacyF16ToF32(i32 131, i32 %92)  ; LegacyF16ToF32(value)
  %94 = call float @dx.op.unary.f32(i32 13, float %91)  ; Sin(value)
  %95 = call float @dx.op.unary.f32(i32 12, float %91)  ; Cos(value)
  %96 = fsub fast float -0.000000e+00, %94
  %97 = call float @dx.op.dot3.f32(i32 55, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float %85, float %86, float %90)  ; Dot3(ax,ay,az,bx,by,bz)
  %98 = call float @dx.op.unary.f32(i32 6, float %97)  ; FAbs(value)
  %99 = fcmp fast ogt float %98, 0x3FEFFFFDE0000000
  %100 = select i1 %99, float 0.000000e+00, float 1.000000e+00
  %101 = select i1 %99, float 1.000000e+00, float 0.000000e+00
  %102 = fmul fast float %100, %90
  %103 = fmul fast float %101, %86
  %104 = fsub fast float %102, %103
  %105 = fmul fast float %101, %85
  %106 = fmul fast float %85, %100
  %107 = fsub fast float -0.000000e+00, %106
  %108 = call float @dx.op.dot3.f32(i32 55, float %104, float %105, float %107, float %104, float %105, float %107)  ; Dot3(ax,ay,az,bx,by,bz)
  %109 = call float @dx.op.unary.f32(i32 25, float %108)  ; Rsqrt(value)
  %110 = fmul fast float %104, %109
  %111 = fmul fast float %105, %109
  %112 = fmul fast float %109, %107
  %113 = fmul fast float %112, %86
  %114 = fmul fast float %111, %90
  %115 = fsub fast float %113, %114
  %116 = fmul fast float %110, %90
  %117 = fmul fast float %112, %85
  %118 = fsub fast float %116, %117
  %119 = fmul fast float %111, %85
  %120 = fmul fast float %110, %86
  %121 = fsub fast float %119, %120
  %122 = call float @dx.op.dot3.f32(i32 55, float %115, float %118, float %121, float %115, float %118, float %121)  ; Dot3(ax,ay,az,bx,by,bz)
  %123 = call float @dx.op.unary.f32(i32 25, float %122)  ; Rsqrt(value)
  %124 = fmul fast float %115, %123
  %125 = fmul fast float %118, %123
  %126 = fmul fast float %121, %123
  %127 = fmul fast float %125, %90
  %128 = fmul fast float %126, %86
  %129 = fsub fast float %127, %128
  %130 = fmul fast float %126, %85
  %131 = fmul fast float %124, %90
  %132 = fsub fast float %130, %131
  %133 = fmul fast float %124, %86
  %134 = fmul fast float %125, %85
  %135 = fsub fast float %133, %134
  %136 = call float @dx.op.dot3.f32(i32 55, float %129, float %132, float %135, float %129, float %132, float %135)  ; Dot3(ax,ay,az,bx,by,bz)
  %137 = call float @dx.op.unary.f32(i32 25, float %136)  ; Rsqrt(value)
  %138 = fmul fast float %129, %137
  %139 = fmul fast float %132, %137
  %140 = fmul fast float %135, %137
  %141 = fmul fast float %138, %95
  %142 = call float @dx.op.tertiary.f32(i32 46, float %94, float %124, float %141)  ; FMad(a,b,c)
  %143 = fmul fast float %139, %95
  %144 = call float @dx.op.tertiary.f32(i32 46, float %94, float %125, float %143)  ; FMad(a,b,c)
  %145 = fmul fast float %140, %95
  %146 = call float @dx.op.tertiary.f32(i32 46, float %94, float %126, float %145)  ; FMad(a,b,c)
  %147 = fmul fast float %138, %96
  %148 = call float @dx.op.tertiary.f32(i32 46, float %95, float %124, float %147)  ; FMad(a,b,c)
  %149 = fmul fast float %139, %96
  %150 = call float @dx.op.tertiary.f32(i32 46, float %95, float %125, float %149)  ; FMad(a,b,c)
  %151 = fmul fast float %140, %96
  %152 = call float @dx.op.tertiary.f32(i32 46, float %95, float %126, float %151)  ; FMad(a,b,c)
  %153 = fmul fast float %142, %93
  %154 = fmul fast float %144, %93
  %155 = fmul fast float %146, %93
  %156 = fmul fast float %148, %93
  %157 = fmul fast float %150, %93
  %158 = fmul fast float %152, %93
  %159 = fmul fast float %85, %93
  %160 = fmul fast float %86, %93
  %161 = fmul fast float %93, %90
  %162 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %163 = extractvalue %dx.types.CBufRet.f32 %162, 0
  %164 = extractvalue %dx.types.CBufRet.f32 %162, 1
  %165 = extractvalue %dx.types.CBufRet.f32 %162, 2
  %166 = fmul fast float %163, %70
  %167 = fmul fast float %164, %71
  %168 = fmul fast float %165, %78
  %169 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %170 = extractvalue %dx.types.CBufRet.f32 %169, 0
  %171 = extractvalue %dx.types.CBufRet.f32 %169, 1
  %172 = extractvalue %dx.types.CBufRet.f32 %169, 2
  %173 = fadd fast float %166, %170
  %174 = fadd fast float %167, %171
  %175 = fadd fast float %168, %172
  %176 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3, %dx.types.Handle %6, float %173, float %174, float %175, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %177 = extractvalue %dx.types.ResRet.f32 %176, 0
  %178 = fptoui float %177 to i32
  %179 = fmul fast float %32, 2.000000e+00
  %180 = fmul fast float %33, 2.000000e+00
  %181 = fmul fast float %34, 2.000000e+00
  %182 = fadd fast float %179, -1.000000e+00
  %183 = fadd fast float %180, -1.000000e+00
  %184 = fadd fast float %181, -1.000000e+00
  %185 = fmul fast float %28, 2.000000e+00
  %186 = fmul fast float %29, 2.000000e+00
  %187 = fmul fast float %30, 2.000000e+00
  %188 = fadd fast float %185, -1.000000e+00
  %189 = fadd fast float %186, -1.000000e+00
  %190 = fadd fast float %187, -1.000000e+00
  %191 = fmul fast float %31, 2.000000e+00
  %192 = fadd fast float %191, -1.000000e+00
  %193 = fmul fast float %183, %190
  %194 = fmul fast float %184, %189
  %195 = fsub fast float %193, %194
  %196 = fmul fast float %184, %188
  %197 = fmul fast float %182, %190
  %198 = fsub fast float %196, %197
  %199 = fmul fast float %182, %189
  %200 = fmul fast float %183, %188
  %201 = fsub fast float %199, %200
  %202 = fmul fast float %195, %192
  %203 = fmul fast float %198, %192
  %204 = fmul fast float %201, %192
  %205 = call float @dx.op.dot3.f32(i32 55, float %202, float %203, float %204, float %202, float %203, float %204)  ; Dot3(ax,ay,az,bx,by,bz)
  %206 = call float @dx.op.unary.f32(i32 25, float %205)  ; Rsqrt(value)
  %207 = fmul fast float %206, %202
  %208 = fmul fast float %206, %203
  %209 = fmul fast float %206, %204
  %210 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %12, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %211 = extractvalue %dx.types.CBufRet.f32 %210, 0
  %212 = extractvalue %dx.types.CBufRet.f32 %210, 1
  %213 = extractvalue %dx.types.CBufRet.f32 %210, 2
  %214 = fmul fast float %211, %37
  %215 = fmul fast float %212, %38
  %216 = fmul fast float %213, %39
  %217 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %12, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %218 = extractvalue %dx.types.CBufRet.f32 %217, 0
  %219 = extractvalue %dx.types.CBufRet.f32 %217, 1
  %220 = extractvalue %dx.types.CBufRet.f32 %217, 2
  %221 = fadd fast float %214, %218
  %222 = fadd fast float %215, %219
  %223 = fadd fast float %216, %220
  %224 = fmul fast float %153, %182
  %225 = call float @dx.op.tertiary.f32(i32 46, float %183, float %156, float %224)  ; FMad(a,b,c)
  %226 = call float @dx.op.tertiary.f32(i32 46, float %184, float %159, float %225)  ; FMad(a,b,c)
  %227 = fmul fast float %154, %182
  %228 = call float @dx.op.tertiary.f32(i32 46, float %183, float %157, float %227)  ; FMad(a,b,c)
  %229 = call float @dx.op.tertiary.f32(i32 46, float %184, float %160, float %228)  ; FMad(a,b,c)
  %230 = fmul fast float %155, %182
  %231 = call float @dx.op.tertiary.f32(i32 46, float %183, float %158, float %230)  ; FMad(a,b,c)
  %232 = call float @dx.op.tertiary.f32(i32 46, float %184, float %161, float %231)  ; FMad(a,b,c)
  %233 = call float @dx.op.dot3.f32(i32 55, float %226, float %229, float %232, float %226, float %229, float %232)  ; Dot3(ax,ay,az,bx,by,bz)
  %234 = call float @dx.op.unary.f32(i32 25, float %233)  ; Rsqrt(value)
  %235 = fmul fast float %234, %226
  %236 = fmul fast float %234, %229
  %237 = fmul fast float %234, %232
  %238 = fmul fast float %207, %153
  %239 = call float @dx.op.tertiary.f32(i32 46, float %208, float %156, float %238)  ; FMad(a,b,c)
  %240 = call float @dx.op.tertiary.f32(i32 46, float %209, float %159, float %239)  ; FMad(a,b,c)
  %241 = fmul fast float %207, %154
  %242 = call float @dx.op.tertiary.f32(i32 46, float %208, float %157, float %241)  ; FMad(a,b,c)
  %243 = call float @dx.op.tertiary.f32(i32 46, float %209, float %160, float %242)  ; FMad(a,b,c)
  %244 = fmul fast float %207, %155
  %245 = call float @dx.op.tertiary.f32(i32 46, float %208, float %158, float %244)  ; FMad(a,b,c)
  %246 = call float @dx.op.tertiary.f32(i32 46, float %209, float %161, float %245)  ; FMad(a,b,c)
  %247 = call float @dx.op.dot3.f32(i32 55, float %240, float %243, float %246, float %240, float %243, float %246)  ; Dot3(ax,ay,az,bx,by,bz)
  %248 = call float @dx.op.unary.f32(i32 25, float %247)  ; Rsqrt(value)
  %249 = fmul fast float %248, %240
  %250 = fmul fast float %248, %243
  %251 = fmul fast float %248, %246
  %252 = fmul fast float %153, %188
  %253 = call float @dx.op.tertiary.f32(i32 46, float %189, float %156, float %252)  ; FMad(a,b,c)
  %254 = call float @dx.op.tertiary.f32(i32 46, float %190, float %159, float %253)  ; FMad(a,b,c)
  %255 = fmul fast float %154, %188
  %256 = call float @dx.op.tertiary.f32(i32 46, float %189, float %157, float %255)  ; FMad(a,b,c)
  %257 = call float @dx.op.tertiary.f32(i32 46, float %190, float %160, float %256)  ; FMad(a,b,c)
  %258 = fmul fast float %155, %188
  %259 = call float @dx.op.tertiary.f32(i32 46, float %189, float %158, float %258)  ; FMad(a,b,c)
  %260 = call float @dx.op.tertiary.f32(i32 46, float %190, float %161, float %259)  ; FMad(a,b,c)
  %261 = call float @dx.op.dot3.f32(i32 55, float %254, float %257, float %260, float %254, float %257, float %260)  ; Dot3(ax,ay,az,bx,by,bz)
  %262 = call float @dx.op.unary.f32(i32 25, float %261)  ; Rsqrt(value)
  %263 = fmul fast float %262, %254
  %264 = fmul fast float %262, %257
  %265 = fmul fast float %262, %260
  %266 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %223)  ; FMax(a,b)
  %267 = call float @dx.op.dot3.f32(i32 55, float %235, float %236, float %237, float %235, float %236, float %237)  ; Dot3(ax,ay,az,bx,by,bz)
  %268 = call float @dx.op.unary.f32(i32 25, float %267)  ; Rsqrt(value)
  %269 = fmul fast float %268, %235
  %270 = fmul fast float %268, %236
  %271 = fmul fast float %268, %237
  %272 = call float @dx.op.dot3.f32(i32 55, float %263, float %264, float %265, float %263, float %264, float %265)  ; Dot3(ax,ay,az,bx,by,bz)
  %273 = call float @dx.op.unary.f32(i32 25, float %272)  ; Rsqrt(value)
  %274 = fmul fast float %273, %263
  %275 = fmul fast float %273, %264
  %276 = fmul fast float %273, %265
  %277 = call float @dx.op.dot3.f32(i32 55, float %249, float %250, float %251, float %249, float %250, float %251)  ; Dot3(ax,ay,az,bx,by,bz)
  %278 = call float @dx.op.unary.f32(i32 25, float %277)  ; Rsqrt(value)
  %279 = fmul fast float %278, %249
  %280 = fmul fast float %278, %250
  %281 = fmul fast float %278, %251
  %282 = fmul fast float %221, %153
  %283 = call float @dx.op.tertiary.f32(i32 46, float %222, float %156, float %282)  ; FMad(a,b,c)
  %284 = call float @dx.op.tertiary.f32(i32 46, float %223, float %159, float %283)  ; FMad(a,b,c)
  %285 = fmul fast float %221, %154
  %286 = call float @dx.op.tertiary.f32(i32 46, float %222, float %157, float %285)  ; FMad(a,b,c)
  %287 = call float @dx.op.tertiary.f32(i32 46, float %223, float %160, float %286)  ; FMad(a,b,c)
  %288 = fmul fast float %221, %155
  %289 = call float @dx.op.tertiary.f32(i32 46, float %222, float %158, float %288)  ; FMad(a,b,c)
  %290 = call float @dx.op.tertiary.f32(i32 46, float %223, float %161, float %289)  ; FMad(a,b,c)
  %291 = fptoui float %24 to i32
  %292 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %9, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %293 = extractvalue %dx.types.CBufRet.f32 %292, 0
  %294 = fcmp fast une float %293, 0.000000e+00
  %295 = icmp ne i32 %291, 255
  %296 = and i1 %295, %294
  %297 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %15, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %298 = extractvalue %dx.types.CBufRet.f32 %297, 1
  %299 = fcmp fast ogt float %298, 5.000000e-01
  %300 = and i1 %296, %299
  br i1 %300, label %301, label %1364

; <label>:301                                     ; preds = %0
  %302 = extractvalue %dx.types.CBufRet.f32 %292, 2
  %303 = uitofp i32 %291 to float
  %304 = fmul fast float %303, 2.000000e+00
  %305 = fadd fast float %304, 1.000000e+00
  %306 = fdiv fast float %305, %302
  %307 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %9, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %308 = extractvalue %dx.types.CBufRet.i32 %307, 0
  %309 = add i32 %308, 0
  %310 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 %309, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %311 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %310, %dx.types.Handle %6, float %306, float 2.500000e-01, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %312 = extractvalue %dx.types.ResRet.f32 %311, 1
  %313 = extractvalue %dx.types.ResRet.f32 %311, 2
  %314 = extractvalue %dx.types.ResRet.f32 %311, 3
  %315 = fmul fast float %312, 2.550000e+02
  %316 = fmul fast float %313, 2.550000e+02
  %317 = fmul fast float %314, 2.550000e+02
  %318 = fadd fast float %315, 5.000000e-01
  %319 = fadd fast float %316, 5.000000e-01
  %320 = fadd fast float %317, 5.000000e-01
  %321 = fptoui float %318 to i32
  %322 = fptoui float %319 to i32
  %323 = fptoui float %320 to i32
  %324 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %9, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %325 = extractvalue %dx.types.CBufRet.i32 %324, 0
  %326 = add i32 %325, 0
  %327 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 %326, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %328 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %327, %dx.types.Handle %6, float %306, float 2.500000e-01, float undef, float undef, i32 0, i32 0, i32 1)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %329 = extractvalue %dx.types.ResRet.f32 %328, 0
  %330 = extractvalue %dx.types.ResRet.f32 %328, 1
  %331 = extractvalue %dx.types.ResRet.f32 %328, 2
  %332 = extractvalue %dx.types.ResRet.f32 %328, 3
  %333 = icmp eq i32 %321, 255
  br i1 %333, label %525, label %334, !dx.controlflow.hints !65

; <label>:334                                     ; preds = %301
  %335 = shl i32 %321, 1
  %336 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %9, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %337 = extractvalue %dx.types.CBufRet.f32 %336, 1
  %338 = fptoui float %337 to i32
  %339 = udiv i32 %335, %338
  %340 = mul i32 %338, %339
  %341 = sub i32 %335, %340
  %342 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %9, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %343 = extractvalue %dx.types.CBufRet.i32 %342, 0
  %344 = add i32 %343, 0
  %345 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 %344, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %346 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %345, i32 0, i32 %341, i32 %339, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %347 = extractvalue %dx.types.ResRet.f32 %346, 0
  %348 = extractvalue %dx.types.ResRet.f32 %346, 1
  %349 = extractvalue %dx.types.ResRet.f32 %346, 2
  %350 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %9, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %351 = extractvalue %dx.types.CBufRet.i32 %350, 0
  %352 = add nsw i32 %341, 1
  %353 = add i32 %351, 0
  %354 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 %353, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %355 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %354, i32 0, i32 %352, i32 %339, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %356 = extractvalue %dx.types.ResRet.f32 %355, 0
  %357 = extractvalue %dx.types.ResRet.f32 %355, 1
  %358 = extractvalue %dx.types.ResRet.f32 %355, 2
  %359 = fmul fast float %347, %153
  %360 = call float @dx.op.tertiary.f32(i32 46, float %348, float %156, float %359)  ; FMad(a,b,c)
  %361 = call float @dx.op.tertiary.f32(i32 46, float %349, float %159, float %360)  ; FMad(a,b,c)
  %362 = fmul fast float %347, %154
  %363 = call float @dx.op.tertiary.f32(i32 46, float %348, float %157, float %362)  ; FMad(a,b,c)
  %364 = call float @dx.op.tertiary.f32(i32 46, float %349, float %160, float %363)  ; FMad(a,b,c)
  %365 = fmul fast float %347, %155
  %366 = call float @dx.op.tertiary.f32(i32 46, float %348, float %158, float %365)  ; FMad(a,b,c)
  %367 = call float @dx.op.tertiary.f32(i32 46, float %349, float %161, float %366)  ; FMad(a,b,c)
  %368 = fmul fast float %356, %153
  %369 = call float @dx.op.tertiary.f32(i32 46, float %357, float %156, float %368)  ; FMad(a,b,c)
  %370 = call float @dx.op.tertiary.f32(i32 46, float %358, float %159, float %369)  ; FMad(a,b,c)
  %371 = fmul fast float %356, %154
  %372 = call float @dx.op.tertiary.f32(i32 46, float %357, float %157, float %371)  ; FMad(a,b,c)
  %373 = call float @dx.op.tertiary.f32(i32 46, float %358, float %160, float %372)  ; FMad(a,b,c)
  %374 = fmul fast float %356, %155
  %375 = call float @dx.op.tertiary.f32(i32 46, float %357, float %158, float %374)  ; FMad(a,b,c)
  %376 = call float @dx.op.tertiary.f32(i32 46, float %358, float %161, float %375)  ; FMad(a,b,c)
  %377 = fadd fast float %370, %361
  %378 = fadd fast float %373, %364
  %379 = fadd fast float %376, %367
  %380 = fmul fast float %377, 5.000000e-01
  %381 = fmul fast float %378, 5.000000e-01
  %382 = fmul fast float %379, 5.000000e-01
  %383 = fadd fast float %380, %70
  %384 = fadd fast float %381, %71
  %385 = fadd fast float %382, %78
  %386 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %13, i32 53)  ; CBufferLoadLegacy(handle,regIndex)
  %387 = extractvalue %dx.types.CBufRet.f32 %386, 0
  %388 = extractvalue %dx.types.CBufRet.f32 %386, 1
  %389 = extractvalue %dx.types.CBufRet.f32 %386, 2
  %390 = fsub fast float %383, %387
  %391 = fsub fast float %384, %388
  %392 = fsub fast float %385, %389
  %393 = fmul fast float %390, 3.125000e-02
  %394 = fadd fast float %393, 5.000000e-01
  %395 = fmul fast float %391, 3.125000e-02
  %396 = fadd fast float %395, 5.000000e-01
  %397 = fmul fast float %392, 3.125000e-02
  %398 = fadd fast float %397, 5.000000e-01
  %399 = fcmp fast olt float %394, 0.000000e+00
  %400 = fcmp fast olt float %396, 0.000000e+00
  %401 = fcmp fast olt float %398, 0.000000e+00
  %402 = fcmp fast ogt float %394, 1.000000e+00
  %403 = fcmp fast ogt float %396, 1.000000e+00
  %404 = fcmp fast ogt float %398, 1.000000e+00
  %405 = or i1 %399, %402
  %406 = or i1 %400, %403
  %407 = or i1 %401, %404
  %408 = or i1 %405, %406
  %409 = or i1 %408, %407
  br i1 %409, label %432, label %410

; <label>:410                                     ; preds = %334
  %411 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %4, %dx.types.Handle %5, float %394, float %396, float %398, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %412 = extractvalue %dx.types.ResRet.f32 %411, 0
  %413 = extractvalue %dx.types.ResRet.f32 %411, 1
  %414 = extractvalue %dx.types.ResRet.f32 %411, 2
  %415 = call float @dx.op.unary.f32(i32 6, float %412)  ; FAbs(value)
  %416 = call float @dx.op.unary.f32(i32 6, float %413)  ; FAbs(value)
  %417 = call float @dx.op.unary.f32(i32 6, float %414)  ; FAbs(value)
  %418 = fcmp fast olt float %415, 0x3F1A36E2E0000000
  %419 = fcmp fast olt float %416, 0x3F1A36E2E0000000
  %420 = fcmp fast olt float %417, 0x3F1A36E2E0000000
  %421 = and i1 %418, %419
  %422 = and i1 %421, %420
  br i1 %422, label %432, label %423

; <label>:423                                     ; preds = %410
  %424 = extractvalue %dx.types.ResRet.f32 %411, 3
  %425 = extractvalue %dx.types.CBufRet.f32 %386, 3
  %426 = fdiv fast float %424, %425
  %427 = fmul fast float %414, 5.000000e-01
  %428 = call float @dx.op.dot3.f32(i32 55, float %412, float %413, float %427, float %412, float %413, float %427)  ; Dot3(ax,ay,az,bx,by,bz)
  %429 = call float @dx.op.unary.f32(i32 25, float %428)  ; Rsqrt(value)
  %430 = fmul fast float %429, %412
  %431 = fmul fast float %429, %413
  br label %432

; <label>:432                                     ; preds = %423, %410, %334
  %433 = phi float [ %430, %423 ], [ 0.000000e+00, %334 ], [ 0.000000e+00, %410 ]
  %434 = phi float [ %431, %423 ], [ 0.000000e+00, %334 ], [ 0.000000e+00, %410 ]
  %435 = phi float [ %426, %423 ], [ 0.000000e+00, %334 ], [ 0.000000e+00, %410 ]
  %436 = fcmp fast olt float %435, 0x3F1A36E2E0000000
  br i1 %436, label %525, label %437

; <label>:437                                     ; preds = %432
  %438 = fsub fast float %370, %361
  %439 = fsub fast float %373, %364
  %440 = fsub fast float %376, %367
  %441 = fmul fast float %438, %438
  %442 = fmul fast float %439, %439
  %443 = fadd fast float %442, %441
  %444 = fmul fast float %440, %440
  %445 = fadd fast float %443, %444
  %446 = call float @dx.op.unary.f32(i32 24, float %445)  ; Sqrt(value)
  %447 = fmul fast float %435, 0x3FF921FB60000000
  %448 = call float @dx.op.binary.f32(i32 36, float 0x3FF6571860000000, float %447)  ; FMin(a,b)
  %449 = fsub fast float %284, %361
  %450 = fsub fast float %287, %364
  %451 = fsub fast float %290, %367
  %452 = fmul fast float %449, %449
  %453 = fmul fast float %450, %450
  %454 = fadd fast float %453, %452
  %455 = fmul fast float %451, %451
  %456 = fadd fast float %454, %455
  %457 = call float @dx.op.unary.f32(i32 24, float %456)  ; Sqrt(value)
  %458 = fdiv fast float %457, %446
  %459 = call float @dx.op.binary.f32(i32 36, float 1.000000e+00, float %458)  ; FMin(a,b)
  %460 = fmul fast float %459, 0x3FFBFA4400000000
  %461 = fadd fast float %460, 0xC006F10CC0000000
  %462 = fmul fast float %461, %459
  %463 = fadd fast float %462, 0xBFD6F1AA00000000
  %464 = fmul fast float %463, %459
  %465 = fadd fast float %464, 0x4003D22000000000
  %466 = fsub fast float 1.000000e+00, %329
  %467 = call float @dx.op.unary.f32(i32 7, float %466)  ; Saturate(value)
  %468 = fmul fast float %459, %448
  %469 = fmul fast float %468, %467
  %470 = fmul fast float %469, %465
  %471 = fsub fast float -0.000000e+00, %433
  %472 = call float @dx.op.dot3.f32(i32 55, float %434, float %471, float 5.000000e-01, float %434, float %471, float 5.000000e-01)  ; Dot3(ax,ay,az,bx,by,bz)
  %473 = call float @dx.op.unary.f32(i32 25, float %472)  ; Rsqrt(value)
  %474 = fmul fast float %473, %434
  %475 = fmul fast float %473, %471
  %476 = fmul fast float %473, 5.000000e-01
  %477 = call float @dx.op.unary.f32(i32 13, float %470)  ; Sin(value)
  %478 = call float @dx.op.unary.f32(i32 12, float %470)  ; Cos(value)
  %479 = fsub fast float 1.000000e+00, %478
  %480 = fmul fast float %474, %474
  %481 = fmul fast float %480, %479
  %482 = fadd fast float %481, %478
  %483 = fmul fast float %475, %474
  %484 = fmul fast float %483, %479
  %485 = fmul fast float %477, %476
  %486 = fsub fast float %484, %485
  %487 = fmul fast float %476, %474
  %488 = fmul fast float %487, %479
  %489 = fmul fast float %477, %475
  %490 = fadd fast float %488, %489
  %491 = fadd fast float %484, %485
  %492 = fmul fast float %475, %475
  %493 = fmul fast float %492, %479
  %494 = fadd fast float %493, %478
  %495 = fmul fast float %476, %475
  %496 = fmul fast float %495, %479
  %497 = fmul fast float %477, %474
  %498 = fsub fast float %496, %497
  %499 = fsub fast float %488, %489
  %500 = fadd fast float %496, %497
  %501 = fmul fast float %476, %476
  %502 = fmul fast float %501, %479
  %503 = fadd fast float %502, %478
  %504 = fsub fast float -0.000000e+00, %361
  %505 = fsub fast float -0.000000e+00, %364
  %506 = fsub fast float -0.000000e+00, %367
  %507 = call float @dx.op.dot3.f32(i32 55, float %504, float %505, float %506, float %482, float %491, float %499)  ; Dot3(ax,ay,az,bx,by,bz)
  %508 = fadd fast float %507, %361
  %509 = call float @dx.op.dot3.f32(i32 55, float %504, float %505, float %506, float %486, float %494, float %500)  ; Dot3(ax,ay,az,bx,by,bz)
  %510 = fadd fast float %509, %364
  %511 = call float @dx.op.dot3.f32(i32 55, float %504, float %505, float %506, float %490, float %498, float %503)  ; Dot3(ax,ay,az,bx,by,bz)
  %512 = fadd fast float %511, %367
  %513 = fmul fast float %482, %284
  %514 = call float @dx.op.tertiary.f32(i32 46, float %491, float %287, float %513)  ; FMad(a,b,c)
  %515 = call float @dx.op.tertiary.f32(i32 46, float %499, float %290, float %514)  ; FMad(a,b,c)
  %516 = fadd fast float %515, %508
  %517 = fmul fast float %486, %284
  %518 = call float @dx.op.tertiary.f32(i32 46, float %494, float %287, float %517)  ; FMad(a,b,c)
  %519 = call float @dx.op.tertiary.f32(i32 46, float %500, float %290, float %518)  ; FMad(a,b,c)
  %520 = fadd fast float %519, %510
  %521 = fmul fast float %490, %284
  %522 = call float @dx.op.tertiary.f32(i32 46, float %498, float %287, float %521)  ; FMad(a,b,c)
  %523 = call float @dx.op.tertiary.f32(i32 46, float %503, float %290, float %522)  ; FMad(a,b,c)
  %524 = fadd fast float %523, %512
  br label %525

; <label>:525                                     ; preds = %437, %432, %301
  %526 = phi float [ %284, %301 ], [ %284, %432 ], [ %516, %437 ]
  %527 = phi float [ %287, %301 ], [ %287, %432 ], [ %520, %437 ]
  %528 = phi float [ %290, %301 ], [ %290, %432 ], [ %524, %437 ]
  %529 = phi float [ 1.000000e+00, %301 ], [ 1.000000e+00, %432 ], [ %482, %437 ]
  %530 = phi float [ 0.000000e+00, %301 ], [ 0.000000e+00, %432 ], [ %486, %437 ]
  %531 = phi float [ 0.000000e+00, %301 ], [ 0.000000e+00, %432 ], [ %490, %437 ]
  %532 = phi float [ 0.000000e+00, %301 ], [ 0.000000e+00, %432 ], [ %491, %437 ]
  %533 = phi float [ 1.000000e+00, %301 ], [ 1.000000e+00, %432 ], [ %494, %437 ]
  %534 = phi float [ 0.000000e+00, %301 ], [ 0.000000e+00, %432 ], [ %498, %437 ]
  %535 = phi float [ 0.000000e+00, %301 ], [ 0.000000e+00, %432 ], [ %499, %437 ]
  %536 = phi float [ 0.000000e+00, %301 ], [ 0.000000e+00, %432 ], [ %500, %437 ]
  %537 = phi float [ 1.000000e+00, %301 ], [ 1.000000e+00, %432 ], [ %503, %437 ]
  %538 = phi float [ 0.000000e+00, %301 ], [ 0.000000e+00, %432 ], [ %508, %437 ]
  %539 = phi float [ 0.000000e+00, %301 ], [ 0.000000e+00, %432 ], [ %510, %437 ]
  %540 = phi float [ 0.000000e+00, %301 ], [ 0.000000e+00, %432 ], [ %512, %437 ]
  %541 = icmp eq i32 %322, 255
  br i1 %541, label %796, label %542, !dx.controlflow.hints !66

; <label>:542                                     ; preds = %525
  %543 = shl i32 %322, 1
  %544 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %9, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %545 = extractvalue %dx.types.CBufRet.f32 %544, 1
  %546 = fptoui float %545 to i32
  %547 = udiv i32 %543, %546
  %548 = mul i32 %546, %547
  %549 = sub i32 %543, %548
  %550 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %9, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %551 = extractvalue %dx.types.CBufRet.i32 %550, 0
  %552 = add i32 %551, 0
  %553 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 %552, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %554 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %553, i32 0, i32 %549, i32 %547, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %555 = extractvalue %dx.types.ResRet.f32 %554, 0
  %556 = extractvalue %dx.types.ResRet.f32 %554, 1
  %557 = extractvalue %dx.types.ResRet.f32 %554, 2
  %558 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %9, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %559 = extractvalue %dx.types.CBufRet.i32 %558, 0
  %560 = add nsw i32 %549, 1
  %561 = add i32 %559, 0
  %562 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 %561, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %563 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %562, i32 0, i32 %560, i32 %547, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %564 = extractvalue %dx.types.ResRet.f32 %563, 0
  %565 = extractvalue %dx.types.ResRet.f32 %563, 1
  %566 = extractvalue %dx.types.ResRet.f32 %563, 2
  %567 = fmul fast float %555, %153
  %568 = call float @dx.op.tertiary.f32(i32 46, float %556, float %156, float %567)  ; FMad(a,b,c)
  %569 = call float @dx.op.tertiary.f32(i32 46, float %557, float %159, float %568)  ; FMad(a,b,c)
  %570 = fmul fast float %555, %154
  %571 = call float @dx.op.tertiary.f32(i32 46, float %556, float %157, float %570)  ; FMad(a,b,c)
  %572 = call float @dx.op.tertiary.f32(i32 46, float %557, float %160, float %571)  ; FMad(a,b,c)
  %573 = fmul fast float %555, %155
  %574 = call float @dx.op.tertiary.f32(i32 46, float %556, float %158, float %573)  ; FMad(a,b,c)
  %575 = call float @dx.op.tertiary.f32(i32 46, float %557, float %161, float %574)  ; FMad(a,b,c)
  %576 = fmul fast float %564, %153
  %577 = call float @dx.op.tertiary.f32(i32 46, float %565, float %156, float %576)  ; FMad(a,b,c)
  %578 = call float @dx.op.tertiary.f32(i32 46, float %566, float %159, float %577)  ; FMad(a,b,c)
  %579 = fmul fast float %564, %154
  %580 = call float @dx.op.tertiary.f32(i32 46, float %565, float %157, float %579)  ; FMad(a,b,c)
  %581 = call float @dx.op.tertiary.f32(i32 46, float %566, float %160, float %580)  ; FMad(a,b,c)
  %582 = fmul fast float %564, %155
  %583 = call float @dx.op.tertiary.f32(i32 46, float %565, float %158, float %582)  ; FMad(a,b,c)
  %584 = call float @dx.op.tertiary.f32(i32 46, float %566, float %161, float %583)  ; FMad(a,b,c)
  %585 = fmul fast float %569, %529
  %586 = call float @dx.op.tertiary.f32(i32 46, float %532, float %572, float %585)  ; FMad(a,b,c)
  %587 = call float @dx.op.tertiary.f32(i32 46, float %535, float %575, float %586)  ; FMad(a,b,c)
  %588 = fadd fast float %587, %538
  %589 = fmul fast float %569, %530
  %590 = call float @dx.op.tertiary.f32(i32 46, float %533, float %572, float %589)  ; FMad(a,b,c)
  %591 = call float @dx.op.tertiary.f32(i32 46, float %536, float %575, float %590)  ; FMad(a,b,c)
  %592 = fadd fast float %591, %539
  %593 = fmul fast float %569, %531
  %594 = call float @dx.op.tertiary.f32(i32 46, float %534, float %572, float %593)  ; FMad(a,b,c)
  %595 = call float @dx.op.tertiary.f32(i32 46, float %537, float %575, float %594)  ; FMad(a,b,c)
  %596 = fadd fast float %595, %540
  %597 = fmul fast float %578, %529
  %598 = call float @dx.op.tertiary.f32(i32 46, float %532, float %581, float %597)  ; FMad(a,b,c)
  %599 = call float @dx.op.tertiary.f32(i32 46, float %535, float %584, float %598)  ; FMad(a,b,c)
  %600 = fmul fast float %578, %530
  %601 = call float @dx.op.tertiary.f32(i32 46, float %533, float %581, float %600)  ; FMad(a,b,c)
  %602 = call float @dx.op.tertiary.f32(i32 46, float %536, float %584, float %601)  ; FMad(a,b,c)
  %603 = fmul fast float %578, %531
  %604 = call float @dx.op.tertiary.f32(i32 46, float %534, float %581, float %603)  ; FMad(a,b,c)
  %605 = call float @dx.op.tertiary.f32(i32 46, float %537, float %584, float %604)  ; FMad(a,b,c)
  %606 = fadd fast float %588, %538
  %607 = fadd fast float %606, %599
  %608 = fadd fast float %592, %539
  %609 = fadd fast float %608, %602
  %610 = fadd fast float %596, %540
  %611 = fadd fast float %610, %605
  %612 = fmul fast float %607, 5.000000e-01
  %613 = fmul fast float %609, 5.000000e-01
  %614 = fmul fast float %611, 5.000000e-01
  %615 = fadd fast float %612, %70
  %616 = fadd fast float %613, %71
  %617 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %13, i32 53)  ; CBufferLoadLegacy(handle,regIndex)
  %618 = extractvalue %dx.types.CBufRet.f32 %617, 0
  %619 = extractvalue %dx.types.CBufRet.f32 %617, 1
  %620 = extractvalue %dx.types.CBufRet.f32 %617, 2
  %621 = fsub fast float %615, %618
  %622 = fsub fast float %616, %619
  %623 = fsub fast float %78, %620
  %624 = fadd fast float %623, %614
  %625 = fmul fast float %621, 3.125000e-02
  %626 = fadd fast float %625, 5.000000e-01
  %627 = fmul fast float %622, 3.125000e-02
  %628 = fadd fast float %627, 5.000000e-01
  %629 = fmul fast float %624, 3.125000e-02
  %630 = fadd fast float %629, 5.000000e-01
  %631 = fcmp fast olt float %626, 0.000000e+00
  %632 = fcmp fast olt float %628, 0.000000e+00
  %633 = fcmp fast olt float %630, 0.000000e+00
  %634 = fcmp fast ogt float %626, 1.000000e+00
  %635 = fcmp fast ogt float %628, 1.000000e+00
  %636 = fcmp fast ogt float %630, 1.000000e+00
  %637 = or i1 %631, %634
  %638 = or i1 %632, %635
  %639 = or i1 %633, %636
  %640 = or i1 %637, %638
  %641 = or i1 %640, %639
  br i1 %641, label %664, label %642

; <label>:642                                     ; preds = %542
  %643 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %4, %dx.types.Handle %5, float %626, float %628, float %630, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %644 = extractvalue %dx.types.ResRet.f32 %643, 0
  %645 = extractvalue %dx.types.ResRet.f32 %643, 1
  %646 = extractvalue %dx.types.ResRet.f32 %643, 2
  %647 = call float @dx.op.unary.f32(i32 6, float %644)  ; FAbs(value)
  %648 = call float @dx.op.unary.f32(i32 6, float %645)  ; FAbs(value)
  %649 = call float @dx.op.unary.f32(i32 6, float %646)  ; FAbs(value)
  %650 = fcmp fast olt float %647, 0x3F1A36E2E0000000
  %651 = fcmp fast olt float %648, 0x3F1A36E2E0000000
  %652 = fcmp fast olt float %649, 0x3F1A36E2E0000000
  %653 = and i1 %650, %651
  %654 = and i1 %653, %652
  br i1 %654, label %664, label %655

; <label>:655                                     ; preds = %642
  %656 = extractvalue %dx.types.ResRet.f32 %643, 3
  %657 = extractvalue %dx.types.CBufRet.f32 %617, 3
  %658 = fdiv fast float %656, %657
  %659 = fmul fast float %646, 5.000000e-01
  %660 = call float @dx.op.dot3.f32(i32 55, float %644, float %645, float %659, float %644, float %645, float %659)  ; Dot3(ax,ay,az,bx,by,bz)
  %661 = call float @dx.op.unary.f32(i32 25, float %660)  ; Rsqrt(value)
  %662 = fmul fast float %661, %644
  %663 = fmul fast float %661, %645
  br label %664

; <label>:664                                     ; preds = %655, %642, %542
  %665 = phi float [ %662, %655 ], [ 0.000000e+00, %542 ], [ 0.000000e+00, %642 ]
  %666 = phi float [ %663, %655 ], [ 0.000000e+00, %542 ], [ 0.000000e+00, %642 ]
  %667 = phi float [ %658, %655 ], [ 0.000000e+00, %542 ], [ 0.000000e+00, %642 ]
  %668 = fcmp fast olt float %667, 0x3F1A36E2E0000000
  br i1 %668, label %796, label %669

; <label>:669                                     ; preds = %664
  %670 = fsub fast float %599, %587
  %671 = fsub fast float %602, %591
  %672 = fsub fast float %605, %595
  %673 = fmul fast float %670, %670
  %674 = fmul fast float %671, %671
  %675 = fadd fast float %674, %673
  %676 = fmul fast float %672, %672
  %677 = fadd fast float %675, %676
  %678 = call float @dx.op.unary.f32(i32 24, float %677)  ; Sqrt(value)
  %679 = fmul fast float %667, 0x3FF921FB60000000
  %680 = call float @dx.op.binary.f32(i32 36, float 0x3FF6571860000000, float %679)  ; FMin(a,b)
  %681 = fsub fast float %526, %588
  %682 = fsub fast float %527, %592
  %683 = fsub fast float %528, %596
  %684 = fmul fast float %681, %681
  %685 = fmul fast float %682, %682
  %686 = fadd fast float %685, %684
  %687 = fmul fast float %683, %683
  %688 = fadd fast float %686, %687
  %689 = call float @dx.op.unary.f32(i32 24, float %688)  ; Sqrt(value)
  %690 = fdiv fast float %689, %678
  %691 = call float @dx.op.binary.f32(i32 36, float 1.000000e+00, float %690)  ; FMin(a,b)
  %692 = fmul fast float %691, 0x3FFBFA4400000000
  %693 = fadd fast float %692, 0xC006F10CC0000000
  %694 = fmul fast float %693, %691
  %695 = fadd fast float %694, 0xBFD6F1AA00000000
  %696 = fmul fast float %695, %691
  %697 = fadd fast float %696, 0x4003D22000000000
  %698 = fsub fast float 1.000000e+00, %330
  %699 = call float @dx.op.unary.f32(i32 7, float %698)  ; Saturate(value)
  %700 = fmul fast float %691, %680
  %701 = fmul fast float %700, %699
  %702 = fmul fast float %701, %697
  %703 = fsub fast float -0.000000e+00, %665
  %704 = call float @dx.op.dot3.f32(i32 55, float %666, float %703, float 5.000000e-01, float %666, float %703, float 5.000000e-01)  ; Dot3(ax,ay,az,bx,by,bz)
  %705 = call float @dx.op.unary.f32(i32 25, float %704)  ; Rsqrt(value)
  %706 = fmul fast float %705, %666
  %707 = fmul fast float %705, %703
  %708 = fmul fast float %705, 5.000000e-01
  %709 = call float @dx.op.unary.f32(i32 13, float %702)  ; Sin(value)
  %710 = call float @dx.op.unary.f32(i32 12, float %702)  ; Cos(value)
  %711 = fsub fast float 1.000000e+00, %710
  %712 = fmul fast float %706, %706
  %713 = fmul fast float %712, %711
  %714 = fadd fast float %713, %710
  %715 = fmul fast float %707, %706
  %716 = fmul fast float %715, %711
  %717 = fmul fast float %709, %708
  %718 = fsub fast float %716, %717
  %719 = fmul fast float %708, %706
  %720 = fmul fast float %719, %711
  %721 = fmul fast float %709, %707
  %722 = fadd fast float %720, %721
  %723 = fadd fast float %716, %717
  %724 = fmul fast float %707, %707
  %725 = fmul fast float %724, %711
  %726 = fadd fast float %725, %710
  %727 = fmul fast float %708, %707
  %728 = fmul fast float %727, %711
  %729 = fmul fast float %709, %706
  %730 = fsub fast float %728, %729
  %731 = fsub fast float %720, %721
  %732 = fadd fast float %728, %729
  %733 = fmul fast float %708, %708
  %734 = fmul fast float %733, %711
  %735 = fadd fast float %734, %710
  %736 = fsub fast float -0.000000e+00, %588
  %737 = fsub fast float -0.000000e+00, %592
  %738 = fsub fast float -0.000000e+00, %596
  %739 = call float @dx.op.dot3.f32(i32 55, float %736, float %737, float %738, float %714, float %723, float %731)  ; Dot3(ax,ay,az,bx,by,bz)
  %740 = fadd fast float %739, %588
  %741 = call float @dx.op.dot3.f32(i32 55, float %736, float %737, float %738, float %718, float %726, float %732)  ; Dot3(ax,ay,az,bx,by,bz)
  %742 = fadd fast float %741, %592
  %743 = call float @dx.op.dot3.f32(i32 55, float %736, float %737, float %738, float %722, float %730, float %735)  ; Dot3(ax,ay,az,bx,by,bz)
  %744 = fadd fast float %743, %596
  %745 = fmul fast float %714, %526
  %746 = call float @dx.op.tertiary.f32(i32 46, float %723, float %527, float %745)  ; FMad(a,b,c)
  %747 = call float @dx.op.tertiary.f32(i32 46, float %731, float %528, float %746)  ; FMad(a,b,c)
  %748 = fadd fast float %747, %740
  %749 = fmul fast float %718, %526
  %750 = call float @dx.op.tertiary.f32(i32 46, float %726, float %527, float %749)  ; FMad(a,b,c)
  %751 = call float @dx.op.tertiary.f32(i32 46, float %732, float %528, float %750)  ; FMad(a,b,c)
  %752 = fadd fast float %751, %742
  %753 = fmul fast float %722, %526
  %754 = call float @dx.op.tertiary.f32(i32 46, float %730, float %527, float %753)  ; FMad(a,b,c)
  %755 = call float @dx.op.tertiary.f32(i32 46, float %735, float %528, float %754)  ; FMad(a,b,c)
  %756 = fadd fast float %755, %744
  %757 = fmul fast float %714, %529
  %758 = call float @dx.op.tertiary.f32(i32 46, float %723, float %530, float %757)  ; FMad(a,b,c)
  %759 = call float @dx.op.tertiary.f32(i32 46, float %731, float %531, float %758)  ; FMad(a,b,c)
  %760 = fmul fast float %714, %532
  %761 = call float @dx.op.tertiary.f32(i32 46, float %723, float %533, float %760)  ; FMad(a,b,c)
  %762 = call float @dx.op.tertiary.f32(i32 46, float %731, float %534, float %761)  ; FMad(a,b,c)
  %763 = fmul fast float %714, %535
  %764 = call float @dx.op.tertiary.f32(i32 46, float %723, float %536, float %763)  ; FMad(a,b,c)
  %765 = call float @dx.op.tertiary.f32(i32 46, float %731, float %537, float %764)  ; FMad(a,b,c)
  %766 = fmul fast float %714, %538
  %767 = call float @dx.op.tertiary.f32(i32 46, float %723, float %539, float %766)  ; FMad(a,b,c)
  %768 = call float @dx.op.tertiary.f32(i32 46, float %731, float %540, float %767)  ; FMad(a,b,c)
  %769 = fadd fast float %768, %740
  %770 = fmul fast float %718, %529
  %771 = call float @dx.op.tertiary.f32(i32 46, float %726, float %530, float %770)  ; FMad(a,b,c)
  %772 = call float @dx.op.tertiary.f32(i32 46, float %732, float %531, float %771)  ; FMad(a,b,c)
  %773 = fmul fast float %718, %532
  %774 = call float @dx.op.tertiary.f32(i32 46, float %726, float %533, float %773)  ; FMad(a,b,c)
  %775 = call float @dx.op.tertiary.f32(i32 46, float %732, float %534, float %774)  ; FMad(a,b,c)
  %776 = fmul fast float %718, %535
  %777 = call float @dx.op.tertiary.f32(i32 46, float %726, float %536, float %776)  ; FMad(a,b,c)
  %778 = call float @dx.op.tertiary.f32(i32 46, float %732, float %537, float %777)  ; FMad(a,b,c)
  %779 = fmul fast float %718, %538
  %780 = call float @dx.op.tertiary.f32(i32 46, float %726, float %539, float %779)  ; FMad(a,b,c)
  %781 = call float @dx.op.tertiary.f32(i32 46, float %732, float %540, float %780)  ; FMad(a,b,c)
  %782 = fadd fast float %781, %742
  %783 = fmul fast float %722, %529
  %784 = call float @dx.op.tertiary.f32(i32 46, float %730, float %530, float %783)  ; FMad(a,b,c)
  %785 = call float @dx.op.tertiary.f32(i32 46, float %735, float %531, float %784)  ; FMad(a,b,c)
  %786 = fmul fast float %722, %532
  %787 = call float @dx.op.tertiary.f32(i32 46, float %730, float %533, float %786)  ; FMad(a,b,c)
  %788 = call float @dx.op.tertiary.f32(i32 46, float %735, float %534, float %787)  ; FMad(a,b,c)
  %789 = fmul fast float %722, %535
  %790 = call float @dx.op.tertiary.f32(i32 46, float %730, float %536, float %789)  ; FMad(a,b,c)
  %791 = call float @dx.op.tertiary.f32(i32 46, float %735, float %537, float %790)  ; FMad(a,b,c)
  %792 = fmul fast float %722, %538
  %793 = call float @dx.op.tertiary.f32(i32 46, float %730, float %539, float %792)  ; FMad(a,b,c)
  %794 = call float @dx.op.tertiary.f32(i32 46, float %735, float %540, float %793)  ; FMad(a,b,c)
  %795 = fadd fast float %794, %744
  br label %796

; <label>:796                                     ; preds = %669, %664, %525
  %797 = phi float [ %526, %525 ], [ %526, %664 ], [ %748, %669 ]
  %798 = phi float [ %527, %525 ], [ %527, %664 ], [ %752, %669 ]
  %799 = phi float [ %528, %525 ], [ %528, %664 ], [ %756, %669 ]
  %800 = phi float [ %529, %525 ], [ %529, %664 ], [ %759, %669 ]
  %801 = phi float [ %530, %525 ], [ %530, %664 ], [ %772, %669 ]
  %802 = phi float [ %531, %525 ], [ %531, %664 ], [ %785, %669 ]
  %803 = phi float [ %532, %525 ], [ %532, %664 ], [ %762, %669 ]
  %804 = phi float [ %533, %525 ], [ %533, %664 ], [ %775, %669 ]
  %805 = phi float [ %534, %525 ], [ %534, %664 ], [ %788, %669 ]
  %806 = phi float [ %535, %525 ], [ %535, %664 ], [ %765, %669 ]
  %807 = phi float [ %536, %525 ], [ %536, %664 ], [ %778, %669 ]
  %808 = phi float [ %537, %525 ], [ %537, %664 ], [ %791, %669 ]
  %809 = phi float [ %538, %525 ], [ %538, %664 ], [ %769, %669 ]
  %810 = phi float [ %539, %525 ], [ %539, %664 ], [ %782, %669 ]
  %811 = phi float [ %540, %525 ], [ %540, %664 ], [ %795, %669 ]
  %812 = icmp eq i32 %323, 255
  br i1 %812, label %1067, label %813, !dx.controlflow.hints !67

; <label>:813                                     ; preds = %796
  %814 = shl i32 %323, 1
  %815 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %9, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %816 = extractvalue %dx.types.CBufRet.f32 %815, 1
  %817 = fptoui float %816 to i32
  %818 = udiv i32 %814, %817
  %819 = mul i32 %817, %818
  %820 = sub i32 %814, %819
  %821 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %9, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %822 = extractvalue %dx.types.CBufRet.i32 %821, 0
  %823 = add i32 %822, 0
  %824 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 %823, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %825 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %824, i32 0, i32 %820, i32 %818, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %826 = extractvalue %dx.types.ResRet.f32 %825, 0
  %827 = extractvalue %dx.types.ResRet.f32 %825, 1
  %828 = extractvalue %dx.types.ResRet.f32 %825, 2
  %829 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %9, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %830 = extractvalue %dx.types.CBufRet.i32 %829, 0
  %831 = add nsw i32 %820, 1
  %832 = add i32 %830, 0
  %833 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 %832, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %834 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %833, i32 0, i32 %831, i32 %818, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %835 = extractvalue %dx.types.ResRet.f32 %834, 0
  %836 = extractvalue %dx.types.ResRet.f32 %834, 1
  %837 = extractvalue %dx.types.ResRet.f32 %834, 2
  %838 = fmul fast float %826, %153
  %839 = call float @dx.op.tertiary.f32(i32 46, float %827, float %156, float %838)  ; FMad(a,b,c)
  %840 = call float @dx.op.tertiary.f32(i32 46, float %828, float %159, float %839)  ; FMad(a,b,c)
  %841 = fmul fast float %826, %154
  %842 = call float @dx.op.tertiary.f32(i32 46, float %827, float %157, float %841)  ; FMad(a,b,c)
  %843 = call float @dx.op.tertiary.f32(i32 46, float %828, float %160, float %842)  ; FMad(a,b,c)
  %844 = fmul fast float %826, %155
  %845 = call float @dx.op.tertiary.f32(i32 46, float %827, float %158, float %844)  ; FMad(a,b,c)
  %846 = call float @dx.op.tertiary.f32(i32 46, float %828, float %161, float %845)  ; FMad(a,b,c)
  %847 = fmul fast float %835, %153
  %848 = call float @dx.op.tertiary.f32(i32 46, float %836, float %156, float %847)  ; FMad(a,b,c)
  %849 = call float @dx.op.tertiary.f32(i32 46, float %837, float %159, float %848)  ; FMad(a,b,c)
  %850 = fmul fast float %835, %154
  %851 = call float @dx.op.tertiary.f32(i32 46, float %836, float %157, float %850)  ; FMad(a,b,c)
  %852 = call float @dx.op.tertiary.f32(i32 46, float %837, float %160, float %851)  ; FMad(a,b,c)
  %853 = fmul fast float %835, %155
  %854 = call float @dx.op.tertiary.f32(i32 46, float %836, float %158, float %853)  ; FMad(a,b,c)
  %855 = call float @dx.op.tertiary.f32(i32 46, float %837, float %161, float %854)  ; FMad(a,b,c)
  %856 = fmul fast float %840, %800
  %857 = call float @dx.op.tertiary.f32(i32 46, float %803, float %843, float %856)  ; FMad(a,b,c)
  %858 = call float @dx.op.tertiary.f32(i32 46, float %806, float %846, float %857)  ; FMad(a,b,c)
  %859 = fadd fast float %858, %809
  %860 = fmul fast float %840, %801
  %861 = call float @dx.op.tertiary.f32(i32 46, float %804, float %843, float %860)  ; FMad(a,b,c)
  %862 = call float @dx.op.tertiary.f32(i32 46, float %807, float %846, float %861)  ; FMad(a,b,c)
  %863 = fadd fast float %862, %810
  %864 = fmul fast float %840, %802
  %865 = call float @dx.op.tertiary.f32(i32 46, float %805, float %843, float %864)  ; FMad(a,b,c)
  %866 = call float @dx.op.tertiary.f32(i32 46, float %808, float %846, float %865)  ; FMad(a,b,c)
  %867 = fadd fast float %866, %811
  %868 = fmul fast float %849, %800
  %869 = call float @dx.op.tertiary.f32(i32 46, float %803, float %852, float %868)  ; FMad(a,b,c)
  %870 = call float @dx.op.tertiary.f32(i32 46, float %806, float %855, float %869)  ; FMad(a,b,c)
  %871 = fmul fast float %849, %801
  %872 = call float @dx.op.tertiary.f32(i32 46, float %804, float %852, float %871)  ; FMad(a,b,c)
  %873 = call float @dx.op.tertiary.f32(i32 46, float %807, float %855, float %872)  ; FMad(a,b,c)
  %874 = fmul fast float %849, %802
  %875 = call float @dx.op.tertiary.f32(i32 46, float %805, float %852, float %874)  ; FMad(a,b,c)
  %876 = call float @dx.op.tertiary.f32(i32 46, float %808, float %855, float %875)  ; FMad(a,b,c)
  %877 = fadd fast float %859, %809
  %878 = fadd fast float %877, %870
  %879 = fadd fast float %863, %810
  %880 = fadd fast float %879, %873
  %881 = fadd fast float %867, %811
  %882 = fadd fast float %881, %876
  %883 = fmul fast float %878, 5.000000e-01
  %884 = fmul fast float %880, 5.000000e-01
  %885 = fmul fast float %882, 5.000000e-01
  %886 = fadd fast float %883, %70
  %887 = fadd fast float %884, %71
  %888 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %13, i32 53)  ; CBufferLoadLegacy(handle,regIndex)
  %889 = extractvalue %dx.types.CBufRet.f32 %888, 0
  %890 = extractvalue %dx.types.CBufRet.f32 %888, 1
  %891 = extractvalue %dx.types.CBufRet.f32 %888, 2
  %892 = fsub fast float %886, %889
  %893 = fsub fast float %887, %890
  %894 = fsub fast float %78, %891
  %895 = fadd fast float %894, %885
  %896 = fmul fast float %892, 3.125000e-02
  %897 = fadd fast float %896, 5.000000e-01
  %898 = fmul fast float %893, 3.125000e-02
  %899 = fadd fast float %898, 5.000000e-01
  %900 = fmul fast float %895, 3.125000e-02
  %901 = fadd fast float %900, 5.000000e-01
  %902 = fcmp fast olt float %897, 0.000000e+00
  %903 = fcmp fast olt float %899, 0.000000e+00
  %904 = fcmp fast olt float %901, 0.000000e+00
  %905 = fcmp fast ogt float %897, 1.000000e+00
  %906 = fcmp fast ogt float %899, 1.000000e+00
  %907 = fcmp fast ogt float %901, 1.000000e+00
  %908 = or i1 %902, %905
  %909 = or i1 %903, %906
  %910 = or i1 %904, %907
  %911 = or i1 %908, %909
  %912 = or i1 %911, %910
  br i1 %912, label %935, label %913

; <label>:913                                     ; preds = %813
  %914 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %4, %dx.types.Handle %5, float %897, float %899, float %901, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %915 = extractvalue %dx.types.ResRet.f32 %914, 0
  %916 = extractvalue %dx.types.ResRet.f32 %914, 1
  %917 = extractvalue %dx.types.ResRet.f32 %914, 2
  %918 = call float @dx.op.unary.f32(i32 6, float %915)  ; FAbs(value)
  %919 = call float @dx.op.unary.f32(i32 6, float %916)  ; FAbs(value)
  %920 = call float @dx.op.unary.f32(i32 6, float %917)  ; FAbs(value)
  %921 = fcmp fast olt float %918, 0x3F1A36E2E0000000
  %922 = fcmp fast olt float %919, 0x3F1A36E2E0000000
  %923 = fcmp fast olt float %920, 0x3F1A36E2E0000000
  %924 = and i1 %921, %922
  %925 = and i1 %924, %923
  br i1 %925, label %935, label %926

; <label>:926                                     ; preds = %913
  %927 = extractvalue %dx.types.ResRet.f32 %914, 3
  %928 = extractvalue %dx.types.CBufRet.f32 %888, 3
  %929 = fdiv fast float %927, %928
  %930 = fmul fast float %917, 5.000000e-01
  %931 = call float @dx.op.dot3.f32(i32 55, float %915, float %916, float %930, float %915, float %916, float %930)  ; Dot3(ax,ay,az,bx,by,bz)
  %932 = call float @dx.op.unary.f32(i32 25, float %931)  ; Rsqrt(value)
  %933 = fmul fast float %932, %915
  %934 = fmul fast float %932, %916
  br label %935

; <label>:935                                     ; preds = %926, %913, %813
  %936 = phi float [ %933, %926 ], [ 0.000000e+00, %813 ], [ 0.000000e+00, %913 ]
  %937 = phi float [ %934, %926 ], [ 0.000000e+00, %813 ], [ 0.000000e+00, %913 ]
  %938 = phi float [ %929, %926 ], [ 0.000000e+00, %813 ], [ 0.000000e+00, %913 ]
  %939 = fcmp fast olt float %938, 0x3F1A36E2E0000000
  br i1 %939, label %1067, label %940

; <label>:940                                     ; preds = %935
  %941 = fsub fast float %870, %858
  %942 = fsub fast float %873, %862
  %943 = fsub fast float %876, %866
  %944 = fmul fast float %941, %941
  %945 = fmul fast float %942, %942
  %946 = fadd fast float %945, %944
  %947 = fmul fast float %943, %943
  %948 = fadd fast float %946, %947
  %949 = call float @dx.op.unary.f32(i32 24, float %948)  ; Sqrt(value)
  %950 = fmul fast float %938, 0x3FF921FB60000000
  %951 = call float @dx.op.binary.f32(i32 36, float 0x3FF6571860000000, float %950)  ; FMin(a,b)
  %952 = fsub fast float %797, %859
  %953 = fsub fast float %798, %863
  %954 = fsub fast float %799, %867
  %955 = fmul fast float %952, %952
  %956 = fmul fast float %953, %953
  %957 = fadd fast float %956, %955
  %958 = fmul fast float %954, %954
  %959 = fadd fast float %957, %958
  %960 = call float @dx.op.unary.f32(i32 24, float %959)  ; Sqrt(value)
  %961 = fdiv fast float %960, %949
  %962 = call float @dx.op.binary.f32(i32 36, float 1.000000e+00, float %961)  ; FMin(a,b)
  %963 = fmul fast float %962, 0x3FFBFA4400000000
  %964 = fadd fast float %963, 0xC006F10CC0000000
  %965 = fmul fast float %964, %962
  %966 = fadd fast float %965, 0xBFD6F1AA00000000
  %967 = fmul fast float %966, %962
  %968 = fadd fast float %967, 0x4003D22000000000
  %969 = fsub fast float 1.000000e+00, %331
  %970 = call float @dx.op.unary.f32(i32 7, float %969)  ; Saturate(value)
  %971 = fmul fast float %962, %951
  %972 = fmul fast float %971, %970
  %973 = fmul fast float %972, %968
  %974 = fsub fast float -0.000000e+00, %936
  %975 = call float @dx.op.dot3.f32(i32 55, float %937, float %974, float 5.000000e-01, float %937, float %974, float 5.000000e-01)  ; Dot3(ax,ay,az,bx,by,bz)
  %976 = call float @dx.op.unary.f32(i32 25, float %975)  ; Rsqrt(value)
  %977 = fmul fast float %976, %937
  %978 = fmul fast float %976, %974
  %979 = fmul fast float %976, 5.000000e-01
  %980 = call float @dx.op.unary.f32(i32 13, float %973)  ; Sin(value)
  %981 = call float @dx.op.unary.f32(i32 12, float %973)  ; Cos(value)
  %982 = fsub fast float 1.000000e+00, %981
  %983 = fmul fast float %977, %977
  %984 = fmul fast float %983, %982
  %985 = fadd fast float %984, %981
  %986 = fmul fast float %978, %977
  %987 = fmul fast float %986, %982
  %988 = fmul fast float %980, %979
  %989 = fsub fast float %987, %988
  %990 = fmul fast float %979, %977
  %991 = fmul fast float %990, %982
  %992 = fmul fast float %980, %978
  %993 = fadd fast float %991, %992
  %994 = fadd fast float %987, %988
  %995 = fmul fast float %978, %978
  %996 = fmul fast float %995, %982
  %997 = fadd fast float %996, %981
  %998 = fmul fast float %979, %978
  %999 = fmul fast float %998, %982
  %1000 = fmul fast float %980, %977
  %1001 = fsub fast float %999, %1000
  %1002 = fsub fast float %991, %992
  %1003 = fadd fast float %999, %1000
  %1004 = fmul fast float %979, %979
  %1005 = fmul fast float %1004, %982
  %1006 = fadd fast float %1005, %981
  %1007 = fsub fast float -0.000000e+00, %859
  %1008 = fsub fast float -0.000000e+00, %863
  %1009 = fsub fast float -0.000000e+00, %867
  %1010 = call float @dx.op.dot3.f32(i32 55, float %1007, float %1008, float %1009, float %985, float %994, float %1002)  ; Dot3(ax,ay,az,bx,by,bz)
  %1011 = fadd fast float %1010, %859
  %1012 = call float @dx.op.dot3.f32(i32 55, float %1007, float %1008, float %1009, float %989, float %997, float %1003)  ; Dot3(ax,ay,az,bx,by,bz)
  %1013 = fadd fast float %1012, %863
  %1014 = call float @dx.op.dot3.f32(i32 55, float %1007, float %1008, float %1009, float %993, float %1001, float %1006)  ; Dot3(ax,ay,az,bx,by,bz)
  %1015 = fadd fast float %1014, %867
  %1016 = fmul fast float %985, %797
  %1017 = call float @dx.op.tertiary.f32(i32 46, float %994, float %798, float %1016)  ; FMad(a,b,c)
  %1018 = call float @dx.op.tertiary.f32(i32 46, float %1002, float %799, float %1017)  ; FMad(a,b,c)
  %1019 = fadd fast float %1018, %1011
  %1020 = fmul fast float %989, %797
  %1021 = call float @dx.op.tertiary.f32(i32 46, float %997, float %798, float %1020)  ; FMad(a,b,c)
  %1022 = call float @dx.op.tertiary.f32(i32 46, float %1003, float %799, float %1021)  ; FMad(a,b,c)
  %1023 = fadd fast float %1022, %1013
  %1024 = fmul fast float %993, %797
  %1025 = call float @dx.op.tertiary.f32(i32 46, float %1001, float %798, float %1024)  ; FMad(a,b,c)
  %1026 = call float @dx.op.tertiary.f32(i32 46, float %1006, float %799, float %1025)  ; FMad(a,b,c)
  %1027 = fadd fast float %1026, %1015
  %1028 = fmul fast float %985, %800
  %1029 = call float @dx.op.tertiary.f32(i32 46, float %994, float %801, float %1028)  ; FMad(a,b,c)
  %1030 = call float @dx.op.tertiary.f32(i32 46, float %1002, float %802, float %1029)  ; FMad(a,b,c)
  %1031 = fmul fast float %985, %803
  %1032 = call float @dx.op.tertiary.f32(i32 46, float %994, float %804, float %1031)  ; FMad(a,b,c)
  %1033 = call float @dx.op.tertiary.f32(i32 46, float %1002, float %805, float %1032)  ; FMad(a,b,c)
  %1034 = fmul fast float %985, %806
  %1035 = call float @dx.op.tertiary.f32(i32 46, float %994, float %807, float %1034)  ; FMad(a,b,c)
  %1036 = call float @dx.op.tertiary.f32(i32 46, float %1002, float %808, float %1035)  ; FMad(a,b,c)
  %1037 = fmul fast float %985, %809
  %1038 = call float @dx.op.tertiary.f32(i32 46, float %994, float %810, float %1037)  ; FMad(a,b,c)
  %1039 = call float @dx.op.tertiary.f32(i32 46, float %1002, float %811, float %1038)  ; FMad(a,b,c)
  %1040 = fadd fast float %1039, %1011
  %1041 = fmul fast float %989, %800
  %1042 = call float @dx.op.tertiary.f32(i32 46, float %997, float %801, float %1041)  ; FMad(a,b,c)
  %1043 = call float @dx.op.tertiary.f32(i32 46, float %1003, float %802, float %1042)  ; FMad(a,b,c)
  %1044 = fmul fast float %989, %803
  %1045 = call float @dx.op.tertiary.f32(i32 46, float %997, float %804, float %1044)  ; FMad(a,b,c)
  %1046 = call float @dx.op.tertiary.f32(i32 46, float %1003, float %805, float %1045)  ; FMad(a,b,c)
  %1047 = fmul fast float %989, %806
  %1048 = call float @dx.op.tertiary.f32(i32 46, float %997, float %807, float %1047)  ; FMad(a,b,c)
  %1049 = call float @dx.op.tertiary.f32(i32 46, float %1003, float %808, float %1048)  ; FMad(a,b,c)
  %1050 = fmul fast float %989, %809
  %1051 = call float @dx.op.tertiary.f32(i32 46, float %997, float %810, float %1050)  ; FMad(a,b,c)
  %1052 = call float @dx.op.tertiary.f32(i32 46, float %1003, float %811, float %1051)  ; FMad(a,b,c)
  %1053 = fadd fast float %1052, %1013
  %1054 = fmul fast float %993, %800
  %1055 = call float @dx.op.tertiary.f32(i32 46, float %1001, float %801, float %1054)  ; FMad(a,b,c)
  %1056 = call float @dx.op.tertiary.f32(i32 46, float %1006, float %802, float %1055)  ; FMad(a,b,c)
  %1057 = fmul fast float %993, %803
  %1058 = call float @dx.op.tertiary.f32(i32 46, float %1001, float %804, float %1057)  ; FMad(a,b,c)
  %1059 = call float @dx.op.tertiary.f32(i32 46, float %1006, float %805, float %1058)  ; FMad(a,b,c)
  %1060 = fmul fast float %993, %806
  %1061 = call float @dx.op.tertiary.f32(i32 46, float %1001, float %807, float %1060)  ; FMad(a,b,c)
  %1062 = call float @dx.op.tertiary.f32(i32 46, float %1006, float %808, float %1061)  ; FMad(a,b,c)
  %1063 = fmul fast float %993, %809
  %1064 = call float @dx.op.tertiary.f32(i32 46, float %1001, float %810, float %1063)  ; FMad(a,b,c)
  %1065 = call float @dx.op.tertiary.f32(i32 46, float %1006, float %811, float %1064)  ; FMad(a,b,c)
  %1066 = fadd fast float %1065, %1015
  br label %1067

; <label>:1067                                    ; preds = %940, %935, %796
  %1068 = phi float [ %797, %796 ], [ %797, %935 ], [ %1019, %940 ]
  %1069 = phi float [ %798, %796 ], [ %798, %935 ], [ %1023, %940 ]
  %1070 = phi float [ %799, %796 ], [ %799, %935 ], [ %1027, %940 ]
  %1071 = phi float [ %800, %796 ], [ %800, %935 ], [ %1030, %940 ]
  %1072 = phi float [ %801, %796 ], [ %801, %935 ], [ %1043, %940 ]
  %1073 = phi float [ %802, %796 ], [ %802, %935 ], [ %1056, %940 ]
  %1074 = phi float [ %803, %796 ], [ %803, %935 ], [ %1033, %940 ]
  %1075 = phi float [ %804, %796 ], [ %804, %935 ], [ %1046, %940 ]
  %1076 = phi float [ %805, %796 ], [ %805, %935 ], [ %1059, %940 ]
  %1077 = phi float [ %806, %796 ], [ %806, %935 ], [ %1036, %940 ]
  %1078 = phi float [ %807, %796 ], [ %807, %935 ], [ %1049, %940 ]
  %1079 = phi float [ %808, %796 ], [ %808, %935 ], [ %1062, %940 ]
  %1080 = phi float [ %809, %796 ], [ %809, %935 ], [ %1040, %940 ]
  %1081 = phi float [ %810, %796 ], [ %810, %935 ], [ %1053, %940 ]
  %1082 = phi float [ %811, %796 ], [ %811, %935 ], [ %1066, %940 ]
  %1083 = shl i32 %291, 1
  %1084 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %9, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1085 = extractvalue %dx.types.CBufRet.f32 %1084, 1
  %1086 = fptoui float %1085 to i32
  %1087 = udiv i32 %1083, %1086
  %1088 = mul i32 %1086, %1087
  %1089 = sub i32 %1083, %1088
  %1090 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %9, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1091 = extractvalue %dx.types.CBufRet.i32 %1090, 0
  %1092 = add i32 %1091, 0
  %1093 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 %1092, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %1094 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1093, i32 0, i32 %1089, i32 %1087, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1095 = extractvalue %dx.types.ResRet.f32 %1094, 0
  %1096 = extractvalue %dx.types.ResRet.f32 %1094, 1
  %1097 = extractvalue %dx.types.ResRet.f32 %1094, 2
  %1098 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %9, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1099 = extractvalue %dx.types.CBufRet.i32 %1098, 0
  %1100 = add nsw i32 %1089, 1
  %1101 = add i32 %1099, 0
  %1102 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 %1101, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %1103 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1102, i32 0, i32 %1100, i32 %1087, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1104 = extractvalue %dx.types.ResRet.f32 %1103, 0
  %1105 = extractvalue %dx.types.ResRet.f32 %1103, 1
  %1106 = extractvalue %dx.types.ResRet.f32 %1103, 2
  %1107 = fmul fast float %1095, %153
  %1108 = call float @dx.op.tertiary.f32(i32 46, float %1096, float %156, float %1107)  ; FMad(a,b,c)
  %1109 = call float @dx.op.tertiary.f32(i32 46, float %1097, float %159, float %1108)  ; FMad(a,b,c)
  %1110 = fmul fast float %1095, %154
  %1111 = call float @dx.op.tertiary.f32(i32 46, float %1096, float %157, float %1110)  ; FMad(a,b,c)
  %1112 = call float @dx.op.tertiary.f32(i32 46, float %1097, float %160, float %1111)  ; FMad(a,b,c)
  %1113 = fmul fast float %1095, %155
  %1114 = call float @dx.op.tertiary.f32(i32 46, float %1096, float %158, float %1113)  ; FMad(a,b,c)
  %1115 = call float @dx.op.tertiary.f32(i32 46, float %1097, float %161, float %1114)  ; FMad(a,b,c)
  %1116 = fmul fast float %1104, %153
  %1117 = call float @dx.op.tertiary.f32(i32 46, float %1105, float %156, float %1116)  ; FMad(a,b,c)
  %1118 = call float @dx.op.tertiary.f32(i32 46, float %1106, float %159, float %1117)  ; FMad(a,b,c)
  %1119 = fmul fast float %1104, %154
  %1120 = call float @dx.op.tertiary.f32(i32 46, float %1105, float %157, float %1119)  ; FMad(a,b,c)
  %1121 = call float @dx.op.tertiary.f32(i32 46, float %1106, float %160, float %1120)  ; FMad(a,b,c)
  %1122 = fmul fast float %1104, %155
  %1123 = call float @dx.op.tertiary.f32(i32 46, float %1105, float %158, float %1122)  ; FMad(a,b,c)
  %1124 = call float @dx.op.tertiary.f32(i32 46, float %1106, float %161, float %1123)  ; FMad(a,b,c)
  %1125 = fmul fast float %1109, %1071
  %1126 = call float @dx.op.tertiary.f32(i32 46, float %1074, float %1112, float %1125)  ; FMad(a,b,c)
  %1127 = call float @dx.op.tertiary.f32(i32 46, float %1077, float %1115, float %1126)  ; FMad(a,b,c)
  %1128 = fadd fast float %1127, %1080
  %1129 = fmul fast float %1109, %1072
  %1130 = call float @dx.op.tertiary.f32(i32 46, float %1075, float %1112, float %1129)  ; FMad(a,b,c)
  %1131 = call float @dx.op.tertiary.f32(i32 46, float %1078, float %1115, float %1130)  ; FMad(a,b,c)
  %1132 = fadd fast float %1131, %1081
  %1133 = fmul fast float %1109, %1073
  %1134 = call float @dx.op.tertiary.f32(i32 46, float %1076, float %1112, float %1133)  ; FMad(a,b,c)
  %1135 = call float @dx.op.tertiary.f32(i32 46, float %1079, float %1115, float %1134)  ; FMad(a,b,c)
  %1136 = fadd fast float %1135, %1082
  %1137 = fmul fast float %1118, %1071
  %1138 = call float @dx.op.tertiary.f32(i32 46, float %1074, float %1121, float %1137)  ; FMad(a,b,c)
  %1139 = call float @dx.op.tertiary.f32(i32 46, float %1077, float %1124, float %1138)  ; FMad(a,b,c)
  %1140 = fmul fast float %1118, %1072
  %1141 = call float @dx.op.tertiary.f32(i32 46, float %1075, float %1121, float %1140)  ; FMad(a,b,c)
  %1142 = call float @dx.op.tertiary.f32(i32 46, float %1078, float %1124, float %1141)  ; FMad(a,b,c)
  %1143 = fmul fast float %1118, %1073
  %1144 = call float @dx.op.tertiary.f32(i32 46, float %1076, float %1121, float %1143)  ; FMad(a,b,c)
  %1145 = call float @dx.op.tertiary.f32(i32 46, float %1079, float %1124, float %1144)  ; FMad(a,b,c)
  %1146 = fadd fast float %1128, %1080
  %1147 = fadd fast float %1146, %1139
  %1148 = fadd fast float %1132, %1081
  %1149 = fadd fast float %1148, %1142
  %1150 = fadd fast float %1136, %1082
  %1151 = fadd fast float %1150, %1145
  %1152 = fmul fast float %1147, 5.000000e-01
  %1153 = fmul fast float %1149, 5.000000e-01
  %1154 = fmul fast float %1151, 5.000000e-01
  %1155 = fadd fast float %1152, %70
  %1156 = fadd fast float %1153, %71
  %1157 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %13, i32 53)  ; CBufferLoadLegacy(handle,regIndex)
  %1158 = extractvalue %dx.types.CBufRet.f32 %1157, 0
  %1159 = extractvalue %dx.types.CBufRet.f32 %1157, 1
  %1160 = extractvalue %dx.types.CBufRet.f32 %1157, 2
  %1161 = fsub fast float %1155, %1158
  %1162 = fsub fast float %1156, %1159
  %1163 = fsub fast float %78, %1160
  %1164 = fadd fast float %1163, %1154
  %1165 = fmul fast float %1161, 3.125000e-02
  %1166 = fadd fast float %1165, 5.000000e-01
  %1167 = fmul fast float %1162, 3.125000e-02
  %1168 = fadd fast float %1167, 5.000000e-01
  %1169 = fmul fast float %1164, 3.125000e-02
  %1170 = fadd fast float %1169, 5.000000e-01
  %1171 = fcmp fast olt float %1166, 0.000000e+00
  %1172 = fcmp fast olt float %1168, 0.000000e+00
  %1173 = fcmp fast olt float %1170, 0.000000e+00
  %1174 = fcmp fast ogt float %1166, 1.000000e+00
  %1175 = fcmp fast ogt float %1168, 1.000000e+00
  %1176 = fcmp fast ogt float %1170, 1.000000e+00
  %1177 = or i1 %1171, %1174
  %1178 = or i1 %1172, %1175
  %1179 = or i1 %1173, %1176
  %1180 = or i1 %1177, %1178
  %1181 = or i1 %1180, %1179
  br i1 %1181, label %1204, label %1182

; <label>:1182                                    ; preds = %1067
  %1183 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %4, %dx.types.Handle %5, float %1166, float %1168, float %1170, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1184 = extractvalue %dx.types.ResRet.f32 %1183, 0
  %1185 = extractvalue %dx.types.ResRet.f32 %1183, 1
  %1186 = extractvalue %dx.types.ResRet.f32 %1183, 2
  %1187 = call float @dx.op.unary.f32(i32 6, float %1184)  ; FAbs(value)
  %1188 = call float @dx.op.unary.f32(i32 6, float %1185)  ; FAbs(value)
  %1189 = call float @dx.op.unary.f32(i32 6, float %1186)  ; FAbs(value)
  %1190 = fcmp fast olt float %1187, 0x3F1A36E2E0000000
  %1191 = fcmp fast olt float %1188, 0x3F1A36E2E0000000
  %1192 = fcmp fast olt float %1189, 0x3F1A36E2E0000000
  %1193 = and i1 %1190, %1191
  %1194 = and i1 %1193, %1192
  br i1 %1194, label %1204, label %1195

; <label>:1195                                    ; preds = %1182
  %1196 = extractvalue %dx.types.ResRet.f32 %1183, 3
  %1197 = extractvalue %dx.types.CBufRet.f32 %1157, 3
  %1198 = fdiv fast float %1196, %1197
  %1199 = fmul fast float %1186, 5.000000e-01
  %1200 = call float @dx.op.dot3.f32(i32 55, float %1184, float %1185, float %1199, float %1184, float %1185, float %1199)  ; Dot3(ax,ay,az,bx,by,bz)
  %1201 = call float @dx.op.unary.f32(i32 25, float %1200)  ; Rsqrt(value)
  %1202 = fmul fast float %1201, %1184
  %1203 = fmul fast float %1201, %1185
  br label %1204

; <label>:1204                                    ; preds = %1195, %1182, %1067
  %1205 = phi float [ %1202, %1195 ], [ 0.000000e+00, %1067 ], [ 0.000000e+00, %1182 ]
  %1206 = phi float [ %1203, %1195 ], [ 0.000000e+00, %1067 ], [ 0.000000e+00, %1182 ]
  %1207 = phi float [ %1198, %1195 ], [ 0.000000e+00, %1067 ], [ 0.000000e+00, %1182 ]
  %1208 = fcmp fast olt float %1207, 0x3F1A36E2E0000000
  br i1 %1208, label %1324, label %1209

; <label>:1209                                    ; preds = %1204
  %1210 = fsub fast float %1139, %1127
  %1211 = fsub fast float %1142, %1131
  %1212 = fsub fast float %1145, %1135
  %1213 = fmul fast float %1210, %1210
  %1214 = fmul fast float %1211, %1211
  %1215 = fadd fast float %1214, %1213
  %1216 = fmul fast float %1212, %1212
  %1217 = fadd fast float %1215, %1216
  %1218 = call float @dx.op.unary.f32(i32 24, float %1217)  ; Sqrt(value)
  %1219 = fmul fast float %1207, 0x3FF921FB60000000
  %1220 = call float @dx.op.binary.f32(i32 36, float 0x3FF6571860000000, float %1219)  ; FMin(a,b)
  %1221 = fsub fast float %1068, %1128
  %1222 = fsub fast float %1069, %1132
  %1223 = fsub fast float %1070, %1136
  %1224 = fmul fast float %1221, %1221
  %1225 = fmul fast float %1222, %1222
  %1226 = fadd fast float %1225, %1224
  %1227 = fmul fast float %1223, %1223
  %1228 = fadd fast float %1226, %1227
  %1229 = call float @dx.op.unary.f32(i32 24, float %1228)  ; Sqrt(value)
  %1230 = fdiv fast float %1229, %1218
  %1231 = call float @dx.op.binary.f32(i32 36, float 1.000000e+00, float %1230)  ; FMin(a,b)
  %1232 = fmul fast float %1231, 0x3FFBFA4400000000
  %1233 = fadd fast float %1232, 0xC006F10CC0000000
  %1234 = fmul fast float %1233, %1231
  %1235 = fadd fast float %1234, 0xBFD6F1AA00000000
  %1236 = fmul fast float %1235, %1231
  %1237 = fadd fast float %1236, 0x4003D22000000000
  %1238 = fsub fast float 1.000000e+00, %332
  %1239 = call float @dx.op.unary.f32(i32 7, float %1238)  ; Saturate(value)
  %1240 = fmul fast float %1231, %1220
  %1241 = fmul fast float %1240, %1239
  %1242 = fmul fast float %1241, %1237
  %1243 = fsub fast float -0.000000e+00, %1205
  %1244 = call float @dx.op.dot3.f32(i32 55, float %1206, float %1243, float 5.000000e-01, float %1206, float %1243, float 5.000000e-01)  ; Dot3(ax,ay,az,bx,by,bz)
  %1245 = call float @dx.op.unary.f32(i32 25, float %1244)  ; Rsqrt(value)
  %1246 = fmul fast float %1245, %1206
  %1247 = fmul fast float %1245, %1243
  %1248 = fmul fast float %1245, 5.000000e-01
  %1249 = call float @dx.op.unary.f32(i32 13, float %1242)  ; Sin(value)
  %1250 = call float @dx.op.unary.f32(i32 12, float %1242)  ; Cos(value)
  %1251 = fsub fast float 1.000000e+00, %1250
  %1252 = fmul fast float %1246, %1246
  %1253 = fmul fast float %1252, %1251
  %1254 = fadd fast float %1253, %1250
  %1255 = fmul fast float %1247, %1246
  %1256 = fmul fast float %1255, %1251
  %1257 = fmul fast float %1249, %1248
  %1258 = fsub fast float %1256, %1257
  %1259 = fmul fast float %1248, %1246
  %1260 = fmul fast float %1259, %1251
  %1261 = fmul fast float %1249, %1247
  %1262 = fadd fast float %1260, %1261
  %1263 = fadd fast float %1256, %1257
  %1264 = fmul fast float %1247, %1247
  %1265 = fmul fast float %1264, %1251
  %1266 = fadd fast float %1265, %1250
  %1267 = fmul fast float %1248, %1247
  %1268 = fmul fast float %1267, %1251
  %1269 = fmul fast float %1249, %1246
  %1270 = fsub fast float %1268, %1269
  %1271 = fsub fast float %1260, %1261
  %1272 = fadd fast float %1268, %1269
  %1273 = fmul fast float %1248, %1248
  %1274 = fmul fast float %1273, %1251
  %1275 = fadd fast float %1274, %1250
  %1276 = fsub fast float -0.000000e+00, %1128
  %1277 = fsub fast float -0.000000e+00, %1132
  %1278 = fsub fast float -0.000000e+00, %1136
  %1279 = call float @dx.op.dot3.f32(i32 55, float %1276, float %1277, float %1278, float %1254, float %1263, float %1271)  ; Dot3(ax,ay,az,bx,by,bz)
  %1280 = fadd fast float %1279, %1128
  %1281 = call float @dx.op.dot3.f32(i32 55, float %1276, float %1277, float %1278, float %1258, float %1266, float %1272)  ; Dot3(ax,ay,az,bx,by,bz)
  %1282 = fadd fast float %1281, %1132
  %1283 = call float @dx.op.dot3.f32(i32 55, float %1276, float %1277, float %1278, float %1262, float %1270, float %1275)  ; Dot3(ax,ay,az,bx,by,bz)
  %1284 = fadd fast float %1283, %1136
  %1285 = fmul fast float %1254, %1068
  %1286 = call float @dx.op.tertiary.f32(i32 46, float %1263, float %1069, float %1285)  ; FMad(a,b,c)
  %1287 = call float @dx.op.tertiary.f32(i32 46, float %1271, float %1070, float %1286)  ; FMad(a,b,c)
  %1288 = fadd fast float %1280, %1287
  %1289 = fmul fast float %1258, %1068
  %1290 = call float @dx.op.tertiary.f32(i32 46, float %1266, float %1069, float %1289)  ; FMad(a,b,c)
  %1291 = call float @dx.op.tertiary.f32(i32 46, float %1272, float %1070, float %1290)  ; FMad(a,b,c)
  %1292 = fadd fast float %1282, %1291
  %1293 = fmul fast float %1262, %1068
  %1294 = call float @dx.op.tertiary.f32(i32 46, float %1270, float %1069, float %1293)  ; FMad(a,b,c)
  %1295 = call float @dx.op.tertiary.f32(i32 46, float %1275, float %1070, float %1294)  ; FMad(a,b,c)
  %1296 = fadd fast float %1284, %1295
  %1297 = fmul fast float %1254, %1071
  %1298 = call float @dx.op.tertiary.f32(i32 46, float %1263, float %1072, float %1297)  ; FMad(a,b,c)
  %1299 = call float @dx.op.tertiary.f32(i32 46, float %1271, float %1073, float %1298)  ; FMad(a,b,c)
  %1300 = fmul fast float %1254, %1074
  %1301 = call float @dx.op.tertiary.f32(i32 46, float %1263, float %1075, float %1300)  ; FMad(a,b,c)
  %1302 = call float @dx.op.tertiary.f32(i32 46, float %1271, float %1076, float %1301)  ; FMad(a,b,c)
  %1303 = fmul fast float %1254, %1077
  %1304 = call float @dx.op.tertiary.f32(i32 46, float %1263, float %1078, float %1303)  ; FMad(a,b,c)
  %1305 = call float @dx.op.tertiary.f32(i32 46, float %1271, float %1079, float %1304)  ; FMad(a,b,c)
  %1306 = fmul fast float %1258, %1071
  %1307 = call float @dx.op.tertiary.f32(i32 46, float %1266, float %1072, float %1306)  ; FMad(a,b,c)
  %1308 = call float @dx.op.tertiary.f32(i32 46, float %1272, float %1073, float %1307)  ; FMad(a,b,c)
  %1309 = fmul fast float %1258, %1074
  %1310 = call float @dx.op.tertiary.f32(i32 46, float %1266, float %1075, float %1309)  ; FMad(a,b,c)
  %1311 = call float @dx.op.tertiary.f32(i32 46, float %1272, float %1076, float %1310)  ; FMad(a,b,c)
  %1312 = fmul fast float %1258, %1077
  %1313 = call float @dx.op.tertiary.f32(i32 46, float %1266, float %1078, float %1312)  ; FMad(a,b,c)
  %1314 = call float @dx.op.tertiary.f32(i32 46, float %1272, float %1079, float %1313)  ; FMad(a,b,c)
  %1315 = fmul fast float %1262, %1071
  %1316 = call float @dx.op.tertiary.f32(i32 46, float %1270, float %1072, float %1315)  ; FMad(a,b,c)
  %1317 = call float @dx.op.tertiary.f32(i32 46, float %1275, float %1073, float %1316)  ; FMad(a,b,c)
  %1318 = fmul fast float %1262, %1074
  %1319 = call float @dx.op.tertiary.f32(i32 46, float %1270, float %1075, float %1318)  ; FMad(a,b,c)
  %1320 = call float @dx.op.tertiary.f32(i32 46, float %1275, float %1076, float %1319)  ; FMad(a,b,c)
  %1321 = fmul fast float %1262, %1077
  %1322 = call float @dx.op.tertiary.f32(i32 46, float %1270, float %1078, float %1321)  ; FMad(a,b,c)
  %1323 = call float @dx.op.tertiary.f32(i32 46, float %1275, float %1079, float %1322)  ; FMad(a,b,c)
  br label %1324

; <label>:1324                                    ; preds = %1209, %1204
  %1325 = phi float [ %1068, %1204 ], [ %1288, %1209 ]
  %1326 = phi float [ %1069, %1204 ], [ %1292, %1209 ]
  %1327 = phi float [ %1070, %1204 ], [ %1296, %1209 ]
  %1328 = phi float [ %1071, %1204 ], [ %1299, %1209 ]
  %1329 = phi float [ %1072, %1204 ], [ %1308, %1209 ]
  %1330 = phi float [ %1073, %1204 ], [ %1317, %1209 ]
  %1331 = phi float [ %1074, %1204 ], [ %1302, %1209 ]
  %1332 = phi float [ %1075, %1204 ], [ %1311, %1209 ]
  %1333 = phi float [ %1076, %1204 ], [ %1320, %1209 ]
  %1334 = phi float [ %1077, %1204 ], [ %1305, %1209 ]
  %1335 = phi float [ %1078, %1204 ], [ %1314, %1209 ]
  %1336 = phi float [ %1079, %1204 ], [ %1323, %1209 ]
  %1337 = fmul fast float %1328, %274
  %1338 = call float @dx.op.tertiary.f32(i32 46, float %1331, float %275, float %1337)  ; FMad(a,b,c)
  %1339 = call float @dx.op.tertiary.f32(i32 46, float %1334, float %276, float %1338)  ; FMad(a,b,c)
  %1340 = fmul fast float %1329, %274
  %1341 = call float @dx.op.tertiary.f32(i32 46, float %1332, float %275, float %1340)  ; FMad(a,b,c)
  %1342 = call float @dx.op.tertiary.f32(i32 46, float %1335, float %276, float %1341)  ; FMad(a,b,c)
  %1343 = fmul fast float %1330, %274
  %1344 = call float @dx.op.tertiary.f32(i32 46, float %1333, float %275, float %1343)  ; FMad(a,b,c)
  %1345 = call float @dx.op.tertiary.f32(i32 46, float %1336, float %276, float %1344)  ; FMad(a,b,c)
  %1346 = fmul fast float %1328, %279
  %1347 = call float @dx.op.tertiary.f32(i32 46, float %1331, float %280, float %1346)  ; FMad(a,b,c)
  %1348 = call float @dx.op.tertiary.f32(i32 46, float %1334, float %281, float %1347)  ; FMad(a,b,c)
  %1349 = fmul fast float %1329, %279
  %1350 = call float @dx.op.tertiary.f32(i32 46, float %1332, float %280, float %1349)  ; FMad(a,b,c)
  %1351 = call float @dx.op.tertiary.f32(i32 46, float %1335, float %281, float %1350)  ; FMad(a,b,c)
  %1352 = fmul fast float %1330, %279
  %1353 = call float @dx.op.tertiary.f32(i32 46, float %1333, float %280, float %1352)  ; FMad(a,b,c)
  %1354 = call float @dx.op.tertiary.f32(i32 46, float %1336, float %281, float %1353)  ; FMad(a,b,c)
  %1355 = fmul fast float %1328, %269
  %1356 = call float @dx.op.tertiary.f32(i32 46, float %1331, float %270, float %1355)  ; FMad(a,b,c)
  %1357 = call float @dx.op.tertiary.f32(i32 46, float %1334, float %271, float %1356)  ; FMad(a,b,c)
  %1358 = fmul fast float %1329, %269
  %1359 = call float @dx.op.tertiary.f32(i32 46, float %1332, float %270, float %1358)  ; FMad(a,b,c)
  %1360 = call float @dx.op.tertiary.f32(i32 46, float %1335, float %271, float %1359)  ; FMad(a,b,c)
  %1361 = fmul fast float %1330, %269
  %1362 = call float @dx.op.tertiary.f32(i32 46, float %1333, float %270, float %1361)  ; FMad(a,b,c)
  %1363 = call float @dx.op.tertiary.f32(i32 46, float %1336, float %271, float %1362)  ; FMad(a,b,c)
  br label %1364

; <label>:1364                                    ; preds = %1324, %0
  %1365 = phi float [ %1325, %1324 ], [ %284, %0 ]
  %1366 = phi float [ %1326, %1324 ], [ %287, %0 ]
  %1367 = phi float [ %1327, %1324 ], [ %290, %0 ]
  %1368 = phi float [ %1357, %1324 ], [ %269, %0 ]
  %1369 = phi float [ %1360, %1324 ], [ %270, %0 ]
  %1370 = phi float [ %1363, %1324 ], [ %271, %0 ]
  %1371 = phi float [ %1339, %1324 ], [ %274, %0 ]
  %1372 = phi float [ %1342, %1324 ], [ %275, %0 ]
  %1373 = phi float [ %1345, %1324 ], [ %276, %0 ]
  %1374 = phi float [ %1348, %1324 ], [ %279, %0 ]
  %1375 = phi float [ %1351, %1324 ], [ %280, %0 ]
  %1376 = phi float [ %1354, %1324 ], [ %281, %0 ]
  %1377 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %9, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %1378 = extractvalue %dx.types.CBufRet.f32 %1377, 0
  %1379 = fcmp fast ogt float %1378, 5.000000e-01
  %1380 = icmp eq i32 %178, 0
  %1381 = and i1 %1380, %1379
  %1382 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %15, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1383 = extractvalue %dx.types.CBufRet.f32 %1382, 1
  %1384 = fcmp fast ogt float %1383, 5.000000e-01
  %1385 = and i1 %1381, %1384
  br i1 %1385, label %1386, label %1655

; <label>:1386                                    ; preds = %1364
  %1387 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %1388 = extractvalue %dx.types.CBufRet.f32 %1387, 3
  %1389 = fcmp fast ogt float %1388, 0.000000e+00
  %1390 = xor i1 %1389, true
  %1391 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %9, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %1392 = extractvalue %dx.types.CBufRet.f32 %1391, 0
  %1393 = fcmp fast olt float %1392, 5.000000e-01
  %1394 = and i1 %1393, %1390
  %1395 = select i1 %1394, float %1371, float %1368
  %1396 = select i1 %1394, float %1372, float %1369
  %1397 = select i1 %1394, float %1373, float %1370
  %1398 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1399 = extractvalue %dx.types.CBufRet.f32 %1398, 0
  %1400 = extractvalue %dx.types.CBufRet.f32 %1398, 1
  %1401 = fadd fast float %1399, %70
  %1402 = fadd fast float %1400, %71
  %1403 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %9, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1404 = extractvalue %dx.types.CBufRet.i32 %1403, 0
  %1405 = add i32 %1404, 0
  %1406 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 %1405, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %1407 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1408 = extractvalue %dx.types.CBufRet.f32 %1407, 0
  %1409 = fdiv fast float 1.000000e+00, %1408
  %1410 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %1411 = extractvalue %dx.types.CBufRet.f32 %1410, 0
  %1412 = extractvalue %dx.types.CBufRet.f32 %1410, 1
  %1413 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1414 = extractvalue %dx.types.CBufRet.f32 %1413, 0
  %1415 = extractvalue %dx.types.CBufRet.f32 %1413, 1
  %1416 = extractvalue %dx.types.CBufRet.f32 %1413, 2
  %1417 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %1418 = extractvalue %dx.types.CBufRet.f32 %1417, 3
  %1419 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %1420 = extractvalue %dx.types.CBufRet.f32 %1419, 2
  %1421 = extractvalue %dx.types.CBufRet.f32 %1417, 0
  %1422 = extractvalue %dx.types.CBufRet.f32 %1417, 1
  %1423 = extractvalue %dx.types.CBufRet.f32 %1419, 0
  %1424 = extractvalue %dx.types.CBufRet.f32 %1419, 1
  br i1 %1389, label %1425, label %1466

; <label>:1425                                    ; preds = %1386
  %1426 = fmul fast float %1408, %1367
  %1427 = call float @dx.op.binary.f32(i32 35, float %1426, float 0.000000e+00)  ; FMax(a,b)
  %1428 = fmul fast float %1427, %1427
  %1429 = fadd fast float %1428, %1427
  %1430 = fmul fast float %1429, 5.000000e-01
  %1431 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1406, %dx.types.Handle %7, float %1401, float %1402, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1432 = extractvalue %dx.types.ResRet.f32 %1431, 0
  %1433 = fadd fast float %1432, -5.000000e-01
  %1434 = fmul fast float %1412, %1433
  %1435 = fmul fast float %1418, %17
  %1436 = fmul fast float %1418, %18
  %1437 = fadd fast float %1435, %70
  %1438 = fadd fast float %1436, %71
  %1439 = fmul fast float %1430, %1409
  %1440 = fmul fast float %1439, %1420
  %1441 = fadd fast float %1437, %1421
  %1442 = fadd fast float %1441, %1440
  %1443 = fadd fast float %1438, %1422
  %1444 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1406, %dx.types.Handle %7, float %1442, float %1443, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1445 = extractvalue %dx.types.ResRet.f32 %1444, 0
  %1446 = fadd fast float %1445, -5.000000e-01
  %1447 = fmul fast float %1424, %1446
  %1448 = fadd fast float %1434, %1411
  %1449 = fadd fast float %1448, %1423
  %1450 = fadd fast float %1449, %1447
  %1451 = fmul fast float %1439, %1450
  %1452 = fmul fast float %1451, 0x3FEBD70A40000000
  %1453 = fmul fast float %1451, %1414
  %1454 = fmul fast float %1451, %1415
  %1455 = fmul fast float %1451, %1416
  %1456 = fadd fast float %1453, %1365
  %1457 = fadd fast float %1454, %1366
  %1458 = fadd fast float %1455, %1367
  %1459 = fsub fast float %1458, %1452
  %1460 = fsub fast float %1395, %1453
  %1461 = fsub fast float %1396, %1454
  %1462 = call float @dx.op.dot3.f32(i32 55, float %1460, float %1461, float %1397, float %1460, float %1461, float %1397)  ; Dot3(ax,ay,az,bx,by,bz)
  %1463 = call float @dx.op.unary.f32(i32 25, float %1462)  ; Rsqrt(value)
  %1464 = fmul fast float %1460, %1463
  %1465 = fmul fast float %1461, %1463
  br label %1641

; <label>:1466                                    ; preds = %1386
  %1467 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1406, %dx.types.Handle %7, float %1401, float %1402, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1468 = extractvalue %dx.types.ResRet.f32 %1467, 0
  %1469 = extractvalue %dx.types.ResRet.f32 %1467, 3
  %1470 = fadd fast float %1468, -5.000000e-01
  %1471 = fadd fast float %1469, -5.000000e-01
  %1472 = extractvalue %dx.types.CBufRet.f32 %1398, 3
  %1473 = fmul fast float %1472, %1409
  %1474 = fsub fast float %1367, %1473
  %1475 = call float @dx.op.binary.f32(i32 35, float %1474, float 0.000000e+00)  ; FMax(a,b)
  %1476 = fmul fast float %1408, %1475
  %1477 = extractvalue %dx.types.CBufRet.f32 %1410, 2
  %1478 = fadd fast float %1477, %1477
  %1479 = fmul fast float %1478, %1471
  %1480 = fsub fast float %1479, %1477
  %1481 = fmul fast float %1480, %1476
  %1482 = call float @dx.op.unary.f32(i32 13, float %1481)  ; Sin(value)
  %1483 = call float @dx.op.unary.f32(i32 12, float %1481)  ; Cos(value)
  %1484 = fdiv fast float 5.000000e-01, %1408
  %1485 = fmul fast float %1476, %1476
  %1486 = fmul fast float %1412, %1470
  %1487 = fadd fast float %1486, %1411
  %1488 = fmul fast float %1485, %1484
  %1489 = fmul fast float %1488, %1487
  %1490 = fmul fast float %1489, 2.500000e-01
  %1491 = fmul fast float %1489, %1414
  %1492 = fmul fast float %1489, %1415
  %1493 = fadd fast float %1491, %1365
  %1494 = fadd fast float %1492, %1366
  %1495 = extractvalue %dx.types.CBufRet.f32 %1410, 3
  %1496 = fmul fast float %70, 0x40883AB860000000
  %1497 = call float @dx.op.unary.f32(i32 22, float %1496)  ; Frc(value)
  %1498 = fadd fast float %1495, %1497
  %1499 = fmul fast float %1498, 7.000000e+00
  %1500 = call float @dx.op.unary.f32(i32 13, float %1499)  ; Sin(value)
  %1501 = fmul fast float %1485, 5.000000e-01
  %1502 = fmul fast float %1501, %1484
  %1503 = fmul fast float %1502, %1500
  %1504 = fmul fast float %1503, %1412
  %1505 = fmul fast float %1504, %1415
  %1506 = fmul fast float %1504, %1414
  %1507 = fsub fast float %1493, %1505
  %1508 = fadd fast float %1494, %1506
  %1509 = fmul fast float %1507, %1483
  %1510 = call float @dx.op.tertiary.f32(i32 46, float %1508, float %1482, float %1509)  ; FMad(a,b,c)
  %1511 = fmul fast float %1482, %1507
  %1512 = fsub fast float -0.000000e+00, %1511
  %1513 = call float @dx.op.tertiary.f32(i32 46, float %1508, float %1483, float %1512)  ; FMad(a,b,c)
  %1514 = fsub fast float %1367, %1490
  %1515 = fmul fast float %1367, 0x40191EB860000000
  %1516 = fmul fast float %1515, %1408
  %1517 = call float @dx.op.unary.f32(i32 13, float %1516)  ; Sin(value)
  %1518 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %1519 = extractvalue %dx.types.CBufRet.f32 %1518, 0
  %1520 = fmul fast float %1519, %1414
  %1521 = fmul fast float %1519, %1415
  %1522 = fmul fast float %1519, %1416
  %1523 = fadd fast float %1520, %1395
  %1524 = fadd fast float %1521, %1396
  %1525 = fadd fast float %1522, %1397
  %1526 = extractvalue %dx.types.CBufRet.f32 %1407, 2
  %1527 = fmul fast float %1526, %20
  %1528 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %1529 = extractvalue %dx.types.CBufRet.f32 %1528, 3
  %1530 = fmul fast float %1529, %1510
  %1531 = fmul fast float %1529, %1513
  %1532 = fadd fast float %1530, %70
  %1533 = fadd fast float %1531, %71
  %1534 = extractvalue %dx.types.CBufRet.f32 %1528, 0
  %1535 = extractvalue %dx.types.CBufRet.f32 %1528, 1
  %1536 = fadd fast float %1532, %1534
  %1537 = fadd fast float %1533, %1535
  %1538 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1406, %dx.types.Handle %7, float %1536, float %1537, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1539 = extractvalue %dx.types.ResRet.f32 %1538, 1
  %1540 = fadd fast float %1539, 5.000000e-01
  %1541 = fmul fast float %1527, %1540
  %1542 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %1543 = extractvalue %dx.types.CBufRet.f32 %1542, 1
  %1544 = fmul fast float %1541, %1543
  %1545 = fmul fast float %1544, %1523
  %1546 = fmul fast float %1544, %1524
  %1547 = fmul fast float %1544, %1525
  %1548 = fadd fast float %1545, %1510
  %1549 = fadd fast float %1546, %1513
  %1550 = fadd fast float %1514, %1547
  %1551 = fmul fast float %1544, %1414
  %1552 = fmul fast float %1544, %1415
  %1553 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %1554 = extractvalue %dx.types.CBufRet.f32 %1553, 3
  %1555 = fmul fast float %1551, %1554
  %1556 = fmul fast float %1552, %1554
  %1557 = fadd fast float %1555, %1395
  %1558 = fadd fast float %1556, %1396
  %1559 = call float @dx.op.dot3.f32(i32 55, float %1557, float %1558, float %1397, float %1557, float %1558, float %1397)  ; Dot3(ax,ay,az,bx,by,bz)
  %1560 = call float @dx.op.unary.f32(i32 25, float %1559)  ; Rsqrt(value)
  %1561 = fmul fast float %1557, %1560
  %1562 = fmul fast float %1558, %1560
  %1563 = extractvalue %dx.types.CBufRet.f32 %1407, 1
  %1564 = call float @dx.op.dot3.f32(i32 55, float %17, float %18, float %19, float %17, float %18, float %19)  ; Dot3(ax,ay,az,bx,by,bz)
  %1565 = call float @dx.op.unary.f32(i32 25, float %1564)  ; Rsqrt(value)
  %1566 = fmul fast float %1565, %17
  %1567 = fmul fast float %1565, %18
  %1568 = fmul fast float %1565, %19
  %1569 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1570 = extractvalue %dx.types.CBufRet.f32 %1569, 3
  %1571 = call float @dx.op.dot3.f32(i32 55, float %1566, float %1567, float %1568, float %1414, float %1415, float %1416)  ; Dot3(ax,ay,az,bx,by,bz)
  %1572 = call float @dx.op.unary.f32(i32 6, float %1571)  ; FAbs(value)
  %1573 = fsub fast float 1.000000e+00, %1570
  %1574 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1575 = extractvalue %dx.types.CBufRet.f32 %1574, 3
  %1576 = fmul fast float %1575, %1572
  %1577 = fadd fast float %1576, -1.000000e+00
  %1578 = fmul fast float %1577, %1573
  %1579 = fadd fast float %1578, 1.000000e+00
  %1580 = fmul fast float %1418, %21
  %1581 = fmul fast float %1418, %22
  %1582 = fadd fast float %1580, %70
  %1583 = fadd fast float %1581, %71
  %1584 = fmul fast float %1420, %1517
  %1585 = fadd fast float %1582, %1584
  %1586 = fadd fast float %1585, %1421
  %1587 = fadd fast float %1583, %1422
  %1588 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1406, %dx.types.Handle %7, float %1586, float %1587, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1589 = extractvalue %dx.types.ResRet.f32 %1588, 1
  %1590 = fmul fast float %1572, %1570
  %1591 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1592 = extractvalue %dx.types.CBufRet.f32 %1591, 3
  %1593 = fsub fast float %1592, %1416
  %1594 = fmul fast float %1414, %1590
  %1595 = fmul fast float %1415, %1590
  %1596 = fmul fast float %1593, %1590
  %1597 = fsub fast float %1414, %1594
  %1598 = fsub fast float %1415, %1595
  %1599 = fadd fast float %1596, %1416
  %1600 = call float @dx.op.dot3.f32(i32 55, float %1597, float %1598, float %1599, float %1597, float %1598, float %1599)  ; Dot3(ax,ay,az,bx,by,bz)
  %1601 = call float @dx.op.unary.f32(i32 25, float %1600)  ; Rsqrt(value)
  %1602 = fmul fast float %1597, %1601
  %1603 = fmul fast float %1598, %1601
  %1604 = fmul fast float %1599, %1601
  %1605 = fmul fast float %1424, %1589
  %1606 = fadd fast float %1605, %1423
  %1607 = fmul fast float %23, %1563
  %1608 = fmul fast float %1607, %1579
  %1609 = fmul fast float %1608, %1606
  %1610 = fmul fast float %1609, 0x3FE23D70A0000000
  %1611 = fmul fast float %1609, %1602
  %1612 = fmul fast float %1609, %1603
  %1613 = fmul fast float %1609, %1604
  %1614 = fadd fast float %1548, %1611
  %1615 = fadd fast float %1549, %1612
  %1616 = fadd fast float %1550, %1613
  %1617 = fmul fast float %1604, %1567
  %1618 = fmul fast float %1603, %1568
  %1619 = fsub fast float %1617, %1618
  %1620 = fmul fast float %1602, %1568
  %1621 = fmul fast float %1604, %1566
  %1622 = fsub fast float %1620, %1621
  %1623 = fmul fast float %1603, %1566
  %1624 = fmul fast float %1602, %1567
  %1625 = fsub fast float %1623, %1624
  %1626 = fmul fast float %1622, %1604
  %1627 = fmul fast float %1625, %1603
  %1628 = fsub fast float %1626, %1627
  %1629 = fmul fast float %1625, %1602
  %1630 = fmul fast float %1619, %1604
  %1631 = fsub fast float %1629, %1630
  %1632 = fmul fast float %1619, %1603
  %1633 = fmul fast float %1622, %1602
  %1634 = fsub fast float %1632, %1633
  %1635 = fmul fast float %1610, %1628
  %1636 = fmul fast float %1610, %1631
  %1637 = fmul fast float %1610, %1634
  %1638 = fadd fast float %1614, %1635
  %1639 = fadd fast float %1615, %1636
  %1640 = fadd fast float %1616, %1637
  br label %1641

; <label>:1641                                    ; preds = %1466, %1425
  %1642 = phi float [ %1464, %1425 ], [ %1561, %1466 ]
  %1643 = phi float [ %1465, %1425 ], [ %1562, %1466 ]
  %1644 = phi float [ %1463, %1425 ], [ %1560, %1466 ]
  %1645 = phi float [ %1456, %1425 ], [ %1638, %1466 ]
  %1646 = phi float [ %1457, %1425 ], [ %1639, %1466 ]
  %1647 = phi float [ %1459, %1425 ], [ %1640, %1466 ]
  %1648 = fmul float %1397, %1644
  %1649 = select i1 %1394, float %1642, float %1371
  %1650 = select i1 %1394, float %1643, float %1372
  %1651 = select i1 %1394, float %1648, float %1373
  %1652 = select i1 %1394, float %1368, float %1642
  %1653 = select i1 %1394, float %1369, float %1643
  %1654 = select i1 %1394, float %1370, float %1648
  br label %1655

; <label>:1655                                    ; preds = %1641, %1364
  %1656 = phi float [ %1645, %1641 ], [ %1365, %1364 ]
  %1657 = phi float [ %1646, %1641 ], [ %1366, %1364 ]
  %1658 = phi float [ %1647, %1641 ], [ %1367, %1364 ]
  %1659 = phi float [ %1652, %1641 ], [ %1368, %1364 ]
  %1660 = phi float [ %1653, %1641 ], [ %1369, %1364 ]
  %1661 = phi float [ %1654, %1641 ], [ %1370, %1364 ]
  %1662 = phi float [ %1649, %1641 ], [ %1371, %1364 ]
  %1663 = phi float [ %1650, %1641 ], [ %1372, %1364 ]
  %1664 = phi float [ %1651, %1641 ], [ %1373, %1364 ]
  %1665 = fadd fast float %1656, %70
  %1666 = fadd fast float %1657, %71
  %1667 = fadd fast float %1658, %78
  %1668 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %14, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1669 = extractvalue %dx.types.CBufRet.f32 %1668, 0
  %1670 = extractvalue %dx.types.CBufRet.f32 %1668, 1
  %1671 = extractvalue %dx.types.CBufRet.f32 %1668, 2
  %1672 = extractvalue %dx.types.CBufRet.f32 %1668, 3
  %1673 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %14, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1674 = extractvalue %dx.types.CBufRet.f32 %1673, 0
  %1675 = extractvalue %dx.types.CBufRet.f32 %1673, 1
  %1676 = extractvalue %dx.types.CBufRet.f32 %1673, 2
  %1677 = extractvalue %dx.types.CBufRet.f32 %1673, 3
  %1678 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %14, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1679 = extractvalue %dx.types.CBufRet.f32 %1678, 0
  %1680 = extractvalue %dx.types.CBufRet.f32 %1678, 1
  %1681 = extractvalue %dx.types.CBufRet.f32 %1678, 2
  %1682 = extractvalue %dx.types.CBufRet.f32 %1678, 3
  %1683 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %14, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1684 = extractvalue %dx.types.CBufRet.f32 %1683, 0
  %1685 = extractvalue %dx.types.CBufRet.f32 %1683, 1
  %1686 = extractvalue %dx.types.CBufRet.f32 %1683, 2
  %1687 = extractvalue %dx.types.CBufRet.f32 %1683, 3
  %1688 = fmul fast float %1669, %1665
  %1689 = call float @dx.op.tertiary.f32(i32 46, float %1666, float %1670, float %1688)  ; FMad(a,b,c)
  %1690 = call float @dx.op.tertiary.f32(i32 46, float %1667, float %1671, float %1689)  ; FMad(a,b,c)
  %1691 = fadd fast float %1690, %1672
  %1692 = fmul fast float %1674, %1665
  %1693 = call float @dx.op.tertiary.f32(i32 46, float %1666, float %1675, float %1692)  ; FMad(a,b,c)
  %1694 = call float @dx.op.tertiary.f32(i32 46, float %1667, float %1676, float %1693)  ; FMad(a,b,c)
  %1695 = fadd fast float %1694, %1677
  %1696 = fmul fast float %1679, %1665
  %1697 = call float @dx.op.tertiary.f32(i32 46, float %1666, float %1680, float %1696)  ; FMad(a,b,c)
  %1698 = call float @dx.op.tertiary.f32(i32 46, float %1667, float %1681, float %1697)  ; FMad(a,b,c)
  %1699 = fadd fast float %1698, %1682
  %1700 = fmul fast float %1684, %1665
  %1701 = call float @dx.op.tertiary.f32(i32 46, float %1666, float %1685, float %1700)  ; FMad(a,b,c)
  %1702 = call float @dx.op.tertiary.f32(i32 46, float %1667, float %1686, float %1701)  ; FMad(a,b,c)
  %1703 = fadd fast float %1702, %1687
  %1704 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %14, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %1705 = extractvalue %dx.types.CBufRet.f32 %1704, 0
  %1706 = extractvalue %dx.types.CBufRet.f32 %1704, 1
  %1707 = extractvalue %dx.types.CBufRet.f32 %1704, 2
  %1708 = extractvalue %dx.types.CBufRet.f32 %1704, 3
  %1709 = call float @dx.op.dot4.f32(i32 56, float %1705, float %1706, float %1707, float %1708, float %1665, float %1666, float %1667, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %1691)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %1695)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %1699)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %1703)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %35)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %36)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %1659)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %1660)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %1661)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %1374)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %1375)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float %1376)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %1662)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %1663)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %1664)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %25)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %26)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float %27)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float %1665)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float %1666)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 0, float %1667)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 1, float %266)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 0, float %70)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 1, float %71)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 2, float %78)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 0, float %85)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 1, float %86)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 2, float %90)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 8, i32 0, i8 0, float %1709)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!26}
!dx.entryPoints = !{!27}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{!5, null, !13, !22}
!5 = !{!6, !8, !9, !10, !12}
!6 = !{i32 0, [32768 x %"class.Texture2D<vector<float, 4> >"]* undef, !"", i32 1, i32 0, i32 32768, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 53, i32 1, i32 4, i32 0, !7}
!9 = !{i32 2, %"class.Texture3D<float>"* undef, !"", i32 0, i32 54, i32 1, i32 4, i32 0, !7}
!10 = !{i32 3, %"class.StructuredBuffer<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 77, i32 1, i32 12, i32 0, !11}
!11 = !{i32 1, i32 16}
!12 = !{i32 4, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 78, i32 1, i32 11, i32 0, null}
!13 = !{!14, !15, !16, !17, !18, !19, !20, !21}
!14 = !{i32 0, %MaterialModifiersConsts* undef, !"", i32 0, i32 7, i32 1, i32 496, null}
!15 = !{i32 1, %hostlayout.CameraShaderConsts* undef, !"", i32 0, i32 1, i32 1, i32 848, null}
!16 = !{i32 2, %hostlayout.SharedPixelConsts* undef, !"", i32 0, i32 12, i32 1, i32 1584, null}
!17 = !{i32 3, %hostlayout.FrequentVertexConsts* undef, !"", i32 0, i32 5, i32 1, i32 112, null}
!18 = !{i32 4, %hostlayout.CSConstants* undef, !"", i32 0, i32 13, i32 1, i32 928, null}
!19 = !{i32 5, %AutoSpawnCB* undef, !"", i32 0, i32 9, i32 1, i32 16, null}
!20 = !{i32 6, %ShaderSpecificConstants* undef, !"", i32 0, i32 4, i32 1, i32 100, null}
!21 = !{i32 7, %WindDynamicsCB* undef, !"", i32 0, i32 8, i32 1, i32 416, null}
!22 = !{!23, !24, !25}
!23 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!24 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 8, i32 1, i32 0, null}
!25 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 11, i32 1, i32 0, null}
!26 = !{[100 x i32] [i32 49, i32 33, i32 1867727, i32 1, i32 1867727, i32 1, i32 3964879, i32 1, i32 0, i32 0, i32 16, i32 0, i32 32, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1867727, i32 1, i32 1867727, i32 1, i32 1867727, i32 1, i32 0, i32 0, i32 1867727, i32 1, i32 1867727, i32 1, i32 1867727, i32 1, i32 3584, i32 0, i32 32768, i32 0, i32 65536, i32 0, i32 131072, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1867727, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1835023, i32 1, i32 1835023, i32 1, i32 0, i32 0, i32 1835023, i32 1, i32 1864143, i32 1, i32 1864143, i32 1, i32 1835023, i32 1, i32 1864143, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1998356431, i32 1]}
!27 = !{void ()* @vs_main_, !"vs_main_", !28, !4, !64}
!28 = !{!29, !50, null}
!29 = !{!30, !33, !35, !36, !38, !39, !41, !43, !45, !47, !49}
!30 = !{i32 0, !"POSITION", i8 9, i8 0, !31, i8 0, i32 1, i8 3, i32 0, i8 0, !32}
!31 = !{i32 0}
!32 = !{i32 3, i32 7}
!33 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !31, i8 0, i32 1, i8 2, i32 1, i8 0, !34}
!34 = !{i32 3, i32 3}
!35 = !{i32 2, !"NORMAL", i8 9, i8 0, !31, i8 0, i32 1, i8 3, i32 2, i8 0, !32}
!36 = !{i32 3, !"TANGENT", i8 9, i8 0, !31, i8 0, i32 1, i8 4, i32 3, i8 0, !37}
!37 = !{i32 3, i32 15}
!38 = !{i32 4, !"COLOR", i8 9, i8 0, !31, i8 0, i32 1, i8 4, i32 4, i8 0, !32}
!39 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !40, i8 0, i32 1, i8 2, i32 5, i8 0, null}
!40 = !{i32 1}
!41 = !{i32 6, !"EXTRA_DATA", i8 9, i8 0, !31, i8 0, i32 1, i8 4, i32 6, i8 0, !42}
!42 = !{i32 3, i32 1}
!43 = !{i32 7, !"EXTRA_DATA", i8 9, i8 0, !40, i8 0, i32 1, i8 4, i32 7, i8 0, !44}
!44 = !{i32 3, i32 11}
!45 = !{i32 8, !"EXTRA_DATA", i8 9, i8 0, !46, i8 0, i32 1, i8 4, i32 8, i8 0, !37}
!46 = !{i32 2}
!47 = !{i32 9, !"INSTANCE_TRANSFORM", i8 9, i8 0, !48, i8 0, i32 3, i8 4, i32 9, i8 0, null}
!48 = !{i32 0, i32 1, i32 2}
!49 = !{i32 10, !"SV_InstanceID", i8 5, i8 2, !31, i8 0, i32 1, i8 1, i32 12, i8 0, !42}
!50 = !{!51, !52, !53, !54, !55, !57, !59, !61, !63}
!51 = !{i32 0, !"SV_Position", i8 9, i8 3, !31, i8 4, i32 1, i8 4, i32 0, i8 0, !37}
!52 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !31, i8 2, i32 1, i8 4, i32 1, i8 0, !37}
!53 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !40, i8 2, i32 1, i8 4, i32 2, i8 0, !37}
!54 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !46, i8 2, i32 1, i8 4, i32 3, i8 0, !37}
!55 = !{i32 4, !"TEXCOORD", i8 9, i8 0, !56, i8 2, i32 1, i8 4, i32 4, i8 0, !37}
!56 = !{i32 3}
!57 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !58, i8 2, i32 1, i8 2, i32 5, i8 0, !34}
!58 = !{i32 4}
!59 = !{i32 6, !"TEXCOORD", i8 9, i8 0, !60, i8 1, i32 1, i8 3, i32 6, i8 0, !32}
!60 = !{i32 5}
!61 = !{i32 7, !"TEXCOORD", i8 9, i8 0, !62, i8 1, i32 1, i8 3, i32 7, i8 0, !32}
!62 = !{i32 6}
!63 = !{i32 8, !"SV_ClipDistance", i8 9, i8 6, !31, i8 2, i32 1, i8 1, i32 8, i8 0, !42}
!64 = !{i32 0, i64 16}
!65 = distinct !{!65, !"dx.controlflow.hints", i32 1}
!66 = distinct !{!66, !"dx.controlflow.hints", i32 1}
!67 = distinct !{!67, !"dx.controlflow.hints", i32 1}
 