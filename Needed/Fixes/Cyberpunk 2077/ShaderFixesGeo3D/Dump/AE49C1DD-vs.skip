;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; POSITION                 0   xyz         0     NONE   float   xyz 
; COLOR                    0   xyzw        1     NONE   float   xyzw
; TEXCOORD                 0   xyz         2     NONE   float   xyz 
; TEXCOORD                 1   xy          3     NONE   float   xy  
; TEXCOORD                 2   xy          4     NONE   float   xy  
; TEXCOORD                 3   xyz         5     NONE   float   xyz 
; TEXCOORD                 4   x           6     NONE   float   x   
; TEXCOORD                 5   x           7     NONE   float   x   
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; TEXCOORD                 0   xyzw        1     NONE   float   xyzw
; TEXCOORD                 1   xyzw        2     NONE   float   xyzw
; TEXCOORD                 2   xyzw        3     NONE   float   xyzw
; TEXCOORD                 3   xy          4     NONE   float   xy  
; SV_ClipDistance          0   x           5  CLIPDST   float   x   
;
; shader hash: b3ee8320f238275b54982f2fe192a1fc
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; POSITION                 0                              
; COLOR                    0                              
; TEXCOORD                 0                              
; TEXCOORD                 1                              
; TEXCOORD                 2                              
; TEXCOORD                 3                              
; TEXCOORD                 4                              
; TEXCOORD                 5                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; TEXCOORD                 3                 linear       
; SV_ClipDistance          0                 linear       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [496 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [476 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [848 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [112 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb7     1
;                                   cbuffer      NA          NA     CB1            cb0     1
;                                   cbuffer      NA          NA     CB2            cb1     1
;                                   cbuffer      NA          NA     CB3            cb5     1
;
;
; ViewId state:
;
; Number of inputs: 29, outputs: 21
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2, 8, 9, 12, 13, 20, 21, 22, 24, 28 }
;   output 1 depends on inputs: { 0, 1, 2, 8, 9, 12, 13, 20, 21, 22, 24, 28 }
;   output 2 depends on inputs: { 0, 1, 2, 8, 9, 12, 13, 20, 21, 22, 24, 28 }
;   output 3 depends on inputs: { 0, 1, 2, 8, 9, 12, 13, 20, 21, 22, 24, 28 }
;   output 4 depends on inputs: { 16 }
;   output 5 depends on inputs: { 17 }
;   output 6 depends on inputs: { 0, 1, 2, 8, 9, 12, 13, 20, 21, 22, 24, 28 }
;   output 7 depends on inputs: { 10 }
;   output 8 depends on inputs: { 4 }
;   output 9 depends on inputs: { 5 }
;   output 10 depends on inputs: { 6 }
;   output 11 depends on inputs: { 7 }
;   output 12 depends on inputs: { 0, 1, 2, 20, 21, 22 }
;   output 13 depends on inputs: { 0, 1, 2, 20, 21, 22 }
;   output 14 depends on inputs: { 0, 1, 2, 20, 21, 22 }
;   output 15 depends on inputs: { 0, 1, 2, 8, 9, 12, 13, 20, 21, 22, 24, 28 }
;   output 16 depends on inputs: { 0, 1, 2, 8, 9, 12, 13, 20, 21, 22, 24, 28 }
;   output 17 depends on inputs: { 0, 1, 2, 8, 9, 12, 13, 20, 21, 22, 24, 28 }
;   output 20 depends on inputs: { 0, 1, 2, 8, 9, 12, 13, 20, 21, 22, 24, 28 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%MaterialModifiersConsts = type { [31 x <4 x float>] }
%GlobalShaderConsts = type { <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, float, float, float, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, i32, float, [6 x <4 x float>], <4 x float>, <2 x i32>, i32, i32, float, i32, i32 }
%hostlayout.CameraShaderConsts = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, i32, i32, <2 x i32>, float, float }
%hostlayout.FrequentVertexConsts = type { [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float> }

define void @vs_main_() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 3, i32 5, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 2, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 1, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 7, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %20 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %21 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %22 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %23 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %24 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %25 = extractvalue %dx.types.CBufRet.f32 %24, 0
  %26 = extractvalue %dx.types.CBufRet.f32 %24, 1
  %27 = extractvalue %dx.types.CBufRet.f32 %24, 2
  %28 = extractvalue %dx.types.CBufRet.f32 %24, 3
  %29 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %30 = extractvalue %dx.types.CBufRet.f32 %29, 0
  %31 = extractvalue %dx.types.CBufRet.f32 %29, 1
  %32 = extractvalue %dx.types.CBufRet.f32 %29, 2
  %33 = extractvalue %dx.types.CBufRet.f32 %29, 3
  %34 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %35 = extractvalue %dx.types.CBufRet.f32 %34, 0
  %36 = extractvalue %dx.types.CBufRet.f32 %34, 1
  %37 = extractvalue %dx.types.CBufRet.f32 %34, 2
  %38 = extractvalue %dx.types.CBufRet.f32 %34, 3
  %39 = bitcast float %28 to i32
  %40 = bitcast float %33 to i32
  %41 = bitcast float %38 to i32
  %42 = sitofp i32 %39 to float
  %43 = sitofp i32 %40 to float
  %44 = sitofp i32 %41 to float
  %45 = fmul fast float %42, 0x3EE0000000000000
  %46 = fmul fast float %43, 0x3EE0000000000000
  %47 = fmul fast float %44, 0x3EE0000000000000
  %48 = fmul fast float %25, %21
  %49 = call float @dx.op.tertiary.f32(i32 46, float %22, float %26, float %48)  ; FMad(a,b,c)
  %50 = call float @dx.op.tertiary.f32(i32 46, float %23, float %27, float %49)  ; FMad(a,b,c)
  %51 = fadd fast float %45, %50
  %52 = fmul fast float %30, %21
  %53 = call float @dx.op.tertiary.f32(i32 46, float %22, float %31, float %52)  ; FMad(a,b,c)
  %54 = call float @dx.op.tertiary.f32(i32 46, float %23, float %32, float %53)  ; FMad(a,b,c)
  %55 = fadd fast float %54, %46
  %56 = fmul fast float %35, %21
  %57 = call float @dx.op.tertiary.f32(i32 46, float %22, float %36, float %56)  ; FMad(a,b,c)
  %58 = call float @dx.op.tertiary.f32(i32 46, float %23, float %37, float %57)  ; FMad(a,b,c)
  %59 = fadd fast float %58, %47
  %60 = fadd fast float %15, %14
  %61 = fsub fast float %14, %15
  %62 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 36)  ; CBufferLoadLegacy(handle,regIndex)
  %63 = extractvalue %dx.types.CBufRet.f32 %62, 0
  %64 = extractvalue %dx.types.CBufRet.f32 %62, 1
  %65 = extractvalue %dx.types.CBufRet.f32 %62, 2
  %66 = fsub fast float %63, %51
  %67 = fsub fast float %64, %55
  %68 = fsub fast float %65, %59
  %69 = call float @dx.op.dot3.f32(i32 55, float %66, float %67, float %68, float %66, float %67, float %68)  ; Dot3(ax,ay,az,bx,by,bz)
  %70 = call float @dx.op.unary.f32(i32 25, float %69)  ; Rsqrt(value)
  %71 = call float @dx.op.dot3.f32(i32 55, float %7, float %8, float %9, float %7, float %8, float %9)  ; Dot3(ax,ay,az,bx,by,bz)
  %72 = call float @dx.op.unary.f32(i32 25, float %71)  ; Rsqrt(value)
  %73 = fmul fast float %72, %7
  %74 = fmul fast float %72, %8
  %75 = fmul fast float %72, %9
  %76 = fmul fast float %25, %73
  %77 = call float @dx.op.tertiary.f32(i32 46, float %74, float %26, float %76)  ; FMad(a,b,c)
  %78 = call float @dx.op.tertiary.f32(i32 46, float %75, float %27, float %77)  ; FMad(a,b,c)
  %79 = fmul fast float %30, %73
  %80 = call float @dx.op.tertiary.f32(i32 46, float %74, float %31, float %79)  ; FMad(a,b,c)
  %81 = call float @dx.op.tertiary.f32(i32 46, float %75, float %32, float %80)  ; FMad(a,b,c)
  %82 = fmul fast float %35, %73
  %83 = call float @dx.op.tertiary.f32(i32 46, float %74, float %36, float %82)  ; FMad(a,b,c)
  %84 = call float @dx.op.tertiary.f32(i32 46, float %75, float %37, float %83)  ; FMad(a,b,c)
  %85 = fmul fast float %70, %66
  %86 = fsub fast float -0.000000e+00, %85
  %87 = fmul fast float %70, %67
  %88 = fsub fast float -0.000000e+00, %87
  %89 = fmul fast float %70, %68
  %90 = fsub fast float -0.000000e+00, %89
  %91 = fmul fast float %84, %88
  %92 = fmul fast float %81, %90
  %93 = fsub fast float %91, %92
  %94 = fmul fast float %78, %90
  %95 = fmul fast float %84, %86
  %96 = fsub fast float %94, %95
  %97 = fmul fast float %81, %86
  %98 = fmul fast float %78, %88
  %99 = fsub fast float %97, %98
  %100 = call float @dx.op.dot3.f32(i32 55, float %93, float %96, float %99, float %93, float %96, float %99)  ; Dot3(ax,ay,az,bx,by,bz)
  %101 = call float @dx.op.unary.f32(i32 25, float %100)  ; Rsqrt(value)
  %102 = fmul fast float %93, %101
  %103 = fmul fast float %96, %101
  %104 = fmul fast float %101, %99
  %105 = fmul fast float %6, %5
  %106 = fadd fast float %105, 1.000000e+00
  %107 = fmul fast float %13, %106
  %108 = fmul fast float %107, %60
  %109 = fmul fast float %108, %78
  %110 = fmul fast float %108, %81
  %111 = fmul fast float %108, %84
  %112 = fmul fast float %61, %12
  %113 = fmul fast float %112, %102
  %114 = fmul fast float %112, %103
  %115 = fmul fast float %112, %104
  %116 = fadd fast float %109, %51
  %117 = fadd fast float %110, %55
  %118 = fadd fast float %111, %59
  %119 = fadd fast float %116, %113
  %120 = fadd fast float %117, %114
  %121 = fadd fast float %118, %115
  %122 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %123 = extractvalue %dx.types.CBufRet.f32 %122, 0
  %124 = extractvalue %dx.types.CBufRet.f32 %122, 1
  %125 = extractvalue %dx.types.CBufRet.f32 %122, 2
  %126 = extractvalue %dx.types.CBufRet.f32 %122, 3
  %127 = fmul fast float %119, %123
  %128 = call float @dx.op.tertiary.f32(i32 46, float %120, float %124, float %127)  ; FMad(a,b,c)
  %129 = call float @dx.op.tertiary.f32(i32 46, float %121, float %125, float %128)  ; FMad(a,b,c)
  %130 = fadd fast float %129, %126
  %131 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %132 = extractvalue %dx.types.CBufRet.f32 %131, 0
  %133 = extractvalue %dx.types.CBufRet.f32 %131, 1
  %134 = extractvalue %dx.types.CBufRet.f32 %131, 2
  %135 = extractvalue %dx.types.CBufRet.f32 %131, 3
  %136 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %137 = extractvalue %dx.types.CBufRet.f32 %136, 0
  %138 = extractvalue %dx.types.CBufRet.f32 %136, 1
  %139 = extractvalue %dx.types.CBufRet.f32 %136, 2
  %140 = extractvalue %dx.types.CBufRet.f32 %136, 3
  %141 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %142 = extractvalue %dx.types.CBufRet.f32 %141, 0
  %143 = extractvalue %dx.types.CBufRet.f32 %141, 1
  %144 = extractvalue %dx.types.CBufRet.f32 %141, 2
  %145 = extractvalue %dx.types.CBufRet.f32 %141, 3
  %146 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %147 = extractvalue %dx.types.CBufRet.f32 %146, 0
  %148 = extractvalue %dx.types.CBufRet.f32 %146, 1
  %149 = extractvalue %dx.types.CBufRet.f32 %146, 2
  %150 = extractvalue %dx.types.CBufRet.f32 %146, 3
  %151 = fmul fast float %132, %119
  %152 = call float @dx.op.tertiary.f32(i32 46, float %120, float %133, float %151)  ; FMad(a,b,c)
  %153 = call float @dx.op.tertiary.f32(i32 46, float %121, float %134, float %152)  ; FMad(a,b,c)
  %154 = fadd fast float %153, %135
  %155 = fmul fast float %137, %119
  %156 = call float @dx.op.tertiary.f32(i32 46, float %120, float %138, float %155)  ; FMad(a,b,c)
  %157 = call float @dx.op.tertiary.f32(i32 46, float %121, float %139, float %156)  ; FMad(a,b,c)
  %158 = fadd fast float %157, %140
  %159 = fmul fast float %142, %119
  %160 = call float @dx.op.tertiary.f32(i32 46, float %120, float %143, float %159)  ; FMad(a,b,c)
  %161 = call float @dx.op.tertiary.f32(i32 46, float %121, float %144, float %160)  ; FMad(a,b,c)
  %162 = fadd fast float %161, %145
  %163 = fmul fast float %147, %119
  %164 = call float @dx.op.tertiary.f32(i32 46, float %120, float %148, float %163)  ; FMad(a,b,c)
  %165 = call float @dx.op.tertiary.f32(i32 46, float %121, float %149, float %164)  ; FMad(a,b,c)
  %166 = fadd fast float %165, %150
  %167 = fsub fast float -0.000000e+00, %78
  %168 = fsub fast float -0.000000e+00, %81
  %169 = fsub fast float -0.000000e+00, %84
  %170 = call float @dx.op.dot3.f32(i32 55, float %167, float %168, float %169, float %167, float %168, float %169)  ; Dot3(ax,ay,az,bx,by,bz)
  %171 = call float @dx.op.unary.f32(i32 25, float %170)  ; Rsqrt(value)
  %172 = fmul fast float %171, %167
  %173 = fmul fast float %171, %168
  %174 = fmul fast float %171, %169
  %175 = fsub fast float -0.000000e+00, %102
  %176 = fsub fast float -0.000000e+00, %103
  %177 = fsub fast float -0.000000e+00, %104
  %178 = call float @dx.op.dot3.f32(i32 55, float %175, float %176, float %177, float %175, float %176, float %177)  ; Dot3(ax,ay,az,bx,by,bz)
  %179 = call float @dx.op.unary.f32(i32 25, float %178)  ; Rsqrt(value)
  %180 = fmul fast float %179, %175
  %181 = fmul fast float %179, %176
  %182 = fmul fast float %179, %177
  %183 = fmul fast float %181, %174
  %184 = fmul fast float %182, %173
  %185 = fsub fast float %183, %184
  %186 = fmul fast float %182, %172
  %187 = fmul fast float %180, %174
  %188 = fsub fast float %186, %187
  %189 = fmul fast float %180, %173
  %190 = fmul fast float %181, %172
  %191 = fsub fast float %189, %190
  %192 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %193 = extractvalue %dx.types.CBufRet.f32 %192, 0
  %194 = fcmp fast ogt float %193, 5.000000e-01
  %195 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %196 = extractvalue %dx.types.CBufRet.i32 %195, 1
  %197 = icmp eq i32 %196, 2
  %198 = and i1 %194, %197
  br i1 %198, label %199, label %200, !dx.controlflow.hints !39

; <label>:199                                     ; preds = %0
  br label %200

; <label>:200                                     ; preds = %199, %0
  %201 = phi float [ 0.000000e+00, %199 ], [ %154, %0 ]
  %202 = phi float [ 0.000000e+00, %199 ], [ %158, %0 ]
  %203 = phi float [ 0.000000e+00, %199 ], [ %162, %0 ]
  %204 = phi float [ 1.000000e+00, %199 ], [ %166, %0 ]
  %205 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %206 = extractvalue %dx.types.CBufRet.f32 %205, 0
  %207 = extractvalue %dx.types.CBufRet.f32 %205, 1
  %208 = extractvalue %dx.types.CBufRet.f32 %205, 2
  %209 = extractvalue %dx.types.CBufRet.f32 %205, 3
  %210 = call float @dx.op.dot4.f32(i32 56, float %206, float %207, float %208, float %209, float %119, float %120, float %121, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %201)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %202)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %203)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %204)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %10)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %11)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %130)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %16)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %17)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %18)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %19)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float %20)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %185)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %188)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %191)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %119)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %120)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float %121)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 0, float %210)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!10}
!dx.entryPoints = !{!11}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{null, null, !5, null}
!5 = !{!6, !7, !8, !9}
!6 = !{i32 0, %MaterialModifiersConsts* undef, !"", i32 0, i32 7, i32 1, i32 496, null}
!7 = !{i32 1, %GlobalShaderConsts* undef, !"", i32 0, i32 0, i32 1, i32 476, null}
!8 = !{i32 2, %hostlayout.CameraShaderConsts* undef, !"", i32 0, i32 1, i32 1, i32 848, null}
!9 = !{i32 3, %hostlayout.FrequentVertexConsts* undef, !"", i32 0, i32 5, i32 1, i32 112, null}
!10 = !{[31 x i32] [i32 29, i32 21, i32 1306703, i32 1306703, i32 1306703, i32 0, i32 256, i32 512, i32 1024, i32 2048, i32 1278031, i32 1278031, i32 128, i32 0, i32 1278031, i32 1278031, i32 0, i32 0, i32 16, i32 32, i32 0, i32 0, i32 1306703, i32 1306703, i32 1306703, i32 0, i32 1278031, i32 0, i32 0, i32 0, i32 1278031]}
!11 = !{void ()* @vs_main_, !"vs_main_", !12, !4, null}
!12 = !{!13, !32, null}
!13 = !{!14, !17, !19, !20, !23, !25, !27, !30}
!14 = !{i32 0, !"POSITION", i8 9, i8 0, !15, i8 0, i32 1, i8 3, i32 0, i8 0, !16}
!15 = !{i32 0}
!16 = !{i32 3, i32 7}
!17 = !{i32 1, !"COLOR", i8 9, i8 0, !15, i8 0, i32 1, i8 4, i32 1, i8 0, !18}
!18 = !{i32 3, i32 15}
!19 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !15, i8 0, i32 1, i8 3, i32 2, i8 0, !16}
!20 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !21, i8 0, i32 1, i8 2, i32 3, i8 0, !22}
!21 = !{i32 1}
!22 = !{i32 3, i32 3}
!23 = !{i32 4, !"TEXCOORD", i8 9, i8 0, !24, i8 0, i32 1, i8 2, i32 4, i8 0, !22}
!24 = !{i32 2}
!25 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !26, i8 0, i32 1, i8 3, i32 5, i8 0, !16}
!26 = !{i32 3}
!27 = !{i32 6, !"TEXCOORD", i8 9, i8 0, !28, i8 0, i32 1, i8 1, i32 6, i8 0, !29}
!28 = !{i32 4}
!29 = !{i32 3, i32 1}
!30 = !{i32 7, !"TEXCOORD", i8 9, i8 0, !31, i8 0, i32 1, i8 1, i32 7, i8 0, !29}
!31 = !{i32 5}
!32 = !{!33, !34, !35, !36, !37, !38}
!33 = !{i32 0, !"SV_Position", i8 9, i8 3, !15, i8 4, i32 1, i8 4, i32 0, i8 0, !18}
!34 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !15, i8 2, i32 1, i8 4, i32 1, i8 0, !18}
!35 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !21, i8 2, i32 1, i8 4, i32 2, i8 0, !18}
!36 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !24, i8 2, i32 1, i8 4, i32 3, i8 0, !18}
!37 = !{i32 4, !"TEXCOORD", i8 9, i8 0, !26, i8 2, i32 1, i8 2, i32 4, i8 0, !22}
!38 = !{i32 5, !"SV_ClipDistance", i8 9, i8 6, !15, i8 2, i32 1, i8 1, i32 5, i8 0, !29}
!39 = distinct !{!39, !"dx.controlflow.hints", i32 1}
 