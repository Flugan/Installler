;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; POSITION                 0   xyz         0     NONE   float   xyz 
; BLENDINDICES             0   xyzw        1     NONE    uint   xyzw
; BLENDWEIGHT              0   xyzw        2     NONE   float   xyzw
; BLENDINDICES             1   xyzw        3     NONE    uint   xyzw
; BLENDWEIGHT              1   xyzw        4     NONE   float   xyzw
; TEXCOORD                 0   xy          5     NONE   float   xy  
; NORMAL                   0   xyz         6     NONE   float   xyz 
; TANGENT                  0   xyzw        7     NONE   float   xyzw
; COLOR                    0   xyzw        8     NONE   float   xyzw
; TEXCOORD                 1   xy          9     NONE   float       
; INSTANCE_TRANSFORM       0   xyzw       10     NONE   float   xyzw
; INSTANCE_TRANSFORM       1   xyzw       11     NONE   float   xyzw
; INSTANCE_TRANSFORM       2   xyzw       12     NONE   float   xyzw
; INSTANCE_SKINNING_DATA     0   xyzw       13     NONE    uint   xyz 
; SV_VertexID              0   x          14   VERTID    uint       
; LIGHT_BLOCKER_INTENSITY     0   x          15     NONE   float   x   
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; TEXCOORD                 0   xyzw        1     NONE   float   xyzw
; TEXCOORD                 1   xyzw        2     NONE   float   xyzw
; TEXCOORD                 2   xyzw        3     NONE   float   xyzw
; TEXCOORD                 3   xyzw        4     NONE   float   xyzw
; TEXCOORD                 4   xyzw        5     NONE   float   xyzw
; TEXCOORD                 5   xyzw        6     NONE   float   xyzw
; TEXCOORD                 6   xyzw        7     NONE   float   xyzw
; TEXCOORD                 7   xy          8     NONE   float   xy  
; SV_ClipDistance          0   x           9  CLIPDST   float   x   
;
; shader hash: 576e8acd137de6da6d248a10f930ce28
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; POSITION                 0                              
; BLENDINDICES             0                              
; BLENDWEIGHT              0                              
; BLENDINDICES             1                              
; BLENDWEIGHT              1                              
; TEXCOORD                 0                              
; NORMAL                   0                              
; TANGENT                  0                              
; COLOR                    0                              
; TEXCOORD                 1                              
; INSTANCE_TRANSFORM       0                              
; INSTANCE_SKINNING_DATA     0                              
; SV_VertexID              0                              
; LIGHT_BLOCKER_INTENSITY     0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; TEXCOORD                 3                 linear       
; TEXCOORD                 4                 linear       
; TEXCOORD                 5                 linear       
; TEXCOORD                 6                 linear       
; TEXCOORD                 7                 linear       
; SV_ClipDistance          0                 linear       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [496 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [848 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [5760 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [640 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [112 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb7     1
;                                   cbuffer      NA          NA     CB1            cb1     1
;                                   cbuffer      NA          NA     CB2            cb8     1
;                                   cbuffer      NA          NA     CB3            cb9     1
;                                   cbuffer      NA          NA     CB4            cb5     1
;                                   texture    byte         r/o      T0            t10     1
;
;
; ViewId state:
;
; Number of inputs: 61, outputs: 37
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 1 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 2 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 3 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 4 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 5 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 6 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 7 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 28, 29, 30, 31, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 8 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 28, 29, 30, 31, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 9 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 28, 29, 30, 31, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 10 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 11 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 12 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 13 depends on inputs: { 20 }
;   output 14 depends on inputs: { 21 }
;   output 15 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 52, 53 }
;   output 16 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 44, 45, 46, 47, 52, 53 }
;   output 17 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 48, 49, 50, 51, 52, 53 }
;   output 18 depends on inputs: { 32 }
;   output 19 depends on inputs: { 33 }
;   output 20 depends on inputs: { 34 }
;   output 21 depends on inputs: { 35 }
;   output 22 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 23 depends on inputs: { 20, 21 }
;   output 24 depends on inputs: { 20, 21 }
;   output 25 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 26 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 27 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 28 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 29 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 53, 54 }
;   output 30 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 53, 54 }
;   output 31 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 53, 54 }
;   output 32 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 53, 54 }
;   output 33 depends on inputs: { 60 }
;   output 36 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%struct.ByteAddressBuffer = type { i32 }
%MaterialModifiersConsts = type { [31 x <4 x float>] }
%hostlayout.CameraShaderConsts = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, i32, i32, <2 x i32>, float, float }
%TextureRegionsCB = type { [40 x %struct.SRegion] }
%struct.SRegion = type { i32, float, float, [4 x <4 x float>], [4 x <4 x float>] }
%FloatTracksDataCB = type { [40 x <4 x float>] }
%hostlayout.FrequentVertexConsts = type { [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float> }

define void @vs_main_() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 10, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 4, i32 5, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 3, i32 9, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 2, i32 8, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 7, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 13, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call i32 @dx.op.loadInput.i32(i32 4, i32 11, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call i32 @dx.op.loadInput.i32(i32 4, i32 11, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call i32 @dx.op.loadInput.i32(i32 4, i32 11, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %20 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %21 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %22 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %23 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %24 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %25 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %26 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %27 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %28 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %29 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %30 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %31 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %32 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %33 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %34 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %35 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %36 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %37 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %38 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %39 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %40 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %41 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %42 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %43 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %44 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %45 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %46 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %47 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %48 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %49 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %50 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %51 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %52 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %53 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %54 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %55 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %56 = extractvalue %dx.types.CBufRet.i32 %55, 0
  %57 = extractvalue %dx.types.CBufRet.i32 %55, 1
  %58 = extractvalue %dx.types.CBufRet.i32 %55, 2
  %59 = bitcast float %46 to i32
  %60 = bitcast float %50 to i32
  %61 = bitcast float %54 to i32
  %62 = sub i32 %59, %56
  %63 = sub i32 %60, %57
  %64 = sub i32 %61, %58
  %65 = sitofp i32 %62 to float
  %66 = sitofp i32 %63 to float
  %67 = sitofp i32 %64 to float
  %68 = fmul fast float %65, 0x3EE0000000000000
  %69 = fmul fast float %66, 0x3EE0000000000000
  %70 = fmul fast float %67, 0x3EE0000000000000
  %71 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %72 = extractvalue %dx.types.CBufRet.f32 %71, 0
  %73 = extractvalue %dx.types.CBufRet.f32 %71, 1
  %74 = extractvalue %dx.types.CBufRet.f32 %71, 2
  %75 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %76 = extractvalue %dx.types.CBufRet.f32 %75, 0
  %77 = extractvalue %dx.types.CBufRet.f32 %75, 1
  %78 = extractvalue %dx.types.CBufRet.f32 %75, 2
  %79 = fmul fast float %76, %40
  %80 = fmul fast float %77, %41
  %81 = fmul fast float %78, %42
  %82 = fadd fast float %79, %72
  %83 = fadd fast float %80, %73
  %84 = fadd fast float %81, %74
  %85 = call float @dx.op.dot4.f32(i32 56, float %32, float %33, float %34, float %35, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %86 = call float @dx.op.dot4.f32(i32 56, float %24, float %25, float %26, float %27, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %87 = fadd fast float %86, %85
  %88 = call float @dx.op.binary.f32(i32 35, float 0x3EE4F8B580000000, float %87)  ; FMax(a,b)
  %89 = fdiv fast float %32, %88
  %90 = fdiv fast float %33, %88
  %91 = fdiv fast float %34, %88
  %92 = fdiv fast float %35, %88
  %93 = fdiv fast float %24, %88
  %94 = fdiv fast float %25, %88
  %95 = fdiv fast float %26, %88
  %96 = fdiv fast float %27, %88
  %97 = mul i32 %36, %9
  %98 = add i32 %97, %8
  %99 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %98, i32 undef)  ; BufferLoad(srv,index,wot)
  %100 = extractvalue %dx.types.ResRet.i32 %99, 0
  %101 = extractvalue %dx.types.ResRet.i32 %99, 1
  %102 = extractvalue %dx.types.ResRet.i32 %99, 2
  %103 = extractvalue %dx.types.ResRet.i32 %99, 3
  %104 = bitcast i32 %100 to float
  %105 = bitcast i32 %101 to float
  %106 = bitcast i32 %102 to float
  %107 = bitcast i32 %103 to float
  %108 = add i32 %98, 16
  %109 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %108, i32 undef)  ; BufferLoad(srv,index,wot)
  %110 = extractvalue %dx.types.ResRet.i32 %109, 0
  %111 = extractvalue %dx.types.ResRet.i32 %109, 1
  %112 = extractvalue %dx.types.ResRet.i32 %109, 2
  %113 = extractvalue %dx.types.ResRet.i32 %109, 3
  %114 = bitcast i32 %110 to float
  %115 = bitcast i32 %111 to float
  %116 = bitcast i32 %112 to float
  %117 = bitcast i32 %113 to float
  %118 = add i32 %98, 32
  %119 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %118, i32 undef)  ; BufferLoad(srv,index,wot)
  %120 = extractvalue %dx.types.ResRet.i32 %119, 0
  %121 = extractvalue %dx.types.ResRet.i32 %119, 1
  %122 = extractvalue %dx.types.ResRet.i32 %119, 2
  %123 = extractvalue %dx.types.ResRet.i32 %119, 3
  %124 = bitcast i32 %120 to float
  %125 = bitcast i32 %121 to float
  %126 = bitcast i32 %122 to float
  %127 = bitcast i32 %123 to float
  %128 = mul i32 %28, %9
  %129 = add i32 %128, %8
  %130 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %129, i32 undef)  ; BufferLoad(srv,index,wot)
  %131 = extractvalue %dx.types.ResRet.i32 %130, 0
  %132 = extractvalue %dx.types.ResRet.i32 %130, 1
  %133 = extractvalue %dx.types.ResRet.i32 %130, 2
  %134 = extractvalue %dx.types.ResRet.i32 %130, 3
  %135 = bitcast i32 %131 to float
  %136 = bitcast i32 %132 to float
  %137 = bitcast i32 %133 to float
  %138 = bitcast i32 %134 to float
  %139 = add i32 %129, 16
  %140 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %139, i32 undef)  ; BufferLoad(srv,index,wot)
  %141 = extractvalue %dx.types.ResRet.i32 %140, 0
  %142 = extractvalue %dx.types.ResRet.i32 %140, 1
  %143 = extractvalue %dx.types.ResRet.i32 %140, 2
  %144 = extractvalue %dx.types.ResRet.i32 %140, 3
  %145 = bitcast i32 %141 to float
  %146 = bitcast i32 %142 to float
  %147 = bitcast i32 %143 to float
  %148 = bitcast i32 %144 to float
  %149 = add i32 %129, 32
  %150 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %149, i32 undef)  ; BufferLoad(srv,index,wot)
  %151 = extractvalue %dx.types.ResRet.i32 %150, 0
  %152 = extractvalue %dx.types.ResRet.i32 %150, 1
  %153 = extractvalue %dx.types.ResRet.i32 %150, 2
  %154 = extractvalue %dx.types.ResRet.i32 %150, 3
  %155 = bitcast i32 %151 to float
  %156 = bitcast i32 %152 to float
  %157 = bitcast i32 %153 to float
  %158 = bitcast i32 %154 to float
  %159 = fmul fast float %104, %89
  %160 = fmul fast float %114, %89
  %161 = fmul fast float %124, %89
  %162 = fmul fast float %105, %89
  %163 = fmul fast float %115, %89
  %164 = fmul fast float %125, %89
  %165 = fmul fast float %106, %89
  %166 = fmul fast float %116, %89
  %167 = fmul fast float %126, %89
  %168 = fmul fast float %107, %89
  %169 = fmul fast float %117, %89
  %170 = fmul fast float %127, %89
  %171 = fmul fast float %135, %93
  %172 = fmul fast float %145, %93
  %173 = fmul fast float %155, %93
  %174 = fmul fast float %136, %93
  %175 = fmul fast float %146, %93
  %176 = fmul fast float %156, %93
  %177 = fmul fast float %137, %93
  %178 = fmul fast float %147, %93
  %179 = fmul fast float %157, %93
  %180 = fmul fast float %138, %93
  %181 = fmul fast float %148, %93
  %182 = fmul fast float %158, %93
  %183 = fadd fast float %171, %159
  %184 = fadd fast float %172, %160
  %185 = fadd fast float %173, %161
  %186 = fadd fast float %174, %162
  %187 = fadd fast float %175, %163
  %188 = fadd fast float %176, %164
  %189 = fadd fast float %177, %165
  %190 = fadd fast float %178, %166
  %191 = fadd fast float %179, %167
  %192 = fadd fast float %180, %168
  %193 = fadd fast float %181, %169
  %194 = fadd fast float %182, %170
  %195 = mul i32 %37, %9
  %196 = add i32 %195, %8
  %197 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %196, i32 undef)  ; BufferLoad(srv,index,wot)
  %198 = extractvalue %dx.types.ResRet.i32 %197, 0
  %199 = extractvalue %dx.types.ResRet.i32 %197, 1
  %200 = extractvalue %dx.types.ResRet.i32 %197, 2
  %201 = extractvalue %dx.types.ResRet.i32 %197, 3
  %202 = bitcast i32 %198 to float
  %203 = bitcast i32 %199 to float
  %204 = bitcast i32 %200 to float
  %205 = bitcast i32 %201 to float
  %206 = add i32 %196, 16
  %207 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %206, i32 undef)  ; BufferLoad(srv,index,wot)
  %208 = extractvalue %dx.types.ResRet.i32 %207, 0
  %209 = extractvalue %dx.types.ResRet.i32 %207, 1
  %210 = extractvalue %dx.types.ResRet.i32 %207, 2
  %211 = extractvalue %dx.types.ResRet.i32 %207, 3
  %212 = bitcast i32 %208 to float
  %213 = bitcast i32 %209 to float
  %214 = bitcast i32 %210 to float
  %215 = bitcast i32 %211 to float
  %216 = add i32 %196, 32
  %217 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %216, i32 undef)  ; BufferLoad(srv,index,wot)
  %218 = extractvalue %dx.types.ResRet.i32 %217, 0
  %219 = extractvalue %dx.types.ResRet.i32 %217, 1
  %220 = extractvalue %dx.types.ResRet.i32 %217, 2
  %221 = extractvalue %dx.types.ResRet.i32 %217, 3
  %222 = bitcast i32 %218 to float
  %223 = bitcast i32 %219 to float
  %224 = bitcast i32 %220 to float
  %225 = bitcast i32 %221 to float
  %226 = mul i32 %29, %9
  %227 = add i32 %226, %8
  %228 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %227, i32 undef)  ; BufferLoad(srv,index,wot)
  %229 = extractvalue %dx.types.ResRet.i32 %228, 0
  %230 = extractvalue %dx.types.ResRet.i32 %228, 1
  %231 = extractvalue %dx.types.ResRet.i32 %228, 2
  %232 = extractvalue %dx.types.ResRet.i32 %228, 3
  %233 = bitcast i32 %229 to float
  %234 = bitcast i32 %230 to float
  %235 = bitcast i32 %231 to float
  %236 = bitcast i32 %232 to float
  %237 = add i32 %227, 16
  %238 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %237, i32 undef)  ; BufferLoad(srv,index,wot)
  %239 = extractvalue %dx.types.ResRet.i32 %238, 0
  %240 = extractvalue %dx.types.ResRet.i32 %238, 1
  %241 = extractvalue %dx.types.ResRet.i32 %238, 2
  %242 = extractvalue %dx.types.ResRet.i32 %238, 3
  %243 = bitcast i32 %239 to float
  %244 = bitcast i32 %240 to float
  %245 = bitcast i32 %241 to float
  %246 = bitcast i32 %242 to float
  %247 = add i32 %227, 32
  %248 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %247, i32 undef)  ; BufferLoad(srv,index,wot)
  %249 = extractvalue %dx.types.ResRet.i32 %248, 0
  %250 = extractvalue %dx.types.ResRet.i32 %248, 1
  %251 = extractvalue %dx.types.ResRet.i32 %248, 2
  %252 = extractvalue %dx.types.ResRet.i32 %248, 3
  %253 = bitcast i32 %249 to float
  %254 = bitcast i32 %250 to float
  %255 = bitcast i32 %251 to float
  %256 = bitcast i32 %252 to float
  %257 = fmul fast float %202, %90
  %258 = fmul fast float %212, %90
  %259 = fmul fast float %222, %90
  %260 = fmul fast float %203, %90
  %261 = fmul fast float %213, %90
  %262 = fmul fast float %223, %90
  %263 = fmul fast float %204, %90
  %264 = fmul fast float %214, %90
  %265 = fmul fast float %224, %90
  %266 = fmul fast float %205, %90
  %267 = fmul fast float %215, %90
  %268 = fmul fast float %225, %90
  %269 = fadd fast float %183, %257
  %270 = fadd fast float %184, %258
  %271 = fadd fast float %185, %259
  %272 = fadd fast float %186, %260
  %273 = fadd fast float %187, %261
  %274 = fadd fast float %188, %262
  %275 = fadd fast float %189, %263
  %276 = fadd fast float %190, %264
  %277 = fadd fast float %191, %265
  %278 = fadd fast float %192, %266
  %279 = fadd fast float %193, %267
  %280 = fadd fast float %194, %268
  %281 = fmul fast float %233, %94
  %282 = fmul fast float %243, %94
  %283 = fmul fast float %253, %94
  %284 = fmul fast float %234, %94
  %285 = fmul fast float %244, %94
  %286 = fmul fast float %254, %94
  %287 = fmul fast float %235, %94
  %288 = fmul fast float %245, %94
  %289 = fmul fast float %255, %94
  %290 = fmul fast float %236, %94
  %291 = fmul fast float %246, %94
  %292 = fmul fast float %256, %94
  %293 = fadd fast float %269, %281
  %294 = fadd fast float %270, %282
  %295 = fadd fast float %271, %283
  %296 = fadd fast float %272, %284
  %297 = fadd fast float %273, %285
  %298 = fadd fast float %274, %286
  %299 = fadd fast float %275, %287
  %300 = fadd fast float %276, %288
  %301 = fadd fast float %277, %289
  %302 = fadd fast float %278, %290
  %303 = fadd fast float %279, %291
  %304 = fadd fast float %280, %292
  %305 = mul i32 %38, %9
  %306 = add i32 %305, %8
  %307 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %306, i32 undef)  ; BufferLoad(srv,index,wot)
  %308 = extractvalue %dx.types.ResRet.i32 %307, 0
  %309 = extractvalue %dx.types.ResRet.i32 %307, 1
  %310 = extractvalue %dx.types.ResRet.i32 %307, 2
  %311 = extractvalue %dx.types.ResRet.i32 %307, 3
  %312 = bitcast i32 %308 to float
  %313 = bitcast i32 %309 to float
  %314 = bitcast i32 %310 to float
  %315 = bitcast i32 %311 to float
  %316 = add i32 %306, 16
  %317 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %316, i32 undef)  ; BufferLoad(srv,index,wot)
  %318 = extractvalue %dx.types.ResRet.i32 %317, 0
  %319 = extractvalue %dx.types.ResRet.i32 %317, 1
  %320 = extractvalue %dx.types.ResRet.i32 %317, 2
  %321 = extractvalue %dx.types.ResRet.i32 %317, 3
  %322 = bitcast i32 %318 to float
  %323 = bitcast i32 %319 to float
  %324 = bitcast i32 %320 to float
  %325 = bitcast i32 %321 to float
  %326 = add i32 %306, 32
  %327 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %326, i32 undef)  ; BufferLoad(srv,index,wot)
  %328 = extractvalue %dx.types.ResRet.i32 %327, 0
  %329 = extractvalue %dx.types.ResRet.i32 %327, 1
  %330 = extractvalue %dx.types.ResRet.i32 %327, 2
  %331 = extractvalue %dx.types.ResRet.i32 %327, 3
  %332 = bitcast i32 %328 to float
  %333 = bitcast i32 %329 to float
  %334 = bitcast i32 %330 to float
  %335 = bitcast i32 %331 to float
  %336 = mul i32 %30, %9
  %337 = add i32 %336, %8
  %338 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %337, i32 undef)  ; BufferLoad(srv,index,wot)
  %339 = extractvalue %dx.types.ResRet.i32 %338, 0
  %340 = extractvalue %dx.types.ResRet.i32 %338, 1
  %341 = extractvalue %dx.types.ResRet.i32 %338, 2
  %342 = extractvalue %dx.types.ResRet.i32 %338, 3
  %343 = bitcast i32 %339 to float
  %344 = bitcast i32 %340 to float
  %345 = bitcast i32 %341 to float
  %346 = bitcast i32 %342 to float
  %347 = add i32 %337, 16
  %348 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %347, i32 undef)  ; BufferLoad(srv,index,wot)
  %349 = extractvalue %dx.types.ResRet.i32 %348, 0
  %350 = extractvalue %dx.types.ResRet.i32 %348, 1
  %351 = extractvalue %dx.types.ResRet.i32 %348, 2
  %352 = extractvalue %dx.types.ResRet.i32 %348, 3
  %353 = bitcast i32 %349 to float
  %354 = bitcast i32 %350 to float
  %355 = bitcast i32 %351 to float
  %356 = bitcast i32 %352 to float
  %357 = add i32 %337, 32
  %358 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %357, i32 undef)  ; BufferLoad(srv,index,wot)
  %359 = extractvalue %dx.types.ResRet.i32 %358, 0
  %360 = extractvalue %dx.types.ResRet.i32 %358, 1
  %361 = extractvalue %dx.types.ResRet.i32 %358, 2
  %362 = extractvalue %dx.types.ResRet.i32 %358, 3
  %363 = bitcast i32 %359 to float
  %364 = bitcast i32 %360 to float
  %365 = bitcast i32 %361 to float
  %366 = bitcast i32 %362 to float
  %367 = fmul fast float %312, %91
  %368 = fmul fast float %322, %91
  %369 = fmul fast float %332, %91
  %370 = fmul fast float %313, %91
  %371 = fmul fast float %323, %91
  %372 = fmul fast float %333, %91
  %373 = fmul fast float %314, %91
  %374 = fmul fast float %324, %91
  %375 = fmul fast float %334, %91
  %376 = fmul fast float %315, %91
  %377 = fmul fast float %325, %91
  %378 = fmul fast float %335, %91
  %379 = fadd fast float %293, %367
  %380 = fadd fast float %294, %368
  %381 = fadd fast float %295, %369
  %382 = fadd fast float %296, %370
  %383 = fadd fast float %297, %371
  %384 = fadd fast float %298, %372
  %385 = fadd fast float %299, %373
  %386 = fadd fast float %300, %374
  %387 = fadd fast float %301, %375
  %388 = fadd fast float %302, %376
  %389 = fadd fast float %303, %377
  %390 = fadd fast float %304, %378
  %391 = fmul fast float %343, %95
  %392 = fmul fast float %353, %95
  %393 = fmul fast float %363, %95
  %394 = fmul fast float %344, %95
  %395 = fmul fast float %354, %95
  %396 = fmul fast float %364, %95
  %397 = fmul fast float %345, %95
  %398 = fmul fast float %355, %95
  %399 = fmul fast float %365, %95
  %400 = fmul fast float %346, %95
  %401 = fmul fast float %356, %95
  %402 = fmul fast float %366, %95
  %403 = fadd fast float %379, %391
  %404 = fadd fast float %380, %392
  %405 = fadd fast float %381, %393
  %406 = fadd fast float %382, %394
  %407 = fadd fast float %383, %395
  %408 = fadd fast float %384, %396
  %409 = fadd fast float %385, %397
  %410 = fadd fast float %386, %398
  %411 = fadd fast float %387, %399
  %412 = fadd fast float %388, %400
  %413 = fadd fast float %389, %401
  %414 = fadd fast float %390, %402
  %415 = mul i32 %39, %9
  %416 = add i32 %415, %8
  %417 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %416, i32 undef)  ; BufferLoad(srv,index,wot)
  %418 = extractvalue %dx.types.ResRet.i32 %417, 0
  %419 = extractvalue %dx.types.ResRet.i32 %417, 1
  %420 = extractvalue %dx.types.ResRet.i32 %417, 2
  %421 = extractvalue %dx.types.ResRet.i32 %417, 3
  %422 = bitcast i32 %418 to float
  %423 = bitcast i32 %419 to float
  %424 = bitcast i32 %420 to float
  %425 = bitcast i32 %421 to float
  %426 = add i32 %416, 16
  %427 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %426, i32 undef)  ; BufferLoad(srv,index,wot)
  %428 = extractvalue %dx.types.ResRet.i32 %427, 0
  %429 = extractvalue %dx.types.ResRet.i32 %427, 1
  %430 = extractvalue %dx.types.ResRet.i32 %427, 2
  %431 = extractvalue %dx.types.ResRet.i32 %427, 3
  %432 = bitcast i32 %428 to float
  %433 = bitcast i32 %429 to float
  %434 = bitcast i32 %430 to float
  %435 = bitcast i32 %431 to float
  %436 = add i32 %416, 32
  %437 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %436, i32 undef)  ; BufferLoad(srv,index,wot)
  %438 = extractvalue %dx.types.ResRet.i32 %437, 0
  %439 = extractvalue %dx.types.ResRet.i32 %437, 1
  %440 = extractvalue %dx.types.ResRet.i32 %437, 2
  %441 = extractvalue %dx.types.ResRet.i32 %437, 3
  %442 = bitcast i32 %438 to float
  %443 = bitcast i32 %439 to float
  %444 = bitcast i32 %440 to float
  %445 = bitcast i32 %441 to float
  %446 = mul i32 %31, %9
  %447 = add i32 %446, %8
  %448 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %447, i32 undef)  ; BufferLoad(srv,index,wot)
  %449 = extractvalue %dx.types.ResRet.i32 %448, 0
  %450 = extractvalue %dx.types.ResRet.i32 %448, 1
  %451 = extractvalue %dx.types.ResRet.i32 %448, 2
  %452 = extractvalue %dx.types.ResRet.i32 %448, 3
  %453 = bitcast i32 %449 to float
  %454 = bitcast i32 %450 to float
  %455 = bitcast i32 %451 to float
  %456 = bitcast i32 %452 to float
  %457 = add i32 %447, 16
  %458 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %457, i32 undef)  ; BufferLoad(srv,index,wot)
  %459 = extractvalue %dx.types.ResRet.i32 %458, 0
  %460 = extractvalue %dx.types.ResRet.i32 %458, 1
  %461 = extractvalue %dx.types.ResRet.i32 %458, 2
  %462 = extractvalue %dx.types.ResRet.i32 %458, 3
  %463 = bitcast i32 %459 to float
  %464 = bitcast i32 %460 to float
  %465 = bitcast i32 %461 to float
  %466 = bitcast i32 %462 to float
  %467 = add i32 %447, 32
  %468 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %467, i32 undef)  ; BufferLoad(srv,index,wot)
  %469 = extractvalue %dx.types.ResRet.i32 %468, 0
  %470 = extractvalue %dx.types.ResRet.i32 %468, 1
  %471 = extractvalue %dx.types.ResRet.i32 %468, 2
  %472 = extractvalue %dx.types.ResRet.i32 %468, 3
  %473 = bitcast i32 %469 to float
  %474 = bitcast i32 %470 to float
  %475 = bitcast i32 %471 to float
  %476 = bitcast i32 %472 to float
  %477 = fmul fast float %422, %92
  %478 = fmul fast float %432, %92
  %479 = fmul fast float %442, %92
  %480 = fmul fast float %423, %92
  %481 = fmul fast float %433, %92
  %482 = fmul fast float %443, %92
  %483 = fmul fast float %424, %92
  %484 = fmul fast float %434, %92
  %485 = fmul fast float %444, %92
  %486 = fmul fast float %425, %92
  %487 = fmul fast float %435, %92
  %488 = fmul fast float %445, %92
  %489 = fadd fast float %403, %477
  %490 = fadd fast float %404, %478
  %491 = fadd fast float %405, %479
  %492 = fadd fast float %406, %480
  %493 = fadd fast float %407, %481
  %494 = fadd fast float %408, %482
  %495 = fadd fast float %409, %483
  %496 = fadd fast float %410, %484
  %497 = fadd fast float %411, %485
  %498 = fadd fast float %412, %486
  %499 = fadd fast float %413, %487
  %500 = fadd fast float %414, %488
  %501 = fmul fast float %453, %96
  %502 = fmul fast float %463, %96
  %503 = fmul fast float %473, %96
  %504 = fmul fast float %454, %96
  %505 = fmul fast float %464, %96
  %506 = fmul fast float %474, %96
  %507 = fmul fast float %455, %96
  %508 = fmul fast float %465, %96
  %509 = fmul fast float %475, %96
  %510 = fmul fast float %456, %96
  %511 = fmul fast float %466, %96
  %512 = fmul fast float %476, %96
  %513 = fadd fast float %489, %501
  %514 = fadd fast float %490, %502
  %515 = fadd fast float %491, %503
  %516 = fadd fast float %492, %504
  %517 = fadd fast float %493, %505
  %518 = fadd fast float %494, %506
  %519 = fadd fast float %495, %507
  %520 = fadd fast float %496, %508
  %521 = fadd fast float %497, %509
  %522 = fadd fast float %498, %510
  %523 = fadd fast float %499, %511
  %524 = fadd fast float %500, %512
  %525 = fmul fast float %513, %82
  %526 = call float @dx.op.tertiary.f32(i32 46, float %83, float %516, float %525)  ; FMad(a,b,c)
  %527 = call float @dx.op.tertiary.f32(i32 46, float %84, float %519, float %526)  ; FMad(a,b,c)
  %528 = fadd fast float %522, %527
  %529 = fmul fast float %514, %82
  %530 = call float @dx.op.tertiary.f32(i32 46, float %83, float %517, float %529)  ; FMad(a,b,c)
  %531 = call float @dx.op.tertiary.f32(i32 46, float %84, float %520, float %530)  ; FMad(a,b,c)
  %532 = fadd fast float %523, %531
  %533 = fmul fast float %515, %82
  %534 = call float @dx.op.tertiary.f32(i32 46, float %83, float %518, float %533)  ; FMad(a,b,c)
  %535 = call float @dx.op.tertiary.f32(i32 46, float %84, float %521, float %534)  ; FMad(a,b,c)
  %536 = fadd fast float %524, %535
  %537 = fmul fast float %528, %43
  %538 = call float @dx.op.tertiary.f32(i32 46, float %532, float %44, float %537)  ; FMad(a,b,c)
  %539 = call float @dx.op.tertiary.f32(i32 46, float %536, float %45, float %538)  ; FMad(a,b,c)
  %540 = fadd fast float %539, %68
  %541 = fmul fast float %528, %47
  %542 = call float @dx.op.tertiary.f32(i32 46, float %532, float %48, float %541)  ; FMad(a,b,c)
  %543 = call float @dx.op.tertiary.f32(i32 46, float %536, float %49, float %542)  ; FMad(a,b,c)
  %544 = fadd fast float %543, %69
  %545 = fmul fast float %528, %51
  %546 = call float @dx.op.tertiary.f32(i32 46, float %532, float %52, float %545)  ; FMad(a,b,c)
  %547 = call float @dx.op.tertiary.f32(i32 46, float %536, float %53, float %546)  ; FMad(a,b,c)
  %548 = fadd fast float %547, %70
  %549 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %550 = extractvalue %dx.types.CBufRet.f32 %549, 0
  %551 = extractvalue %dx.types.CBufRet.f32 %549, 1
  %552 = extractvalue %dx.types.CBufRet.f32 %549, 2
  %553 = extractvalue %dx.types.CBufRet.f32 %549, 3
  %554 = fmul fast float %550, %540
  %555 = call float @dx.op.tertiary.f32(i32 46, float %544, float %551, float %554)  ; FMad(a,b,c)
  %556 = call float @dx.op.tertiary.f32(i32 46, float %548, float %552, float %555)  ; FMad(a,b,c)
  %557 = fadd fast float %556, %553
  %558 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 37)  ; CBufferLoadLegacy(handle,regIndex)
  %559 = extractvalue %dx.types.CBufRet.f32 %558, 0
  %560 = extractvalue %dx.types.CBufRet.f32 %558, 1
  %561 = extractvalue %dx.types.CBufRet.f32 %558, 2
  %562 = fadd fast float %559, %540
  %563 = fadd fast float %560, %544
  %564 = fadd fast float %561, %548
  %565 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %566 = extractvalue %dx.types.CBufRet.f32 %565, 0
  %567 = extractvalue %dx.types.CBufRet.f32 %565, 1
  %568 = extractvalue %dx.types.CBufRet.f32 %565, 2
  %569 = extractvalue %dx.types.CBufRet.f32 %565, 3
  %570 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %571 = extractvalue %dx.types.CBufRet.f32 %570, 0
  %572 = extractvalue %dx.types.CBufRet.f32 %570, 1
  %573 = extractvalue %dx.types.CBufRet.f32 %570, 2
  %574 = extractvalue %dx.types.CBufRet.f32 %570, 3
  %575 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %576 = extractvalue %dx.types.CBufRet.f32 %575, 0
  %577 = extractvalue %dx.types.CBufRet.f32 %575, 1
  %578 = extractvalue %dx.types.CBufRet.f32 %575, 2
  %579 = extractvalue %dx.types.CBufRet.f32 %575, 3
  %580 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %581 = extractvalue %dx.types.CBufRet.f32 %580, 0
  %582 = extractvalue %dx.types.CBufRet.f32 %580, 1
  %583 = extractvalue %dx.types.CBufRet.f32 %580, 2
  %584 = extractvalue %dx.types.CBufRet.f32 %580, 3
  %585 = fmul fast float %566, %540
  %586 = call float @dx.op.tertiary.f32(i32 46, float %544, float %567, float %585)  ; FMad(a,b,c)
  %587 = call float @dx.op.tertiary.f32(i32 46, float %548, float %568, float %586)  ; FMad(a,b,c)
  %588 = fadd fast float %587, %569
  %589 = fmul fast float %571, %540
  %590 = call float @dx.op.tertiary.f32(i32 46, float %544, float %572, float %589)  ; FMad(a,b,c)
  %591 = call float @dx.op.tertiary.f32(i32 46, float %548, float %573, float %590)  ; FMad(a,b,c)
  %592 = fadd fast float %591, %574
  %593 = fmul fast float %576, %540
  %594 = call float @dx.op.tertiary.f32(i32 46, float %544, float %577, float %593)  ; FMad(a,b,c)
  %595 = call float @dx.op.tertiary.f32(i32 46, float %548, float %578, float %594)  ; FMad(a,b,c)
  %596 = fadd fast float %595, %579
  %597 = fmul fast float %581, %540
  %598 = call float @dx.op.tertiary.f32(i32 46, float %544, float %582, float %597)  ; FMad(a,b,c)
  %599 = call float @dx.op.tertiary.f32(i32 46, float %548, float %583, float %598)  ; FMad(a,b,c)
  %600 = fadd fast float %599, %584
  %601 = add i32 %97, %10
  %602 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %601, i32 undef)  ; BufferLoad(srv,index,wot)
  %603 = extractvalue %dx.types.ResRet.i32 %602, 0
  %604 = extractvalue %dx.types.ResRet.i32 %602, 1
  %605 = extractvalue %dx.types.ResRet.i32 %602, 2
  %606 = extractvalue %dx.types.ResRet.i32 %602, 3
  %607 = bitcast i32 %603 to float
  %608 = bitcast i32 %604 to float
  %609 = bitcast i32 %605 to float
  %610 = bitcast i32 %606 to float
  %611 = add i32 %601, 16
  %612 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %611, i32 undef)  ; BufferLoad(srv,index,wot)
  %613 = extractvalue %dx.types.ResRet.i32 %612, 0
  %614 = extractvalue %dx.types.ResRet.i32 %612, 1
  %615 = extractvalue %dx.types.ResRet.i32 %612, 2
  %616 = extractvalue %dx.types.ResRet.i32 %612, 3
  %617 = bitcast i32 %613 to float
  %618 = bitcast i32 %614 to float
  %619 = bitcast i32 %615 to float
  %620 = bitcast i32 %616 to float
  %621 = add i32 %601, 32
  %622 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %621, i32 undef)  ; BufferLoad(srv,index,wot)
  %623 = extractvalue %dx.types.ResRet.i32 %622, 0
  %624 = extractvalue %dx.types.ResRet.i32 %622, 1
  %625 = extractvalue %dx.types.ResRet.i32 %622, 2
  %626 = extractvalue %dx.types.ResRet.i32 %622, 3
  %627 = bitcast i32 %623 to float
  %628 = bitcast i32 %624 to float
  %629 = bitcast i32 %625 to float
  %630 = bitcast i32 %626 to float
  %631 = add i32 %128, %10
  %632 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %631, i32 undef)  ; BufferLoad(srv,index,wot)
  %633 = extractvalue %dx.types.ResRet.i32 %632, 0
  %634 = extractvalue %dx.types.ResRet.i32 %632, 1
  %635 = extractvalue %dx.types.ResRet.i32 %632, 2
  %636 = extractvalue %dx.types.ResRet.i32 %632, 3
  %637 = bitcast i32 %633 to float
  %638 = bitcast i32 %634 to float
  %639 = bitcast i32 %635 to float
  %640 = bitcast i32 %636 to float
  %641 = add i32 %631, 16
  %642 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %641, i32 undef)  ; BufferLoad(srv,index,wot)
  %643 = extractvalue %dx.types.ResRet.i32 %642, 0
  %644 = extractvalue %dx.types.ResRet.i32 %642, 1
  %645 = extractvalue %dx.types.ResRet.i32 %642, 2
  %646 = extractvalue %dx.types.ResRet.i32 %642, 3
  %647 = bitcast i32 %643 to float
  %648 = bitcast i32 %644 to float
  %649 = bitcast i32 %645 to float
  %650 = bitcast i32 %646 to float
  %651 = add i32 %631, 32
  %652 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %651, i32 undef)  ; BufferLoad(srv,index,wot)
  %653 = extractvalue %dx.types.ResRet.i32 %652, 0
  %654 = extractvalue %dx.types.ResRet.i32 %652, 1
  %655 = extractvalue %dx.types.ResRet.i32 %652, 2
  %656 = extractvalue %dx.types.ResRet.i32 %652, 3
  %657 = bitcast i32 %653 to float
  %658 = bitcast i32 %654 to float
  %659 = bitcast i32 %655 to float
  %660 = bitcast i32 %656 to float
  %661 = fmul fast float %607, %89
  %662 = fmul fast float %617, %89
  %663 = fmul fast float %627, %89
  %664 = fmul fast float %608, %89
  %665 = fmul fast float %618, %89
  %666 = fmul fast float %628, %89
  %667 = fmul fast float %609, %89
  %668 = fmul fast float %619, %89
  %669 = fmul fast float %629, %89
  %670 = fmul fast float %610, %89
  %671 = fmul fast float %620, %89
  %672 = fmul fast float %630, %89
  %673 = fmul fast float %637, %93
  %674 = fmul fast float %647, %93
  %675 = fmul fast float %657, %93
  %676 = fmul fast float %638, %93
  %677 = fmul fast float %648, %93
  %678 = fmul fast float %658, %93
  %679 = fmul fast float %639, %93
  %680 = fmul fast float %649, %93
  %681 = fmul fast float %659, %93
  %682 = fmul fast float %640, %93
  %683 = fmul fast float %650, %93
  %684 = fmul fast float %660, %93
  %685 = fadd fast float %673, %661
  %686 = fadd fast float %674, %662
  %687 = fadd fast float %675, %663
  %688 = fadd fast float %676, %664
  %689 = fadd fast float %677, %665
  %690 = fadd fast float %678, %666
  %691 = fadd fast float %679, %667
  %692 = fadd fast float %680, %668
  %693 = fadd fast float %681, %669
  %694 = fadd fast float %682, %670
  %695 = fadd fast float %683, %671
  %696 = fadd fast float %684, %672
  %697 = add i32 %195, %10
  %698 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %697, i32 undef)  ; BufferLoad(srv,index,wot)
  %699 = extractvalue %dx.types.ResRet.i32 %698, 0
  %700 = extractvalue %dx.types.ResRet.i32 %698, 1
  %701 = extractvalue %dx.types.ResRet.i32 %698, 2
  %702 = extractvalue %dx.types.ResRet.i32 %698, 3
  %703 = bitcast i32 %699 to float
  %704 = bitcast i32 %700 to float
  %705 = bitcast i32 %701 to float
  %706 = bitcast i32 %702 to float
  %707 = add i32 %697, 16
  %708 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %707, i32 undef)  ; BufferLoad(srv,index,wot)
  %709 = extractvalue %dx.types.ResRet.i32 %708, 0
  %710 = extractvalue %dx.types.ResRet.i32 %708, 1
  %711 = extractvalue %dx.types.ResRet.i32 %708, 2
  %712 = extractvalue %dx.types.ResRet.i32 %708, 3
  %713 = bitcast i32 %709 to float
  %714 = bitcast i32 %710 to float
  %715 = bitcast i32 %711 to float
  %716 = bitcast i32 %712 to float
  %717 = add i32 %697, 32
  %718 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %717, i32 undef)  ; BufferLoad(srv,index,wot)
  %719 = extractvalue %dx.types.ResRet.i32 %718, 0
  %720 = extractvalue %dx.types.ResRet.i32 %718, 1
  %721 = extractvalue %dx.types.ResRet.i32 %718, 2
  %722 = extractvalue %dx.types.ResRet.i32 %718, 3
  %723 = bitcast i32 %719 to float
  %724 = bitcast i32 %720 to float
  %725 = bitcast i32 %721 to float
  %726 = bitcast i32 %722 to float
  %727 = add i32 %226, %10
  %728 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %727, i32 undef)  ; BufferLoad(srv,index,wot)
  %729 = extractvalue %dx.types.ResRet.i32 %728, 0
  %730 = extractvalue %dx.types.ResRet.i32 %728, 1
  %731 = extractvalue %dx.types.ResRet.i32 %728, 2
  %732 = extractvalue %dx.types.ResRet.i32 %728, 3
  %733 = bitcast i32 %729 to float
  %734 = bitcast i32 %730 to float
  %735 = bitcast i32 %731 to float
  %736 = bitcast i32 %732 to float
  %737 = add i32 %727, 16
  %738 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %737, i32 undef)  ; BufferLoad(srv,index,wot)
  %739 = extractvalue %dx.types.ResRet.i32 %738, 0
  %740 = extractvalue %dx.types.ResRet.i32 %738, 1
  %741 = extractvalue %dx.types.ResRet.i32 %738, 2
  %742 = extractvalue %dx.types.ResRet.i32 %738, 3
  %743 = bitcast i32 %739 to float
  %744 = bitcast i32 %740 to float
  %745 = bitcast i32 %741 to float
  %746 = bitcast i32 %742 to float
  %747 = add i32 %727, 32
  %748 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %747, i32 undef)  ; BufferLoad(srv,index,wot)
  %749 = extractvalue %dx.types.ResRet.i32 %748, 0
  %750 = extractvalue %dx.types.ResRet.i32 %748, 1
  %751 = extractvalue %dx.types.ResRet.i32 %748, 2
  %752 = extractvalue %dx.types.ResRet.i32 %748, 3
  %753 = bitcast i32 %749 to float
  %754 = bitcast i32 %750 to float
  %755 = bitcast i32 %751 to float
  %756 = bitcast i32 %752 to float
  %757 = fmul fast float %703, %90
  %758 = fmul fast float %713, %90
  %759 = fmul fast float %723, %90
  %760 = fmul fast float %704, %90
  %761 = fmul fast float %714, %90
  %762 = fmul fast float %724, %90
  %763 = fmul fast float %705, %90
  %764 = fmul fast float %715, %90
  %765 = fmul fast float %725, %90
  %766 = fmul fast float %706, %90
  %767 = fmul fast float %716, %90
  %768 = fmul fast float %726, %90
  %769 = fadd fast float %685, %757
  %770 = fadd fast float %686, %758
  %771 = fadd fast float %687, %759
  %772 = fadd fast float %688, %760
  %773 = fadd fast float %689, %761
  %774 = fadd fast float %690, %762
  %775 = fadd fast float %691, %763
  %776 = fadd fast float %692, %764
  %777 = fadd fast float %693, %765
  %778 = fadd fast float %694, %766
  %779 = fadd fast float %695, %767
  %780 = fadd fast float %696, %768
  %781 = fmul fast float %733, %94
  %782 = fmul fast float %743, %94
  %783 = fmul fast float %753, %94
  %784 = fmul fast float %734, %94
  %785 = fmul fast float %744, %94
  %786 = fmul fast float %754, %94
  %787 = fmul fast float %735, %94
  %788 = fmul fast float %745, %94
  %789 = fmul fast float %755, %94
  %790 = fmul fast float %736, %94
  %791 = fmul fast float %746, %94
  %792 = fmul fast float %756, %94
  %793 = fadd fast float %769, %781
  %794 = fadd fast float %770, %782
  %795 = fadd fast float %771, %783
  %796 = fadd fast float %772, %784
  %797 = fadd fast float %773, %785
  %798 = fadd fast float %774, %786
  %799 = fadd fast float %775, %787
  %800 = fadd fast float %776, %788
  %801 = fadd fast float %777, %789
  %802 = fadd fast float %778, %790
  %803 = fadd fast float %779, %791
  %804 = fadd fast float %780, %792
  %805 = add i32 %305, %10
  %806 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %805, i32 undef)  ; BufferLoad(srv,index,wot)
  %807 = extractvalue %dx.types.ResRet.i32 %806, 0
  %808 = extractvalue %dx.types.ResRet.i32 %806, 1
  %809 = extractvalue %dx.types.ResRet.i32 %806, 2
  %810 = extractvalue %dx.types.ResRet.i32 %806, 3
  %811 = bitcast i32 %807 to float
  %812 = bitcast i32 %808 to float
  %813 = bitcast i32 %809 to float
  %814 = bitcast i32 %810 to float
  %815 = add i32 %805, 16
  %816 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %815, i32 undef)  ; BufferLoad(srv,index,wot)
  %817 = extractvalue %dx.types.ResRet.i32 %816, 0
  %818 = extractvalue %dx.types.ResRet.i32 %816, 1
  %819 = extractvalue %dx.types.ResRet.i32 %816, 2
  %820 = extractvalue %dx.types.ResRet.i32 %816, 3
  %821 = bitcast i32 %817 to float
  %822 = bitcast i32 %818 to float
  %823 = bitcast i32 %819 to float
  %824 = bitcast i32 %820 to float
  %825 = add i32 %805, 32
  %826 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %825, i32 undef)  ; BufferLoad(srv,index,wot)
  %827 = extractvalue %dx.types.ResRet.i32 %826, 0
  %828 = extractvalue %dx.types.ResRet.i32 %826, 1
  %829 = extractvalue %dx.types.ResRet.i32 %826, 2
  %830 = extractvalue %dx.types.ResRet.i32 %826, 3
  %831 = bitcast i32 %827 to float
  %832 = bitcast i32 %828 to float
  %833 = bitcast i32 %829 to float
  %834 = bitcast i32 %830 to float
  %835 = add i32 %336, %10
  %836 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %835, i32 undef)  ; BufferLoad(srv,index,wot)
  %837 = extractvalue %dx.types.ResRet.i32 %836, 0
  %838 = extractvalue %dx.types.ResRet.i32 %836, 1
  %839 = extractvalue %dx.types.ResRet.i32 %836, 2
  %840 = extractvalue %dx.types.ResRet.i32 %836, 3
  %841 = bitcast i32 %837 to float
  %842 = bitcast i32 %838 to float
  %843 = bitcast i32 %839 to float
  %844 = bitcast i32 %840 to float
  %845 = add i32 %835, 16
  %846 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %845, i32 undef)  ; BufferLoad(srv,index,wot)
  %847 = extractvalue %dx.types.ResRet.i32 %846, 0
  %848 = extractvalue %dx.types.ResRet.i32 %846, 1
  %849 = extractvalue %dx.types.ResRet.i32 %846, 2
  %850 = extractvalue %dx.types.ResRet.i32 %846, 3
  %851 = bitcast i32 %847 to float
  %852 = bitcast i32 %848 to float
  %853 = bitcast i32 %849 to float
  %854 = bitcast i32 %850 to float
  %855 = add i32 %835, 32
  %856 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %855, i32 undef)  ; BufferLoad(srv,index,wot)
  %857 = extractvalue %dx.types.ResRet.i32 %856, 0
  %858 = extractvalue %dx.types.ResRet.i32 %856, 1
  %859 = extractvalue %dx.types.ResRet.i32 %856, 2
  %860 = extractvalue %dx.types.ResRet.i32 %856, 3
  %861 = bitcast i32 %857 to float
  %862 = bitcast i32 %858 to float
  %863 = bitcast i32 %859 to float
  %864 = bitcast i32 %860 to float
  %865 = fmul fast float %811, %91
  %866 = fmul fast float %821, %91
  %867 = fmul fast float %831, %91
  %868 = fmul fast float %812, %91
  %869 = fmul fast float %822, %91
  %870 = fmul fast float %832, %91
  %871 = fmul fast float %813, %91
  %872 = fmul fast float %823, %91
  %873 = fmul fast float %833, %91
  %874 = fmul fast float %814, %91
  %875 = fmul fast float %824, %91
  %876 = fmul fast float %834, %91
  %877 = fadd fast float %793, %865
  %878 = fadd fast float %794, %866
  %879 = fadd fast float %795, %867
  %880 = fadd fast float %796, %868
  %881 = fadd fast float %797, %869
  %882 = fadd fast float %798, %870
  %883 = fadd fast float %799, %871
  %884 = fadd fast float %800, %872
  %885 = fadd fast float %801, %873
  %886 = fadd fast float %802, %874
  %887 = fadd fast float %803, %875
  %888 = fadd fast float %804, %876
  %889 = fmul fast float %841, %95
  %890 = fmul fast float %851, %95
  %891 = fmul fast float %861, %95
  %892 = fmul fast float %842, %95
  %893 = fmul fast float %852, %95
  %894 = fmul fast float %862, %95
  %895 = fmul fast float %843, %95
  %896 = fmul fast float %853, %95
  %897 = fmul fast float %863, %95
  %898 = fmul fast float %844, %95
  %899 = fmul fast float %854, %95
  %900 = fmul fast float %864, %95
  %901 = fadd fast float %877, %889
  %902 = fadd fast float %878, %890
  %903 = fadd fast float %879, %891
  %904 = fadd fast float %880, %892
  %905 = fadd fast float %881, %893
  %906 = fadd fast float %882, %894
  %907 = fadd fast float %883, %895
  %908 = fadd fast float %884, %896
  %909 = fadd fast float %885, %897
  %910 = fadd fast float %886, %898
  %911 = fadd fast float %887, %899
  %912 = fadd fast float %888, %900
  %913 = add i32 %415, %10
  %914 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %913, i32 undef)  ; BufferLoad(srv,index,wot)
  %915 = extractvalue %dx.types.ResRet.i32 %914, 0
  %916 = extractvalue %dx.types.ResRet.i32 %914, 1
  %917 = extractvalue %dx.types.ResRet.i32 %914, 2
  %918 = extractvalue %dx.types.ResRet.i32 %914, 3
  %919 = bitcast i32 %915 to float
  %920 = bitcast i32 %916 to float
  %921 = bitcast i32 %917 to float
  %922 = bitcast i32 %918 to float
  %923 = add i32 %913, 16
  %924 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %923, i32 undef)  ; BufferLoad(srv,index,wot)
  %925 = extractvalue %dx.types.ResRet.i32 %924, 0
  %926 = extractvalue %dx.types.ResRet.i32 %924, 1
  %927 = extractvalue %dx.types.ResRet.i32 %924, 2
  %928 = extractvalue %dx.types.ResRet.i32 %924, 3
  %929 = bitcast i32 %925 to float
  %930 = bitcast i32 %926 to float
  %931 = bitcast i32 %927 to float
  %932 = bitcast i32 %928 to float
  %933 = add i32 %913, 32
  %934 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %933, i32 undef)  ; BufferLoad(srv,index,wot)
  %935 = extractvalue %dx.types.ResRet.i32 %934, 0
  %936 = extractvalue %dx.types.ResRet.i32 %934, 1
  %937 = extractvalue %dx.types.ResRet.i32 %934, 2
  %938 = extractvalue %dx.types.ResRet.i32 %934, 3
  %939 = bitcast i32 %935 to float
  %940 = bitcast i32 %936 to float
  %941 = bitcast i32 %937 to float
  %942 = bitcast i32 %938 to float
  %943 = add i32 %446, %10
  %944 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %943, i32 undef)  ; BufferLoad(srv,index,wot)
  %945 = extractvalue %dx.types.ResRet.i32 %944, 0
  %946 = extractvalue %dx.types.ResRet.i32 %944, 1
  %947 = extractvalue %dx.types.ResRet.i32 %944, 2
  %948 = extractvalue %dx.types.ResRet.i32 %944, 3
  %949 = bitcast i32 %945 to float
  %950 = bitcast i32 %946 to float
  %951 = bitcast i32 %947 to float
  %952 = bitcast i32 %948 to float
  %953 = add i32 %943, 16
  %954 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %953, i32 undef)  ; BufferLoad(srv,index,wot)
  %955 = extractvalue %dx.types.ResRet.i32 %954, 0
  %956 = extractvalue %dx.types.ResRet.i32 %954, 1
  %957 = extractvalue %dx.types.ResRet.i32 %954, 2
  %958 = extractvalue %dx.types.ResRet.i32 %954, 3
  %959 = bitcast i32 %955 to float
  %960 = bitcast i32 %956 to float
  %961 = bitcast i32 %957 to float
  %962 = bitcast i32 %958 to float
  %963 = add i32 %943, 32
  %964 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %963, i32 undef)  ; BufferLoad(srv,index,wot)
  %965 = extractvalue %dx.types.ResRet.i32 %964, 0
  %966 = extractvalue %dx.types.ResRet.i32 %964, 1
  %967 = extractvalue %dx.types.ResRet.i32 %964, 2
  %968 = extractvalue %dx.types.ResRet.i32 %964, 3
  %969 = bitcast i32 %965 to float
  %970 = bitcast i32 %966 to float
  %971 = bitcast i32 %967 to float
  %972 = bitcast i32 %968 to float
  %973 = fmul fast float %919, %92
  %974 = fmul fast float %929, %92
  %975 = fmul fast float %939, %92
  %976 = fmul fast float %920, %92
  %977 = fmul fast float %930, %92
  %978 = fmul fast float %940, %92
  %979 = fmul fast float %921, %92
  %980 = fmul fast float %931, %92
  %981 = fmul fast float %941, %92
  %982 = fmul fast float %922, %92
  %983 = fmul fast float %932, %92
  %984 = fmul fast float %942, %92
  %985 = fadd fast float %901, %973
  %986 = fadd fast float %902, %974
  %987 = fadd fast float %903, %975
  %988 = fadd fast float %904, %976
  %989 = fadd fast float %905, %977
  %990 = fadd fast float %906, %978
  %991 = fadd fast float %907, %979
  %992 = fadd fast float %908, %980
  %993 = fadd fast float %909, %981
  %994 = fadd fast float %910, %982
  %995 = fadd fast float %911, %983
  %996 = fadd fast float %912, %984
  %997 = fmul fast float %949, %96
  %998 = fmul fast float %959, %96
  %999 = fmul fast float %969, %96
  %1000 = fmul fast float %950, %96
  %1001 = fmul fast float %960, %96
  %1002 = fmul fast float %970, %96
  %1003 = fmul fast float %951, %96
  %1004 = fmul fast float %961, %96
  %1005 = fmul fast float %971, %96
  %1006 = fmul fast float %952, %96
  %1007 = fmul fast float %962, %96
  %1008 = fmul fast float %972, %96
  %1009 = fadd fast float %985, %997
  %1010 = fadd fast float %986, %998
  %1011 = fadd fast float %987, %999
  %1012 = fadd fast float %988, %1000
  %1013 = fadd fast float %989, %1001
  %1014 = fadd fast float %990, %1002
  %1015 = fadd fast float %991, %1003
  %1016 = fadd fast float %992, %1004
  %1017 = fadd fast float %993, %1005
  %1018 = fadd fast float %994, %1006
  %1019 = fadd fast float %995, %1007
  %1020 = fadd fast float %996, %1008
  %1021 = fmul fast float %1009, %82
  %1022 = call float @dx.op.tertiary.f32(i32 46, float %83, float %1012, float %1021)  ; FMad(a,b,c)
  %1023 = call float @dx.op.tertiary.f32(i32 46, float %84, float %1015, float %1022)  ; FMad(a,b,c)
  %1024 = fadd fast float %1018, %1023
  %1025 = fmul fast float %1010, %82
  %1026 = call float @dx.op.tertiary.f32(i32 46, float %83, float %1013, float %1025)  ; FMad(a,b,c)
  %1027 = call float @dx.op.tertiary.f32(i32 46, float %84, float %1016, float %1026)  ; FMad(a,b,c)
  %1028 = fadd fast float %1019, %1027
  %1029 = fmul fast float %1011, %82
  %1030 = call float @dx.op.tertiary.f32(i32 46, float %83, float %1014, float %1029)  ; FMad(a,b,c)
  %1031 = call float @dx.op.tertiary.f32(i32 46, float %84, float %1017, float %1030)  ; FMad(a,b,c)
  %1032 = fadd fast float %1020, %1031
  %1033 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1034 = extractvalue %dx.types.CBufRet.f32 %1033, 0
  %1035 = extractvalue %dx.types.CBufRet.f32 %1033, 1
  %1036 = extractvalue %dx.types.CBufRet.f32 %1033, 2
  %1037 = extractvalue %dx.types.CBufRet.f32 %1033, 3
  %1038 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1039 = extractvalue %dx.types.CBufRet.f32 %1038, 0
  %1040 = extractvalue %dx.types.CBufRet.f32 %1038, 1
  %1041 = extractvalue %dx.types.CBufRet.f32 %1038, 2
  %1042 = extractvalue %dx.types.CBufRet.f32 %1038, 3
  %1043 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1044 = extractvalue %dx.types.CBufRet.f32 %1043, 0
  %1045 = extractvalue %dx.types.CBufRet.f32 %1043, 1
  %1046 = extractvalue %dx.types.CBufRet.f32 %1043, 2
  %1047 = extractvalue %dx.types.CBufRet.f32 %1043, 3
  %1048 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %1049 = extractvalue %dx.types.CBufRet.i32 %1048, 0
  %1050 = extractvalue %dx.types.CBufRet.i32 %1048, 1
  %1051 = extractvalue %dx.types.CBufRet.i32 %1048, 2
  %1052 = bitcast float %1037 to i32
  %1053 = bitcast float %1042 to i32
  %1054 = bitcast float %1047 to i32
  %1055 = sub i32 %1052, %1049
  %1056 = sub i32 %1053, %1050
  %1057 = sub i32 %1054, %1051
  %1058 = sitofp i32 %1055 to float
  %1059 = sitofp i32 %1056 to float
  %1060 = sitofp i32 %1057 to float
  %1061 = fmul fast float %1058, 0x3EE0000000000000
  %1062 = fmul fast float %1059, 0x3EE0000000000000
  %1063 = fmul fast float %1060, 0x3EE0000000000000
  %1064 = fmul fast float %1034, %1024
  %1065 = call float @dx.op.tertiary.f32(i32 46, float %1035, float %1028, float %1064)  ; FMad(a,b,c)
  %1066 = call float @dx.op.tertiary.f32(i32 46, float %1036, float %1032, float %1065)  ; FMad(a,b,c)
  %1067 = fadd fast float %1061, %1066
  %1068 = fmul fast float %1039, %1024
  %1069 = call float @dx.op.tertiary.f32(i32 46, float %1040, float %1028, float %1068)  ; FMad(a,b,c)
  %1070 = call float @dx.op.tertiary.f32(i32 46, float %1041, float %1032, float %1069)  ; FMad(a,b,c)
  %1071 = fadd fast float %1062, %1070
  %1072 = fmul fast float %1044, %1024
  %1073 = call float @dx.op.tertiary.f32(i32 46, float %1045, float %1028, float %1072)  ; FMad(a,b,c)
  %1074 = call float @dx.op.tertiary.f32(i32 46, float %1046, float %1032, float %1073)  ; FMad(a,b,c)
  %1075 = fadd fast float %1074, %1063
  %1076 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %1077 = extractvalue %dx.types.CBufRet.f32 %1076, 0
  %1078 = extractvalue %dx.types.CBufRet.f32 %1076, 1
  %1079 = extractvalue %dx.types.CBufRet.f32 %1076, 2
  %1080 = extractvalue %dx.types.CBufRet.f32 %1076, 3
  %1081 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %1082 = extractvalue %dx.types.CBufRet.f32 %1081, 0
  %1083 = extractvalue %dx.types.CBufRet.f32 %1081, 1
  %1084 = extractvalue %dx.types.CBufRet.f32 %1081, 2
  %1085 = extractvalue %dx.types.CBufRet.f32 %1081, 3
  %1086 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 18)  ; CBufferLoadLegacy(handle,regIndex)
  %1087 = extractvalue %dx.types.CBufRet.f32 %1086, 0
  %1088 = extractvalue %dx.types.CBufRet.f32 %1086, 1
  %1089 = extractvalue %dx.types.CBufRet.f32 %1086, 2
  %1090 = extractvalue %dx.types.CBufRet.f32 %1086, 3
  %1091 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %1092 = extractvalue %dx.types.CBufRet.f32 %1091, 0
  %1093 = extractvalue %dx.types.CBufRet.f32 %1091, 1
  %1094 = extractvalue %dx.types.CBufRet.f32 %1091, 2
  %1095 = extractvalue %dx.types.CBufRet.f32 %1091, 3
  %1096 = fmul fast float %1077, %1067
  %1097 = call float @dx.op.tertiary.f32(i32 46, float %1071, float %1078, float %1096)  ; FMad(a,b,c)
  %1098 = call float @dx.op.tertiary.f32(i32 46, float %1075, float %1079, float %1097)  ; FMad(a,b,c)
  %1099 = fadd fast float %1098, %1080
  %1100 = fmul fast float %1082, %1067
  %1101 = call float @dx.op.tertiary.f32(i32 46, float %1071, float %1083, float %1100)  ; FMad(a,b,c)
  %1102 = call float @dx.op.tertiary.f32(i32 46, float %1075, float %1084, float %1101)  ; FMad(a,b,c)
  %1103 = fadd fast float %1102, %1085
  %1104 = fmul fast float %1087, %1067
  %1105 = call float @dx.op.tertiary.f32(i32 46, float %1071, float %1088, float %1104)  ; FMad(a,b,c)
  %1106 = call float @dx.op.tertiary.f32(i32 46, float %1075, float %1089, float %1105)  ; FMad(a,b,c)
  %1107 = fadd fast float %1106, %1090
  %1108 = fmul fast float %1092, %1067
  %1109 = call float @dx.op.tertiary.f32(i32 46, float %1071, float %1093, float %1108)  ; FMad(a,b,c)
  %1110 = call float @dx.op.tertiary.f32(i32 46, float %1075, float %1094, float %1109)  ; FMad(a,b,c)
  %1111 = fadd fast float %1110, %1095
  %1112 = fmul fast float %513, %43
  %1113 = call float @dx.op.tertiary.f32(i32 46, float %514, float %44, float %1112)  ; FMad(a,b,c)
  %1114 = call float @dx.op.tertiary.f32(i32 46, float %515, float %45, float %1113)  ; FMad(a,b,c)
  %1115 = fmul fast float %513, %47
  %1116 = call float @dx.op.tertiary.f32(i32 46, float %514, float %48, float %1115)  ; FMad(a,b,c)
  %1117 = call float @dx.op.tertiary.f32(i32 46, float %515, float %49, float %1116)  ; FMad(a,b,c)
  %1118 = fmul fast float %513, %51
  %1119 = call float @dx.op.tertiary.f32(i32 46, float %514, float %52, float %1118)  ; FMad(a,b,c)
  %1120 = call float @dx.op.tertiary.f32(i32 46, float %515, float %53, float %1119)  ; FMad(a,b,c)
  %1121 = fmul fast float %516, %43
  %1122 = call float @dx.op.tertiary.f32(i32 46, float %517, float %44, float %1121)  ; FMad(a,b,c)
  %1123 = call float @dx.op.tertiary.f32(i32 46, float %518, float %45, float %1122)  ; FMad(a,b,c)
  %1124 = fmul fast float %516, %47
  %1125 = call float @dx.op.tertiary.f32(i32 46, float %517, float %48, float %1124)  ; FMad(a,b,c)
  %1126 = call float @dx.op.tertiary.f32(i32 46, float %518, float %49, float %1125)  ; FMad(a,b,c)
  %1127 = fmul fast float %516, %51
  %1128 = call float @dx.op.tertiary.f32(i32 46, float %517, float %52, float %1127)  ; FMad(a,b,c)
  %1129 = call float @dx.op.tertiary.f32(i32 46, float %518, float %53, float %1128)  ; FMad(a,b,c)
  %1130 = fmul fast float %519, %43
  %1131 = call float @dx.op.tertiary.f32(i32 46, float %520, float %44, float %1130)  ; FMad(a,b,c)
  %1132 = call float @dx.op.tertiary.f32(i32 46, float %521, float %45, float %1131)  ; FMad(a,b,c)
  %1133 = fmul fast float %519, %47
  %1134 = call float @dx.op.tertiary.f32(i32 46, float %520, float %48, float %1133)  ; FMad(a,b,c)
  %1135 = call float @dx.op.tertiary.f32(i32 46, float %521, float %49, float %1134)  ; FMad(a,b,c)
  %1136 = fmul fast float %519, %51
  %1137 = call float @dx.op.tertiary.f32(i32 46, float %520, float %52, float %1136)  ; FMad(a,b,c)
  %1138 = call float @dx.op.tertiary.f32(i32 46, float %521, float %53, float %1137)  ; FMad(a,b,c)
  %1139 = fmul fast float %19, 2.000000e+00
  %1140 = fmul fast float %20, 2.000000e+00
  %1141 = fmul fast float %21, 2.000000e+00
  %1142 = fadd fast float %1139, -1.000000e+00
  %1143 = fadd fast float %1140, -1.000000e+00
  %1144 = fadd fast float %1141, -1.000000e+00
  %1145 = fmul fast float %15, 2.000000e+00
  %1146 = fmul fast float %16, 2.000000e+00
  %1147 = fmul fast float %17, 2.000000e+00
  %1148 = fadd fast float %1145, -1.000000e+00
  %1149 = fadd fast float %1146, -1.000000e+00
  %1150 = fadd fast float %1147, -1.000000e+00
  %1151 = fmul fast float %18, 2.000000e+00
  %1152 = fadd fast float %1151, -1.000000e+00
  %1153 = fmul fast float %1143, %1150
  %1154 = fmul fast float %1144, %1149
  %1155 = fsub fast float %1153, %1154
  %1156 = fmul fast float %1144, %1148
  %1157 = fmul fast float %1142, %1150
  %1158 = fsub fast float %1156, %1157
  %1159 = fmul fast float %1142, %1149
  %1160 = fmul fast float %1143, %1148
  %1161 = fsub fast float %1159, %1160
  %1162 = fmul fast float %1155, %1152
  %1163 = fmul fast float %1158, %1152
  %1164 = fmul fast float %1161, %1152
  %1165 = fmul fast float %1114, %1148
  %1166 = call float @dx.op.tertiary.f32(i32 46, float %1149, float %1123, float %1165)  ; FMad(a,b,c)
  %1167 = call float @dx.op.tertiary.f32(i32 46, float %1150, float %1132, float %1166)  ; FMad(a,b,c)
  %1168 = fmul fast float %1117, %1148
  %1169 = call float @dx.op.tertiary.f32(i32 46, float %1149, float %1126, float %1168)  ; FMad(a,b,c)
  %1170 = call float @dx.op.tertiary.f32(i32 46, float %1150, float %1135, float %1169)  ; FMad(a,b,c)
  %1171 = fmul fast float %1120, %1148
  %1172 = call float @dx.op.tertiary.f32(i32 46, float %1149, float %1129, float %1171)  ; FMad(a,b,c)
  %1173 = call float @dx.op.tertiary.f32(i32 46, float %1150, float %1138, float %1172)  ; FMad(a,b,c)
  %1174 = fmul fast float %1114, %1162
  %1175 = call float @dx.op.tertiary.f32(i32 46, float %1163, float %1123, float %1174)  ; FMad(a,b,c)
  %1176 = call float @dx.op.tertiary.f32(i32 46, float %1164, float %1132, float %1175)  ; FMad(a,b,c)
  %1177 = fmul fast float %1117, %1162
  %1178 = call float @dx.op.tertiary.f32(i32 46, float %1163, float %1126, float %1177)  ; FMad(a,b,c)
  %1179 = call float @dx.op.tertiary.f32(i32 46, float %1164, float %1135, float %1178)  ; FMad(a,b,c)
  %1180 = fmul fast float %1120, %1162
  %1181 = call float @dx.op.tertiary.f32(i32 46, float %1163, float %1129, float %1180)  ; FMad(a,b,c)
  %1182 = call float @dx.op.tertiary.f32(i32 46, float %1164, float %1138, float %1181)  ; FMad(a,b,c)
  %1183 = fmul fast float %1114, %1142
  %1184 = call float @dx.op.tertiary.f32(i32 46, float %1143, float %1123, float %1183)  ; FMad(a,b,c)
  %1185 = call float @dx.op.tertiary.f32(i32 46, float %1144, float %1132, float %1184)  ; FMad(a,b,c)
  %1186 = fmul fast float %1117, %1142
  %1187 = call float @dx.op.tertiary.f32(i32 46, float %1143, float %1126, float %1186)  ; FMad(a,b,c)
  %1188 = call float @dx.op.tertiary.f32(i32 46, float %1144, float %1135, float %1187)  ; FMad(a,b,c)
  %1189 = fmul fast float %1120, %1142
  %1190 = call float @dx.op.tertiary.f32(i32 46, float %1143, float %1129, float %1189)  ; FMad(a,b,c)
  %1191 = call float @dx.op.tertiary.f32(i32 46, float %1144, float %1138, float %1190)  ; FMad(a,b,c)
  %1192 = call float @dx.op.dot3.f32(i32 55, float %1185, float %1188, float %1191, float %1185, float %1188, float %1191)  ; Dot3(ax,ay,az,bx,by,bz)
  %1193 = call float @dx.op.unary.f32(i32 25, float %1192)  ; Rsqrt(value)
  %1194 = fmul fast float %1193, %1185
  %1195 = fmul fast float %1193, %1188
  %1196 = fmul fast float %1193, %1191
  %1197 = call float @dx.op.dot3.f32(i32 55, float %1176, float %1179, float %1182, float %1176, float %1179, float %1182)  ; Dot3(ax,ay,az,bx,by,bz)
  %1198 = call float @dx.op.unary.f32(i32 25, float %1197)  ; Rsqrt(value)
  %1199 = fmul fast float %1198, %1176
  %1200 = fmul fast float %1198, %1179
  %1201 = fmul fast float %1198, %1182
  %1202 = call float @dx.op.dot3.f32(i32 55, float %1167, float %1170, float %1173, float %1167, float %1170, float %1173)  ; Dot3(ax,ay,az,bx,by,bz)
  %1203 = call float @dx.op.unary.f32(i32 25, float %1202)  ; Rsqrt(value)
  %1204 = fmul fast float %1203, %1167
  %1205 = fmul fast float %1203, %1170
  %1206 = fmul fast float %1203, %1173
  %1207 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %1208 = extractvalue %dx.types.CBufRet.f32 %1207, 1
  %1209 = fptosi float %1208 to i32
  %1210 = icmp sgt i32 %1209, 0
  br i1 %1210, label %1211, label %1298

; <label>:1211                                    ; preds = %0
  br label %1212

; <label>:1212                                    ; preds = %1283, %1211
  %1213 = phi float [ %1291, %1283 ], [ 0.000000e+00, %1211 ]
  %1214 = phi float [ %1294, %1283 ], [ 0.000000e+00, %1211 ]
  %1215 = phi i32 [ %1295, %1283 ], [ 0, %1211 ]
  %1216 = mul i32 %1215, 9
  %1217 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 %1216)  ; CBufferLoadLegacy(handle,regIndex)
  %1218 = extractvalue %dx.types.CBufRet.i32 %1217, 0
  %1219 = icmp eq i32 %1218, 0
  br i1 %1219, label %1283, label %1220

; <label>:1220                                    ; preds = %1212
  br label %1221

; <label>:1221                                    ; preds = %1274, %1220
  %1222 = phi float [ %1277, %1274 ], [ 0.000000e+00, %1220 ]
  %1223 = phi i32 [ %1278, %1274 ], [ 0, %1220 ]
  %1224 = add i32 %1216, 5
  %1225 = add i32 %1224, %1223
  %1226 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 %1225)  ; CBufferLoadLegacy(handle,regIndex)
  %1227 = extractvalue %dx.types.CBufRet.f32 %1226, 0
  %1228 = extractvalue %dx.types.CBufRet.f32 %1226, 1
  %1229 = extractvalue %dx.types.CBufRet.f32 %1226, 2
  %1230 = extractvalue %dx.types.CBufRet.f32 %1226, 3
  %1231 = add i32 %1216, 1
  %1232 = add i32 %1231, %1223
  %1233 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 %1232)  ; CBufferLoadLegacy(handle,regIndex)
  %1234 = extractvalue %dx.types.CBufRet.f32 %1233, 0
  %1235 = extractvalue %dx.types.CBufRet.f32 %1233, 1
  %1236 = extractvalue %dx.types.CBufRet.f32 %1233, 2
  %1237 = extractvalue %dx.types.CBufRet.f32 %1233, 3
  %1238 = fcmp fast olt float %22, %1227
  %1239 = fcmp fast ogt float %22, %1229
  %1240 = or i1 %1238, %1239
  br i1 %1240, label %1255, label %1241

; <label>:1241                                    ; preds = %1221
  %1242 = fcmp fast oge float %22, %1234
  %1243 = fcmp fast ole float %22, %1236
  %1244 = and i1 %1242, %1243
  br i1 %1244, label %1255, label %1245

; <label>:1245                                    ; preds = %1241
  %1246 = fcmp fast olt float %22, %1234
  br i1 %1246, label %1247, label %1251

; <label>:1247                                    ; preds = %1245
  %1248 = fsub fast float %22, %1227
  %1249 = fsub fast float %1234, %1227
  %1250 = fdiv fast float %1248, %1249
  br label %1255

; <label>:1251                                    ; preds = %1245
  %1252 = fsub fast float %1229, %22
  %1253 = fsub fast float %1229, %1236
  %1254 = fdiv fast float %1252, %1253
  br label %1255

; <label>:1255                                    ; preds = %1251, %1247, %1241, %1221
  %1256 = phi float [ 0.000000e+00, %1221 ], [ %1250, %1247 ], [ %1254, %1251 ], [ 1.000000e+00, %1241 ]
  %1257 = fcmp fast olt float %23, %1228
  %1258 = fcmp fast ogt float %23, %1230
  %1259 = or i1 %1257, %1258
  br i1 %1259, label %1274, label %1260

; <label>:1260                                    ; preds = %1255
  %1261 = fcmp fast oge float %23, %1235
  %1262 = fcmp fast ole float %23, %1237
  %1263 = and i1 %1261, %1262
  br i1 %1263, label %1274, label %1264

; <label>:1264                                    ; preds = %1260
  %1265 = fcmp fast olt float %23, %1235
  br i1 %1265, label %1266, label %1270

; <label>:1266                                    ; preds = %1264
  %1267 = fsub fast float %23, %1228
  %1268 = fsub fast float %1235, %1228
  %1269 = fdiv fast float %1267, %1268
  br label %1274

; <label>:1270                                    ; preds = %1264
  %1271 = fsub fast float %1230, %23
  %1272 = fsub fast float %1230, %1237
  %1273 = fdiv fast float %1271, %1272
  br label %1274

; <label>:1274                                    ; preds = %1270, %1266, %1260, %1255
  %1275 = phi float [ 0.000000e+00, %1255 ], [ %1269, %1266 ], [ %1273, %1270 ], [ 1.000000e+00, %1260 ]
  %1276 = fmul fast float %1275, %1256
  %1277 = call float @dx.op.binary.f32(i32 35, float %1222, float %1276)  ; FMax(a,b)
  %1278 = add i32 %1223, 1
  %1279 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 %1216)  ; CBufferLoadLegacy(handle,regIndex)
  %1280 = extractvalue %dx.types.CBufRet.i32 %1279, 0
  %1281 = icmp ult i32 %1278, %1280
  br i1 %1281, label %1221, label %1282

; <label>:1282                                    ; preds = %1274
  br label %1283

; <label>:1283                                    ; preds = %1282, %1212
  %1284 = phi float [ 0.000000e+00, %1212 ], [ %1277, %1282 ]
  %1285 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %1215)  ; CBufferLoadLegacy(handle,regIndex)
  %1286 = extractvalue %dx.types.CBufRet.f32 %1285, 0
  %1287 = fmul fast float %1286, %1284
  %1288 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 %1216)  ; CBufferLoadLegacy(handle,regIndex)
  %1289 = extractvalue %dx.types.CBufRet.f32 %1288, 1
  %1290 = fmul fast float %1287, %1289
  %1291 = fadd fast float %1290, %1213
  %1292 = extractvalue %dx.types.CBufRet.f32 %1288, 2
  %1293 = fmul fast float %1287, %1292
  %1294 = fadd fast float %1293, %1214
  %1295 = add nuw nsw i32 %1215, 1
  %1296 = icmp eq i32 %1295, %1209
  br i1 %1296, label %1297, label %1212

; <label>:1297                                    ; preds = %1283
  br label %1298

; <label>:1298                                    ; preds = %1297, %0
  %1299 = phi float [ 0.000000e+00, %0 ], [ %1291, %1297 ]
  %1300 = phi float [ 0.000000e+00, %0 ], [ %1294, %1297 ]
  %1301 = call float @dx.op.unary.f32(i32 7, float %1299)  ; Saturate(value)
  %1302 = call float @dx.op.unary.f32(i32 7, float %1300)  ; Saturate(value)
  %1303 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %1304 = extractvalue %dx.types.CBufRet.f32 %1303, 0
  %1305 = extractvalue %dx.types.CBufRet.f32 %1303, 1
  %1306 = fmul fast float %1304, %600
  %1307 = fmul fast float %1305, %600
  %1308 = fsub fast float %588, %1306
  %1309 = fsub fast float %592, %1307
  %1310 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %1311 = extractvalue %dx.types.CBufRet.f32 %1310, 0
  %1312 = extractvalue %dx.types.CBufRet.f32 %1310, 1
  %1313 = extractvalue %dx.types.CBufRet.f32 %1310, 2
  %1314 = extractvalue %dx.types.CBufRet.f32 %1310, 3
  %1315 = call float @dx.op.dot4.f32(i32 56, float %1311, float %1312, float %1313, float %1314, float %562, float %563, float %564, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %588)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %592)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %596)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %600)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %1194)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %1195)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %1196)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %1199)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %1200)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %1201)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %1204)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float %1205)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %1206)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %22)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %23)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %562)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %563)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float %564)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float %11)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float %12)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 0, float %13)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 1, float %14)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 2, float %557)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 3, float %1301)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 0, float %1302)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 1, float %1308)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 2, float %1309)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 3, float %596)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 0, float %600)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 1, float %1099)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 2, float %1103)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 3, float %1107)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 8, i32 0, i8 0, float %1111)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 8, i32 0, i8 1, float %7)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 9, i32 0, i8 0, float %1315)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!13}
!dx.entryPoints = !{!14}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{!5, null, !7, null}
!5 = !{!6}
!6 = !{i32 0, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 10, i32 1, i32 11, i32 0, null}
!7 = !{!8, !9, !10, !11, !12}
!8 = !{i32 0, %MaterialModifiersConsts* undef, !"", i32 0, i32 7, i32 1, i32 496, null}
!9 = !{i32 1, %hostlayout.CameraShaderConsts* undef, !"", i32 0, i32 1, i32 1, i32 848, null}
!10 = !{i32 2, %TextureRegionsCB* undef, !"", i32 0, i32 8, i32 1, i32 5760, null}
!11 = !{i32 3, %FloatTracksDataCB* undef, !"", i32 0, i32 9, i32 1, i32 640, null}
!12 = !{i32 4, %hostlayout.FrequentVertexConsts* undef, !"", i32 0, i32 5, i32 1, i32 112, null}
!13 = !{[124 x i32] [i32 61, i32 37, i32 -29130737, i32 17, i32 -29130737, i32 17, i32 -29130737, i32 17, i32 0, i32 0, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 -29122561, i32 17, i32 25174016, i32 0, i32 25182208, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1008, i32 0, i32 1008, i32 0, i32 1008, i32 0, i32 0, i32 0, i32 8064, i32 0, i32 8064, i32 0, i32 8064, i32 0, i32 896, i32 0, i32 262144, i32 0, i32 524288, i32 0, i32 1048576, i32 0, i32 2097152, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 507551743, i32 16, i32 507551743, i32 16, i32 507551743, i32 16, i32 507543567, i32 16, i32 507584511, i32 16, i32 507584511, i32 16, i32 507584511, i32 16, i32 507576335, i32 16, i32 507650047, i32 16, i32 507650047, i32 16, i32 507650047, i32 16, i32 507641871, i32 16, i32 507748351, i32 16, i32 -29122561, i32 17, i32 -536870912, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2]}
!14 = !{void ()* @vs_main_, !"vs_main_", !15, !4, !55}
!15 = !{!16, !38, null}
!16 = !{!17, !20, !22, !23, !25, !26, !28, !29, !30, !31, !32, !34, !35, !36}
!17 = !{i32 0, !"POSITION", i8 9, i8 0, !18, i8 0, i32 1, i8 3, i32 0, i8 0, !19}
!18 = !{i32 0}
!19 = !{i32 3, i32 7}
!20 = !{i32 1, !"BLENDINDICES", i8 5, i8 0, !18, i8 0, i32 1, i8 4, i32 1, i8 0, !21}
!21 = !{i32 3, i32 15}
!22 = !{i32 2, !"BLENDWEIGHT", i8 9, i8 0, !18, i8 0, i32 1, i8 4, i32 2, i8 0, !21}
!23 = !{i32 3, !"BLENDINDICES", i8 5, i8 0, !24, i8 0, i32 1, i8 4, i32 3, i8 0, !21}
!24 = !{i32 1}
!25 = !{i32 4, !"BLENDWEIGHT", i8 9, i8 0, !24, i8 0, i32 1, i8 4, i32 4, i8 0, !21}
!26 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !18, i8 0, i32 1, i8 2, i32 5, i8 0, !27}
!27 = !{i32 3, i32 3}
!28 = !{i32 6, !"NORMAL", i8 9, i8 0, !18, i8 0, i32 1, i8 3, i32 6, i8 0, !19}
!29 = !{i32 7, !"TANGENT", i8 9, i8 0, !18, i8 0, i32 1, i8 4, i32 7, i8 0, !21}
!30 = !{i32 8, !"COLOR", i8 9, i8 0, !18, i8 0, i32 1, i8 4, i32 8, i8 0, !21}
!31 = !{i32 9, !"TEXCOORD", i8 9, i8 0, !24, i8 0, i32 1, i8 2, i32 9, i8 0, null}
!32 = !{i32 10, !"INSTANCE_TRANSFORM", i8 9, i8 0, !33, i8 0, i32 3, i8 4, i32 10, i8 0, !21}
!33 = !{i32 0, i32 1, i32 2}
!34 = !{i32 11, !"INSTANCE_SKINNING_DATA", i8 5, i8 0, !18, i8 0, i32 1, i8 4, i32 13, i8 0, !19}
!35 = !{i32 12, !"SV_VertexID", i8 5, i8 1, !18, i8 0, i32 1, i8 1, i32 14, i8 0, null}
!36 = !{i32 13, !"LIGHT_BLOCKER_INTENSITY", i8 9, i8 0, !18, i8 0, i32 1, i8 1, i32 15, i8 0, !37}
!37 = !{i32 3, i32 1}
!38 = !{!39, !40, !41, !42, !44, !46, !48, !50, !52, !54}
!39 = !{i32 0, !"SV_Position", i8 9, i8 3, !18, i8 4, i32 1, i8 4, i32 0, i8 0, !21}
!40 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !18, i8 2, i32 1, i8 4, i32 1, i8 0, !21}
!41 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !24, i8 2, i32 1, i8 4, i32 2, i8 0, !21}
!42 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !43, i8 2, i32 1, i8 4, i32 3, i8 0, !21}
!43 = !{i32 2}
!44 = !{i32 4, !"TEXCOORD", i8 9, i8 0, !45, i8 2, i32 1, i8 4, i32 4, i8 0, !21}
!45 = !{i32 3}
!46 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !47, i8 2, i32 1, i8 4, i32 5, i8 0, !21}
!47 = !{i32 4}
!48 = !{i32 6, !"TEXCOORD", i8 9, i8 0, !49, i8 2, i32 1, i8 4, i32 6, i8 0, !21}
!49 = !{i32 5}
!50 = !{i32 7, !"TEXCOORD", i8 9, i8 0, !51, i8 2, i32 1, i8 4, i32 7, i8 0, !21}
!51 = !{i32 6}
!52 = !{i32 8, !"TEXCOORD", i8 9, i8 0, !53, i8 2, i32 1, i8 2, i32 8, i8 0, !27}
!53 = !{i32 7}
!54 = !{i32 9, !"SV_ClipDistance", i8 9, i8 6, !18, i8 2, i32 1, i8 1, i32 9, i8 0, !37}
!55 = !{i32 0, i64 16}
 