;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; POSITION                 0   xyz         0     NONE   float   xyz 
; BLENDINDICES             0   xyzw        1     NONE    uint   xyzw
; BLENDWEIGHT              0   xyzw        2     NONE   float   xyzw
; BLENDINDICES             1   xyzw        3     NONE    uint   xyzw
; BLENDWEIGHT              1   xyzw        4     NONE   float   xyzw
; TEXCOORD                 0   xy          5     NONE   float   xy  
; NORMAL                   0   xyz         6     NONE   float   xyz 
; TANGENT                  0   xyzw        7     NONE   float   xyzw
; COLOR                    0   xyzw        8     NONE   float       
; TEXCOORD                 1   xy          9     NONE   float       
; INSTANCE_TRANSFORM       0   xyzw       10     NONE   float   xyzw
; INSTANCE_TRANSFORM       1   xyzw       11     NONE   float   xyzw
; INSTANCE_TRANSFORM       2   xyzw       12     NONE   float   xyzw
; INSTANCE_SKINNING_DATA     0   xyzw       13     NONE    uint   xyz 
; EXTRA_DATA               0   xyz        14     NONE   float   xyz 
; SV_VertexID              0   x          15   VERTID    uint   x   
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; TEXCOORD                 0   xyzw        1     NONE   float   xyzw
; TEXCOORD                 1   xyzw        2     NONE   float   xyzw
; TEXCOORD                 2   xyzw        3     NONE   float   xyzw
; TEXCOORD                 3   xyzw        4     NONE   float   xyzw
; TEXCOORD                 4   xyzw        5     NONE   float   xyzw
; TEXCOORD                 5   xyzw        6     NONE   float   xyzw
; TEXCOORD                 6   xy          7     NONE   float   xy  
; SV_ClipDistance          0   x           8  CLIPDST   float   x   
;
; shader hash: 59c603e39884a8c53e6423223e15d90b
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; POSITION                 0                              
; BLENDINDICES             0                              
; BLENDWEIGHT              0                              
; BLENDINDICES             1                              
; BLENDWEIGHT              1                              
; TEXCOORD                 0                              
; NORMAL                   0                              
; TANGENT                  0                              
; COLOR                    0                              
; TEXCOORD                 1                              
; INSTANCE_TRANSFORM       0                              
; INSTANCE_SKINNING_DATA     0                              
; EXTRA_DATA               0                              
; SV_VertexID              0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; TEXCOORD                 3                 linear       
; TEXCOORD                 4                 linear       
; TEXCOORD                 5                 linear       
; TEXCOORD                 6                 linear       
; SV_ClipDistance          0                 linear       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [496 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [848 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [112 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [512 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb7     1
;                                   cbuffer      NA          NA     CB1            cb1     1
;                                   cbuffer      NA          NA     CB2            cb5     1
;                                   cbuffer      NA          NA     CB3            cb8     1
;                                   texture    byte         r/o      T0            t10     1
;                                   texture     f32          2d      T1            t77     1
;
;
; ViewId state:
;
; Number of inputs: 61, outputs: 33
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 1 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 2 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 3 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 4 depends on inputs: { 20 }
;   output 5 depends on inputs: { 21 }
;   output 6 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 7 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 8 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 9 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 28, 29, 30, 31, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 10 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 28, 29, 30, 31, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 11 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 28, 29, 30, 31, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 12 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 13 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 14 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 15 depends on inputs: { 24 }
;   output 16 depends on inputs: { 25 }
;   output 17 depends on inputs: { 26 }
;   output 18 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 52, 53, 56, 57, 58, 60 }
;   output 19 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 44, 45, 46, 47, 52, 53, 56, 57, 58, 60 }
;   output 20 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 21 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 22 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 23 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 24 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 25 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;   output 26 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 53, 54, 56, 57, 58, 60 }
;   output 27 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 53, 54, 56, 57, 58, 60 }
;   output 28 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 53, 54, 56, 57, 58, 60 }
;   output 29 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 53, 54, 56, 57, 58, 60 }
;   output 32 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%MaterialModifiersConsts = type { [31 x <4 x float>] }
%hostlayout.CameraShaderConsts = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, i32, i32, <2 x i32>, float, float }
%hostlayout.FrequentVertexConsts = type { [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float> }
%CullObjectsCB = type { [8 x %struct.CullObjectPacked] }
%struct.CullObjectPacked = type { <2 x i32>, <2 x i32>, <3 x float>, float, <3 x float>, float, <3 x float>, i32 }

define void @vs_main_() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 77, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 10, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 3, i32 8, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 2, i32 5, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 7, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %7 = call i32 @dx.op.loadInput.i32(i32 4, i32 13, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 12, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 12, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 12, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call i32 @dx.op.loadInput.i32(i32 4, i32 11, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call i32 @dx.op.loadInput.i32(i32 4, i32 11, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call i32 @dx.op.loadInput.i32(i32 4, i32 11, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %20 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %21 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %22 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %23 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %24 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %25 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %26 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %27 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %28 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %29 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %30 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %31 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %32 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %33 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %34 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %35 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %36 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %37 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %38 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %39 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %40 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %41 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %42 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %43 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %44 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %45 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %46 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %47 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %48 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %49 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %50 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %51 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %52 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %53 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %54 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %55 = extractvalue %dx.types.CBufRet.i32 %54, 0
  %56 = extractvalue %dx.types.CBufRet.i32 %54, 1
  %57 = extractvalue %dx.types.CBufRet.i32 %54, 2
  %58 = bitcast float %45 to i32
  %59 = bitcast float %49 to i32
  %60 = bitcast float %53 to i32
  %61 = sub i32 %58, %55
  %62 = sub i32 %59, %56
  %63 = sub i32 %60, %57
  %64 = sitofp i32 %61 to float
  %65 = sitofp i32 %62 to float
  %66 = sitofp i32 %63 to float
  %67 = fmul fast float %64, 0x3EE0000000000000
  %68 = fmul fast float %65, 0x3EE0000000000000
  %69 = fmul fast float %66, 0x3EE0000000000000
  %70 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %71 = extractvalue %dx.types.CBufRet.f32 %70, 0
  %72 = extractvalue %dx.types.CBufRet.f32 %70, 1
  %73 = extractvalue %dx.types.CBufRet.f32 %70, 2
  %74 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %75 = extractvalue %dx.types.CBufRet.f32 %74, 0
  %76 = extractvalue %dx.types.CBufRet.f32 %74, 1
  %77 = extractvalue %dx.types.CBufRet.f32 %74, 2
  %78 = fmul fast float %75, %39
  %79 = fmul fast float %76, %40
  %80 = fmul fast float %77, %41
  %81 = fadd fast float %78, %71
  %82 = fadd fast float %79, %72
  %83 = fadd fast float %80, %73
  %84 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %85 = extractvalue %dx.types.CBufRet.f32 %84, 0
  %86 = fcmp fast ogt float %85, 5.000000e-01
  br i1 %86, label %87, label %93

; <label>:87                                      ; preds = %0
  %88 = and i32 %7, 255
  %89 = lshr i32 %7, 8
  %90 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1, i32 0, i32 %88, i32 %89, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %91 = extractvalue %dx.types.ResRet.f32 %90, 0
  %92 = fmul float %91, 2.500000e+00
  br label %93

; <label>:93                                      ; preds = %87, %0
  %94 = phi float [ %92, %87 ], [ 0.000000e+00, %0 ]
  %95 = fmul fast float %94, %8
  %96 = fmul fast float %94, %9
  %97 = fmul fast float %94, %10
  %98 = fadd fast float %81, %95
  %99 = fadd fast float %82, %96
  %100 = fadd fast float %83, %97
  %101 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %102 = extractvalue %dx.types.CBufRet.f32 %101, 0
  %103 = fptoui float %102 to i32
  %104 = call i32 @dx.op.binary.i32(i32 40, i32 %103, i32 8)  ; UMin(a,b)
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %171, label %106

; <label>:106                                     ; preds = %93
  br label %107

; <label>:107                                     ; preds = %107, %106
  %108 = phi float [ %167, %107 ], [ 0.000000e+00, %106 ]
  %109 = phi i32 [ %168, %107 ], [ 0, %106 ]
  %110 = shl i32 %109, 2
  %111 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %110)  ; CBufferLoadLegacy(handle,regIndex)
  %112 = extractvalue %dx.types.CBufRet.i32 %111, 0
  %113 = extractvalue %dx.types.CBufRet.i32 %111, 1
  %114 = call float @dx.op.legacyF16ToF32(i32 131, i32 %112)  ; LegacyF16ToF32(value)
  %115 = lshr i32 %112, 16
  %116 = call float @dx.op.legacyF16ToF32(i32 131, i32 %115)  ; LegacyF16ToF32(value)
  %117 = call float @dx.op.legacyF16ToF32(i32 131, i32 %113)  ; LegacyF16ToF32(value)
  %118 = lshr i32 %113, 16
  %119 = call float @dx.op.legacyF16ToF32(i32 131, i32 %118)  ; LegacyF16ToF32(value)
  %120 = or i32 %110, 1
  %121 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %120)  ; CBufferLoadLegacy(handle,regIndex)
  %122 = extractvalue %dx.types.CBufRet.f32 %121, 0
  %123 = extractvalue %dx.types.CBufRet.f32 %121, 1
  %124 = extractvalue %dx.types.CBufRet.f32 %121, 2
  %125 = extractvalue %dx.types.CBufRet.f32 %121, 3
  %126 = or i32 %110, 2
  %127 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %126)  ; CBufferLoadLegacy(handle,regIndex)
  %128 = extractvalue %dx.types.CBufRet.f32 %127, 0
  %129 = extractvalue %dx.types.CBufRet.f32 %127, 1
  %130 = extractvalue %dx.types.CBufRet.f32 %127, 2
  %131 = extractvalue %dx.types.CBufRet.f32 %127, 3
  %132 = call float @dx.op.dot4.f32(i32 56, float %114, float %116, float %117, float %119, float %98, float %99, float %100, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %133 = fmul fast float %132, -1.000000e+01
  %134 = call float @dx.op.unary.f32(i32 7, float %133)  ; Saturate(value)
  %135 = fsub fast float 1.000000e+00, %134
  %136 = fsub fast float %98, %122
  %137 = fsub fast float %99, %123
  %138 = fsub fast float %100, %124
  %139 = fsub fast float %128, %122
  %140 = fsub fast float %129, %123
  %141 = fsub fast float %130, %124
  %142 = call float @dx.op.dot3.f32(i32 55, float %136, float %137, float %138, float %139, float %140, float %141)  ; Dot3(ax,ay,az,bx,by,bz)
  %143 = call float @dx.op.dot3.f32(i32 55, float %139, float %140, float %141, float %139, float %140, float %141)  ; Dot3(ax,ay,az,bx,by,bz)
  %144 = fdiv fast float %142, %143
  %145 = fmul fast float %144, %139
  %146 = fmul fast float %144, %140
  %147 = fmul fast float %144, %141
  %148 = fsub fast float %122, %98
  %149 = fadd fast float %148, %145
  %150 = fsub fast float %123, %99
  %151 = fadd fast float %150, %146
  %152 = fsub fast float %124, %100
  %153 = fadd fast float %152, %147
  %154 = call float @dx.op.dot3.f32(i32 55, float %149, float %151, float %153, float %149, float %151, float %153)  ; Dot3(ax,ay,az,bx,by,bz)
  %155 = call float @dx.op.unary.f32(i32 24, float %154)  ; Sqrt(value)
  %156 = fmul fast float %125, 5.000000e-01
  %157 = fsub fast float %155, %156
  %158 = fdiv fast float %157, %156
  %159 = call float @dx.op.unary.f32(i32 7, float %158)  ; Saturate(value)
  %160 = fmul fast float %159, 2.000000e+00
  %161 = fsub fast float 3.000000e+00, %160
  %162 = fmul fast float %159, %159
  %163 = fmul fast float %162, %161
  %164 = fsub fast float 1.000000e+00, %163
  %165 = fmul fast float %135, %131
  %166 = fmul fast float %165, %164
  %167 = call float @dx.op.binary.f32(i32 35, float %166, float %108)  ; FMax(a,b)
  %168 = add nuw i32 %109, 1
  %169 = icmp eq i32 %168, %104
  br i1 %169, label %170, label %107

; <label>:170                                     ; preds = %107
  br label %171

; <label>:171                                     ; preds = %170, %93
  %172 = phi float [ 0.000000e+00, %93 ], [ %167, %170 ]
  %173 = call float @dx.op.unary.f32(i32 7, float %172)  ; Saturate(value)
  %174 = fmul fast float %173, %8
  %175 = fmul fast float %173, %9
  %176 = fmul fast float %173, %10
  %177 = fadd fast float %174, %98
  %178 = fadd fast float %175, %99
  %179 = fadd fast float %176, %100
  %180 = extractvalue %dx.types.CBufRet.f32 %101, 2
  %181 = fcmp fast ogt float %180, 5.000000e-01
  br i1 %181, label %257, label %182

; <label>:182                                     ; preds = %171
  br i1 %105, label %248, label %183

; <label>:183                                     ; preds = %182
  br label %184

; <label>:184                                     ; preds = %184, %183
  %185 = phi float [ %244, %184 ], [ 0.000000e+00, %183 ]
  %186 = phi i32 [ %245, %184 ], [ 0, %183 ]
  %187 = shl i32 %186, 2
  %188 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %187)  ; CBufferLoadLegacy(handle,regIndex)
  %189 = extractvalue %dx.types.CBufRet.i32 %188, 0
  %190 = extractvalue %dx.types.CBufRet.i32 %188, 1
  %191 = call float @dx.op.legacyF16ToF32(i32 131, i32 %189)  ; LegacyF16ToF32(value)
  %192 = lshr i32 %189, 16
  %193 = call float @dx.op.legacyF16ToF32(i32 131, i32 %192)  ; LegacyF16ToF32(value)
  %194 = call float @dx.op.legacyF16ToF32(i32 131, i32 %190)  ; LegacyF16ToF32(value)
  %195 = lshr i32 %190, 16
  %196 = call float @dx.op.legacyF16ToF32(i32 131, i32 %195)  ; LegacyF16ToF32(value)
  %197 = or i32 %187, 1
  %198 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %197)  ; CBufferLoadLegacy(handle,regIndex)
  %199 = extractvalue %dx.types.CBufRet.f32 %198, 0
  %200 = extractvalue %dx.types.CBufRet.f32 %198, 1
  %201 = extractvalue %dx.types.CBufRet.f32 %198, 2
  %202 = extractvalue %dx.types.CBufRet.f32 %198, 3
  %203 = or i32 %187, 2
  %204 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %203)  ; CBufferLoadLegacy(handle,regIndex)
  %205 = extractvalue %dx.types.CBufRet.f32 %204, 0
  %206 = extractvalue %dx.types.CBufRet.f32 %204, 1
  %207 = extractvalue %dx.types.CBufRet.f32 %204, 2
  %208 = extractvalue %dx.types.CBufRet.f32 %204, 3
  %209 = call float @dx.op.dot4.f32(i32 56, float %191, float %193, float %194, float %196, float %177, float %178, float %179, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %210 = fmul fast float %209, -1.000000e+01
  %211 = call float @dx.op.unary.f32(i32 7, float %210)  ; Saturate(value)
  %212 = fsub fast float 1.000000e+00, %211
  %213 = fsub fast float %177, %199
  %214 = fsub fast float %178, %200
  %215 = fsub fast float %179, %201
  %216 = fsub fast float %205, %199
  %217 = fsub fast float %206, %200
  %218 = fsub fast float %207, %201
  %219 = call float @dx.op.dot3.f32(i32 55, float %213, float %214, float %215, float %216, float %217, float %218)  ; Dot3(ax,ay,az,bx,by,bz)
  %220 = call float @dx.op.dot3.f32(i32 55, float %216, float %217, float %218, float %216, float %217, float %218)  ; Dot3(ax,ay,az,bx,by,bz)
  %221 = fdiv fast float %219, %220
  %222 = fmul fast float %221, %216
  %223 = fmul fast float %221, %217
  %224 = fmul fast float %221, %218
  %225 = fsub fast float %199, %177
  %226 = fadd fast float %225, %222
  %227 = fsub fast float %200, %178
  %228 = fadd fast float %227, %223
  %229 = fsub fast float %201, %179
  %230 = fadd fast float %229, %224
  %231 = call float @dx.op.dot3.f32(i32 55, float %226, float %228, float %230, float %226, float %228, float %230)  ; Dot3(ax,ay,az,bx,by,bz)
  %232 = call float @dx.op.unary.f32(i32 24, float %231)  ; Sqrt(value)
  %233 = fmul fast float %202, 5.000000e-01
  %234 = fsub fast float %232, %233
  %235 = fdiv fast float %234, %233
  %236 = call float @dx.op.unary.f32(i32 7, float %235)  ; Saturate(value)
  %237 = fmul fast float %236, 2.000000e+00
  %238 = fsub fast float 3.000000e+00, %237
  %239 = fmul fast float %236, %236
  %240 = fmul fast float %239, %238
  %241 = fsub fast float 1.000000e+00, %240
  %242 = fmul fast float %212, %208
  %243 = fmul fast float %242, %241
  %244 = call float @dx.op.binary.f32(i32 35, float %243, float %185)  ; FMax(a,b)
  %245 = add nuw i32 %186, 1
  %246 = icmp eq i32 %245, %104
  br i1 %246, label %247, label %184

; <label>:247                                     ; preds = %184
  br label %248

; <label>:248                                     ; preds = %247, %182
  %249 = phi float [ 0.000000e+00, %182 ], [ %244, %247 ]
  %250 = call float @dx.op.unary.f32(i32 7, float %249)  ; Saturate(value)
  %251 = fmul fast float %250, %8
  %252 = fmul fast float %250, %9
  %253 = fmul fast float %250, %10
  %254 = fadd fast float %251, %177
  %255 = fadd fast float %252, %178
  %256 = fadd fast float %253, %179
  br label %257

; <label>:257                                     ; preds = %248, %171
  %258 = phi float [ %177, %171 ], [ %254, %248 ]
  %259 = phi float [ %178, %171 ], [ %255, %248 ]
  %260 = phi float [ %179, %171 ], [ %256, %248 ]
  %261 = call float @dx.op.dot4.f32(i32 56, float %31, float %32, float %33, float %34, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %262 = call float @dx.op.dot4.f32(i32 56, float %23, float %24, float %25, float %26, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %263 = fadd fast float %262, %261
  %264 = call float @dx.op.binary.f32(i32 35, float 0x3EE4F8B580000000, float %263)  ; FMax(a,b)
  %265 = fdiv fast float %31, %264
  %266 = fdiv fast float %32, %264
  %267 = fdiv fast float %33, %264
  %268 = fdiv fast float %34, %264
  %269 = fdiv fast float %23, %264
  %270 = fdiv fast float %24, %264
  %271 = fdiv fast float %25, %264
  %272 = fdiv fast float %26, %264
  %273 = mul i32 %35, %12
  %274 = add i32 %273, %11
  %275 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %274, i32 undef)  ; BufferLoad(srv,index,wot)
  %276 = extractvalue %dx.types.ResRet.i32 %275, 0
  %277 = extractvalue %dx.types.ResRet.i32 %275, 1
  %278 = extractvalue %dx.types.ResRet.i32 %275, 2
  %279 = extractvalue %dx.types.ResRet.i32 %275, 3
  %280 = bitcast i32 %276 to float
  %281 = bitcast i32 %277 to float
  %282 = bitcast i32 %278 to float
  %283 = bitcast i32 %279 to float
  %284 = add i32 %274, 16
  %285 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %284, i32 undef)  ; BufferLoad(srv,index,wot)
  %286 = extractvalue %dx.types.ResRet.i32 %285, 0
  %287 = extractvalue %dx.types.ResRet.i32 %285, 1
  %288 = extractvalue %dx.types.ResRet.i32 %285, 2
  %289 = extractvalue %dx.types.ResRet.i32 %285, 3
  %290 = bitcast i32 %286 to float
  %291 = bitcast i32 %287 to float
  %292 = bitcast i32 %288 to float
  %293 = bitcast i32 %289 to float
  %294 = add i32 %274, 32
  %295 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %294, i32 undef)  ; BufferLoad(srv,index,wot)
  %296 = extractvalue %dx.types.ResRet.i32 %295, 0
  %297 = extractvalue %dx.types.ResRet.i32 %295, 1
  %298 = extractvalue %dx.types.ResRet.i32 %295, 2
  %299 = extractvalue %dx.types.ResRet.i32 %295, 3
  %300 = bitcast i32 %296 to float
  %301 = bitcast i32 %297 to float
  %302 = bitcast i32 %298 to float
  %303 = bitcast i32 %299 to float
  %304 = mul i32 %27, %12
  %305 = add i32 %304, %11
  %306 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %305, i32 undef)  ; BufferLoad(srv,index,wot)
  %307 = extractvalue %dx.types.ResRet.i32 %306, 0
  %308 = extractvalue %dx.types.ResRet.i32 %306, 1
  %309 = extractvalue %dx.types.ResRet.i32 %306, 2
  %310 = extractvalue %dx.types.ResRet.i32 %306, 3
  %311 = bitcast i32 %307 to float
  %312 = bitcast i32 %308 to float
  %313 = bitcast i32 %309 to float
  %314 = bitcast i32 %310 to float
  %315 = add i32 %305, 16
  %316 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %315, i32 undef)  ; BufferLoad(srv,index,wot)
  %317 = extractvalue %dx.types.ResRet.i32 %316, 0
  %318 = extractvalue %dx.types.ResRet.i32 %316, 1
  %319 = extractvalue %dx.types.ResRet.i32 %316, 2
  %320 = extractvalue %dx.types.ResRet.i32 %316, 3
  %321 = bitcast i32 %317 to float
  %322 = bitcast i32 %318 to float
  %323 = bitcast i32 %319 to float
  %324 = bitcast i32 %320 to float
  %325 = add i32 %305, 32
  %326 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %325, i32 undef)  ; BufferLoad(srv,index,wot)
  %327 = extractvalue %dx.types.ResRet.i32 %326, 0
  %328 = extractvalue %dx.types.ResRet.i32 %326, 1
  %329 = extractvalue %dx.types.ResRet.i32 %326, 2
  %330 = extractvalue %dx.types.ResRet.i32 %326, 3
  %331 = bitcast i32 %327 to float
  %332 = bitcast i32 %328 to float
  %333 = bitcast i32 %329 to float
  %334 = bitcast i32 %330 to float
  %335 = fmul fast float %280, %265
  %336 = fmul fast float %290, %265
  %337 = fmul fast float %300, %265
  %338 = fmul fast float %281, %265
  %339 = fmul fast float %291, %265
  %340 = fmul fast float %301, %265
  %341 = fmul fast float %282, %265
  %342 = fmul fast float %292, %265
  %343 = fmul fast float %302, %265
  %344 = fmul fast float %283, %265
  %345 = fmul fast float %293, %265
  %346 = fmul fast float %303, %265
  %347 = fmul fast float %311, %269
  %348 = fmul fast float %321, %269
  %349 = fmul fast float %331, %269
  %350 = fmul fast float %312, %269
  %351 = fmul fast float %322, %269
  %352 = fmul fast float %332, %269
  %353 = fmul fast float %313, %269
  %354 = fmul fast float %323, %269
  %355 = fmul fast float %333, %269
  %356 = fmul fast float %314, %269
  %357 = fmul fast float %324, %269
  %358 = fmul fast float %334, %269
  %359 = fadd fast float %347, %335
  %360 = fadd fast float %348, %336
  %361 = fadd fast float %349, %337
  %362 = fadd fast float %350, %338
  %363 = fadd fast float %351, %339
  %364 = fadd fast float %352, %340
  %365 = fadd fast float %353, %341
  %366 = fadd fast float %354, %342
  %367 = fadd fast float %355, %343
  %368 = fadd fast float %356, %344
  %369 = fadd fast float %357, %345
  %370 = fadd fast float %358, %346
  %371 = mul i32 %36, %12
  %372 = add i32 %371, %11
  %373 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %372, i32 undef)  ; BufferLoad(srv,index,wot)
  %374 = extractvalue %dx.types.ResRet.i32 %373, 0
  %375 = extractvalue %dx.types.ResRet.i32 %373, 1
  %376 = extractvalue %dx.types.ResRet.i32 %373, 2
  %377 = extractvalue %dx.types.ResRet.i32 %373, 3
  %378 = bitcast i32 %374 to float
  %379 = bitcast i32 %375 to float
  %380 = bitcast i32 %376 to float
  %381 = bitcast i32 %377 to float
  %382 = add i32 %372, 16
  %383 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %382, i32 undef)  ; BufferLoad(srv,index,wot)
  %384 = extractvalue %dx.types.ResRet.i32 %383, 0
  %385 = extractvalue %dx.types.ResRet.i32 %383, 1
  %386 = extractvalue %dx.types.ResRet.i32 %383, 2
  %387 = extractvalue %dx.types.ResRet.i32 %383, 3
  %388 = bitcast i32 %384 to float
  %389 = bitcast i32 %385 to float
  %390 = bitcast i32 %386 to float
  %391 = bitcast i32 %387 to float
  %392 = add i32 %372, 32
  %393 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %392, i32 undef)  ; BufferLoad(srv,index,wot)
  %394 = extractvalue %dx.types.ResRet.i32 %393, 0
  %395 = extractvalue %dx.types.ResRet.i32 %393, 1
  %396 = extractvalue %dx.types.ResRet.i32 %393, 2
  %397 = extractvalue %dx.types.ResRet.i32 %393, 3
  %398 = bitcast i32 %394 to float
  %399 = bitcast i32 %395 to float
  %400 = bitcast i32 %396 to float
  %401 = bitcast i32 %397 to float
  %402 = mul i32 %28, %12
  %403 = add i32 %402, %11
  %404 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %403, i32 undef)  ; BufferLoad(srv,index,wot)
  %405 = extractvalue %dx.types.ResRet.i32 %404, 0
  %406 = extractvalue %dx.types.ResRet.i32 %404, 1
  %407 = extractvalue %dx.types.ResRet.i32 %404, 2
  %408 = extractvalue %dx.types.ResRet.i32 %404, 3
  %409 = bitcast i32 %405 to float
  %410 = bitcast i32 %406 to float
  %411 = bitcast i32 %407 to float
  %412 = bitcast i32 %408 to float
  %413 = add i32 %403, 16
  %414 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %413, i32 undef)  ; BufferLoad(srv,index,wot)
  %415 = extractvalue %dx.types.ResRet.i32 %414, 0
  %416 = extractvalue %dx.types.ResRet.i32 %414, 1
  %417 = extractvalue %dx.types.ResRet.i32 %414, 2
  %418 = extractvalue %dx.types.ResRet.i32 %414, 3
  %419 = bitcast i32 %415 to float
  %420 = bitcast i32 %416 to float
  %421 = bitcast i32 %417 to float
  %422 = bitcast i32 %418 to float
  %423 = add i32 %403, 32
  %424 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %423, i32 undef)  ; BufferLoad(srv,index,wot)
  %425 = extractvalue %dx.types.ResRet.i32 %424, 0
  %426 = extractvalue %dx.types.ResRet.i32 %424, 1
  %427 = extractvalue %dx.types.ResRet.i32 %424, 2
  %428 = extractvalue %dx.types.ResRet.i32 %424, 3
  %429 = bitcast i32 %425 to float
  %430 = bitcast i32 %426 to float
  %431 = bitcast i32 %427 to float
  %432 = bitcast i32 %428 to float
  %433 = fmul fast float %378, %266
  %434 = fmul fast float %388, %266
  %435 = fmul fast float %398, %266
  %436 = fmul fast float %379, %266
  %437 = fmul fast float %389, %266
  %438 = fmul fast float %399, %266
  %439 = fmul fast float %380, %266
  %440 = fmul fast float %390, %266
  %441 = fmul fast float %400, %266
  %442 = fmul fast float %381, %266
  %443 = fmul fast float %391, %266
  %444 = fmul fast float %401, %266
  %445 = fadd fast float %359, %433
  %446 = fadd fast float %360, %434
  %447 = fadd fast float %361, %435
  %448 = fadd fast float %362, %436
  %449 = fadd fast float %363, %437
  %450 = fadd fast float %364, %438
  %451 = fadd fast float %365, %439
  %452 = fadd fast float %366, %440
  %453 = fadd fast float %367, %441
  %454 = fadd fast float %368, %442
  %455 = fadd fast float %369, %443
  %456 = fadd fast float %370, %444
  %457 = fmul fast float %409, %270
  %458 = fmul fast float %419, %270
  %459 = fmul fast float %429, %270
  %460 = fmul fast float %410, %270
  %461 = fmul fast float %420, %270
  %462 = fmul fast float %430, %270
  %463 = fmul fast float %411, %270
  %464 = fmul fast float %421, %270
  %465 = fmul fast float %431, %270
  %466 = fmul fast float %412, %270
  %467 = fmul fast float %422, %270
  %468 = fmul fast float %432, %270
  %469 = fadd fast float %445, %457
  %470 = fadd fast float %446, %458
  %471 = fadd fast float %447, %459
  %472 = fadd fast float %448, %460
  %473 = fadd fast float %449, %461
  %474 = fadd fast float %450, %462
  %475 = fadd fast float %451, %463
  %476 = fadd fast float %452, %464
  %477 = fadd fast float %453, %465
  %478 = fadd fast float %454, %466
  %479 = fadd fast float %455, %467
  %480 = fadd fast float %456, %468
  %481 = mul i32 %37, %12
  %482 = add i32 %481, %11
  %483 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %482, i32 undef)  ; BufferLoad(srv,index,wot)
  %484 = extractvalue %dx.types.ResRet.i32 %483, 0
  %485 = extractvalue %dx.types.ResRet.i32 %483, 1
  %486 = extractvalue %dx.types.ResRet.i32 %483, 2
  %487 = extractvalue %dx.types.ResRet.i32 %483, 3
  %488 = bitcast i32 %484 to float
  %489 = bitcast i32 %485 to float
  %490 = bitcast i32 %486 to float
  %491 = bitcast i32 %487 to float
  %492 = add i32 %482, 16
  %493 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %492, i32 undef)  ; BufferLoad(srv,index,wot)
  %494 = extractvalue %dx.types.ResRet.i32 %493, 0
  %495 = extractvalue %dx.types.ResRet.i32 %493, 1
  %496 = extractvalue %dx.types.ResRet.i32 %493, 2
  %497 = extractvalue %dx.types.ResRet.i32 %493, 3
  %498 = bitcast i32 %494 to float
  %499 = bitcast i32 %495 to float
  %500 = bitcast i32 %496 to float
  %501 = bitcast i32 %497 to float
  %502 = add i32 %482, 32
  %503 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %502, i32 undef)  ; BufferLoad(srv,index,wot)
  %504 = extractvalue %dx.types.ResRet.i32 %503, 0
  %505 = extractvalue %dx.types.ResRet.i32 %503, 1
  %506 = extractvalue %dx.types.ResRet.i32 %503, 2
  %507 = extractvalue %dx.types.ResRet.i32 %503, 3
  %508 = bitcast i32 %504 to float
  %509 = bitcast i32 %505 to float
  %510 = bitcast i32 %506 to float
  %511 = bitcast i32 %507 to float
  %512 = mul i32 %29, %12
  %513 = add i32 %512, %11
  %514 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %513, i32 undef)  ; BufferLoad(srv,index,wot)
  %515 = extractvalue %dx.types.ResRet.i32 %514, 0
  %516 = extractvalue %dx.types.ResRet.i32 %514, 1
  %517 = extractvalue %dx.types.ResRet.i32 %514, 2
  %518 = extractvalue %dx.types.ResRet.i32 %514, 3
  %519 = bitcast i32 %515 to float
  %520 = bitcast i32 %516 to float
  %521 = bitcast i32 %517 to float
  %522 = bitcast i32 %518 to float
  %523 = add i32 %513, 16
  %524 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %523, i32 undef)  ; BufferLoad(srv,index,wot)
  %525 = extractvalue %dx.types.ResRet.i32 %524, 0
  %526 = extractvalue %dx.types.ResRet.i32 %524, 1
  %527 = extractvalue %dx.types.ResRet.i32 %524, 2
  %528 = extractvalue %dx.types.ResRet.i32 %524, 3
  %529 = bitcast i32 %525 to float
  %530 = bitcast i32 %526 to float
  %531 = bitcast i32 %527 to float
  %532 = bitcast i32 %528 to float
  %533 = add i32 %513, 32
  %534 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %533, i32 undef)  ; BufferLoad(srv,index,wot)
  %535 = extractvalue %dx.types.ResRet.i32 %534, 0
  %536 = extractvalue %dx.types.ResRet.i32 %534, 1
  %537 = extractvalue %dx.types.ResRet.i32 %534, 2
  %538 = extractvalue %dx.types.ResRet.i32 %534, 3
  %539 = bitcast i32 %535 to float
  %540 = bitcast i32 %536 to float
  %541 = bitcast i32 %537 to float
  %542 = bitcast i32 %538 to float
  %543 = fmul fast float %488, %267
  %544 = fmul fast float %498, %267
  %545 = fmul fast float %508, %267
  %546 = fmul fast float %489, %267
  %547 = fmul fast float %499, %267
  %548 = fmul fast float %509, %267
  %549 = fmul fast float %490, %267
  %550 = fmul fast float %500, %267
  %551 = fmul fast float %510, %267
  %552 = fmul fast float %491, %267
  %553 = fmul fast float %501, %267
  %554 = fmul fast float %511, %267
  %555 = fadd fast float %469, %543
  %556 = fadd fast float %470, %544
  %557 = fadd fast float %471, %545
  %558 = fadd fast float %472, %546
  %559 = fadd fast float %473, %547
  %560 = fadd fast float %474, %548
  %561 = fadd fast float %475, %549
  %562 = fadd fast float %476, %550
  %563 = fadd fast float %477, %551
  %564 = fadd fast float %478, %552
  %565 = fadd fast float %479, %553
  %566 = fadd fast float %480, %554
  %567 = fmul fast float %519, %271
  %568 = fmul fast float %529, %271
  %569 = fmul fast float %539, %271
  %570 = fmul fast float %520, %271
  %571 = fmul fast float %530, %271
  %572 = fmul fast float %540, %271
  %573 = fmul fast float %521, %271
  %574 = fmul fast float %531, %271
  %575 = fmul fast float %541, %271
  %576 = fmul fast float %522, %271
  %577 = fmul fast float %532, %271
  %578 = fmul fast float %542, %271
  %579 = fadd fast float %555, %567
  %580 = fadd fast float %556, %568
  %581 = fadd fast float %557, %569
  %582 = fadd fast float %558, %570
  %583 = fadd fast float %559, %571
  %584 = fadd fast float %560, %572
  %585 = fadd fast float %561, %573
  %586 = fadd fast float %562, %574
  %587 = fadd fast float %563, %575
  %588 = fadd fast float %564, %576
  %589 = fadd fast float %565, %577
  %590 = fadd fast float %566, %578
  %591 = mul i32 %38, %12
  %592 = add i32 %591, %11
  %593 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %592, i32 undef)  ; BufferLoad(srv,index,wot)
  %594 = extractvalue %dx.types.ResRet.i32 %593, 0
  %595 = extractvalue %dx.types.ResRet.i32 %593, 1
  %596 = extractvalue %dx.types.ResRet.i32 %593, 2
  %597 = extractvalue %dx.types.ResRet.i32 %593, 3
  %598 = bitcast i32 %594 to float
  %599 = bitcast i32 %595 to float
  %600 = bitcast i32 %596 to float
  %601 = bitcast i32 %597 to float
  %602 = add i32 %592, 16
  %603 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %602, i32 undef)  ; BufferLoad(srv,index,wot)
  %604 = extractvalue %dx.types.ResRet.i32 %603, 0
  %605 = extractvalue %dx.types.ResRet.i32 %603, 1
  %606 = extractvalue %dx.types.ResRet.i32 %603, 2
  %607 = extractvalue %dx.types.ResRet.i32 %603, 3
  %608 = bitcast i32 %604 to float
  %609 = bitcast i32 %605 to float
  %610 = bitcast i32 %606 to float
  %611 = bitcast i32 %607 to float
  %612 = add i32 %592, 32
  %613 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %612, i32 undef)  ; BufferLoad(srv,index,wot)
  %614 = extractvalue %dx.types.ResRet.i32 %613, 0
  %615 = extractvalue %dx.types.ResRet.i32 %613, 1
  %616 = extractvalue %dx.types.ResRet.i32 %613, 2
  %617 = extractvalue %dx.types.ResRet.i32 %613, 3
  %618 = bitcast i32 %614 to float
  %619 = bitcast i32 %615 to float
  %620 = bitcast i32 %616 to float
  %621 = bitcast i32 %617 to float
  %622 = mul i32 %30, %12
  %623 = add i32 %622, %11
  %624 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %623, i32 undef)  ; BufferLoad(srv,index,wot)
  %625 = extractvalue %dx.types.ResRet.i32 %624, 0
  %626 = extractvalue %dx.types.ResRet.i32 %624, 1
  %627 = extractvalue %dx.types.ResRet.i32 %624, 2
  %628 = extractvalue %dx.types.ResRet.i32 %624, 3
  %629 = bitcast i32 %625 to float
  %630 = bitcast i32 %626 to float
  %631 = bitcast i32 %627 to float
  %632 = bitcast i32 %628 to float
  %633 = add i32 %623, 16
  %634 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %633, i32 undef)  ; BufferLoad(srv,index,wot)
  %635 = extractvalue %dx.types.ResRet.i32 %634, 0
  %636 = extractvalue %dx.types.ResRet.i32 %634, 1
  %637 = extractvalue %dx.types.ResRet.i32 %634, 2
  %638 = extractvalue %dx.types.ResRet.i32 %634, 3
  %639 = bitcast i32 %635 to float
  %640 = bitcast i32 %636 to float
  %641 = bitcast i32 %637 to float
  %642 = bitcast i32 %638 to float
  %643 = add i32 %623, 32
  %644 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %643, i32 undef)  ; BufferLoad(srv,index,wot)
  %645 = extractvalue %dx.types.ResRet.i32 %644, 0
  %646 = extractvalue %dx.types.ResRet.i32 %644, 1
  %647 = extractvalue %dx.types.ResRet.i32 %644, 2
  %648 = extractvalue %dx.types.ResRet.i32 %644, 3
  %649 = bitcast i32 %645 to float
  %650 = bitcast i32 %646 to float
  %651 = bitcast i32 %647 to float
  %652 = bitcast i32 %648 to float
  %653 = fmul fast float %598, %268
  %654 = fmul fast float %608, %268
  %655 = fmul fast float %618, %268
  %656 = fmul fast float %599, %268
  %657 = fmul fast float %609, %268
  %658 = fmul fast float %619, %268
  %659 = fmul fast float %600, %268
  %660 = fmul fast float %610, %268
  %661 = fmul fast float %620, %268
  %662 = fmul fast float %601, %268
  %663 = fmul fast float %611, %268
  %664 = fmul fast float %621, %268
  %665 = fadd fast float %579, %653
  %666 = fadd fast float %580, %654
  %667 = fadd fast float %581, %655
  %668 = fadd fast float %582, %656
  %669 = fadd fast float %583, %657
  %670 = fadd fast float %584, %658
  %671 = fadd fast float %585, %659
  %672 = fadd fast float %586, %660
  %673 = fadd fast float %587, %661
  %674 = fadd fast float %588, %662
  %675 = fadd fast float %589, %663
  %676 = fadd fast float %590, %664
  %677 = fmul fast float %629, %272
  %678 = fmul fast float %639, %272
  %679 = fmul fast float %649, %272
  %680 = fmul fast float %630, %272
  %681 = fmul fast float %640, %272
  %682 = fmul fast float %650, %272
  %683 = fmul fast float %631, %272
  %684 = fmul fast float %641, %272
  %685 = fmul fast float %651, %272
  %686 = fmul fast float %632, %272
  %687 = fmul fast float %642, %272
  %688 = fmul fast float %652, %272
  %689 = fadd fast float %665, %677
  %690 = fadd fast float %666, %678
  %691 = fadd fast float %667, %679
  %692 = fadd fast float %668, %680
  %693 = fadd fast float %669, %681
  %694 = fadd fast float %670, %682
  %695 = fadd fast float %671, %683
  %696 = fadd fast float %672, %684
  %697 = fadd fast float %673, %685
  %698 = fadd fast float %674, %686
  %699 = fadd fast float %675, %687
  %700 = fadd fast float %676, %688
  %701 = fmul fast float %689, %258
  %702 = call float @dx.op.tertiary.f32(i32 46, float %259, float %692, float %701)  ; FMad(a,b,c)
  %703 = call float @dx.op.tertiary.f32(i32 46, float %260, float %695, float %702)  ; FMad(a,b,c)
  %704 = fadd fast float %698, %703
  %705 = fmul fast float %690, %258
  %706 = call float @dx.op.tertiary.f32(i32 46, float %259, float %693, float %705)  ; FMad(a,b,c)
  %707 = call float @dx.op.tertiary.f32(i32 46, float %260, float %696, float %706)  ; FMad(a,b,c)
  %708 = fadd fast float %699, %707
  %709 = fmul fast float %691, %258
  %710 = call float @dx.op.tertiary.f32(i32 46, float %259, float %694, float %709)  ; FMad(a,b,c)
  %711 = call float @dx.op.tertiary.f32(i32 46, float %260, float %697, float %710)  ; FMad(a,b,c)
  %712 = fadd fast float %700, %711
  br i1 %181, label %713, label %788

; <label>:713                                     ; preds = %257
  br i1 %105, label %779, label %714

; <label>:714                                     ; preds = %713
  br label %715

; <label>:715                                     ; preds = %715, %714
  %716 = phi float [ %775, %715 ], [ 0.000000e+00, %714 ]
  %717 = phi i32 [ %776, %715 ], [ 0, %714 ]
  %718 = shl i32 %717, 2
  %719 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %718)  ; CBufferLoadLegacy(handle,regIndex)
  %720 = extractvalue %dx.types.CBufRet.i32 %719, 0
  %721 = extractvalue %dx.types.CBufRet.i32 %719, 1
  %722 = call float @dx.op.legacyF16ToF32(i32 131, i32 %720)  ; LegacyF16ToF32(value)
  %723 = lshr i32 %720, 16
  %724 = call float @dx.op.legacyF16ToF32(i32 131, i32 %723)  ; LegacyF16ToF32(value)
  %725 = call float @dx.op.legacyF16ToF32(i32 131, i32 %721)  ; LegacyF16ToF32(value)
  %726 = lshr i32 %721, 16
  %727 = call float @dx.op.legacyF16ToF32(i32 131, i32 %726)  ; LegacyF16ToF32(value)
  %728 = or i32 %718, 1
  %729 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %728)  ; CBufferLoadLegacy(handle,regIndex)
  %730 = extractvalue %dx.types.CBufRet.f32 %729, 0
  %731 = extractvalue %dx.types.CBufRet.f32 %729, 1
  %732 = extractvalue %dx.types.CBufRet.f32 %729, 2
  %733 = extractvalue %dx.types.CBufRet.f32 %729, 3
  %734 = or i32 %718, 2
  %735 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %734)  ; CBufferLoadLegacy(handle,regIndex)
  %736 = extractvalue %dx.types.CBufRet.f32 %735, 0
  %737 = extractvalue %dx.types.CBufRet.f32 %735, 1
  %738 = extractvalue %dx.types.CBufRet.f32 %735, 2
  %739 = extractvalue %dx.types.CBufRet.f32 %735, 3
  %740 = call float @dx.op.dot4.f32(i32 56, float %722, float %724, float %725, float %727, float %704, float %708, float %712, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %741 = fmul fast float %740, -1.000000e+01
  %742 = call float @dx.op.unary.f32(i32 7, float %741)  ; Saturate(value)
  %743 = fsub fast float 1.000000e+00, %742
  %744 = fsub fast float %704, %730
  %745 = fsub fast float %708, %731
  %746 = fsub fast float %712, %732
  %747 = fsub fast float %736, %730
  %748 = fsub fast float %737, %731
  %749 = fsub fast float %738, %732
  %750 = call float @dx.op.dot3.f32(i32 55, float %744, float %745, float %746, float %747, float %748, float %749)  ; Dot3(ax,ay,az,bx,by,bz)
  %751 = call float @dx.op.dot3.f32(i32 55, float %747, float %748, float %749, float %747, float %748, float %749)  ; Dot3(ax,ay,az,bx,by,bz)
  %752 = fdiv fast float %750, %751
  %753 = fmul fast float %752, %747
  %754 = fmul fast float %752, %748
  %755 = fmul fast float %752, %749
  %756 = fsub fast float %730, %704
  %757 = fadd fast float %756, %753
  %758 = fsub fast float %731, %708
  %759 = fadd fast float %758, %754
  %760 = fsub fast float %732, %712
  %761 = fadd fast float %760, %755
  %762 = call float @dx.op.dot3.f32(i32 55, float %757, float %759, float %761, float %757, float %759, float %761)  ; Dot3(ax,ay,az,bx,by,bz)
  %763 = call float @dx.op.unary.f32(i32 24, float %762)  ; Sqrt(value)
  %764 = fmul fast float %733, 5.000000e-01
  %765 = fsub fast float %763, %764
  %766 = fdiv fast float %765, %764
  %767 = call float @dx.op.unary.f32(i32 7, float %766)  ; Saturate(value)
  %768 = fmul fast float %767, 2.000000e+00
  %769 = fsub fast float 3.000000e+00, %768
  %770 = fmul fast float %767, %767
  %771 = fmul fast float %770, %769
  %772 = fsub fast float 1.000000e+00, %771
  %773 = fmul fast float %743, %739
  %774 = fmul fast float %773, %772
  %775 = call float @dx.op.binary.f32(i32 35, float %774, float %716)  ; FMax(a,b)
  %776 = add nuw i32 %717, 1
  %777 = icmp eq i32 %776, %104
  br i1 %777, label %778, label %715

; <label>:778                                     ; preds = %715
  br label %779

; <label>:779                                     ; preds = %778, %713
  %780 = phi float [ 0.000000e+00, %713 ], [ %775, %778 ]
  %781 = call float @dx.op.unary.f32(i32 7, float %780)  ; Saturate(value)
  %782 = fmul fast float %781, %8
  %783 = fmul fast float %781, %9
  %784 = fmul fast float %781, %10
  %785 = fadd fast float %782, %704
  %786 = fadd fast float %783, %708
  %787 = fadd fast float %784, %712
  br label %788

; <label>:788                                     ; preds = %779, %257
  %789 = phi float [ %785, %779 ], [ %704, %257 ]
  %790 = phi float [ %786, %779 ], [ %708, %257 ]
  %791 = phi float [ %787, %779 ], [ %712, %257 ]
  %792 = fmul fast float %789, %42
  %793 = call float @dx.op.tertiary.f32(i32 46, float %790, float %43, float %792)  ; FMad(a,b,c)
  %794 = call float @dx.op.tertiary.f32(i32 46, float %791, float %44, float %793)  ; FMad(a,b,c)
  %795 = fadd fast float %794, %67
  %796 = fmul fast float %789, %46
  %797 = call float @dx.op.tertiary.f32(i32 46, float %790, float %47, float %796)  ; FMad(a,b,c)
  %798 = call float @dx.op.tertiary.f32(i32 46, float %791, float %48, float %797)  ; FMad(a,b,c)
  %799 = fadd fast float %798, %68
  %800 = fmul fast float %789, %50
  %801 = call float @dx.op.tertiary.f32(i32 46, float %790, float %51, float %800)  ; FMad(a,b,c)
  %802 = call float @dx.op.tertiary.f32(i32 46, float %791, float %52, float %801)  ; FMad(a,b,c)
  %803 = fadd fast float %802, %69
  %804 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %805 = extractvalue %dx.types.CBufRet.f32 %804, 0
  %806 = extractvalue %dx.types.CBufRet.f32 %804, 1
  %807 = extractvalue %dx.types.CBufRet.f32 %804, 2
  %808 = extractvalue %dx.types.CBufRet.f32 %804, 3
  %809 = fmul fast float %805, %795
  %810 = call float @dx.op.tertiary.f32(i32 46, float %799, float %806, float %809)  ; FMad(a,b,c)
  %811 = call float @dx.op.tertiary.f32(i32 46, float %803, float %807, float %810)  ; FMad(a,b,c)
  %812 = fadd fast float %811, %808
  %813 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 37)  ; CBufferLoadLegacy(handle,regIndex)
  %814 = extractvalue %dx.types.CBufRet.f32 %813, 0
  %815 = extractvalue %dx.types.CBufRet.f32 %813, 1
  %816 = extractvalue %dx.types.CBufRet.f32 %813, 2
  %817 = fadd fast float %814, %795
  %818 = fadd fast float %815, %799
  %819 = fadd fast float %816, %803
  %820 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %821 = extractvalue %dx.types.CBufRet.f32 %820, 0
  %822 = extractvalue %dx.types.CBufRet.f32 %820, 1
  %823 = extractvalue %dx.types.CBufRet.f32 %820, 2
  %824 = extractvalue %dx.types.CBufRet.f32 %820, 3
  %825 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %826 = extractvalue %dx.types.CBufRet.f32 %825, 0
  %827 = extractvalue %dx.types.CBufRet.f32 %825, 1
  %828 = extractvalue %dx.types.CBufRet.f32 %825, 2
  %829 = extractvalue %dx.types.CBufRet.f32 %825, 3
  %830 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %831 = extractvalue %dx.types.CBufRet.f32 %830, 0
  %832 = extractvalue %dx.types.CBufRet.f32 %830, 1
  %833 = extractvalue %dx.types.CBufRet.f32 %830, 2
  %834 = extractvalue %dx.types.CBufRet.f32 %830, 3
  %835 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %836 = extractvalue %dx.types.CBufRet.f32 %835, 0
  %837 = extractvalue %dx.types.CBufRet.f32 %835, 1
  %838 = extractvalue %dx.types.CBufRet.f32 %835, 2
  %839 = extractvalue %dx.types.CBufRet.f32 %835, 3
  %840 = fmul fast float %821, %795
  %841 = call float @dx.op.tertiary.f32(i32 46, float %799, float %822, float %840)  ; FMad(a,b,c)
  %842 = call float @dx.op.tertiary.f32(i32 46, float %803, float %823, float %841)  ; FMad(a,b,c)
  %843 = fadd fast float %842, %824
  %844 = fmul fast float %826, %795
  %845 = call float @dx.op.tertiary.f32(i32 46, float %799, float %827, float %844)  ; FMad(a,b,c)
  %846 = call float @dx.op.tertiary.f32(i32 46, float %803, float %828, float %845)  ; FMad(a,b,c)
  %847 = fadd fast float %846, %829
  %848 = fmul fast float %831, %795
  %849 = call float @dx.op.tertiary.f32(i32 46, float %799, float %832, float %848)  ; FMad(a,b,c)
  %850 = call float @dx.op.tertiary.f32(i32 46, float %803, float %833, float %849)  ; FMad(a,b,c)
  %851 = fadd fast float %850, %834
  %852 = fmul fast float %836, %795
  %853 = call float @dx.op.tertiary.f32(i32 46, float %799, float %837, float %852)  ; FMad(a,b,c)
  %854 = call float @dx.op.tertiary.f32(i32 46, float %803, float %838, float %853)  ; FMad(a,b,c)
  %855 = fadd fast float %854, %839
  br i1 %181, label %931, label %856

; <label>:856                                     ; preds = %788
  br i1 %105, label %922, label %857

; <label>:857                                     ; preds = %856
  br label %858

; <label>:858                                     ; preds = %858, %857
  %859 = phi float [ %918, %858 ], [ 0.000000e+00, %857 ]
  %860 = phi i32 [ %919, %858 ], [ 0, %857 ]
  %861 = shl i32 %860, 2
  %862 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %861)  ; CBufferLoadLegacy(handle,regIndex)
  %863 = extractvalue %dx.types.CBufRet.i32 %862, 0
  %864 = extractvalue %dx.types.CBufRet.i32 %862, 1
  %865 = call float @dx.op.legacyF16ToF32(i32 131, i32 %863)  ; LegacyF16ToF32(value)
  %866 = lshr i32 %863, 16
  %867 = call float @dx.op.legacyF16ToF32(i32 131, i32 %866)  ; LegacyF16ToF32(value)
  %868 = call float @dx.op.legacyF16ToF32(i32 131, i32 %864)  ; LegacyF16ToF32(value)
  %869 = lshr i32 %864, 16
  %870 = call float @dx.op.legacyF16ToF32(i32 131, i32 %869)  ; LegacyF16ToF32(value)
  %871 = or i32 %861, 1
  %872 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %871)  ; CBufferLoadLegacy(handle,regIndex)
  %873 = extractvalue %dx.types.CBufRet.f32 %872, 0
  %874 = extractvalue %dx.types.CBufRet.f32 %872, 1
  %875 = extractvalue %dx.types.CBufRet.f32 %872, 2
  %876 = extractvalue %dx.types.CBufRet.f32 %872, 3
  %877 = or i32 %861, 2
  %878 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %877)  ; CBufferLoadLegacy(handle,regIndex)
  %879 = extractvalue %dx.types.CBufRet.f32 %878, 0
  %880 = extractvalue %dx.types.CBufRet.f32 %878, 1
  %881 = extractvalue %dx.types.CBufRet.f32 %878, 2
  %882 = extractvalue %dx.types.CBufRet.f32 %878, 3
  %883 = call float @dx.op.dot4.f32(i32 56, float %865, float %867, float %868, float %870, float %177, float %178, float %179, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %884 = fmul fast float %883, -1.000000e+01
  %885 = call float @dx.op.unary.f32(i32 7, float %884)  ; Saturate(value)
  %886 = fsub fast float 1.000000e+00, %885
  %887 = fsub fast float %177, %873
  %888 = fsub fast float %178, %874
  %889 = fsub fast float %179, %875
  %890 = fsub fast float %879, %873
  %891 = fsub fast float %880, %874
  %892 = fsub fast float %881, %875
  %893 = call float @dx.op.dot3.f32(i32 55, float %887, float %888, float %889, float %890, float %891, float %892)  ; Dot3(ax,ay,az,bx,by,bz)
  %894 = call float @dx.op.dot3.f32(i32 55, float %890, float %891, float %892, float %890, float %891, float %892)  ; Dot3(ax,ay,az,bx,by,bz)
  %895 = fdiv fast float %893, %894
  %896 = fmul fast float %895, %890
  %897 = fmul fast float %895, %891
  %898 = fmul fast float %895, %892
  %899 = fsub fast float %873, %177
  %900 = fadd fast float %899, %896
  %901 = fsub fast float %874, %178
  %902 = fadd fast float %901, %897
  %903 = fsub fast float %875, %179
  %904 = fadd fast float %903, %898
  %905 = call float @dx.op.dot3.f32(i32 55, float %900, float %902, float %904, float %900, float %902, float %904)  ; Dot3(ax,ay,az,bx,by,bz)
  %906 = call float @dx.op.unary.f32(i32 24, float %905)  ; Sqrt(value)
  %907 = fmul fast float %876, 5.000000e-01
  %908 = fsub fast float %906, %907
  %909 = fdiv fast float %908, %907
  %910 = call float @dx.op.unary.f32(i32 7, float %909)  ; Saturate(value)
  %911 = fmul fast float %910, 2.000000e+00
  %912 = fsub fast float 3.000000e+00, %911
  %913 = fmul fast float %910, %910
  %914 = fmul fast float %913, %912
  %915 = fsub fast float 1.000000e+00, %914
  %916 = fmul fast float %886, %882
  %917 = fmul fast float %916, %915
  %918 = call float @dx.op.binary.f32(i32 35, float %917, float %859)  ; FMax(a,b)
  %919 = add nuw i32 %860, 1
  %920 = icmp eq i32 %919, %104
  br i1 %920, label %921, label %858

; <label>:921                                     ; preds = %858
  br label %922

; <label>:922                                     ; preds = %921, %856
  %923 = phi float [ 0.000000e+00, %856 ], [ %918, %921 ]
  %924 = call float @dx.op.unary.f32(i32 7, float %923)  ; Saturate(value)
  %925 = fmul fast float %924, %8
  %926 = fmul fast float %924, %9
  %927 = fmul fast float %924, %10
  %928 = fadd fast float %925, %177
  %929 = fadd fast float %926, %178
  %930 = fadd fast float %927, %179
  br label %931

; <label>:931                                     ; preds = %922, %788
  %932 = phi float [ %177, %788 ], [ %928, %922 ]
  %933 = phi float [ %178, %788 ], [ %929, %922 ]
  %934 = phi float [ %179, %788 ], [ %930, %922 ]
  %935 = add i32 %273, %13
  %936 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %935, i32 undef)  ; BufferLoad(srv,index,wot)
  %937 = extractvalue %dx.types.ResRet.i32 %936, 0
  %938 = extractvalue %dx.types.ResRet.i32 %936, 1
  %939 = extractvalue %dx.types.ResRet.i32 %936, 2
  %940 = extractvalue %dx.types.ResRet.i32 %936, 3
  %941 = bitcast i32 %937 to float
  %942 = bitcast i32 %938 to float
  %943 = bitcast i32 %939 to float
  %944 = bitcast i32 %940 to float
  %945 = add i32 %935, 16
  %946 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %945, i32 undef)  ; BufferLoad(srv,index,wot)
  %947 = extractvalue %dx.types.ResRet.i32 %946, 0
  %948 = extractvalue %dx.types.ResRet.i32 %946, 1
  %949 = extractvalue %dx.types.ResRet.i32 %946, 2
  %950 = extractvalue %dx.types.ResRet.i32 %946, 3
  %951 = bitcast i32 %947 to float
  %952 = bitcast i32 %948 to float
  %953 = bitcast i32 %949 to float
  %954 = bitcast i32 %950 to float
  %955 = add i32 %935, 32
  %956 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %955, i32 undef)  ; BufferLoad(srv,index,wot)
  %957 = extractvalue %dx.types.ResRet.i32 %956, 0
  %958 = extractvalue %dx.types.ResRet.i32 %956, 1
  %959 = extractvalue %dx.types.ResRet.i32 %956, 2
  %960 = extractvalue %dx.types.ResRet.i32 %956, 3
  %961 = bitcast i32 %957 to float
  %962 = bitcast i32 %958 to float
  %963 = bitcast i32 %959 to float
  %964 = bitcast i32 %960 to float
  %965 = add i32 %304, %13
  %966 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %965, i32 undef)  ; BufferLoad(srv,index,wot)
  %967 = extractvalue %dx.types.ResRet.i32 %966, 0
  %968 = extractvalue %dx.types.ResRet.i32 %966, 1
  %969 = extractvalue %dx.types.ResRet.i32 %966, 2
  %970 = extractvalue %dx.types.ResRet.i32 %966, 3
  %971 = bitcast i32 %967 to float
  %972 = bitcast i32 %968 to float
  %973 = bitcast i32 %969 to float
  %974 = bitcast i32 %970 to float
  %975 = add i32 %965, 16
  %976 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %975, i32 undef)  ; BufferLoad(srv,index,wot)
  %977 = extractvalue %dx.types.ResRet.i32 %976, 0
  %978 = extractvalue %dx.types.ResRet.i32 %976, 1
  %979 = extractvalue %dx.types.ResRet.i32 %976, 2
  %980 = extractvalue %dx.types.ResRet.i32 %976, 3
  %981 = bitcast i32 %977 to float
  %982 = bitcast i32 %978 to float
  %983 = bitcast i32 %979 to float
  %984 = bitcast i32 %980 to float
  %985 = add i32 %965, 32
  %986 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %985, i32 undef)  ; BufferLoad(srv,index,wot)
  %987 = extractvalue %dx.types.ResRet.i32 %986, 0
  %988 = extractvalue %dx.types.ResRet.i32 %986, 1
  %989 = extractvalue %dx.types.ResRet.i32 %986, 2
  %990 = extractvalue %dx.types.ResRet.i32 %986, 3
  %991 = bitcast i32 %987 to float
  %992 = bitcast i32 %988 to float
  %993 = bitcast i32 %989 to float
  %994 = bitcast i32 %990 to float
  %995 = fmul fast float %941, %265
  %996 = fmul fast float %951, %265
  %997 = fmul fast float %961, %265
  %998 = fmul fast float %942, %265
  %999 = fmul fast float %952, %265
  %1000 = fmul fast float %962, %265
  %1001 = fmul fast float %943, %265
  %1002 = fmul fast float %953, %265
  %1003 = fmul fast float %963, %265
  %1004 = fmul fast float %944, %265
  %1005 = fmul fast float %954, %265
  %1006 = fmul fast float %964, %265
  %1007 = fmul fast float %971, %269
  %1008 = fmul fast float %981, %269
  %1009 = fmul fast float %991, %269
  %1010 = fmul fast float %972, %269
  %1011 = fmul fast float %982, %269
  %1012 = fmul fast float %992, %269
  %1013 = fmul fast float %973, %269
  %1014 = fmul fast float %983, %269
  %1015 = fmul fast float %993, %269
  %1016 = fmul fast float %974, %269
  %1017 = fmul fast float %984, %269
  %1018 = fmul fast float %994, %269
  %1019 = fadd fast float %1007, %995
  %1020 = fadd fast float %1008, %996
  %1021 = fadd fast float %1009, %997
  %1022 = fadd fast float %1010, %998
  %1023 = fadd fast float %1011, %999
  %1024 = fadd fast float %1012, %1000
  %1025 = fadd fast float %1013, %1001
  %1026 = fadd fast float %1014, %1002
  %1027 = fadd fast float %1015, %1003
  %1028 = fadd fast float %1016, %1004
  %1029 = fadd fast float %1017, %1005
  %1030 = fadd fast float %1018, %1006
  %1031 = add i32 %371, %13
  %1032 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1031, i32 undef)  ; BufferLoad(srv,index,wot)
  %1033 = extractvalue %dx.types.ResRet.i32 %1032, 0
  %1034 = extractvalue %dx.types.ResRet.i32 %1032, 1
  %1035 = extractvalue %dx.types.ResRet.i32 %1032, 2
  %1036 = extractvalue %dx.types.ResRet.i32 %1032, 3
  %1037 = bitcast i32 %1033 to float
  %1038 = bitcast i32 %1034 to float
  %1039 = bitcast i32 %1035 to float
  %1040 = bitcast i32 %1036 to float
  %1041 = add i32 %1031, 16
  %1042 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1041, i32 undef)  ; BufferLoad(srv,index,wot)
  %1043 = extractvalue %dx.types.ResRet.i32 %1042, 0
  %1044 = extractvalue %dx.types.ResRet.i32 %1042, 1
  %1045 = extractvalue %dx.types.ResRet.i32 %1042, 2
  %1046 = extractvalue %dx.types.ResRet.i32 %1042, 3
  %1047 = bitcast i32 %1043 to float
  %1048 = bitcast i32 %1044 to float
  %1049 = bitcast i32 %1045 to float
  %1050 = bitcast i32 %1046 to float
  %1051 = add i32 %1031, 32
  %1052 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1051, i32 undef)  ; BufferLoad(srv,index,wot)
  %1053 = extractvalue %dx.types.ResRet.i32 %1052, 0
  %1054 = extractvalue %dx.types.ResRet.i32 %1052, 1
  %1055 = extractvalue %dx.types.ResRet.i32 %1052, 2
  %1056 = extractvalue %dx.types.ResRet.i32 %1052, 3
  %1057 = bitcast i32 %1053 to float
  %1058 = bitcast i32 %1054 to float
  %1059 = bitcast i32 %1055 to float
  %1060 = bitcast i32 %1056 to float
  %1061 = add i32 %402, %13
  %1062 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1061, i32 undef)  ; BufferLoad(srv,index,wot)
  %1063 = extractvalue %dx.types.ResRet.i32 %1062, 0
  %1064 = extractvalue %dx.types.ResRet.i32 %1062, 1
  %1065 = extractvalue %dx.types.ResRet.i32 %1062, 2
  %1066 = extractvalue %dx.types.ResRet.i32 %1062, 3
  %1067 = bitcast i32 %1063 to float
  %1068 = bitcast i32 %1064 to float
  %1069 = bitcast i32 %1065 to float
  %1070 = bitcast i32 %1066 to float
  %1071 = add i32 %1061, 16
  %1072 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1071, i32 undef)  ; BufferLoad(srv,index,wot)
  %1073 = extractvalue %dx.types.ResRet.i32 %1072, 0
  %1074 = extractvalue %dx.types.ResRet.i32 %1072, 1
  %1075 = extractvalue %dx.types.ResRet.i32 %1072, 2
  %1076 = extractvalue %dx.types.ResRet.i32 %1072, 3
  %1077 = bitcast i32 %1073 to float
  %1078 = bitcast i32 %1074 to float
  %1079 = bitcast i32 %1075 to float
  %1080 = bitcast i32 %1076 to float
  %1081 = add i32 %1061, 32
  %1082 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1081, i32 undef)  ; BufferLoad(srv,index,wot)
  %1083 = extractvalue %dx.types.ResRet.i32 %1082, 0
  %1084 = extractvalue %dx.types.ResRet.i32 %1082, 1
  %1085 = extractvalue %dx.types.ResRet.i32 %1082, 2
  %1086 = extractvalue %dx.types.ResRet.i32 %1082, 3
  %1087 = bitcast i32 %1083 to float
  %1088 = bitcast i32 %1084 to float
  %1089 = bitcast i32 %1085 to float
  %1090 = bitcast i32 %1086 to float
  %1091 = fmul fast float %1037, %266
  %1092 = fmul fast float %1047, %266
  %1093 = fmul fast float %1057, %266
  %1094 = fmul fast float %1038, %266
  %1095 = fmul fast float %1048, %266
  %1096 = fmul fast float %1058, %266
  %1097 = fmul fast float %1039, %266
  %1098 = fmul fast float %1049, %266
  %1099 = fmul fast float %1059, %266
  %1100 = fmul fast float %1040, %266
  %1101 = fmul fast float %1050, %266
  %1102 = fmul fast float %1060, %266
  %1103 = fadd fast float %1019, %1091
  %1104 = fadd fast float %1020, %1092
  %1105 = fadd fast float %1021, %1093
  %1106 = fadd fast float %1022, %1094
  %1107 = fadd fast float %1023, %1095
  %1108 = fadd fast float %1024, %1096
  %1109 = fadd fast float %1025, %1097
  %1110 = fadd fast float %1026, %1098
  %1111 = fadd fast float %1027, %1099
  %1112 = fadd fast float %1028, %1100
  %1113 = fadd fast float %1029, %1101
  %1114 = fadd fast float %1030, %1102
  %1115 = fmul fast float %1067, %270
  %1116 = fmul fast float %1077, %270
  %1117 = fmul fast float %1087, %270
  %1118 = fmul fast float %1068, %270
  %1119 = fmul fast float %1078, %270
  %1120 = fmul fast float %1088, %270
  %1121 = fmul fast float %1069, %270
  %1122 = fmul fast float %1079, %270
  %1123 = fmul fast float %1089, %270
  %1124 = fmul fast float %1070, %270
  %1125 = fmul fast float %1080, %270
  %1126 = fmul fast float %1090, %270
  %1127 = fadd fast float %1103, %1115
  %1128 = fadd fast float %1104, %1116
  %1129 = fadd fast float %1105, %1117
  %1130 = fadd fast float %1106, %1118
  %1131 = fadd fast float %1107, %1119
  %1132 = fadd fast float %1108, %1120
  %1133 = fadd fast float %1109, %1121
  %1134 = fadd fast float %1110, %1122
  %1135 = fadd fast float %1111, %1123
  %1136 = fadd fast float %1112, %1124
  %1137 = fadd fast float %1113, %1125
  %1138 = fadd fast float %1114, %1126
  %1139 = add i32 %481, %13
  %1140 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1139, i32 undef)  ; BufferLoad(srv,index,wot)
  %1141 = extractvalue %dx.types.ResRet.i32 %1140, 0
  %1142 = extractvalue %dx.types.ResRet.i32 %1140, 1
  %1143 = extractvalue %dx.types.ResRet.i32 %1140, 2
  %1144 = extractvalue %dx.types.ResRet.i32 %1140, 3
  %1145 = bitcast i32 %1141 to float
  %1146 = bitcast i32 %1142 to float
  %1147 = bitcast i32 %1143 to float
  %1148 = bitcast i32 %1144 to float
  %1149 = add i32 %1139, 16
  %1150 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1149, i32 undef)  ; BufferLoad(srv,index,wot)
  %1151 = extractvalue %dx.types.ResRet.i32 %1150, 0
  %1152 = extractvalue %dx.types.ResRet.i32 %1150, 1
  %1153 = extractvalue %dx.types.ResRet.i32 %1150, 2
  %1154 = extractvalue %dx.types.ResRet.i32 %1150, 3
  %1155 = bitcast i32 %1151 to float
  %1156 = bitcast i32 %1152 to float
  %1157 = bitcast i32 %1153 to float
  %1158 = bitcast i32 %1154 to float
  %1159 = add i32 %1139, 32
  %1160 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1159, i32 undef)  ; BufferLoad(srv,index,wot)
  %1161 = extractvalue %dx.types.ResRet.i32 %1160, 0
  %1162 = extractvalue %dx.types.ResRet.i32 %1160, 1
  %1163 = extractvalue %dx.types.ResRet.i32 %1160, 2
  %1164 = extractvalue %dx.types.ResRet.i32 %1160, 3
  %1165 = bitcast i32 %1161 to float
  %1166 = bitcast i32 %1162 to float
  %1167 = bitcast i32 %1163 to float
  %1168 = bitcast i32 %1164 to float
  %1169 = add i32 %512, %13
  %1170 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1169, i32 undef)  ; BufferLoad(srv,index,wot)
  %1171 = extractvalue %dx.types.ResRet.i32 %1170, 0
  %1172 = extractvalue %dx.types.ResRet.i32 %1170, 1
  %1173 = extractvalue %dx.types.ResRet.i32 %1170, 2
  %1174 = extractvalue %dx.types.ResRet.i32 %1170, 3
  %1175 = bitcast i32 %1171 to float
  %1176 = bitcast i32 %1172 to float
  %1177 = bitcast i32 %1173 to float
  %1178 = bitcast i32 %1174 to float
  %1179 = add i32 %1169, 16
  %1180 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1179, i32 undef)  ; BufferLoad(srv,index,wot)
  %1181 = extractvalue %dx.types.ResRet.i32 %1180, 0
  %1182 = extractvalue %dx.types.ResRet.i32 %1180, 1
  %1183 = extractvalue %dx.types.ResRet.i32 %1180, 2
  %1184 = extractvalue %dx.types.ResRet.i32 %1180, 3
  %1185 = bitcast i32 %1181 to float
  %1186 = bitcast i32 %1182 to float
  %1187 = bitcast i32 %1183 to float
  %1188 = bitcast i32 %1184 to float
  %1189 = add i32 %1169, 32
  %1190 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1189, i32 undef)  ; BufferLoad(srv,index,wot)
  %1191 = extractvalue %dx.types.ResRet.i32 %1190, 0
  %1192 = extractvalue %dx.types.ResRet.i32 %1190, 1
  %1193 = extractvalue %dx.types.ResRet.i32 %1190, 2
  %1194 = extractvalue %dx.types.ResRet.i32 %1190, 3
  %1195 = bitcast i32 %1191 to float
  %1196 = bitcast i32 %1192 to float
  %1197 = bitcast i32 %1193 to float
  %1198 = bitcast i32 %1194 to float
  %1199 = fmul fast float %1145, %267
  %1200 = fmul fast float %1155, %267
  %1201 = fmul fast float %1165, %267
  %1202 = fmul fast float %1146, %267
  %1203 = fmul fast float %1156, %267
  %1204 = fmul fast float %1166, %267
  %1205 = fmul fast float %1147, %267
  %1206 = fmul fast float %1157, %267
  %1207 = fmul fast float %1167, %267
  %1208 = fmul fast float %1148, %267
  %1209 = fmul fast float %1158, %267
  %1210 = fmul fast float %1168, %267
  %1211 = fadd fast float %1127, %1199
  %1212 = fadd fast float %1128, %1200
  %1213 = fadd fast float %1129, %1201
  %1214 = fadd fast float %1130, %1202
  %1215 = fadd fast float %1131, %1203
  %1216 = fadd fast float %1132, %1204
  %1217 = fadd fast float %1133, %1205
  %1218 = fadd fast float %1134, %1206
  %1219 = fadd fast float %1135, %1207
  %1220 = fadd fast float %1136, %1208
  %1221 = fadd fast float %1137, %1209
  %1222 = fadd fast float %1138, %1210
  %1223 = fmul fast float %1175, %271
  %1224 = fmul fast float %1185, %271
  %1225 = fmul fast float %1195, %271
  %1226 = fmul fast float %1176, %271
  %1227 = fmul fast float %1186, %271
  %1228 = fmul fast float %1196, %271
  %1229 = fmul fast float %1177, %271
  %1230 = fmul fast float %1187, %271
  %1231 = fmul fast float %1197, %271
  %1232 = fmul fast float %1178, %271
  %1233 = fmul fast float %1188, %271
  %1234 = fmul fast float %1198, %271
  %1235 = fadd fast float %1211, %1223
  %1236 = fadd fast float %1212, %1224
  %1237 = fadd fast float %1213, %1225
  %1238 = fadd fast float %1214, %1226
  %1239 = fadd fast float %1215, %1227
  %1240 = fadd fast float %1216, %1228
  %1241 = fadd fast float %1217, %1229
  %1242 = fadd fast float %1218, %1230
  %1243 = fadd fast float %1219, %1231
  %1244 = fadd fast float %1220, %1232
  %1245 = fadd fast float %1221, %1233
  %1246 = fadd fast float %1222, %1234
  %1247 = add i32 %591, %13
  %1248 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1247, i32 undef)  ; BufferLoad(srv,index,wot)
  %1249 = extractvalue %dx.types.ResRet.i32 %1248, 0
  %1250 = extractvalue %dx.types.ResRet.i32 %1248, 1
  %1251 = extractvalue %dx.types.ResRet.i32 %1248, 2
  %1252 = extractvalue %dx.types.ResRet.i32 %1248, 3
  %1253 = bitcast i32 %1249 to float
  %1254 = bitcast i32 %1250 to float
  %1255 = bitcast i32 %1251 to float
  %1256 = bitcast i32 %1252 to float
  %1257 = add i32 %1247, 16
  %1258 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1257, i32 undef)  ; BufferLoad(srv,index,wot)
  %1259 = extractvalue %dx.types.ResRet.i32 %1258, 0
  %1260 = extractvalue %dx.types.ResRet.i32 %1258, 1
  %1261 = extractvalue %dx.types.ResRet.i32 %1258, 2
  %1262 = extractvalue %dx.types.ResRet.i32 %1258, 3
  %1263 = bitcast i32 %1259 to float
  %1264 = bitcast i32 %1260 to float
  %1265 = bitcast i32 %1261 to float
  %1266 = bitcast i32 %1262 to float
  %1267 = add i32 %1247, 32
  %1268 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1267, i32 undef)  ; BufferLoad(srv,index,wot)
  %1269 = extractvalue %dx.types.ResRet.i32 %1268, 0
  %1270 = extractvalue %dx.types.ResRet.i32 %1268, 1
  %1271 = extractvalue %dx.types.ResRet.i32 %1268, 2
  %1272 = extractvalue %dx.types.ResRet.i32 %1268, 3
  %1273 = bitcast i32 %1269 to float
  %1274 = bitcast i32 %1270 to float
  %1275 = bitcast i32 %1271 to float
  %1276 = bitcast i32 %1272 to float
  %1277 = add i32 %622, %13
  %1278 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1277, i32 undef)  ; BufferLoad(srv,index,wot)
  %1279 = extractvalue %dx.types.ResRet.i32 %1278, 0
  %1280 = extractvalue %dx.types.ResRet.i32 %1278, 1
  %1281 = extractvalue %dx.types.ResRet.i32 %1278, 2
  %1282 = extractvalue %dx.types.ResRet.i32 %1278, 3
  %1283 = bitcast i32 %1279 to float
  %1284 = bitcast i32 %1280 to float
  %1285 = bitcast i32 %1281 to float
  %1286 = bitcast i32 %1282 to float
  %1287 = add i32 %1277, 16
  %1288 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1287, i32 undef)  ; BufferLoad(srv,index,wot)
  %1289 = extractvalue %dx.types.ResRet.i32 %1288, 0
  %1290 = extractvalue %dx.types.ResRet.i32 %1288, 1
  %1291 = extractvalue %dx.types.ResRet.i32 %1288, 2
  %1292 = extractvalue %dx.types.ResRet.i32 %1288, 3
  %1293 = bitcast i32 %1289 to float
  %1294 = bitcast i32 %1290 to float
  %1295 = bitcast i32 %1291 to float
  %1296 = bitcast i32 %1292 to float
  %1297 = add i32 %1277, 32
  %1298 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %1297, i32 undef)  ; BufferLoad(srv,index,wot)
  %1299 = extractvalue %dx.types.ResRet.i32 %1298, 0
  %1300 = extractvalue %dx.types.ResRet.i32 %1298, 1
  %1301 = extractvalue %dx.types.ResRet.i32 %1298, 2
  %1302 = extractvalue %dx.types.ResRet.i32 %1298, 3
  %1303 = bitcast i32 %1299 to float
  %1304 = bitcast i32 %1300 to float
  %1305 = bitcast i32 %1301 to float
  %1306 = bitcast i32 %1302 to float
  %1307 = fmul fast float %1253, %268
  %1308 = fmul fast float %1263, %268
  %1309 = fmul fast float %1273, %268
  %1310 = fmul fast float %1254, %268
  %1311 = fmul fast float %1264, %268
  %1312 = fmul fast float %1274, %268
  %1313 = fmul fast float %1255, %268
  %1314 = fmul fast float %1265, %268
  %1315 = fmul fast float %1275, %268
  %1316 = fmul fast float %1256, %268
  %1317 = fmul fast float %1266, %268
  %1318 = fmul fast float %1276, %268
  %1319 = fadd fast float %1235, %1307
  %1320 = fadd fast float %1236, %1308
  %1321 = fadd fast float %1237, %1309
  %1322 = fadd fast float %1238, %1310
  %1323 = fadd fast float %1239, %1311
  %1324 = fadd fast float %1240, %1312
  %1325 = fadd fast float %1241, %1313
  %1326 = fadd fast float %1242, %1314
  %1327 = fadd fast float %1243, %1315
  %1328 = fadd fast float %1244, %1316
  %1329 = fadd fast float %1245, %1317
  %1330 = fadd fast float %1246, %1318
  %1331 = fmul fast float %1283, %272
  %1332 = fmul fast float %1293, %272
  %1333 = fmul fast float %1303, %272
  %1334 = fmul fast float %1284, %272
  %1335 = fmul fast float %1294, %272
  %1336 = fmul fast float %1304, %272
  %1337 = fmul fast float %1285, %272
  %1338 = fmul fast float %1295, %272
  %1339 = fmul fast float %1305, %272
  %1340 = fmul fast float %1286, %272
  %1341 = fmul fast float %1296, %272
  %1342 = fmul fast float %1306, %272
  %1343 = fadd fast float %1319, %1331
  %1344 = fadd fast float %1320, %1332
  %1345 = fadd fast float %1321, %1333
  %1346 = fadd fast float %1322, %1334
  %1347 = fadd fast float %1323, %1335
  %1348 = fadd fast float %1324, %1336
  %1349 = fadd fast float %1325, %1337
  %1350 = fadd fast float %1326, %1338
  %1351 = fadd fast float %1327, %1339
  %1352 = fadd fast float %1328, %1340
  %1353 = fadd fast float %1329, %1341
  %1354 = fadd fast float %1330, %1342
  %1355 = fmul fast float %1343, %932
  %1356 = call float @dx.op.tertiary.f32(i32 46, float %933, float %1346, float %1355)  ; FMad(a,b,c)
  %1357 = call float @dx.op.tertiary.f32(i32 46, float %934, float %1349, float %1356)  ; FMad(a,b,c)
  %1358 = fadd fast float %1352, %1357
  %1359 = fmul fast float %1344, %932
  %1360 = call float @dx.op.tertiary.f32(i32 46, float %933, float %1347, float %1359)  ; FMad(a,b,c)
  %1361 = call float @dx.op.tertiary.f32(i32 46, float %934, float %1350, float %1360)  ; FMad(a,b,c)
  %1362 = fadd fast float %1353, %1361
  %1363 = fmul fast float %1345, %932
  %1364 = call float @dx.op.tertiary.f32(i32 46, float %933, float %1348, float %1363)  ; FMad(a,b,c)
  %1365 = call float @dx.op.tertiary.f32(i32 46, float %934, float %1351, float %1364)  ; FMad(a,b,c)
  %1366 = fadd fast float %1354, %1365
  br i1 %181, label %1367, label %1442

; <label>:1367                                    ; preds = %931
  br i1 %105, label %1433, label %1368

; <label>:1368                                    ; preds = %1367
  br label %1369

; <label>:1369                                    ; preds = %1369, %1368
  %1370 = phi float [ %1429, %1369 ], [ 0.000000e+00, %1368 ]
  %1371 = phi i32 [ %1430, %1369 ], [ 0, %1368 ]
  %1372 = shl i32 %1371, 2
  %1373 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %1372)  ; CBufferLoadLegacy(handle,regIndex)
  %1374 = extractvalue %dx.types.CBufRet.i32 %1373, 0
  %1375 = extractvalue %dx.types.CBufRet.i32 %1373, 1
  %1376 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1374)  ; LegacyF16ToF32(value)
  %1377 = lshr i32 %1374, 16
  %1378 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1377)  ; LegacyF16ToF32(value)
  %1379 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1375)  ; LegacyF16ToF32(value)
  %1380 = lshr i32 %1375, 16
  %1381 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1380)  ; LegacyF16ToF32(value)
  %1382 = or i32 %1372, 1
  %1383 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %1382)  ; CBufferLoadLegacy(handle,regIndex)
  %1384 = extractvalue %dx.types.CBufRet.f32 %1383, 0
  %1385 = extractvalue %dx.types.CBufRet.f32 %1383, 1
  %1386 = extractvalue %dx.types.CBufRet.f32 %1383, 2
  %1387 = extractvalue %dx.types.CBufRet.f32 %1383, 3
  %1388 = or i32 %1372, 2
  %1389 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %1388)  ; CBufferLoadLegacy(handle,regIndex)
  %1390 = extractvalue %dx.types.CBufRet.f32 %1389, 0
  %1391 = extractvalue %dx.types.CBufRet.f32 %1389, 1
  %1392 = extractvalue %dx.types.CBufRet.f32 %1389, 2
  %1393 = extractvalue %dx.types.CBufRet.f32 %1389, 3
  %1394 = call float @dx.op.dot4.f32(i32 56, float %1376, float %1378, float %1379, float %1381, float %1358, float %1362, float %1366, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1395 = fmul fast float %1394, -1.000000e+01
  %1396 = call float @dx.op.unary.f32(i32 7, float %1395)  ; Saturate(value)
  %1397 = fsub fast float 1.000000e+00, %1396
  %1398 = fsub fast float %1358, %1384
  %1399 = fsub fast float %1362, %1385
  %1400 = fsub fast float %1366, %1386
  %1401 = fsub fast float %1390, %1384
  %1402 = fsub fast float %1391, %1385
  %1403 = fsub fast float %1392, %1386
  %1404 = call float @dx.op.dot3.f32(i32 55, float %1398, float %1399, float %1400, float %1401, float %1402, float %1403)  ; Dot3(ax,ay,az,bx,by,bz)
  %1405 = call float @dx.op.dot3.f32(i32 55, float %1401, float %1402, float %1403, float %1401, float %1402, float %1403)  ; Dot3(ax,ay,az,bx,by,bz)
  %1406 = fdiv fast float %1404, %1405
  %1407 = fmul fast float %1406, %1401
  %1408 = fmul fast float %1406, %1402
  %1409 = fmul fast float %1406, %1403
  %1410 = fsub fast float %1384, %1358
  %1411 = fadd fast float %1410, %1407
  %1412 = fsub fast float %1385, %1362
  %1413 = fadd fast float %1412, %1408
  %1414 = fsub fast float %1386, %1366
  %1415 = fadd fast float %1414, %1409
  %1416 = call float @dx.op.dot3.f32(i32 55, float %1411, float %1413, float %1415, float %1411, float %1413, float %1415)  ; Dot3(ax,ay,az,bx,by,bz)
  %1417 = call float @dx.op.unary.f32(i32 24, float %1416)  ; Sqrt(value)
  %1418 = fmul fast float %1387, 5.000000e-01
  %1419 = fsub fast float %1417, %1418
  %1420 = fdiv fast float %1419, %1418
  %1421 = call float @dx.op.unary.f32(i32 7, float %1420)  ; Saturate(value)
  %1422 = fmul fast float %1421, 2.000000e+00
  %1423 = fsub fast float 3.000000e+00, %1422
  %1424 = fmul fast float %1421, %1421
  %1425 = fmul fast float %1424, %1423
  %1426 = fsub fast float 1.000000e+00, %1425
  %1427 = fmul fast float %1397, %1393
  %1428 = fmul fast float %1427, %1426
  %1429 = call float @dx.op.binary.f32(i32 35, float %1428, float %1370)  ; FMax(a,b)
  %1430 = add nuw i32 %1371, 1
  %1431 = icmp eq i32 %1430, %104
  br i1 %1431, label %1432, label %1369

; <label>:1432                                    ; preds = %1369
  br label %1433

; <label>:1433                                    ; preds = %1432, %1367
  %1434 = phi float [ 0.000000e+00, %1367 ], [ %1429, %1432 ]
  %1435 = call float @dx.op.unary.f32(i32 7, float %1434)  ; Saturate(value)
  %1436 = fmul fast float %1435, %8
  %1437 = fmul fast float %1435, %9
  %1438 = fmul fast float %1435, %10
  %1439 = fadd fast float %1436, %1358
  %1440 = fadd fast float %1437, %1362
  %1441 = fadd fast float %1438, %1366
  br label %1442

; <label>:1442                                    ; preds = %1433, %931
  %1443 = phi float [ %1439, %1433 ], [ %1358, %931 ]
  %1444 = phi float [ %1440, %1433 ], [ %1362, %931 ]
  %1445 = phi float [ %1441, %1433 ], [ %1366, %931 ]
  %1446 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1447 = extractvalue %dx.types.CBufRet.f32 %1446, 0
  %1448 = extractvalue %dx.types.CBufRet.f32 %1446, 1
  %1449 = extractvalue %dx.types.CBufRet.f32 %1446, 2
  %1450 = extractvalue %dx.types.CBufRet.f32 %1446, 3
  %1451 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1452 = extractvalue %dx.types.CBufRet.f32 %1451, 0
  %1453 = extractvalue %dx.types.CBufRet.f32 %1451, 1
  %1454 = extractvalue %dx.types.CBufRet.f32 %1451, 2
  %1455 = extractvalue %dx.types.CBufRet.f32 %1451, 3
  %1456 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1457 = extractvalue %dx.types.CBufRet.f32 %1456, 0
  %1458 = extractvalue %dx.types.CBufRet.f32 %1456, 1
  %1459 = extractvalue %dx.types.CBufRet.f32 %1456, 2
  %1460 = extractvalue %dx.types.CBufRet.f32 %1456, 3
  %1461 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %1462 = extractvalue %dx.types.CBufRet.i32 %1461, 0
  %1463 = extractvalue %dx.types.CBufRet.i32 %1461, 1
  %1464 = extractvalue %dx.types.CBufRet.i32 %1461, 2
  %1465 = bitcast float %1450 to i32
  %1466 = bitcast float %1455 to i32
  %1467 = bitcast float %1460 to i32
  %1468 = sub i32 %1465, %1462
  %1469 = sub i32 %1466, %1463
  %1470 = sub i32 %1467, %1464
  %1471 = sitofp i32 %1468 to float
  %1472 = sitofp i32 %1469 to float
  %1473 = sitofp i32 %1470 to float
  %1474 = fmul fast float %1471, 0x3EE0000000000000
  %1475 = fmul fast float %1472, 0x3EE0000000000000
  %1476 = fmul fast float %1473, 0x3EE0000000000000
  %1477 = fmul fast float %1447, %1443
  %1478 = call float @dx.op.tertiary.f32(i32 46, float %1448, float %1444, float %1477)  ; FMad(a,b,c)
  %1479 = call float @dx.op.tertiary.f32(i32 46, float %1449, float %1445, float %1478)  ; FMad(a,b,c)
  %1480 = fadd fast float %1474, %1479
  %1481 = fmul fast float %1452, %1443
  %1482 = call float @dx.op.tertiary.f32(i32 46, float %1453, float %1444, float %1481)  ; FMad(a,b,c)
  %1483 = call float @dx.op.tertiary.f32(i32 46, float %1454, float %1445, float %1482)  ; FMad(a,b,c)
  %1484 = fadd fast float %1475, %1483
  %1485 = fmul fast float %1457, %1443
  %1486 = call float @dx.op.tertiary.f32(i32 46, float %1458, float %1444, float %1485)  ; FMad(a,b,c)
  %1487 = call float @dx.op.tertiary.f32(i32 46, float %1459, float %1445, float %1486)  ; FMad(a,b,c)
  %1488 = fadd fast float %1487, %1476
  %1489 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %1490 = extractvalue %dx.types.CBufRet.f32 %1489, 0
  %1491 = extractvalue %dx.types.CBufRet.f32 %1489, 1
  %1492 = extractvalue %dx.types.CBufRet.f32 %1489, 2
  %1493 = extractvalue %dx.types.CBufRet.f32 %1489, 3
  %1494 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %1495 = extractvalue %dx.types.CBufRet.f32 %1494, 0
  %1496 = extractvalue %dx.types.CBufRet.f32 %1494, 1
  %1497 = extractvalue %dx.types.CBufRet.f32 %1494, 2
  %1498 = extractvalue %dx.types.CBufRet.f32 %1494, 3
  %1499 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 18)  ; CBufferLoadLegacy(handle,regIndex)
  %1500 = extractvalue %dx.types.CBufRet.f32 %1499, 0
  %1501 = extractvalue %dx.types.CBufRet.f32 %1499, 1
  %1502 = extractvalue %dx.types.CBufRet.f32 %1499, 2
  %1503 = extractvalue %dx.types.CBufRet.f32 %1499, 3
  %1504 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %1505 = extractvalue %dx.types.CBufRet.f32 %1504, 0
  %1506 = extractvalue %dx.types.CBufRet.f32 %1504, 1
  %1507 = extractvalue %dx.types.CBufRet.f32 %1504, 2
  %1508 = extractvalue %dx.types.CBufRet.f32 %1504, 3
  %1509 = fmul fast float %1490, %1480
  %1510 = call float @dx.op.tertiary.f32(i32 46, float %1484, float %1491, float %1509)  ; FMad(a,b,c)
  %1511 = call float @dx.op.tertiary.f32(i32 46, float %1488, float %1492, float %1510)  ; FMad(a,b,c)
  %1512 = fadd fast float %1511, %1493
  %1513 = fmul fast float %1495, %1480
  %1514 = call float @dx.op.tertiary.f32(i32 46, float %1484, float %1496, float %1513)  ; FMad(a,b,c)
  %1515 = call float @dx.op.tertiary.f32(i32 46, float %1488, float %1497, float %1514)  ; FMad(a,b,c)
  %1516 = fadd fast float %1515, %1498
  %1517 = fmul fast float %1500, %1480
  %1518 = call float @dx.op.tertiary.f32(i32 46, float %1484, float %1501, float %1517)  ; FMad(a,b,c)
  %1519 = call float @dx.op.tertiary.f32(i32 46, float %1488, float %1502, float %1518)  ; FMad(a,b,c)
  %1520 = fadd fast float %1519, %1503
  %1521 = fmul fast float %1505, %1480
  %1522 = call float @dx.op.tertiary.f32(i32 46, float %1484, float %1506, float %1521)  ; FMad(a,b,c)
  %1523 = call float @dx.op.tertiary.f32(i32 46, float %1488, float %1507, float %1522)  ; FMad(a,b,c)
  %1524 = fadd fast float %1523, %1508
  %1525 = fmul fast float %689, %42
  %1526 = call float @dx.op.tertiary.f32(i32 46, float %690, float %43, float %1525)  ; FMad(a,b,c)
  %1527 = call float @dx.op.tertiary.f32(i32 46, float %691, float %44, float %1526)  ; FMad(a,b,c)
  %1528 = fmul fast float %689, %46
  %1529 = call float @dx.op.tertiary.f32(i32 46, float %690, float %47, float %1528)  ; FMad(a,b,c)
  %1530 = call float @dx.op.tertiary.f32(i32 46, float %691, float %48, float %1529)  ; FMad(a,b,c)
  %1531 = fmul fast float %689, %50
  %1532 = call float @dx.op.tertiary.f32(i32 46, float %690, float %51, float %1531)  ; FMad(a,b,c)
  %1533 = call float @dx.op.tertiary.f32(i32 46, float %691, float %52, float %1532)  ; FMad(a,b,c)
  %1534 = fmul fast float %692, %42
  %1535 = call float @dx.op.tertiary.f32(i32 46, float %693, float %43, float %1534)  ; FMad(a,b,c)
  %1536 = call float @dx.op.tertiary.f32(i32 46, float %694, float %44, float %1535)  ; FMad(a,b,c)
  %1537 = fmul fast float %692, %46
  %1538 = call float @dx.op.tertiary.f32(i32 46, float %693, float %47, float %1537)  ; FMad(a,b,c)
  %1539 = call float @dx.op.tertiary.f32(i32 46, float %694, float %48, float %1538)  ; FMad(a,b,c)
  %1540 = fmul fast float %692, %50
  %1541 = call float @dx.op.tertiary.f32(i32 46, float %693, float %51, float %1540)  ; FMad(a,b,c)
  %1542 = call float @dx.op.tertiary.f32(i32 46, float %694, float %52, float %1541)  ; FMad(a,b,c)
  %1543 = fmul fast float %695, %42
  %1544 = call float @dx.op.tertiary.f32(i32 46, float %696, float %43, float %1543)  ; FMad(a,b,c)
  %1545 = call float @dx.op.tertiary.f32(i32 46, float %697, float %44, float %1544)  ; FMad(a,b,c)
  %1546 = fmul fast float %695, %46
  %1547 = call float @dx.op.tertiary.f32(i32 46, float %696, float %47, float %1546)  ; FMad(a,b,c)
  %1548 = call float @dx.op.tertiary.f32(i32 46, float %697, float %48, float %1547)  ; FMad(a,b,c)
  %1549 = fmul fast float %695, %50
  %1550 = call float @dx.op.tertiary.f32(i32 46, float %696, float %51, float %1549)  ; FMad(a,b,c)
  %1551 = call float @dx.op.tertiary.f32(i32 46, float %697, float %52, float %1550)  ; FMad(a,b,c)
  %1552 = fmul fast float %18, 2.000000e+00
  %1553 = fmul fast float %19, 2.000000e+00
  %1554 = fmul fast float %20, 2.000000e+00
  %1555 = fadd fast float %1552, -1.000000e+00
  %1556 = fadd fast float %1553, -1.000000e+00
  %1557 = fadd fast float %1554, -1.000000e+00
  %1558 = fmul fast float %14, 2.000000e+00
  %1559 = fmul fast float %15, 2.000000e+00
  %1560 = fmul fast float %16, 2.000000e+00
  %1561 = fadd fast float %1558, -1.000000e+00
  %1562 = fadd fast float %1559, -1.000000e+00
  %1563 = fadd fast float %1560, -1.000000e+00
  %1564 = fmul fast float %17, 2.000000e+00
  %1565 = fadd fast float %1564, -1.000000e+00
  %1566 = fmul fast float %1556, %1563
  %1567 = fmul fast float %1557, %1562
  %1568 = fsub fast float %1566, %1567
  %1569 = fmul fast float %1557, %1561
  %1570 = fmul fast float %1555, %1563
  %1571 = fsub fast float %1569, %1570
  %1572 = fmul fast float %1555, %1562
  %1573 = fmul fast float %1556, %1561
  %1574 = fsub fast float %1572, %1573
  %1575 = fmul fast float %1568, %1565
  %1576 = fmul fast float %1571, %1565
  %1577 = fmul fast float %1574, %1565
  %1578 = fmul fast float %1527, %1561
  %1579 = call float @dx.op.tertiary.f32(i32 46, float %1562, float %1536, float %1578)  ; FMad(a,b,c)
  %1580 = call float @dx.op.tertiary.f32(i32 46, float %1563, float %1545, float %1579)  ; FMad(a,b,c)
  %1581 = fmul fast float %1530, %1561
  %1582 = call float @dx.op.tertiary.f32(i32 46, float %1562, float %1539, float %1581)  ; FMad(a,b,c)
  %1583 = call float @dx.op.tertiary.f32(i32 46, float %1563, float %1548, float %1582)  ; FMad(a,b,c)
  %1584 = fmul fast float %1533, %1561
  %1585 = call float @dx.op.tertiary.f32(i32 46, float %1562, float %1542, float %1584)  ; FMad(a,b,c)
  %1586 = call float @dx.op.tertiary.f32(i32 46, float %1563, float %1551, float %1585)  ; FMad(a,b,c)
  %1587 = fmul fast float %1527, %1575
  %1588 = call float @dx.op.tertiary.f32(i32 46, float %1576, float %1536, float %1587)  ; FMad(a,b,c)
  %1589 = call float @dx.op.tertiary.f32(i32 46, float %1577, float %1545, float %1588)  ; FMad(a,b,c)
  %1590 = fmul fast float %1530, %1575
  %1591 = call float @dx.op.tertiary.f32(i32 46, float %1576, float %1539, float %1590)  ; FMad(a,b,c)
  %1592 = call float @dx.op.tertiary.f32(i32 46, float %1577, float %1548, float %1591)  ; FMad(a,b,c)
  %1593 = fmul fast float %1533, %1575
  %1594 = call float @dx.op.tertiary.f32(i32 46, float %1576, float %1542, float %1593)  ; FMad(a,b,c)
  %1595 = call float @dx.op.tertiary.f32(i32 46, float %1577, float %1551, float %1594)  ; FMad(a,b,c)
  %1596 = fmul fast float %1527, %1555
  %1597 = call float @dx.op.tertiary.f32(i32 46, float %1556, float %1536, float %1596)  ; FMad(a,b,c)
  %1598 = call float @dx.op.tertiary.f32(i32 46, float %1557, float %1545, float %1597)  ; FMad(a,b,c)
  %1599 = fmul fast float %1530, %1555
  %1600 = call float @dx.op.tertiary.f32(i32 46, float %1556, float %1539, float %1599)  ; FMad(a,b,c)
  %1601 = call float @dx.op.tertiary.f32(i32 46, float %1557, float %1548, float %1600)  ; FMad(a,b,c)
  %1602 = fmul fast float %1533, %1555
  %1603 = call float @dx.op.tertiary.f32(i32 46, float %1556, float %1542, float %1602)  ; FMad(a,b,c)
  %1604 = call float @dx.op.tertiary.f32(i32 46, float %1557, float %1551, float %1603)  ; FMad(a,b,c)
  %1605 = call float @dx.op.dot3.f32(i32 55, float %1598, float %1601, float %1604, float %1598, float %1601, float %1604)  ; Dot3(ax,ay,az,bx,by,bz)
  %1606 = call float @dx.op.unary.f32(i32 25, float %1605)  ; Rsqrt(value)
  %1607 = fmul fast float %1606, %1598
  %1608 = fmul fast float %1606, %1601
  %1609 = fmul fast float %1606, %1604
  %1610 = call float @dx.op.dot3.f32(i32 55, float %1589, float %1592, float %1595, float %1589, float %1592, float %1595)  ; Dot3(ax,ay,az,bx,by,bz)
  %1611 = call float @dx.op.unary.f32(i32 25, float %1610)  ; Rsqrt(value)
  %1612 = fmul fast float %1611, %1589
  %1613 = fmul fast float %1611, %1592
  %1614 = fmul fast float %1611, %1595
  %1615 = call float @dx.op.dot3.f32(i32 55, float %1580, float %1583, float %1586, float %1580, float %1583, float %1586)  ; Dot3(ax,ay,az,bx,by,bz)
  %1616 = call float @dx.op.unary.f32(i32 25, float %1615)  ; Rsqrt(value)
  %1617 = fmul fast float %1616, %1580
  %1618 = fmul fast float %1616, %1583
  %1619 = fmul fast float %1616, %1586
  %1620 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %1621 = extractvalue %dx.types.CBufRet.f32 %1620, 0
  %1622 = extractvalue %dx.types.CBufRet.f32 %1620, 1
  %1623 = fmul fast float %1621, %855
  %1624 = fmul fast float %1622, %855
  %1625 = fsub fast float %843, %1623
  %1626 = fsub fast float %847, %1624
  %1627 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %1628 = extractvalue %dx.types.CBufRet.f32 %1627, 0
  %1629 = extractvalue %dx.types.CBufRet.f32 %1627, 1
  %1630 = extractvalue %dx.types.CBufRet.f32 %1627, 2
  %1631 = extractvalue %dx.types.CBufRet.f32 %1627, 3
  %1632 = call float @dx.op.dot4.f32(i32 56, float %1628, float %1629, float %1630, float %1631, float %817, float %818, float %819, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %843)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %847)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %851)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %855)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %21)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %22)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %1607)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %1608)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %1609)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %1612)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %1613)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float %1614)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %1617)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %1618)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %1619)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %1555)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %1556)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float %1557)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float %817)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float %818)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 0, float %819)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 1, float %812)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 2, float %1625)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 3, float %1626)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 0, float %851)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 1, float %855)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 2, float %1512)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 3, float %1516)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 0, float %1520)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 1, float %1524)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 8, i32 0, i8 0, float %1632)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!14}
!dx.entryPoints = !{!15}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{!5, null, !9, null}
!5 = !{!6, !7}
!6 = !{i32 0, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 10, i32 1, i32 11, i32 0, null}
!7 = !{i32 1, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 77, i32 1, i32 2, i32 0, !8}
!8 = !{i32 0, i32 9}
!9 = !{!10, !11, !12, !13}
!10 = !{i32 0, %MaterialModifiersConsts* undef, !"", i32 0, i32 7, i32 1, i32 496, null}
!11 = !{i32 1, %hostlayout.CameraShaderConsts* undef, !"", i32 0, i32 1, i32 1, i32 848, null}
!12 = !{i32 2, %hostlayout.FrequentVertexConsts* undef, !"", i32 0, i32 5, i32 1, i32 112, null}
!13 = !{i32 3, %CullObjectsCB* undef, !"", i32 0, i32 8, i32 1, i32 512, null}
!14 = !{[124 x i32] [i32 61, i32 33, i32 1073479695, i32 1, i32 1073479695, i32 1, i32 1073479695, i32 1, i32 0, i32 0, i32 1073512399, i32 1, i32 1073512399, i32 1, i32 1073512399, i32 1, i32 1073512399, i32 1, i32 1073512399, i32 1, i32 1073512399, i32 1, i32 1073512399, i32 1, i32 1073512399, i32 1, i32 1073512399, i32 1, i32 1073512399, i32 1, i32 1073512399, i32 1, i32 1073512399, i32 1, i32 1073512399, i32 1, i32 1073512399, i32 1, i32 1073512399, i32 1, i32 1073512399, i32 1, i32 16, i32 0, i32 32, i32 0, i32 0, i32 0, i32 0, i32 0, i32 36800, i32 0, i32 69568, i32 0, i32 135104, i32 0, i32 0, i32 0, i32 32256, i32 0, i32 32256, i32 0, i32 32256, i32 0, i32 3584, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 65306575, i32 1, i32 65306575, i32 1, i32 65306575, i32 1, i32 65273871, i32 1, i32 65568719, i32 1, i32 65568719, i32 1, i32 65568719, i32 1, i32 65536015, i32 1, i32 66093007, i32 1, i32 66093007, i32 1, i32 66093007, i32 1, i32 66060303, i32 1, i32 66879439, i32 1, i32 1073512399, i32 1, i32 1006632960, i32 0, i32 0, i32 0, i32 1073479695, i32 1, i32 1073479695, i32 1, i32 1073479695, i32 1, i32 0, i32 0, i32 1073479695, i32 1]}
!15 = !{void ()* @vs_main_, !"vs_main_", !16, !4, !54}
!16 = !{!17, !39, null}
!17 = !{!18, !21, !23, !24, !26, !27, !29, !30, !31, !32, !33, !35, !36, !37}
!18 = !{i32 0, !"POSITION", i8 9, i8 0, !19, i8 0, i32 1, i8 3, i32 0, i8 0, !20}
!19 = !{i32 0}
!20 = !{i32 3, i32 7}
!21 = !{i32 1, !"BLENDINDICES", i8 5, i8 0, !19, i8 0, i32 1, i8 4, i32 1, i8 0, !22}
!22 = !{i32 3, i32 15}
!23 = !{i32 2, !"BLENDWEIGHT", i8 9, i8 0, !19, i8 0, i32 1, i8 4, i32 2, i8 0, !22}
!24 = !{i32 3, !"BLENDINDICES", i8 5, i8 0, !25, i8 0, i32 1, i8 4, i32 3, i8 0, !22}
!25 = !{i32 1}
!26 = !{i32 4, !"BLENDWEIGHT", i8 9, i8 0, !25, i8 0, i32 1, i8 4, i32 4, i8 0, !22}
!27 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !19, i8 0, i32 1, i8 2, i32 5, i8 0, !28}
!28 = !{i32 3, i32 3}
!29 = !{i32 6, !"NORMAL", i8 9, i8 0, !19, i8 0, i32 1, i8 3, i32 6, i8 0, !20}
!30 = !{i32 7, !"TANGENT", i8 9, i8 0, !19, i8 0, i32 1, i8 4, i32 7, i8 0, !22}
!31 = !{i32 8, !"COLOR", i8 9, i8 0, !19, i8 0, i32 1, i8 4, i32 8, i8 0, null}
!32 = !{i32 9, !"TEXCOORD", i8 9, i8 0, !25, i8 0, i32 1, i8 2, i32 9, i8 0, null}
!33 = !{i32 10, !"INSTANCE_TRANSFORM", i8 9, i8 0, !34, i8 0, i32 3, i8 4, i32 10, i8 0, !22}
!34 = !{i32 0, i32 1, i32 2}
!35 = !{i32 11, !"INSTANCE_SKINNING_DATA", i8 5, i8 0, !19, i8 0, i32 1, i8 4, i32 13, i8 0, !20}
!36 = !{i32 12, !"EXTRA_DATA", i8 9, i8 0, !19, i8 0, i32 1, i8 3, i32 14, i8 0, !20}
!37 = !{i32 13, !"SV_VertexID", i8 5, i8 1, !19, i8 0, i32 1, i8 1, i32 15, i8 0, !38}
!38 = !{i32 3, i32 1}
!39 = !{!40, !41, !42, !43, !45, !47, !49, !51, !53}
!40 = !{i32 0, !"SV_Position", i8 9, i8 3, !19, i8 4, i32 1, i8 4, i32 0, i8 0, !22}
!41 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !19, i8 2, i32 1, i8 4, i32 1, i8 0, !22}
!42 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !25, i8 2, i32 1, i8 4, i32 2, i8 0, !22}
!43 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !44, i8 2, i32 1, i8 4, i32 3, i8 0, !22}
!44 = !{i32 2}
!45 = !{i32 4, !"TEXCOORD", i8 9, i8 0, !46, i8 2, i32 1, i8 4, i32 4, i8 0, !22}
!46 = !{i32 3}
!47 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !48, i8 2, i32 1, i8 4, i32 5, i8 0, !22}
!48 = !{i32 4}
!49 = !{i32 6, !"TEXCOORD", i8 9, i8 0, !50, i8 2, i32 1, i8 4, i32 6, i8 0, !22}
!50 = !{i32 5}
!51 = !{i32 7, !"TEXCOORD", i8 9, i8 0, !52, i8 2, i32 1, i8 2, i32 7, i8 0, !28}
!52 = !{i32 6}
!53 = !{i32 8, !"SV_ClipDistance", i8 9, i8 6, !19, i8 2, i32 1, i8 1, i32 8, i8 0, !38}
!54 = !{i32 0, i64 16}
 