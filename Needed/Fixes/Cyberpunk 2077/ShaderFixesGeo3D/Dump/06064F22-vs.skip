;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; POSITION                 0   xyz         0     NONE   float   xyz 
; BLENDINDICES             0   xyzw        1     NONE    uint   xyzw
; BLENDWEIGHT              0   xyzw        2     NONE   float   xyzw
; NORMAL                   0   xyz         3     NONE   float   xyz 
; TANGENT                  0   xyzw        4     NONE   float       
; COLOR                    0   xyzw        5     NONE   float       
; TEXCOORD                 1   xy          6     NONE   float       
; INSTANCE_TRANSFORM       0   xyzw        7     NONE   float   xyzw
; INSTANCE_TRANSFORM       1   xyzw        8     NONE   float   xyzw
; INSTANCE_TRANSFORM       2   xyzw        9     NONE   float   xyzw
; INSTANCE_SKINNING_DATA     0   xyzw       10     NONE    uint   xy  
; SV_VertexID              0   x          11   VERTID    uint       
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
;
; shader hash: b7b2f1d929c424aca5413eb5e048cdd2
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; POSITION                 0                              
; BLENDINDICES             0                              
; BLENDWEIGHT              0                              
; NORMAL                   0                              
; TANGENT                  0                              
; COLOR                    0                              
; TEXCOORD                 1                              
; INSTANCE_TRANSFORM       0                              
; INSTANCE_SKINNING_DATA     0                              
; SV_VertexID              0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [848 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [20 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [112 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb1     1
;                                   cbuffer      NA          NA     CB1            cb4     1
;                                   cbuffer      NA          NA     CB2            cb5     1
;                                   texture    byte         r/o      T0            t10     1
;
;
; ViewId state:
;
; Number of inputs: 45, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
;   output 1 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
;   output 2 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
;   output 3 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%struct.ByteAddressBuffer = type { i32 }
%hostlayout.CameraShaderConsts = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, i32, i32, <2 x i32>, float, float }
%ShaderSpecificConstants = type { float, float }
%hostlayout.FrequentVertexConsts = type { [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float> }

define void @vs_main_() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 10, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 2, i32 5, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 1, i32 4, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call i32 @dx.op.loadInput.i32(i32 4, i32 8, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call i32 @dx.op.loadInput.i32(i32 4, i32 8, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %20 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %21 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %22 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %23 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %24 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %25 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 1, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %26 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 1, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %27 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 1, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %28 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 1, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %29 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 2, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %30 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 2, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %31 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 2, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %32 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 2, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %33 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %34 = extractvalue %dx.types.CBufRet.i32 %33, 0
  %35 = extractvalue %dx.types.CBufRet.i32 %33, 1
  %36 = extractvalue %dx.types.CBufRet.i32 %33, 2
  %37 = bitcast float %24 to i32
  %38 = bitcast float %28 to i32
  %39 = bitcast float %32 to i32
  %40 = sub i32 %37, %34
  %41 = sub i32 %38, %35
  %42 = sub i32 %39, %36
  %43 = sitofp i32 %40 to float
  %44 = sitofp i32 %41 to float
  %45 = sitofp i32 %42 to float
  %46 = fmul fast float %43, 0x3EE0000000000000
  %47 = fmul fast float %44, 0x3EE0000000000000
  %48 = fmul fast float %45, 0x3EE0000000000000
  %49 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %50 = extractvalue %dx.types.CBufRet.f32 %49, 0
  %51 = extractvalue %dx.types.CBufRet.f32 %49, 1
  %52 = extractvalue %dx.types.CBufRet.f32 %49, 2
  %53 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %54 = extractvalue %dx.types.CBufRet.f32 %53, 0
  %55 = extractvalue %dx.types.CBufRet.f32 %53, 1
  %56 = extractvalue %dx.types.CBufRet.f32 %53, 2
  %57 = fmul fast float %54, %18
  %58 = fmul fast float %55, %19
  %59 = fmul fast float %56, %20
  %60 = fadd fast float %57, %50
  %61 = fadd fast float %58, %51
  %62 = fadd fast float %59, %52
  %63 = call float @dx.op.dot4.f32(i32 56, float %10, float %11, float %12, float %13, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %64 = call float @dx.op.binary.f32(i32 35, float 0x3EE4F8B580000000, float %63)  ; FMax(a,b)
  %65 = fdiv fast float %10, %64
  %66 = fdiv fast float %11, %64
  %67 = fdiv fast float %12, %64
  %68 = fdiv fast float %13, %64
  %69 = mul i32 %14, %6
  %70 = add i32 %69, %5
  %71 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %70, i32 undef)  ; BufferLoad(srv,index,wot)
  %72 = extractvalue %dx.types.ResRet.i32 %71, 0
  %73 = extractvalue %dx.types.ResRet.i32 %71, 1
  %74 = extractvalue %dx.types.ResRet.i32 %71, 2
  %75 = extractvalue %dx.types.ResRet.i32 %71, 3
  %76 = bitcast i32 %72 to float
  %77 = bitcast i32 %73 to float
  %78 = bitcast i32 %74 to float
  %79 = bitcast i32 %75 to float
  %80 = add i32 %70, 16
  %81 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %80, i32 undef)  ; BufferLoad(srv,index,wot)
  %82 = extractvalue %dx.types.ResRet.i32 %81, 0
  %83 = extractvalue %dx.types.ResRet.i32 %81, 1
  %84 = extractvalue %dx.types.ResRet.i32 %81, 2
  %85 = extractvalue %dx.types.ResRet.i32 %81, 3
  %86 = bitcast i32 %82 to float
  %87 = bitcast i32 %83 to float
  %88 = bitcast i32 %84 to float
  %89 = bitcast i32 %85 to float
  %90 = add i32 %70, 32
  %91 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %90, i32 undef)  ; BufferLoad(srv,index,wot)
  %92 = extractvalue %dx.types.ResRet.i32 %91, 0
  %93 = extractvalue %dx.types.ResRet.i32 %91, 1
  %94 = extractvalue %dx.types.ResRet.i32 %91, 2
  %95 = extractvalue %dx.types.ResRet.i32 %91, 3
  %96 = bitcast i32 %92 to float
  %97 = bitcast i32 %93 to float
  %98 = bitcast i32 %94 to float
  %99 = bitcast i32 %95 to float
  %100 = fmul fast float %76, %65
  %101 = fmul fast float %86, %65
  %102 = fmul fast float %96, %65
  %103 = fmul fast float %77, %65
  %104 = fmul fast float %87, %65
  %105 = fmul fast float %97, %65
  %106 = fmul fast float %78, %65
  %107 = fmul fast float %88, %65
  %108 = fmul fast float %98, %65
  %109 = fmul fast float %79, %65
  %110 = fmul fast float %89, %65
  %111 = fmul fast float %99, %65
  %112 = mul i32 %15, %6
  %113 = add i32 %112, %5
  %114 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %113, i32 undef)  ; BufferLoad(srv,index,wot)
  %115 = extractvalue %dx.types.ResRet.i32 %114, 0
  %116 = extractvalue %dx.types.ResRet.i32 %114, 1
  %117 = extractvalue %dx.types.ResRet.i32 %114, 2
  %118 = extractvalue %dx.types.ResRet.i32 %114, 3
  %119 = bitcast i32 %115 to float
  %120 = bitcast i32 %116 to float
  %121 = bitcast i32 %117 to float
  %122 = bitcast i32 %118 to float
  %123 = add i32 %113, 16
  %124 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %123, i32 undef)  ; BufferLoad(srv,index,wot)
  %125 = extractvalue %dx.types.ResRet.i32 %124, 0
  %126 = extractvalue %dx.types.ResRet.i32 %124, 1
  %127 = extractvalue %dx.types.ResRet.i32 %124, 2
  %128 = extractvalue %dx.types.ResRet.i32 %124, 3
  %129 = bitcast i32 %125 to float
  %130 = bitcast i32 %126 to float
  %131 = bitcast i32 %127 to float
  %132 = bitcast i32 %128 to float
  %133 = add i32 %113, 32
  %134 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %133, i32 undef)  ; BufferLoad(srv,index,wot)
  %135 = extractvalue %dx.types.ResRet.i32 %134, 0
  %136 = extractvalue %dx.types.ResRet.i32 %134, 1
  %137 = extractvalue %dx.types.ResRet.i32 %134, 2
  %138 = extractvalue %dx.types.ResRet.i32 %134, 3
  %139 = bitcast i32 %135 to float
  %140 = bitcast i32 %136 to float
  %141 = bitcast i32 %137 to float
  %142 = bitcast i32 %138 to float
  %143 = fmul fast float %119, %66
  %144 = fmul fast float %129, %66
  %145 = fmul fast float %139, %66
  %146 = fmul fast float %120, %66
  %147 = fmul fast float %130, %66
  %148 = fmul fast float %140, %66
  %149 = fmul fast float %121, %66
  %150 = fmul fast float %131, %66
  %151 = fmul fast float %141, %66
  %152 = fmul fast float %122, %66
  %153 = fmul fast float %132, %66
  %154 = fmul fast float %142, %66
  %155 = fadd fast float %143, %100
  %156 = fadd fast float %144, %101
  %157 = fadd fast float %145, %102
  %158 = fadd fast float %146, %103
  %159 = fadd fast float %147, %104
  %160 = fadd fast float %148, %105
  %161 = fadd fast float %149, %106
  %162 = fadd fast float %150, %107
  %163 = fadd fast float %151, %108
  %164 = fadd fast float %152, %109
  %165 = fadd fast float %153, %110
  %166 = fadd fast float %154, %111
  %167 = mul i32 %16, %6
  %168 = add i32 %167, %5
  %169 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %168, i32 undef)  ; BufferLoad(srv,index,wot)
  %170 = extractvalue %dx.types.ResRet.i32 %169, 0
  %171 = extractvalue %dx.types.ResRet.i32 %169, 1
  %172 = extractvalue %dx.types.ResRet.i32 %169, 2
  %173 = extractvalue %dx.types.ResRet.i32 %169, 3
  %174 = bitcast i32 %170 to float
  %175 = bitcast i32 %171 to float
  %176 = bitcast i32 %172 to float
  %177 = bitcast i32 %173 to float
  %178 = add i32 %168, 16
  %179 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %178, i32 undef)  ; BufferLoad(srv,index,wot)
  %180 = extractvalue %dx.types.ResRet.i32 %179, 0
  %181 = extractvalue %dx.types.ResRet.i32 %179, 1
  %182 = extractvalue %dx.types.ResRet.i32 %179, 2
  %183 = extractvalue %dx.types.ResRet.i32 %179, 3
  %184 = bitcast i32 %180 to float
  %185 = bitcast i32 %181 to float
  %186 = bitcast i32 %182 to float
  %187 = bitcast i32 %183 to float
  %188 = add i32 %168, 32
  %189 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %188, i32 undef)  ; BufferLoad(srv,index,wot)
  %190 = extractvalue %dx.types.ResRet.i32 %189, 0
  %191 = extractvalue %dx.types.ResRet.i32 %189, 1
  %192 = extractvalue %dx.types.ResRet.i32 %189, 2
  %193 = extractvalue %dx.types.ResRet.i32 %189, 3
  %194 = bitcast i32 %190 to float
  %195 = bitcast i32 %191 to float
  %196 = bitcast i32 %192 to float
  %197 = bitcast i32 %193 to float
  %198 = fmul fast float %174, %67
  %199 = fmul fast float %184, %67
  %200 = fmul fast float %194, %67
  %201 = fmul fast float %175, %67
  %202 = fmul fast float %185, %67
  %203 = fmul fast float %195, %67
  %204 = fmul fast float %176, %67
  %205 = fmul fast float %186, %67
  %206 = fmul fast float %196, %67
  %207 = fmul fast float %177, %67
  %208 = fmul fast float %187, %67
  %209 = fmul fast float %197, %67
  %210 = fadd fast float %155, %198
  %211 = fadd fast float %156, %199
  %212 = fadd fast float %157, %200
  %213 = fadd fast float %158, %201
  %214 = fadd fast float %159, %202
  %215 = fadd fast float %160, %203
  %216 = fadd fast float %161, %204
  %217 = fadd fast float %162, %205
  %218 = fadd fast float %163, %206
  %219 = fadd fast float %164, %207
  %220 = fadd fast float %165, %208
  %221 = fadd fast float %166, %209
  %222 = mul i32 %17, %6
  %223 = add i32 %222, %5
  %224 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %223, i32 undef)  ; BufferLoad(srv,index,wot)
  %225 = extractvalue %dx.types.ResRet.i32 %224, 0
  %226 = extractvalue %dx.types.ResRet.i32 %224, 1
  %227 = extractvalue %dx.types.ResRet.i32 %224, 2
  %228 = extractvalue %dx.types.ResRet.i32 %224, 3
  %229 = bitcast i32 %225 to float
  %230 = bitcast i32 %226 to float
  %231 = bitcast i32 %227 to float
  %232 = bitcast i32 %228 to float
  %233 = add i32 %223, 16
  %234 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %233, i32 undef)  ; BufferLoad(srv,index,wot)
  %235 = extractvalue %dx.types.ResRet.i32 %234, 0
  %236 = extractvalue %dx.types.ResRet.i32 %234, 1
  %237 = extractvalue %dx.types.ResRet.i32 %234, 2
  %238 = extractvalue %dx.types.ResRet.i32 %234, 3
  %239 = bitcast i32 %235 to float
  %240 = bitcast i32 %236 to float
  %241 = bitcast i32 %237 to float
  %242 = bitcast i32 %238 to float
  %243 = add i32 %223, 32
  %244 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %243, i32 undef)  ; BufferLoad(srv,index,wot)
  %245 = extractvalue %dx.types.ResRet.i32 %244, 0
  %246 = extractvalue %dx.types.ResRet.i32 %244, 1
  %247 = extractvalue %dx.types.ResRet.i32 %244, 2
  %248 = extractvalue %dx.types.ResRet.i32 %244, 3
  %249 = bitcast i32 %245 to float
  %250 = bitcast i32 %246 to float
  %251 = bitcast i32 %247 to float
  %252 = bitcast i32 %248 to float
  %253 = fmul fast float %229, %68
  %254 = fmul fast float %239, %68
  %255 = fmul fast float %249, %68
  %256 = fmul fast float %230, %68
  %257 = fmul fast float %240, %68
  %258 = fmul fast float %250, %68
  %259 = fmul fast float %231, %68
  %260 = fmul fast float %241, %68
  %261 = fmul fast float %251, %68
  %262 = fmul fast float %232, %68
  %263 = fmul fast float %242, %68
  %264 = fmul fast float %252, %68
  %265 = fadd fast float %210, %253
  %266 = fadd fast float %211, %254
  %267 = fadd fast float %212, %255
  %268 = fadd fast float %213, %256
  %269 = fadd fast float %214, %257
  %270 = fadd fast float %215, %258
  %271 = fadd fast float %216, %259
  %272 = fadd fast float %217, %260
  %273 = fadd fast float %218, %261
  %274 = fadd fast float %219, %262
  %275 = fadd fast float %220, %263
  %276 = fadd fast float %221, %264
  %277 = fmul fast float %265, %60
  %278 = call float @dx.op.tertiary.f32(i32 46, float %61, float %268, float %277)  ; FMad(a,b,c)
  %279 = call float @dx.op.tertiary.f32(i32 46, float %62, float %271, float %278)  ; FMad(a,b,c)
  %280 = fadd fast float %274, %279
  %281 = fmul fast float %266, %60
  %282 = call float @dx.op.tertiary.f32(i32 46, float %61, float %269, float %281)  ; FMad(a,b,c)
  %283 = call float @dx.op.tertiary.f32(i32 46, float %62, float %272, float %282)  ; FMad(a,b,c)
  %284 = fadd fast float %275, %283
  %285 = fmul fast float %267, %60
  %286 = call float @dx.op.tertiary.f32(i32 46, float %61, float %270, float %285)  ; FMad(a,b,c)
  %287 = call float @dx.op.tertiary.f32(i32 46, float %62, float %273, float %286)  ; FMad(a,b,c)
  %288 = fadd fast float %276, %287
  %289 = fmul fast float %280, %21
  %290 = call float @dx.op.tertiary.f32(i32 46, float %284, float %22, float %289)  ; FMad(a,b,c)
  %291 = call float @dx.op.tertiary.f32(i32 46, float %288, float %23, float %290)  ; FMad(a,b,c)
  %292 = fadd fast float %291, %46
  %293 = fmul fast float %280, %25
  %294 = call float @dx.op.tertiary.f32(i32 46, float %284, float %26, float %293)  ; FMad(a,b,c)
  %295 = call float @dx.op.tertiary.f32(i32 46, float %288, float %27, float %294)  ; FMad(a,b,c)
  %296 = fadd fast float %295, %47
  %297 = fmul fast float %280, %29
  %298 = call float @dx.op.tertiary.f32(i32 46, float %284, float %30, float %297)  ; FMad(a,b,c)
  %299 = call float @dx.op.tertiary.f32(i32 46, float %288, float %31, float %298)  ; FMad(a,b,c)
  %300 = fadd fast float %299, %48
  %301 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 37)  ; CBufferLoadLegacy(handle,regIndex)
  %302 = extractvalue %dx.types.CBufRet.f32 %301, 0
  %303 = extractvalue %dx.types.CBufRet.f32 %301, 1
  %304 = extractvalue %dx.types.CBufRet.f32 %301, 2
  %305 = fadd fast float %292, %302
  %306 = fadd fast float %296, %303
  %307 = fadd fast float %300, %304
  %308 = fmul fast float %265, %21
  %309 = call float @dx.op.tertiary.f32(i32 46, float %266, float %22, float %308)  ; FMad(a,b,c)
  %310 = call float @dx.op.tertiary.f32(i32 46, float %267, float %23, float %309)  ; FMad(a,b,c)
  %311 = fmul fast float %265, %25
  %312 = call float @dx.op.tertiary.f32(i32 46, float %266, float %26, float %311)  ; FMad(a,b,c)
  %313 = call float @dx.op.tertiary.f32(i32 46, float %267, float %27, float %312)  ; FMad(a,b,c)
  %314 = fmul fast float %265, %29
  %315 = call float @dx.op.tertiary.f32(i32 46, float %266, float %30, float %314)  ; FMad(a,b,c)
  %316 = call float @dx.op.tertiary.f32(i32 46, float %267, float %31, float %315)  ; FMad(a,b,c)
  %317 = fmul fast float %268, %21
  %318 = call float @dx.op.tertiary.f32(i32 46, float %269, float %22, float %317)  ; FMad(a,b,c)
  %319 = call float @dx.op.tertiary.f32(i32 46, float %270, float %23, float %318)  ; FMad(a,b,c)
  %320 = fmul fast float %268, %25
  %321 = call float @dx.op.tertiary.f32(i32 46, float %269, float %26, float %320)  ; FMad(a,b,c)
  %322 = call float @dx.op.tertiary.f32(i32 46, float %270, float %27, float %321)  ; FMad(a,b,c)
  %323 = fmul fast float %268, %29
  %324 = call float @dx.op.tertiary.f32(i32 46, float %269, float %30, float %323)  ; FMad(a,b,c)
  %325 = call float @dx.op.tertiary.f32(i32 46, float %270, float %31, float %324)  ; FMad(a,b,c)
  %326 = fmul fast float %271, %21
  %327 = call float @dx.op.tertiary.f32(i32 46, float %272, float %22, float %326)  ; FMad(a,b,c)
  %328 = call float @dx.op.tertiary.f32(i32 46, float %273, float %23, float %327)  ; FMad(a,b,c)
  %329 = fmul fast float %271, %25
  %330 = call float @dx.op.tertiary.f32(i32 46, float %272, float %26, float %329)  ; FMad(a,b,c)
  %331 = call float @dx.op.tertiary.f32(i32 46, float %273, float %27, float %330)  ; FMad(a,b,c)
  %332 = fmul fast float %271, %29
  %333 = call float @dx.op.tertiary.f32(i32 46, float %272, float %30, float %332)  ; FMad(a,b,c)
  %334 = call float @dx.op.tertiary.f32(i32 46, float %273, float %31, float %333)  ; FMad(a,b,c)
  %335 = fmul fast float %7, 2.000000e+00
  %336 = fmul fast float %8, 2.000000e+00
  %337 = fmul fast float %9, 2.000000e+00
  %338 = fadd fast float %335, -1.000000e+00
  %339 = fadd fast float %336, -1.000000e+00
  %340 = fadd fast float %337, -1.000000e+00
  %341 = fmul fast float %310, %338
  %342 = call float @dx.op.tertiary.f32(i32 46, float %339, float %319, float %341)  ; FMad(a,b,c)
  %343 = call float @dx.op.tertiary.f32(i32 46, float %340, float %328, float %342)  ; FMad(a,b,c)
  %344 = fmul fast float %313, %338
  %345 = call float @dx.op.tertiary.f32(i32 46, float %339, float %322, float %344)  ; FMad(a,b,c)
  %346 = call float @dx.op.tertiary.f32(i32 46, float %340, float %331, float %345)  ; FMad(a,b,c)
  %347 = fmul fast float %316, %338
  %348 = call float @dx.op.tertiary.f32(i32 46, float %339, float %325, float %347)  ; FMad(a,b,c)
  %349 = call float @dx.op.tertiary.f32(i32 46, float %340, float %334, float %348)  ; FMad(a,b,c)
  %350 = call float @dx.op.dot3.f32(i32 55, float %343, float %346, float %349, float %343, float %346, float %349)  ; Dot3(ax,ay,az,bx,by,bz)
  %351 = call float @dx.op.unary.f32(i32 25, float %350)  ; Rsqrt(value)
  %352 = fmul fast float %351, %343
  %353 = fmul fast float %351, %346
  %354 = fmul fast float %351, %349
  %355 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 36)  ; CBufferLoadLegacy(handle,regIndex)
  %356 = extractvalue %dx.types.CBufRet.f32 %355, 0
  %357 = extractvalue %dx.types.CBufRet.f32 %355, 1
  %358 = extractvalue %dx.types.CBufRet.f32 %355, 2
  %359 = fsub fast float %305, %356
  %360 = fsub fast float %306, %357
  %361 = fsub fast float %307, %358
  %362 = fmul fast float %359, %359
  %363 = fmul fast float %360, %360
  %364 = fadd fast float %362, %363
  %365 = fmul fast float %361, %361
  %366 = fadd fast float %364, %365
  %367 = call float @dx.op.unary.f32(i32 24, float %366)  ; Sqrt(value)
  %368 = fadd fast float %367, -5.000000e-01
  %369 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %368)  ; FMax(a,b)
  %370 = fmul fast float %352, %369
  %371 = fmul fast float %353, %369
  %372 = fmul fast float %354, %369
  %373 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %374 = extractvalue %dx.types.CBufRet.f32 %373, 0
  %375 = fmul fast float %370, %374
  %376 = fmul fast float %371, %374
  %377 = fmul fast float %372, %374
  %378 = fadd fast float %375, %292
  %379 = fadd fast float %376, %296
  %380 = fadd fast float %377, %300
  %381 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %382 = extractvalue %dx.types.CBufRet.f32 %381, 0
  %383 = extractvalue %dx.types.CBufRet.f32 %381, 1
  %384 = extractvalue %dx.types.CBufRet.f32 %381, 2
  %385 = extractvalue %dx.types.CBufRet.f32 %381, 3
  %386 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %387 = extractvalue %dx.types.CBufRet.f32 %386, 0
  %388 = extractvalue %dx.types.CBufRet.f32 %386, 1
  %389 = extractvalue %dx.types.CBufRet.f32 %386, 2
  %390 = extractvalue %dx.types.CBufRet.f32 %386, 3
  %391 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %392 = extractvalue %dx.types.CBufRet.f32 %391, 0
  %393 = extractvalue %dx.types.CBufRet.f32 %391, 1
  %394 = extractvalue %dx.types.CBufRet.f32 %391, 2
  %395 = extractvalue %dx.types.CBufRet.f32 %391, 3
  %396 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %397 = extractvalue %dx.types.CBufRet.f32 %396, 0
  %398 = extractvalue %dx.types.CBufRet.f32 %396, 1
  %399 = extractvalue %dx.types.CBufRet.f32 %396, 2
  %400 = extractvalue %dx.types.CBufRet.f32 %396, 3
  %401 = fmul fast float %378, %382
  %402 = call float @dx.op.tertiary.f32(i32 46, float %379, float %383, float %401)  ; FMad(a,b,c)
  %403 = call float @dx.op.tertiary.f32(i32 46, float %380, float %384, float %402)  ; FMad(a,b,c)
  %404 = fadd fast float %403, %385
  %405 = fmul fast float %378, %387
  %406 = call float @dx.op.tertiary.f32(i32 46, float %379, float %388, float %405)  ; FMad(a,b,c)
  %407 = call float @dx.op.tertiary.f32(i32 46, float %380, float %389, float %406)  ; FMad(a,b,c)
  %408 = fadd fast float %407, %390
  %409 = fmul fast float %392, %378
  %410 = call float @dx.op.tertiary.f32(i32 46, float %379, float %393, float %409)  ; FMad(a,b,c)
  %411 = call float @dx.op.tertiary.f32(i32 46, float %380, float %394, float %410)  ; FMad(a,b,c)
  %412 = fadd fast float %411, %395
  %413 = fmul fast float %397, %378
  %414 = call float @dx.op.tertiary.f32(i32 46, float %379, float %398, float %413)  ; FMad(a,b,c)
  %415 = call float @dx.op.tertiary.f32(i32 46, float %380, float %399, float %414)  ; FMad(a,b,c)
  %416 = fadd fast float %415, %400
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %404)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %408)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %412)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %416)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!11}
!dx.entryPoints = !{!12}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{!5, null, !7, null}
!5 = !{!6}
!6 = !{i32 0, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 10, i32 1, i32 11, i32 0, null}
!7 = !{!8, !9, !10}
!8 = !{i32 0, %hostlayout.CameraShaderConsts* undef, !"", i32 0, i32 1, i32 1, i32 848, null}
!9 = !{i32 1, %ShaderSpecificConstants* undef, !"", i32 0, i32 4, i32 1, i32 20, null}
!10 = !{i32 2, %hostlayout.FrequentVertexConsts* undef, !"", i32 0, i32 5, i32 1, i32 112, null}
!11 = !{[47 x i32] [i32 45, i32 4, i32 15, i32 15, i32 15, i32 0, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 0, i32 0, i32 0]}
!12 = !{void ()* @vs_main_, !"vs_main_", !13, !4, !33}
!13 = !{!14, !31, null}
!14 = !{!15, !18, !20, !21, !22, !23, !24, !26, !28, !30}
!15 = !{i32 0, !"POSITION", i8 9, i8 0, !16, i8 0, i32 1, i8 3, i32 0, i8 0, !17}
!16 = !{i32 0}
!17 = !{i32 3, i32 7}
!18 = !{i32 1, !"BLENDINDICES", i8 5, i8 0, !16, i8 0, i32 1, i8 4, i32 1, i8 0, !19}
!19 = !{i32 3, i32 15}
!20 = !{i32 2, !"BLENDWEIGHT", i8 9, i8 0, !16, i8 0, i32 1, i8 4, i32 2, i8 0, !19}
!21 = !{i32 3, !"NORMAL", i8 9, i8 0, !16, i8 0, i32 1, i8 3, i32 3, i8 0, !17}
!22 = !{i32 4, !"TANGENT", i8 9, i8 0, !16, i8 0, i32 1, i8 4, i32 4, i8 0, null}
!23 = !{i32 5, !"COLOR", i8 9, i8 0, !16, i8 0, i32 1, i8 4, i32 5, i8 0, null}
!24 = !{i32 6, !"TEXCOORD", i8 9, i8 0, !25, i8 0, i32 1, i8 2, i32 6, i8 0, null}
!25 = !{i32 1}
!26 = !{i32 7, !"INSTANCE_TRANSFORM", i8 9, i8 0, !27, i8 0, i32 3, i8 4, i32 7, i8 0, !19}
!27 = !{i32 0, i32 1, i32 2}
!28 = !{i32 8, !"INSTANCE_SKINNING_DATA", i8 5, i8 0, !16, i8 0, i32 1, i8 4, i32 10, i8 0, !29}
!29 = !{i32 3, i32 3}
!30 = !{i32 9, !"SV_VertexID", i8 5, i8 1, !16, i8 0, i32 1, i8 1, i32 11, i8 0, null}
!31 = !{!32}
!32 = !{i32 0, !"SV_Position", i8 9, i8 3, !16, i8 4, i32 1, i8 4, i32 0, i8 0, !19}
!33 = !{i32 0, i64 16}
 