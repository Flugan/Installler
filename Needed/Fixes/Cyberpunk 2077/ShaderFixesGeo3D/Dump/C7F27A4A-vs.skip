;
; Note: shader requires additional functionality:
;       Wave level operations
;
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_VertexID              0   x           0   VERTID    uint   x   
; SV_InstanceID            0   x           1   INSTID    uint   x   
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; TEXCOORD                 0   xyzw        1     NONE   float   xyzw
; TEXCOORD                 1   xyzw        2     NONE   float   xyzw
; TEXCOORD                 2   xyzw        3     NONE   float   xyzw
;
; shader hash: 3a6b57780db1368e63df74f9eb87e4a1
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_VertexID              0                              
; SV_InstanceID            0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; TEXCOORD                 0        nointerpolation       
; TEXCOORD                 1        nointerpolation       
; TEXCOORD                 2                 linear       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [848 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [32 x i8] (type annotation not present)
;
; }
;
; Resource bind info for 
; {
;
;   [28 x i8] (type annotation not present)
; }
;
; Resource bind info for 
; {
;
;   [24 x i8] (type annotation not present)
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb1     1
;                                   cbuffer      NA          NA     CB1            cb6     1
;                                   texture  struct         r/o      T0            t37     1
;                                   texture  struct         r/o      T1             t0     1
;
;
; ViewId state:
;
; Number of inputs: 5, outputs: 16
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 4 }
;   output 1 depends on inputs: { 0, 4 }
;   output 4 depends on inputs: { 4 }
;   output 5 depends on inputs: { 4 }
;   output 6 depends on inputs: { 4 }
;   output 7 depends on inputs: { 4 }
;   output 8 depends on inputs: { 4 }
;   output 9 depends on inputs: { 4 }
;   output 10 depends on inputs: { 4 }
;   output 11 depends on inputs: { 4 }
;   output 12 depends on inputs: { 0, 4 }
;   output 13 depends on inputs: { 0, 4 }
;   output 14 depends on inputs: { 4 }
;   output 15 depends on inputs: { 4 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%"class.StructuredBuffer<FrameExposureData>" = type { %struct.FrameExposureData }
%struct.FrameExposureData = type { float, float, float, float, float, float, float }
%"class.StructuredBuffer<DistantLight>" = type { %struct.DistantLight }
%struct.DistantLight = type { i32, float, i32, i32, i32, i32 }
%hostlayout.CameraShaderConsts = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, i32, i32, <2 x i32>, float, float }
%VER = type { <2 x float>, float, i32, <2 x float>, <2 x float> }

define void @vs_main_() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 37, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 1, i32 6, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call i32 @dx.op.loadInput.i32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %5, i32 0)  ; BufferLoad(srv,index,wot)
  %8 = extractvalue %dx.types.ResRet.i32 %7, 0
  %9 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1, i32 %5, i32 4)  ; BufferLoad(srv,index,wot)
  %10 = extractvalue %dx.types.ResRet.f32 %9, 0
  %11 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %5, i32 8)  ; BufferLoad(srv,index,wot)
  %12 = extractvalue %dx.types.ResRet.i32 %11, 0
  %13 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %5, i32 16)  ; BufferLoad(srv,index,wot)
  %14 = extractvalue %dx.types.ResRet.i32 %13, 0
  %15 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %5, i32 20)  ; BufferLoad(srv,index,wot)
  %16 = extractvalue %dx.types.ResRet.i32 %15, 0
  %17 = call float @dx.op.legacyF16ToF32(i32 131, i32 %12)  ; LegacyF16ToF32(value)
  %18 = and i32 %14, 1048575
  %19 = and i32 %16, 1048575
  %20 = add nsw i32 %18, -524288
  %21 = add nsw i32 %19, -524288
  %22 = sitofp i32 %20 to float
  %23 = sitofp i32 %21 to float
  %24 = fmul fast float %22, 0x3F947AE140000000
  %25 = fmul fast float %23, 0x3F947AE140000000
  %26 = lshr i32 %14, 20
  %27 = uitofp i32 %26 to float
  %28 = fmul fast float %27, %27
  %29 = fmul fast float %28, 0x3F0A935280000000
  %30 = fadd fast float %29, -5.000000e+01
  %31 = fdiv fast float 1.000000e+00, %17
  %32 = and i32 %8, 255
  %33 = uitofp i32 %32 to float
  %34 = lshr i32 %8, 8
  %35 = and i32 %34, 255
  %36 = uitofp i32 %35 to float
  %37 = lshr i32 %8, 16
  %38 = and i32 %37, 255
  %39 = uitofp i32 %38 to float
  %40 = fmul fast float %33, 0x3F70101020000000
  %41 = fmul fast float %36, 0x3F70101020000000
  %42 = fmul fast float %39, 0x3F70101020000000
  %43 = call float @dx.op.unary.f32(i32 23, float %40)  ; Log(value)
  %44 = call float @dx.op.unary.f32(i32 23, float %41)  ; Log(value)
  %45 = call float @dx.op.unary.f32(i32 23, float %42)  ; Log(value)
  %46 = fmul fast float %43, 0x40019999A0000000
  %47 = fmul fast float %44, 0x40019999A0000000
  %48 = fmul fast float %45, 0x40019999A0000000
  %49 = call float @dx.op.unary.f32(i32 21, float %46)  ; Exp(value)
  %50 = call float @dx.op.unary.f32(i32 21, float %47)  ; Exp(value)
  %51 = call float @dx.op.unary.f32(i32 21, float %48)  ; Exp(value)
  %52 = fmul fast float %49, %10
  %53 = fmul fast float %50, %10
  %54 = fmul fast float %51, %10
  %55 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %2, i32 0, i32 0)  ; BufferLoad(srv,index,wot)
  %56 = extractvalue %dx.types.ResRet.f32 %55, 0
  %57 = call float @dx.op.waveReadLaneFirst.f32(i32 118, float %56)  ; WaveReadLaneFirst(value)
  %58 = fmul fast float %52, %57
  %59 = fmul fast float %53, %57
  %60 = fmul fast float %54, %57
  %61 = call float @dx.op.dot3.f32(i32 55, float %58, float %59, float %60, float 0x3FD322D0E0000000, float 0x3FE2C8B440000000, float 0x3FBD2F1AA0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %62 = call float @dx.op.binary.f32(i32 35, float 1.000000e+00, float %61)  ; FMax(a,b)
  %63 = fdiv fast float %58, %62
  %64 = fdiv fast float %59, %62
  %65 = fdiv fast float %60, %62
  %66 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %67 = extractvalue %dx.types.CBufRet.f32 %66, 2
  %68 = fmul fast float %67, %63
  %69 = fmul fast float %67, %64
  %70 = fmul fast float %67, %65
  %71 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 36)  ; CBufferLoadLegacy(handle,regIndex)
  %72 = extractvalue %dx.types.CBufRet.f32 %71, 0
  %73 = extractvalue %dx.types.CBufRet.f32 %71, 1
  %74 = extractvalue %dx.types.CBufRet.f32 %71, 2
  %75 = fsub fast float %72, %24
  %76 = fsub fast float %73, %25
  %77 = fsub fast float %74, %30
  %78 = fmul fast float %75, %75
  %79 = fmul fast float %76, %76
  %80 = fadd fast float %78, %79
  %81 = fmul fast float %77, %77
  %82 = fadd fast float %80, %81
  %83 = call float @dx.op.unary.f32(i32 24, float %82)  ; Sqrt(value)
  %84 = extractvalue %dx.types.CBufRet.f32 %66, 1
  %85 = extractvalue %dx.types.CBufRet.f32 %66, 0
  %86 = fsub fast float %84, %85
  %87 = fsub fast float %83, %85
  %88 = fdiv fast float %87, %86
  %89 = call float @dx.op.unary.f32(i32 7, float %88)  ; Saturate(value)
  %90 = fmul fast float %89, 2.000000e+00
  %91 = fsub fast float 3.000000e+00, %90
  %92 = fmul fast float %89, %89
  %93 = fmul fast float %92, %91
  %94 = fmul fast float %68, %93
  %95 = fmul fast float %69, %93
  %96 = fmul fast float %70, %93
  %97 = and i32 %6, 1
  %98 = icmp ne i32 %97, 0
  %99 = and i32 %6, 2
  %100 = icmp ne i32 %99, 0
  %101 = select i1 %98, float 0x3FA5555560000000, float 0xBFA5555560000000
  %102 = fmul fast float %101, %17
  %103 = select i1 %100, float 0x3FA5555560000000, float 0xBFA5555560000000
  %104 = fmul fast float %103, %17
  %105 = call float @dx.op.unary.f32(i32 28, float %102)  ; Round_pi(value)
  %106 = call float @dx.op.unary.f32(i32 28, float %104)  ; Round_pi(value)
  %107 = fmul fast float %105, 2.400000e+01
  %108 = fmul fast float %106, 2.400000e+01
  %109 = fadd fast float %107, %24
  %110 = fadd fast float %108, %25
  %111 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %112 = extractvalue %dx.types.CBufRet.f32 %111, 0
  %113 = extractvalue %dx.types.CBufRet.f32 %111, 1
  %114 = fadd fast float %109, %112
  %115 = fadd fast float %110, %113
  %116 = extractvalue %dx.types.CBufRet.f32 %111, 2
  %117 = extractvalue %dx.types.CBufRet.f32 %111, 3
  %118 = fmul fast float %114, %116
  %119 = fmul fast float %117, %115
  %120 = fsub fast float -0.000000e+00, %119
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %118)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %120)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float 1.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float 1.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %24)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %25)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %30)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %31)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %94)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %95)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %96)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float %17)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %109)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %110)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %24)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %25)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind
declare float @dx.op.waveReadLaneFirst.f32(i32, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32, %dx.types.Handle, i32, i32) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!13}
!dx.entryPoints = !{!14}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{!5, null, !10, null}
!5 = !{!6, !8}
!6 = !{i32 0, %"class.StructuredBuffer<FrameExposureData>"* undef, !"", i32 0, i32 37, i32 1, i32 12, i32 0, !7}
!7 = !{i32 1, i32 28}
!8 = !{i32 1, %"class.StructuredBuffer<DistantLight>"* undef, !"", i32 0, i32 0, i32 1, i32 12, i32 0, !9}
!9 = !{i32 1, i32 24}
!10 = !{!11, !12}
!11 = !{i32 0, %hostlayout.CameraShaderConsts* undef, !"", i32 0, i32 1, i32 1, i32 848, null}
!12 = !{i32 1, %VER* undef, !"", i32 0, i32 6, i32 1, i32 32, null}
!13 = !{[7 x i32] [i32 5, i32 16, i32 12291, i32 0, i32 0, i32 0, i32 65523]}
!14 = !{void ()* @vs_main_, !"vs_main_", !15, !4, !29}
!15 = !{!16, !21, null}
!16 = !{!17, !20}
!17 = !{i32 0, !"SV_VertexID", i8 5, i8 1, !18, i8 0, i32 1, i8 1, i32 0, i8 0, !19}
!18 = !{i32 0}
!19 = !{i32 3, i32 1}
!20 = !{i32 1, !"SV_InstanceID", i8 5, i8 2, !18, i8 0, i32 1, i8 1, i32 1, i8 0, !19}
!21 = !{!22, !24, !25, !27}
!22 = !{i32 0, !"SV_Position", i8 9, i8 3, !18, i8 4, i32 1, i8 4, i32 0, i8 0, !23}
!23 = !{i32 3, i32 15}
!24 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !18, i8 1, i32 1, i8 4, i32 1, i8 0, !23}
!25 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !26, i8 1, i32 1, i8 4, i32 2, i8 0, !23}
!26 = !{i32 1}
!27 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !28, i8 2, i32 1, i8 4, i32 3, i8 0, !23}
!28 = !{i32 2}
!29 = !{i32 0, i64 524304}
 