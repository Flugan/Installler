;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; POSITION                 0   xyz         0     NONE   float   xyz 
; BLENDINDICES             0   xyzw        1     NONE    uint   xyzw
; BLENDWEIGHT              0   xyzw        2     NONE   float   xyzw
; TEXCOORD                 0   xy          3     NONE   float   xy  
; NORMAL                   0   xyz         4     NONE   float   xyz 
; TANGENT                  0   xyzw        5     NONE   float   xyzw
; COLOR                    0   xyzw        6     NONE   float   xyzw
; TEXCOORD                 1   xy          7     NONE   float       
; INSTANCE_TRANSFORM       0   xyzw        8     NONE   float   xyzw
; INSTANCE_TRANSFORM       1   xyzw        9     NONE   float   xyzw
; INSTANCE_TRANSFORM       2   xyzw       10     NONE   float   xyzw
; INSTANCE_SKINNING_DATA     0   xyzw       11     NONE    uint   xyz 
; EXTRA_DATA               0   xyz        12     NONE   float   xyz 
; SV_VertexID              0   x          13   VERTID    uint   x   
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; TEXCOORD                 0   xyzw        1     NONE   float   xyzw
; TEXCOORD                 1   xyzw        2     NONE   float   xyzw
; TEXCOORD                 2   xyzw        3     NONE   float   xyzw
; TEXCOORD                 3   xyzw        4     NONE   float   xyzw
; TEXCOORD                 4   xyzw        5     NONE   float   xyzw
; TEXCOORD                 5   xyzw        6     NONE   float   xyzw
; TEXCOORD                 6   xyzw        7     NONE   float   xyzw
; SV_ClipDistance          0   x           8  CLIPDST   float   x   
;
; shader hash: 342cc10a4d7070a37dcdd8f97cb38edd
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; POSITION                 0                              
; BLENDINDICES             0                              
; BLENDWEIGHT              0                              
; TEXCOORD                 0                              
; NORMAL                   0                              
; TANGENT                  0                              
; COLOR                    0                              
; TEXCOORD                 1                              
; INSTANCE_TRANSFORM       0                              
; INSTANCE_SKINNING_DATA     0                              
; EXTRA_DATA               0                              
; SV_VertexID              0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; TEXCOORD                 3                 linear       
; TEXCOORD                 4                 linear       
; TEXCOORD                 5                 linear       
; TEXCOORD                 6                 linear       
; SV_ClipDistance          0                 linear       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [496 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [848 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [112 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [512 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb7     1
;                                   cbuffer      NA          NA     CB1            cb1     1
;                                   cbuffer      NA          NA     CB2            cb5     1
;                                   cbuffer      NA          NA     CB3            cb8     1
;                                   texture    byte         r/o      T0            t10     1
;                                   texture     f32          2d      T1            t77     1
;
;
; ViewId state:
;
; Number of inputs: 53, outputs: 33
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;   output 1 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;   output 2 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;   output 3 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;   output 4 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 5 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 6 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 7 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 20, 21, 22, 23, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 8 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 20, 21, 22, 23, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 9 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 20, 21, 22, 23, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 10 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 20, 21, 22, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 11 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 20, 21, 22, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 12 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 20, 21, 22, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 13 depends on inputs: { 12 }
;   output 14 depends on inputs: { 13 }
;   output 15 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 44, 45, 48, 49, 50, 52 }
;   output 16 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 36, 37, 38, 39, 44, 45, 48, 49, 50, 52 }
;   output 17 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;   output 18 depends on inputs: { 24 }
;   output 19 depends on inputs: { 25 }
;   output 20 depends on inputs: { 26 }
;   output 21 depends on inputs: { 27 }
;   output 22 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;   output 23 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;   output 24 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;   output 25 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;   output 26 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;   output 27 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 45, 46, 48, 49, 50, 52 }
;   output 28 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 45, 46, 48, 49, 50, 52 }
;   output 29 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 45, 46, 48, 49, 50, 52 }
;   output 30 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 45, 46, 48, 49, 50, 52 }
;   output 32 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 52 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%MaterialModifiersConsts = type { [31 x <4 x float>] }
%hostlayout.CameraShaderConsts = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, i32, i32, <2 x i32>, float, float }
%hostlayout.FrequentVertexConsts = type { [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float> }
%CullObjectsCB = type { [8 x %struct.CullObjectPacked] }
%struct.CullObjectPacked = type { <2 x i32>, <2 x i32>, <3 x float>, float, <3 x float>, float, <3 x float>, i32 }

define void @vs_main_() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 77, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 10, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 3, i32 8, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 2, i32 5, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 7, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %7 = call i32 @dx.op.loadInput.i32(i32 4, i32 11, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call i32 @dx.op.loadInput.i32(i32 4, i32 9, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call i32 @dx.op.loadInput.i32(i32 4, i32 9, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call i32 @dx.op.loadInput.i32(i32 4, i32 9, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %20 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %21 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %22 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %23 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %24 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %25 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %26 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %27 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %28 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %29 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %30 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %31 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %32 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %33 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %34 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %35 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %36 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %37 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %38 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %39 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %40 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %41 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %42 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 1, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %43 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 1, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %44 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 1, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %45 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 1, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %46 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 2, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %47 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 2, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %48 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 2, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %49 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 2, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %50 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %51 = extractvalue %dx.types.CBufRet.i32 %50, 0
  %52 = extractvalue %dx.types.CBufRet.i32 %50, 1
  %53 = extractvalue %dx.types.CBufRet.i32 %50, 2
  %54 = bitcast float %41 to i32
  %55 = bitcast float %45 to i32
  %56 = bitcast float %49 to i32
  %57 = sub i32 %54, %51
  %58 = sub i32 %55, %52
  %59 = sub i32 %56, %53
  %60 = sitofp i32 %57 to float
  %61 = sitofp i32 %58 to float
  %62 = sitofp i32 %59 to float
  %63 = fmul fast float %60, 0x3EE0000000000000
  %64 = fmul fast float %61, 0x3EE0000000000000
  %65 = fmul fast float %62, 0x3EE0000000000000
  %66 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %67 = extractvalue %dx.types.CBufRet.f32 %66, 0
  %68 = extractvalue %dx.types.CBufRet.f32 %66, 1
  %69 = extractvalue %dx.types.CBufRet.f32 %66, 2
  %70 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %71 = extractvalue %dx.types.CBufRet.f32 %70, 0
  %72 = extractvalue %dx.types.CBufRet.f32 %70, 1
  %73 = extractvalue %dx.types.CBufRet.f32 %70, 2
  %74 = fmul fast float %71, %35
  %75 = fmul fast float %72, %36
  %76 = fmul fast float %73, %37
  %77 = fadd fast float %74, %67
  %78 = fadd fast float %75, %68
  %79 = fadd fast float %76, %69
  %80 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %81 = extractvalue %dx.types.CBufRet.f32 %80, 0
  %82 = fcmp fast ogt float %81, 5.000000e-01
  br i1 %82, label %83, label %89

; <label>:83                                      ; preds = %0
  %84 = and i32 %7, 255
  %85 = lshr i32 %7, 8
  %86 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1, i32 0, i32 %84, i32 %85, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %87 = extractvalue %dx.types.ResRet.f32 %86, 0
  %88 = fmul float %87, 2.500000e+00
  br label %89

; <label>:89                                      ; preds = %83, %0
  %90 = phi float [ %88, %83 ], [ 0.000000e+00, %0 ]
  %91 = fmul fast float %90, %8
  %92 = fmul fast float %90, %9
  %93 = fmul fast float %90, %10
  %94 = fadd fast float %77, %91
  %95 = fadd fast float %78, %92
  %96 = fadd fast float %79, %93
  %97 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %98 = extractvalue %dx.types.CBufRet.f32 %97, 0
  %99 = fptoui float %98 to i32
  %100 = call i32 @dx.op.binary.i32(i32 40, i32 %99, i32 8)  ; UMin(a,b)
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %167, label %102

; <label>:102                                     ; preds = %89
  br label %103

; <label>:103                                     ; preds = %103, %102
  %104 = phi float [ %163, %103 ], [ 0.000000e+00, %102 ]
  %105 = phi i32 [ %164, %103 ], [ 0, %102 ]
  %106 = shl i32 %105, 2
  %107 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %106)  ; CBufferLoadLegacy(handle,regIndex)
  %108 = extractvalue %dx.types.CBufRet.i32 %107, 0
  %109 = extractvalue %dx.types.CBufRet.i32 %107, 1
  %110 = call float @dx.op.legacyF16ToF32(i32 131, i32 %108)  ; LegacyF16ToF32(value)
  %111 = lshr i32 %108, 16
  %112 = call float @dx.op.legacyF16ToF32(i32 131, i32 %111)  ; LegacyF16ToF32(value)
  %113 = call float @dx.op.legacyF16ToF32(i32 131, i32 %109)  ; LegacyF16ToF32(value)
  %114 = lshr i32 %109, 16
  %115 = call float @dx.op.legacyF16ToF32(i32 131, i32 %114)  ; LegacyF16ToF32(value)
  %116 = or i32 %106, 1
  %117 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %116)  ; CBufferLoadLegacy(handle,regIndex)
  %118 = extractvalue %dx.types.CBufRet.f32 %117, 0
  %119 = extractvalue %dx.types.CBufRet.f32 %117, 1
  %120 = extractvalue %dx.types.CBufRet.f32 %117, 2
  %121 = extractvalue %dx.types.CBufRet.f32 %117, 3
  %122 = or i32 %106, 2
  %123 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %122)  ; CBufferLoadLegacy(handle,regIndex)
  %124 = extractvalue %dx.types.CBufRet.f32 %123, 0
  %125 = extractvalue %dx.types.CBufRet.f32 %123, 1
  %126 = extractvalue %dx.types.CBufRet.f32 %123, 2
  %127 = extractvalue %dx.types.CBufRet.f32 %123, 3
  %128 = call float @dx.op.dot4.f32(i32 56, float %110, float %112, float %113, float %115, float %94, float %95, float %96, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %129 = fmul fast float %128, -1.000000e+01
  %130 = call float @dx.op.unary.f32(i32 7, float %129)  ; Saturate(value)
  %131 = fsub fast float 1.000000e+00, %130
  %132 = fsub fast float %94, %118
  %133 = fsub fast float %95, %119
  %134 = fsub fast float %96, %120
  %135 = fsub fast float %124, %118
  %136 = fsub fast float %125, %119
  %137 = fsub fast float %126, %120
  %138 = call float @dx.op.dot3.f32(i32 55, float %132, float %133, float %134, float %135, float %136, float %137)  ; Dot3(ax,ay,az,bx,by,bz)
  %139 = call float @dx.op.dot3.f32(i32 55, float %135, float %136, float %137, float %135, float %136, float %137)  ; Dot3(ax,ay,az,bx,by,bz)
  %140 = fdiv fast float %138, %139
  %141 = fmul fast float %140, %135
  %142 = fmul fast float %140, %136
  %143 = fmul fast float %140, %137
  %144 = fsub fast float %118, %94
  %145 = fadd fast float %144, %141
  %146 = fsub fast float %119, %95
  %147 = fadd fast float %146, %142
  %148 = fsub fast float %120, %96
  %149 = fadd fast float %148, %143
  %150 = call float @dx.op.dot3.f32(i32 55, float %145, float %147, float %149, float %145, float %147, float %149)  ; Dot3(ax,ay,az,bx,by,bz)
  %151 = call float @dx.op.unary.f32(i32 24, float %150)  ; Sqrt(value)
  %152 = fmul fast float %121, 5.000000e-01
  %153 = fsub fast float %151, %152
  %154 = fdiv fast float %153, %152
  %155 = call float @dx.op.unary.f32(i32 7, float %154)  ; Saturate(value)
  %156 = fmul fast float %155, 2.000000e+00
  %157 = fsub fast float 3.000000e+00, %156
  %158 = fmul fast float %155, %155
  %159 = fmul fast float %158, %157
  %160 = fsub fast float 1.000000e+00, %159
  %161 = fmul fast float %131, %127
  %162 = fmul fast float %161, %160
  %163 = call float @dx.op.binary.f32(i32 35, float %162, float %104)  ; FMax(a,b)
  %164 = add nuw i32 %105, 1
  %165 = icmp eq i32 %164, %100
  br i1 %165, label %166, label %103

; <label>:166                                     ; preds = %103
  br label %167

; <label>:167                                     ; preds = %166, %89
  %168 = phi float [ 0.000000e+00, %89 ], [ %163, %166 ]
  %169 = call float @dx.op.unary.f32(i32 7, float %168)  ; Saturate(value)
  %170 = fmul fast float %169, %8
  %171 = fmul fast float %169, %9
  %172 = fmul fast float %169, %10
  %173 = fadd fast float %170, %94
  %174 = fadd fast float %171, %95
  %175 = fadd fast float %172, %96
  %176 = extractvalue %dx.types.CBufRet.f32 %97, 2
  %177 = fcmp fast ogt float %176, 5.000000e-01
  br i1 %177, label %253, label %178

; <label>:178                                     ; preds = %167
  br i1 %101, label %244, label %179

; <label>:179                                     ; preds = %178
  br label %180

; <label>:180                                     ; preds = %180, %179
  %181 = phi float [ %240, %180 ], [ 0.000000e+00, %179 ]
  %182 = phi i32 [ %241, %180 ], [ 0, %179 ]
  %183 = shl i32 %182, 2
  %184 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %183)  ; CBufferLoadLegacy(handle,regIndex)
  %185 = extractvalue %dx.types.CBufRet.i32 %184, 0
  %186 = extractvalue %dx.types.CBufRet.i32 %184, 1
  %187 = call float @dx.op.legacyF16ToF32(i32 131, i32 %185)  ; LegacyF16ToF32(value)
  %188 = lshr i32 %185, 16
  %189 = call float @dx.op.legacyF16ToF32(i32 131, i32 %188)  ; LegacyF16ToF32(value)
  %190 = call float @dx.op.legacyF16ToF32(i32 131, i32 %186)  ; LegacyF16ToF32(value)
  %191 = lshr i32 %186, 16
  %192 = call float @dx.op.legacyF16ToF32(i32 131, i32 %191)  ; LegacyF16ToF32(value)
  %193 = or i32 %183, 1
  %194 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %193)  ; CBufferLoadLegacy(handle,regIndex)
  %195 = extractvalue %dx.types.CBufRet.f32 %194, 0
  %196 = extractvalue %dx.types.CBufRet.f32 %194, 1
  %197 = extractvalue %dx.types.CBufRet.f32 %194, 2
  %198 = extractvalue %dx.types.CBufRet.f32 %194, 3
  %199 = or i32 %183, 2
  %200 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %199)  ; CBufferLoadLegacy(handle,regIndex)
  %201 = extractvalue %dx.types.CBufRet.f32 %200, 0
  %202 = extractvalue %dx.types.CBufRet.f32 %200, 1
  %203 = extractvalue %dx.types.CBufRet.f32 %200, 2
  %204 = extractvalue %dx.types.CBufRet.f32 %200, 3
  %205 = call float @dx.op.dot4.f32(i32 56, float %187, float %189, float %190, float %192, float %173, float %174, float %175, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %206 = fmul fast float %205, -1.000000e+01
  %207 = call float @dx.op.unary.f32(i32 7, float %206)  ; Saturate(value)
  %208 = fsub fast float 1.000000e+00, %207
  %209 = fsub fast float %173, %195
  %210 = fsub fast float %174, %196
  %211 = fsub fast float %175, %197
  %212 = fsub fast float %201, %195
  %213 = fsub fast float %202, %196
  %214 = fsub fast float %203, %197
  %215 = call float @dx.op.dot3.f32(i32 55, float %209, float %210, float %211, float %212, float %213, float %214)  ; Dot3(ax,ay,az,bx,by,bz)
  %216 = call float @dx.op.dot3.f32(i32 55, float %212, float %213, float %214, float %212, float %213, float %214)  ; Dot3(ax,ay,az,bx,by,bz)
  %217 = fdiv fast float %215, %216
  %218 = fmul fast float %217, %212
  %219 = fmul fast float %217, %213
  %220 = fmul fast float %217, %214
  %221 = fsub fast float %195, %173
  %222 = fadd fast float %221, %218
  %223 = fsub fast float %196, %174
  %224 = fadd fast float %223, %219
  %225 = fsub fast float %197, %175
  %226 = fadd fast float %225, %220
  %227 = call float @dx.op.dot3.f32(i32 55, float %222, float %224, float %226, float %222, float %224, float %226)  ; Dot3(ax,ay,az,bx,by,bz)
  %228 = call float @dx.op.unary.f32(i32 24, float %227)  ; Sqrt(value)
  %229 = fmul fast float %198, 5.000000e-01
  %230 = fsub fast float %228, %229
  %231 = fdiv fast float %230, %229
  %232 = call float @dx.op.unary.f32(i32 7, float %231)  ; Saturate(value)
  %233 = fmul fast float %232, 2.000000e+00
  %234 = fsub fast float 3.000000e+00, %233
  %235 = fmul fast float %232, %232
  %236 = fmul fast float %235, %234
  %237 = fsub fast float 1.000000e+00, %236
  %238 = fmul fast float %208, %204
  %239 = fmul fast float %238, %237
  %240 = call float @dx.op.binary.f32(i32 35, float %239, float %181)  ; FMax(a,b)
  %241 = add nuw i32 %182, 1
  %242 = icmp eq i32 %241, %100
  br i1 %242, label %243, label %180

; <label>:243                                     ; preds = %180
  br label %244

; <label>:244                                     ; preds = %243, %178
  %245 = phi float [ 0.000000e+00, %178 ], [ %240, %243 ]
  %246 = call float @dx.op.unary.f32(i32 7, float %245)  ; Saturate(value)
  %247 = fmul fast float %246, %8
  %248 = fmul fast float %246, %9
  %249 = fmul fast float %246, %10
  %250 = fadd fast float %247, %173
  %251 = fadd fast float %248, %174
  %252 = fadd fast float %249, %175
  br label %253

; <label>:253                                     ; preds = %244, %167
  %254 = phi float [ %173, %167 ], [ %250, %244 ]
  %255 = phi float [ %174, %167 ], [ %251, %244 ]
  %256 = phi float [ %175, %167 ], [ %252, %244 ]
  %257 = call float @dx.op.dot4.f32(i32 56, float %27, float %28, float %29, float %30, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %258 = call float @dx.op.binary.f32(i32 35, float 0x3EE4F8B580000000, float %257)  ; FMax(a,b)
  %259 = fdiv fast float %27, %258
  %260 = fdiv fast float %28, %258
  %261 = fdiv fast float %29, %258
  %262 = fdiv fast float %30, %258
  %263 = mul i32 %31, %12
  %264 = add i32 %263, %11
  %265 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %264, i32 undef)  ; BufferLoad(srv,index,wot)
  %266 = extractvalue %dx.types.ResRet.i32 %265, 0
  %267 = extractvalue %dx.types.ResRet.i32 %265, 1
  %268 = extractvalue %dx.types.ResRet.i32 %265, 2
  %269 = extractvalue %dx.types.ResRet.i32 %265, 3
  %270 = bitcast i32 %266 to float
  %271 = bitcast i32 %267 to float
  %272 = bitcast i32 %268 to float
  %273 = bitcast i32 %269 to float
  %274 = add i32 %264, 16
  %275 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %274, i32 undef)  ; BufferLoad(srv,index,wot)
  %276 = extractvalue %dx.types.ResRet.i32 %275, 0
  %277 = extractvalue %dx.types.ResRet.i32 %275, 1
  %278 = extractvalue %dx.types.ResRet.i32 %275, 2
  %279 = extractvalue %dx.types.ResRet.i32 %275, 3
  %280 = bitcast i32 %276 to float
  %281 = bitcast i32 %277 to float
  %282 = bitcast i32 %278 to float
  %283 = bitcast i32 %279 to float
  %284 = add i32 %264, 32
  %285 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %284, i32 undef)  ; BufferLoad(srv,index,wot)
  %286 = extractvalue %dx.types.ResRet.i32 %285, 0
  %287 = extractvalue %dx.types.ResRet.i32 %285, 1
  %288 = extractvalue %dx.types.ResRet.i32 %285, 2
  %289 = extractvalue %dx.types.ResRet.i32 %285, 3
  %290 = bitcast i32 %286 to float
  %291 = bitcast i32 %287 to float
  %292 = bitcast i32 %288 to float
  %293 = bitcast i32 %289 to float
  %294 = fmul fast float %270, %259
  %295 = fmul fast float %280, %259
  %296 = fmul fast float %290, %259
  %297 = fmul fast float %271, %259
  %298 = fmul fast float %281, %259
  %299 = fmul fast float %291, %259
  %300 = fmul fast float %272, %259
  %301 = fmul fast float %282, %259
  %302 = fmul fast float %292, %259
  %303 = fmul fast float %273, %259
  %304 = fmul fast float %283, %259
  %305 = fmul fast float %293, %259
  %306 = mul i32 %32, %12
  %307 = add i32 %306, %11
  %308 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %307, i32 undef)  ; BufferLoad(srv,index,wot)
  %309 = extractvalue %dx.types.ResRet.i32 %308, 0
  %310 = extractvalue %dx.types.ResRet.i32 %308, 1
  %311 = extractvalue %dx.types.ResRet.i32 %308, 2
  %312 = extractvalue %dx.types.ResRet.i32 %308, 3
  %313 = bitcast i32 %309 to float
  %314 = bitcast i32 %310 to float
  %315 = bitcast i32 %311 to float
  %316 = bitcast i32 %312 to float
  %317 = add i32 %307, 16
  %318 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %317, i32 undef)  ; BufferLoad(srv,index,wot)
  %319 = extractvalue %dx.types.ResRet.i32 %318, 0
  %320 = extractvalue %dx.types.ResRet.i32 %318, 1
  %321 = extractvalue %dx.types.ResRet.i32 %318, 2
  %322 = extractvalue %dx.types.ResRet.i32 %318, 3
  %323 = bitcast i32 %319 to float
  %324 = bitcast i32 %320 to float
  %325 = bitcast i32 %321 to float
  %326 = bitcast i32 %322 to float
  %327 = add i32 %307, 32
  %328 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %327, i32 undef)  ; BufferLoad(srv,index,wot)
  %329 = extractvalue %dx.types.ResRet.i32 %328, 0
  %330 = extractvalue %dx.types.ResRet.i32 %328, 1
  %331 = extractvalue %dx.types.ResRet.i32 %328, 2
  %332 = extractvalue %dx.types.ResRet.i32 %328, 3
  %333 = bitcast i32 %329 to float
  %334 = bitcast i32 %330 to float
  %335 = bitcast i32 %331 to float
  %336 = bitcast i32 %332 to float
  %337 = fmul fast float %313, %260
  %338 = fmul fast float %323, %260
  %339 = fmul fast float %333, %260
  %340 = fmul fast float %314, %260
  %341 = fmul fast float %324, %260
  %342 = fmul fast float %334, %260
  %343 = fmul fast float %315, %260
  %344 = fmul fast float %325, %260
  %345 = fmul fast float %335, %260
  %346 = fmul fast float %316, %260
  %347 = fmul fast float %326, %260
  %348 = fmul fast float %336, %260
  %349 = fadd fast float %337, %294
  %350 = fadd fast float %338, %295
  %351 = fadd fast float %339, %296
  %352 = fadd fast float %340, %297
  %353 = fadd fast float %341, %298
  %354 = fadd fast float %342, %299
  %355 = fadd fast float %343, %300
  %356 = fadd fast float %344, %301
  %357 = fadd fast float %345, %302
  %358 = fadd fast float %346, %303
  %359 = fadd fast float %347, %304
  %360 = fadd fast float %348, %305
  %361 = mul i32 %33, %12
  %362 = add i32 %361, %11
  %363 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %362, i32 undef)  ; BufferLoad(srv,index,wot)
  %364 = extractvalue %dx.types.ResRet.i32 %363, 0
  %365 = extractvalue %dx.types.ResRet.i32 %363, 1
  %366 = extractvalue %dx.types.ResRet.i32 %363, 2
  %367 = extractvalue %dx.types.ResRet.i32 %363, 3
  %368 = bitcast i32 %364 to float
  %369 = bitcast i32 %365 to float
  %370 = bitcast i32 %366 to float
  %371 = bitcast i32 %367 to float
  %372 = add i32 %362, 16
  %373 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %372, i32 undef)  ; BufferLoad(srv,index,wot)
  %374 = extractvalue %dx.types.ResRet.i32 %373, 0
  %375 = extractvalue %dx.types.ResRet.i32 %373, 1
  %376 = extractvalue %dx.types.ResRet.i32 %373, 2
  %377 = extractvalue %dx.types.ResRet.i32 %373, 3
  %378 = bitcast i32 %374 to float
  %379 = bitcast i32 %375 to float
  %380 = bitcast i32 %376 to float
  %381 = bitcast i32 %377 to float
  %382 = add i32 %362, 32
  %383 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %382, i32 undef)  ; BufferLoad(srv,index,wot)
  %384 = extractvalue %dx.types.ResRet.i32 %383, 0
  %385 = extractvalue %dx.types.ResRet.i32 %383, 1
  %386 = extractvalue %dx.types.ResRet.i32 %383, 2
  %387 = extractvalue %dx.types.ResRet.i32 %383, 3
  %388 = bitcast i32 %384 to float
  %389 = bitcast i32 %385 to float
  %390 = bitcast i32 %386 to float
  %391 = bitcast i32 %387 to float
  %392 = fmul fast float %368, %261
  %393 = fmul fast float %378, %261
  %394 = fmul fast float %388, %261
  %395 = fmul fast float %369, %261
  %396 = fmul fast float %379, %261
  %397 = fmul fast float %389, %261
  %398 = fmul fast float %370, %261
  %399 = fmul fast float %380, %261
  %400 = fmul fast float %390, %261
  %401 = fmul fast float %371, %261
  %402 = fmul fast float %381, %261
  %403 = fmul fast float %391, %261
  %404 = fadd fast float %349, %392
  %405 = fadd fast float %350, %393
  %406 = fadd fast float %351, %394
  %407 = fadd fast float %352, %395
  %408 = fadd fast float %353, %396
  %409 = fadd fast float %354, %397
  %410 = fadd fast float %355, %398
  %411 = fadd fast float %356, %399
  %412 = fadd fast float %357, %400
  %413 = fadd fast float %358, %401
  %414 = fadd fast float %359, %402
  %415 = fadd fast float %360, %403
  %416 = mul i32 %34, %12
  %417 = add i32 %416, %11
  %418 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %417, i32 undef)  ; BufferLoad(srv,index,wot)
  %419 = extractvalue %dx.types.ResRet.i32 %418, 0
  %420 = extractvalue %dx.types.ResRet.i32 %418, 1
  %421 = extractvalue %dx.types.ResRet.i32 %418, 2
  %422 = extractvalue %dx.types.ResRet.i32 %418, 3
  %423 = bitcast i32 %419 to float
  %424 = bitcast i32 %420 to float
  %425 = bitcast i32 %421 to float
  %426 = bitcast i32 %422 to float
  %427 = add i32 %417, 16
  %428 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %427, i32 undef)  ; BufferLoad(srv,index,wot)
  %429 = extractvalue %dx.types.ResRet.i32 %428, 0
  %430 = extractvalue %dx.types.ResRet.i32 %428, 1
  %431 = extractvalue %dx.types.ResRet.i32 %428, 2
  %432 = extractvalue %dx.types.ResRet.i32 %428, 3
  %433 = bitcast i32 %429 to float
  %434 = bitcast i32 %430 to float
  %435 = bitcast i32 %431 to float
  %436 = bitcast i32 %432 to float
  %437 = add i32 %417, 32
  %438 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %437, i32 undef)  ; BufferLoad(srv,index,wot)
  %439 = extractvalue %dx.types.ResRet.i32 %438, 0
  %440 = extractvalue %dx.types.ResRet.i32 %438, 1
  %441 = extractvalue %dx.types.ResRet.i32 %438, 2
  %442 = extractvalue %dx.types.ResRet.i32 %438, 3
  %443 = bitcast i32 %439 to float
  %444 = bitcast i32 %440 to float
  %445 = bitcast i32 %441 to float
  %446 = bitcast i32 %442 to float
  %447 = fmul fast float %423, %262
  %448 = fmul fast float %433, %262
  %449 = fmul fast float %443, %262
  %450 = fmul fast float %424, %262
  %451 = fmul fast float %434, %262
  %452 = fmul fast float %444, %262
  %453 = fmul fast float %425, %262
  %454 = fmul fast float %435, %262
  %455 = fmul fast float %445, %262
  %456 = fmul fast float %426, %262
  %457 = fmul fast float %436, %262
  %458 = fmul fast float %446, %262
  %459 = fadd fast float %404, %447
  %460 = fadd fast float %405, %448
  %461 = fadd fast float %406, %449
  %462 = fadd fast float %407, %450
  %463 = fadd fast float %408, %451
  %464 = fadd fast float %409, %452
  %465 = fadd fast float %410, %453
  %466 = fadd fast float %411, %454
  %467 = fadd fast float %412, %455
  %468 = fadd fast float %413, %456
  %469 = fadd fast float %414, %457
  %470 = fadd fast float %415, %458
  %471 = fmul fast float %459, %254
  %472 = call float @dx.op.tertiary.f32(i32 46, float %255, float %462, float %471)  ; FMad(a,b,c)
  %473 = call float @dx.op.tertiary.f32(i32 46, float %256, float %465, float %472)  ; FMad(a,b,c)
  %474 = fadd fast float %468, %473
  %475 = fmul fast float %460, %254
  %476 = call float @dx.op.tertiary.f32(i32 46, float %255, float %463, float %475)  ; FMad(a,b,c)
  %477 = call float @dx.op.tertiary.f32(i32 46, float %256, float %466, float %476)  ; FMad(a,b,c)
  %478 = fadd fast float %469, %477
  %479 = fmul fast float %461, %254
  %480 = call float @dx.op.tertiary.f32(i32 46, float %255, float %464, float %479)  ; FMad(a,b,c)
  %481 = call float @dx.op.tertiary.f32(i32 46, float %256, float %467, float %480)  ; FMad(a,b,c)
  %482 = fadd fast float %470, %481
  br i1 %177, label %483, label %558

; <label>:483                                     ; preds = %253
  br i1 %101, label %549, label %484

; <label>:484                                     ; preds = %483
  br label %485

; <label>:485                                     ; preds = %485, %484
  %486 = phi float [ %545, %485 ], [ 0.000000e+00, %484 ]
  %487 = phi i32 [ %546, %485 ], [ 0, %484 ]
  %488 = shl i32 %487, 2
  %489 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %488)  ; CBufferLoadLegacy(handle,regIndex)
  %490 = extractvalue %dx.types.CBufRet.i32 %489, 0
  %491 = extractvalue %dx.types.CBufRet.i32 %489, 1
  %492 = call float @dx.op.legacyF16ToF32(i32 131, i32 %490)  ; LegacyF16ToF32(value)
  %493 = lshr i32 %490, 16
  %494 = call float @dx.op.legacyF16ToF32(i32 131, i32 %493)  ; LegacyF16ToF32(value)
  %495 = call float @dx.op.legacyF16ToF32(i32 131, i32 %491)  ; LegacyF16ToF32(value)
  %496 = lshr i32 %491, 16
  %497 = call float @dx.op.legacyF16ToF32(i32 131, i32 %496)  ; LegacyF16ToF32(value)
  %498 = or i32 %488, 1
  %499 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %498)  ; CBufferLoadLegacy(handle,regIndex)
  %500 = extractvalue %dx.types.CBufRet.f32 %499, 0
  %501 = extractvalue %dx.types.CBufRet.f32 %499, 1
  %502 = extractvalue %dx.types.CBufRet.f32 %499, 2
  %503 = extractvalue %dx.types.CBufRet.f32 %499, 3
  %504 = or i32 %488, 2
  %505 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %504)  ; CBufferLoadLegacy(handle,regIndex)
  %506 = extractvalue %dx.types.CBufRet.f32 %505, 0
  %507 = extractvalue %dx.types.CBufRet.f32 %505, 1
  %508 = extractvalue %dx.types.CBufRet.f32 %505, 2
  %509 = extractvalue %dx.types.CBufRet.f32 %505, 3
  %510 = call float @dx.op.dot4.f32(i32 56, float %492, float %494, float %495, float %497, float %474, float %478, float %482, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %511 = fmul fast float %510, -1.000000e+01
  %512 = call float @dx.op.unary.f32(i32 7, float %511)  ; Saturate(value)
  %513 = fsub fast float 1.000000e+00, %512
  %514 = fsub fast float %474, %500
  %515 = fsub fast float %478, %501
  %516 = fsub fast float %482, %502
  %517 = fsub fast float %506, %500
  %518 = fsub fast float %507, %501
  %519 = fsub fast float %508, %502
  %520 = call float @dx.op.dot3.f32(i32 55, float %514, float %515, float %516, float %517, float %518, float %519)  ; Dot3(ax,ay,az,bx,by,bz)
  %521 = call float @dx.op.dot3.f32(i32 55, float %517, float %518, float %519, float %517, float %518, float %519)  ; Dot3(ax,ay,az,bx,by,bz)
  %522 = fdiv fast float %520, %521
  %523 = fmul fast float %522, %517
  %524 = fmul fast float %522, %518
  %525 = fmul fast float %522, %519
  %526 = fsub fast float %500, %474
  %527 = fadd fast float %526, %523
  %528 = fsub fast float %501, %478
  %529 = fadd fast float %528, %524
  %530 = fsub fast float %502, %482
  %531 = fadd fast float %530, %525
  %532 = call float @dx.op.dot3.f32(i32 55, float %527, float %529, float %531, float %527, float %529, float %531)  ; Dot3(ax,ay,az,bx,by,bz)
  %533 = call float @dx.op.unary.f32(i32 24, float %532)  ; Sqrt(value)
  %534 = fmul fast float %503, 5.000000e-01
  %535 = fsub fast float %533, %534
  %536 = fdiv fast float %535, %534
  %537 = call float @dx.op.unary.f32(i32 7, float %536)  ; Saturate(value)
  %538 = fmul fast float %537, 2.000000e+00
  %539 = fsub fast float 3.000000e+00, %538
  %540 = fmul fast float %537, %537
  %541 = fmul fast float %540, %539
  %542 = fsub fast float 1.000000e+00, %541
  %543 = fmul fast float %513, %509
  %544 = fmul fast float %543, %542
  %545 = call float @dx.op.binary.f32(i32 35, float %544, float %486)  ; FMax(a,b)
  %546 = add nuw i32 %487, 1
  %547 = icmp eq i32 %546, %100
  br i1 %547, label %548, label %485

; <label>:548                                     ; preds = %485
  br label %549

; <label>:549                                     ; preds = %548, %483
  %550 = phi float [ 0.000000e+00, %483 ], [ %545, %548 ]
  %551 = call float @dx.op.unary.f32(i32 7, float %550)  ; Saturate(value)
  %552 = fmul fast float %551, %8
  %553 = fmul fast float %551, %9
  %554 = fmul fast float %551, %10
  %555 = fadd fast float %552, %474
  %556 = fadd fast float %553, %478
  %557 = fadd fast float %554, %482
  br label %558

; <label>:558                                     ; preds = %549, %253
  %559 = phi float [ %555, %549 ], [ %474, %253 ]
  %560 = phi float [ %556, %549 ], [ %478, %253 ]
  %561 = phi float [ %557, %549 ], [ %482, %253 ]
  %562 = fmul fast float %559, %38
  %563 = call float @dx.op.tertiary.f32(i32 46, float %560, float %39, float %562)  ; FMad(a,b,c)
  %564 = call float @dx.op.tertiary.f32(i32 46, float %561, float %40, float %563)  ; FMad(a,b,c)
  %565 = fadd fast float %564, %63
  %566 = fmul fast float %559, %42
  %567 = call float @dx.op.tertiary.f32(i32 46, float %560, float %43, float %566)  ; FMad(a,b,c)
  %568 = call float @dx.op.tertiary.f32(i32 46, float %561, float %44, float %567)  ; FMad(a,b,c)
  %569 = fadd fast float %568, %64
  %570 = fmul fast float %559, %46
  %571 = call float @dx.op.tertiary.f32(i32 46, float %560, float %47, float %570)  ; FMad(a,b,c)
  %572 = call float @dx.op.tertiary.f32(i32 46, float %561, float %48, float %571)  ; FMad(a,b,c)
  %573 = fadd fast float %572, %65
  %574 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %575 = extractvalue %dx.types.CBufRet.f32 %574, 0
  %576 = extractvalue %dx.types.CBufRet.f32 %574, 1
  %577 = extractvalue %dx.types.CBufRet.f32 %574, 2
  %578 = extractvalue %dx.types.CBufRet.f32 %574, 3
  %579 = fmul fast float %575, %565
  %580 = call float @dx.op.tertiary.f32(i32 46, float %569, float %576, float %579)  ; FMad(a,b,c)
  %581 = call float @dx.op.tertiary.f32(i32 46, float %573, float %577, float %580)  ; FMad(a,b,c)
  %582 = fadd fast float %581, %578
  %583 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 37)  ; CBufferLoadLegacy(handle,regIndex)
  %584 = extractvalue %dx.types.CBufRet.f32 %583, 0
  %585 = extractvalue %dx.types.CBufRet.f32 %583, 1
  %586 = extractvalue %dx.types.CBufRet.f32 %583, 2
  %587 = fadd fast float %584, %565
  %588 = fadd fast float %585, %569
  %589 = fadd fast float %586, %573
  %590 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %591 = extractvalue %dx.types.CBufRet.f32 %590, 0
  %592 = extractvalue %dx.types.CBufRet.f32 %590, 1
  %593 = extractvalue %dx.types.CBufRet.f32 %590, 2
  %594 = extractvalue %dx.types.CBufRet.f32 %590, 3
  %595 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %596 = extractvalue %dx.types.CBufRet.f32 %595, 0
  %597 = extractvalue %dx.types.CBufRet.f32 %595, 1
  %598 = extractvalue %dx.types.CBufRet.f32 %595, 2
  %599 = extractvalue %dx.types.CBufRet.f32 %595, 3
  %600 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %601 = extractvalue %dx.types.CBufRet.f32 %600, 0
  %602 = extractvalue %dx.types.CBufRet.f32 %600, 1
  %603 = extractvalue %dx.types.CBufRet.f32 %600, 2
  %604 = extractvalue %dx.types.CBufRet.f32 %600, 3
  %605 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %606 = extractvalue %dx.types.CBufRet.f32 %605, 0
  %607 = extractvalue %dx.types.CBufRet.f32 %605, 1
  %608 = extractvalue %dx.types.CBufRet.f32 %605, 2
  %609 = extractvalue %dx.types.CBufRet.f32 %605, 3
  %610 = fmul fast float %591, %565
  %611 = call float @dx.op.tertiary.f32(i32 46, float %569, float %592, float %610)  ; FMad(a,b,c)
  %612 = call float @dx.op.tertiary.f32(i32 46, float %573, float %593, float %611)  ; FMad(a,b,c)
  %613 = fadd fast float %612, %594
  %614 = fmul fast float %596, %565
  %615 = call float @dx.op.tertiary.f32(i32 46, float %569, float %597, float %614)  ; FMad(a,b,c)
  %616 = call float @dx.op.tertiary.f32(i32 46, float %573, float %598, float %615)  ; FMad(a,b,c)
  %617 = fadd fast float %616, %599
  %618 = fmul fast float %601, %565
  %619 = call float @dx.op.tertiary.f32(i32 46, float %569, float %602, float %618)  ; FMad(a,b,c)
  %620 = call float @dx.op.tertiary.f32(i32 46, float %573, float %603, float %619)  ; FMad(a,b,c)
  %621 = fadd fast float %620, %604
  %622 = fmul fast float %606, %565
  %623 = call float @dx.op.tertiary.f32(i32 46, float %569, float %607, float %622)  ; FMad(a,b,c)
  %624 = call float @dx.op.tertiary.f32(i32 46, float %573, float %608, float %623)  ; FMad(a,b,c)
  %625 = fadd fast float %624, %609
  br i1 %177, label %701, label %626

; <label>:626                                     ; preds = %558
  br i1 %101, label %692, label %627

; <label>:627                                     ; preds = %626
  br label %628

; <label>:628                                     ; preds = %628, %627
  %629 = phi float [ %688, %628 ], [ 0.000000e+00, %627 ]
  %630 = phi i32 [ %689, %628 ], [ 0, %627 ]
  %631 = shl i32 %630, 2
  %632 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %631)  ; CBufferLoadLegacy(handle,regIndex)
  %633 = extractvalue %dx.types.CBufRet.i32 %632, 0
  %634 = extractvalue %dx.types.CBufRet.i32 %632, 1
  %635 = call float @dx.op.legacyF16ToF32(i32 131, i32 %633)  ; LegacyF16ToF32(value)
  %636 = lshr i32 %633, 16
  %637 = call float @dx.op.legacyF16ToF32(i32 131, i32 %636)  ; LegacyF16ToF32(value)
  %638 = call float @dx.op.legacyF16ToF32(i32 131, i32 %634)  ; LegacyF16ToF32(value)
  %639 = lshr i32 %634, 16
  %640 = call float @dx.op.legacyF16ToF32(i32 131, i32 %639)  ; LegacyF16ToF32(value)
  %641 = or i32 %631, 1
  %642 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %641)  ; CBufferLoadLegacy(handle,regIndex)
  %643 = extractvalue %dx.types.CBufRet.f32 %642, 0
  %644 = extractvalue %dx.types.CBufRet.f32 %642, 1
  %645 = extractvalue %dx.types.CBufRet.f32 %642, 2
  %646 = extractvalue %dx.types.CBufRet.f32 %642, 3
  %647 = or i32 %631, 2
  %648 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %647)  ; CBufferLoadLegacy(handle,regIndex)
  %649 = extractvalue %dx.types.CBufRet.f32 %648, 0
  %650 = extractvalue %dx.types.CBufRet.f32 %648, 1
  %651 = extractvalue %dx.types.CBufRet.f32 %648, 2
  %652 = extractvalue %dx.types.CBufRet.f32 %648, 3
  %653 = call float @dx.op.dot4.f32(i32 56, float %635, float %637, float %638, float %640, float %173, float %174, float %175, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %654 = fmul fast float %653, -1.000000e+01
  %655 = call float @dx.op.unary.f32(i32 7, float %654)  ; Saturate(value)
  %656 = fsub fast float 1.000000e+00, %655
  %657 = fsub fast float %173, %643
  %658 = fsub fast float %174, %644
  %659 = fsub fast float %175, %645
  %660 = fsub fast float %649, %643
  %661 = fsub fast float %650, %644
  %662 = fsub fast float %651, %645
  %663 = call float @dx.op.dot3.f32(i32 55, float %657, float %658, float %659, float %660, float %661, float %662)  ; Dot3(ax,ay,az,bx,by,bz)
  %664 = call float @dx.op.dot3.f32(i32 55, float %660, float %661, float %662, float %660, float %661, float %662)  ; Dot3(ax,ay,az,bx,by,bz)
  %665 = fdiv fast float %663, %664
  %666 = fmul fast float %665, %660
  %667 = fmul fast float %665, %661
  %668 = fmul fast float %665, %662
  %669 = fsub fast float %643, %173
  %670 = fadd fast float %669, %666
  %671 = fsub fast float %644, %174
  %672 = fadd fast float %671, %667
  %673 = fsub fast float %645, %175
  %674 = fadd fast float %673, %668
  %675 = call float @dx.op.dot3.f32(i32 55, float %670, float %672, float %674, float %670, float %672, float %674)  ; Dot3(ax,ay,az,bx,by,bz)
  %676 = call float @dx.op.unary.f32(i32 24, float %675)  ; Sqrt(value)
  %677 = fmul fast float %646, 5.000000e-01
  %678 = fsub fast float %676, %677
  %679 = fdiv fast float %678, %677
  %680 = call float @dx.op.unary.f32(i32 7, float %679)  ; Saturate(value)
  %681 = fmul fast float %680, 2.000000e+00
  %682 = fsub fast float 3.000000e+00, %681
  %683 = fmul fast float %680, %680
  %684 = fmul fast float %683, %682
  %685 = fsub fast float 1.000000e+00, %684
  %686 = fmul fast float %656, %652
  %687 = fmul fast float %686, %685
  %688 = call float @dx.op.binary.f32(i32 35, float %687, float %629)  ; FMax(a,b)
  %689 = add nuw i32 %630, 1
  %690 = icmp eq i32 %689, %100
  br i1 %690, label %691, label %628

; <label>:691                                     ; preds = %628
  br label %692

; <label>:692                                     ; preds = %691, %626
  %693 = phi float [ 0.000000e+00, %626 ], [ %688, %691 ]
  %694 = call float @dx.op.unary.f32(i32 7, float %693)  ; Saturate(value)
  %695 = fmul fast float %694, %8
  %696 = fmul fast float %694, %9
  %697 = fmul fast float %694, %10
  %698 = fadd fast float %695, %173
  %699 = fadd fast float %696, %174
  %700 = fadd fast float %697, %175
  br label %701

; <label>:701                                     ; preds = %692, %558
  %702 = phi float [ %173, %558 ], [ %698, %692 ]
  %703 = phi float [ %174, %558 ], [ %699, %692 ]
  %704 = phi float [ %175, %558 ], [ %700, %692 ]
  %705 = add i32 %263, %13
  %706 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %705, i32 undef)  ; BufferLoad(srv,index,wot)
  %707 = extractvalue %dx.types.ResRet.i32 %706, 0
  %708 = extractvalue %dx.types.ResRet.i32 %706, 1
  %709 = extractvalue %dx.types.ResRet.i32 %706, 2
  %710 = extractvalue %dx.types.ResRet.i32 %706, 3
  %711 = bitcast i32 %707 to float
  %712 = bitcast i32 %708 to float
  %713 = bitcast i32 %709 to float
  %714 = bitcast i32 %710 to float
  %715 = add i32 %705, 16
  %716 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %715, i32 undef)  ; BufferLoad(srv,index,wot)
  %717 = extractvalue %dx.types.ResRet.i32 %716, 0
  %718 = extractvalue %dx.types.ResRet.i32 %716, 1
  %719 = extractvalue %dx.types.ResRet.i32 %716, 2
  %720 = extractvalue %dx.types.ResRet.i32 %716, 3
  %721 = bitcast i32 %717 to float
  %722 = bitcast i32 %718 to float
  %723 = bitcast i32 %719 to float
  %724 = bitcast i32 %720 to float
  %725 = add i32 %705, 32
  %726 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %725, i32 undef)  ; BufferLoad(srv,index,wot)
  %727 = extractvalue %dx.types.ResRet.i32 %726, 0
  %728 = extractvalue %dx.types.ResRet.i32 %726, 1
  %729 = extractvalue %dx.types.ResRet.i32 %726, 2
  %730 = extractvalue %dx.types.ResRet.i32 %726, 3
  %731 = bitcast i32 %727 to float
  %732 = bitcast i32 %728 to float
  %733 = bitcast i32 %729 to float
  %734 = bitcast i32 %730 to float
  %735 = fmul fast float %711, %259
  %736 = fmul fast float %721, %259
  %737 = fmul fast float %731, %259
  %738 = fmul fast float %712, %259
  %739 = fmul fast float %722, %259
  %740 = fmul fast float %732, %259
  %741 = fmul fast float %713, %259
  %742 = fmul fast float %723, %259
  %743 = fmul fast float %733, %259
  %744 = fmul fast float %714, %259
  %745 = fmul fast float %724, %259
  %746 = fmul fast float %734, %259
  %747 = add i32 %306, %13
  %748 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %747, i32 undef)  ; BufferLoad(srv,index,wot)
  %749 = extractvalue %dx.types.ResRet.i32 %748, 0
  %750 = extractvalue %dx.types.ResRet.i32 %748, 1
  %751 = extractvalue %dx.types.ResRet.i32 %748, 2
  %752 = extractvalue %dx.types.ResRet.i32 %748, 3
  %753 = bitcast i32 %749 to float
  %754 = bitcast i32 %750 to float
  %755 = bitcast i32 %751 to float
  %756 = bitcast i32 %752 to float
  %757 = add i32 %747, 16
  %758 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %757, i32 undef)  ; BufferLoad(srv,index,wot)
  %759 = extractvalue %dx.types.ResRet.i32 %758, 0
  %760 = extractvalue %dx.types.ResRet.i32 %758, 1
  %761 = extractvalue %dx.types.ResRet.i32 %758, 2
  %762 = extractvalue %dx.types.ResRet.i32 %758, 3
  %763 = bitcast i32 %759 to float
  %764 = bitcast i32 %760 to float
  %765 = bitcast i32 %761 to float
  %766 = bitcast i32 %762 to float
  %767 = add i32 %747, 32
  %768 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %767, i32 undef)  ; BufferLoad(srv,index,wot)
  %769 = extractvalue %dx.types.ResRet.i32 %768, 0
  %770 = extractvalue %dx.types.ResRet.i32 %768, 1
  %771 = extractvalue %dx.types.ResRet.i32 %768, 2
  %772 = extractvalue %dx.types.ResRet.i32 %768, 3
  %773 = bitcast i32 %769 to float
  %774 = bitcast i32 %770 to float
  %775 = bitcast i32 %771 to float
  %776 = bitcast i32 %772 to float
  %777 = fmul fast float %753, %260
  %778 = fmul fast float %763, %260
  %779 = fmul fast float %773, %260
  %780 = fmul fast float %754, %260
  %781 = fmul fast float %764, %260
  %782 = fmul fast float %774, %260
  %783 = fmul fast float %755, %260
  %784 = fmul fast float %765, %260
  %785 = fmul fast float %775, %260
  %786 = fmul fast float %756, %260
  %787 = fmul fast float %766, %260
  %788 = fmul fast float %776, %260
  %789 = fadd fast float %777, %735
  %790 = fadd fast float %778, %736
  %791 = fadd fast float %779, %737
  %792 = fadd fast float %780, %738
  %793 = fadd fast float %781, %739
  %794 = fadd fast float %782, %740
  %795 = fadd fast float %783, %741
  %796 = fadd fast float %784, %742
  %797 = fadd fast float %785, %743
  %798 = fadd fast float %786, %744
  %799 = fadd fast float %787, %745
  %800 = fadd fast float %788, %746
  %801 = add i32 %361, %13
  %802 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %801, i32 undef)  ; BufferLoad(srv,index,wot)
  %803 = extractvalue %dx.types.ResRet.i32 %802, 0
  %804 = extractvalue %dx.types.ResRet.i32 %802, 1
  %805 = extractvalue %dx.types.ResRet.i32 %802, 2
  %806 = extractvalue %dx.types.ResRet.i32 %802, 3
  %807 = bitcast i32 %803 to float
  %808 = bitcast i32 %804 to float
  %809 = bitcast i32 %805 to float
  %810 = bitcast i32 %806 to float
  %811 = add i32 %801, 16
  %812 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %811, i32 undef)  ; BufferLoad(srv,index,wot)
  %813 = extractvalue %dx.types.ResRet.i32 %812, 0
  %814 = extractvalue %dx.types.ResRet.i32 %812, 1
  %815 = extractvalue %dx.types.ResRet.i32 %812, 2
  %816 = extractvalue %dx.types.ResRet.i32 %812, 3
  %817 = bitcast i32 %813 to float
  %818 = bitcast i32 %814 to float
  %819 = bitcast i32 %815 to float
  %820 = bitcast i32 %816 to float
  %821 = add i32 %801, 32
  %822 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %821, i32 undef)  ; BufferLoad(srv,index,wot)
  %823 = extractvalue %dx.types.ResRet.i32 %822, 0
  %824 = extractvalue %dx.types.ResRet.i32 %822, 1
  %825 = extractvalue %dx.types.ResRet.i32 %822, 2
  %826 = extractvalue %dx.types.ResRet.i32 %822, 3
  %827 = bitcast i32 %823 to float
  %828 = bitcast i32 %824 to float
  %829 = bitcast i32 %825 to float
  %830 = bitcast i32 %826 to float
  %831 = fmul fast float %807, %261
  %832 = fmul fast float %817, %261
  %833 = fmul fast float %827, %261
  %834 = fmul fast float %808, %261
  %835 = fmul fast float %818, %261
  %836 = fmul fast float %828, %261
  %837 = fmul fast float %809, %261
  %838 = fmul fast float %819, %261
  %839 = fmul fast float %829, %261
  %840 = fmul fast float %810, %261
  %841 = fmul fast float %820, %261
  %842 = fmul fast float %830, %261
  %843 = fadd fast float %789, %831
  %844 = fadd fast float %790, %832
  %845 = fadd fast float %791, %833
  %846 = fadd fast float %792, %834
  %847 = fadd fast float %793, %835
  %848 = fadd fast float %794, %836
  %849 = fadd fast float %795, %837
  %850 = fadd fast float %796, %838
  %851 = fadd fast float %797, %839
  %852 = fadd fast float %798, %840
  %853 = fadd fast float %799, %841
  %854 = fadd fast float %800, %842
  %855 = add i32 %416, %13
  %856 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %855, i32 undef)  ; BufferLoad(srv,index,wot)
  %857 = extractvalue %dx.types.ResRet.i32 %856, 0
  %858 = extractvalue %dx.types.ResRet.i32 %856, 1
  %859 = extractvalue %dx.types.ResRet.i32 %856, 2
  %860 = extractvalue %dx.types.ResRet.i32 %856, 3
  %861 = bitcast i32 %857 to float
  %862 = bitcast i32 %858 to float
  %863 = bitcast i32 %859 to float
  %864 = bitcast i32 %860 to float
  %865 = add i32 %855, 16
  %866 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %865, i32 undef)  ; BufferLoad(srv,index,wot)
  %867 = extractvalue %dx.types.ResRet.i32 %866, 0
  %868 = extractvalue %dx.types.ResRet.i32 %866, 1
  %869 = extractvalue %dx.types.ResRet.i32 %866, 2
  %870 = extractvalue %dx.types.ResRet.i32 %866, 3
  %871 = bitcast i32 %867 to float
  %872 = bitcast i32 %868 to float
  %873 = bitcast i32 %869 to float
  %874 = bitcast i32 %870 to float
  %875 = add i32 %855, 32
  %876 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2, i32 %875, i32 undef)  ; BufferLoad(srv,index,wot)
  %877 = extractvalue %dx.types.ResRet.i32 %876, 0
  %878 = extractvalue %dx.types.ResRet.i32 %876, 1
  %879 = extractvalue %dx.types.ResRet.i32 %876, 2
  %880 = extractvalue %dx.types.ResRet.i32 %876, 3
  %881 = bitcast i32 %877 to float
  %882 = bitcast i32 %878 to float
  %883 = bitcast i32 %879 to float
  %884 = bitcast i32 %880 to float
  %885 = fmul fast float %861, %262
  %886 = fmul fast float %871, %262
  %887 = fmul fast float %881, %262
  %888 = fmul fast float %862, %262
  %889 = fmul fast float %872, %262
  %890 = fmul fast float %882, %262
  %891 = fmul fast float %863, %262
  %892 = fmul fast float %873, %262
  %893 = fmul fast float %883, %262
  %894 = fmul fast float %864, %262
  %895 = fmul fast float %874, %262
  %896 = fmul fast float %884, %262
  %897 = fadd fast float %843, %885
  %898 = fadd fast float %844, %886
  %899 = fadd fast float %845, %887
  %900 = fadd fast float %846, %888
  %901 = fadd fast float %847, %889
  %902 = fadd fast float %848, %890
  %903 = fadd fast float %849, %891
  %904 = fadd fast float %850, %892
  %905 = fadd fast float %851, %893
  %906 = fadd fast float %852, %894
  %907 = fadd fast float %853, %895
  %908 = fadd fast float %854, %896
  %909 = fmul fast float %897, %702
  %910 = call float @dx.op.tertiary.f32(i32 46, float %703, float %900, float %909)  ; FMad(a,b,c)
  %911 = call float @dx.op.tertiary.f32(i32 46, float %704, float %903, float %910)  ; FMad(a,b,c)
  %912 = fadd fast float %906, %911
  %913 = fmul fast float %898, %702
  %914 = call float @dx.op.tertiary.f32(i32 46, float %703, float %901, float %913)  ; FMad(a,b,c)
  %915 = call float @dx.op.tertiary.f32(i32 46, float %704, float %904, float %914)  ; FMad(a,b,c)
  %916 = fadd fast float %907, %915
  %917 = fmul fast float %899, %702
  %918 = call float @dx.op.tertiary.f32(i32 46, float %703, float %902, float %917)  ; FMad(a,b,c)
  %919 = call float @dx.op.tertiary.f32(i32 46, float %704, float %905, float %918)  ; FMad(a,b,c)
  %920 = fadd fast float %908, %919
  br i1 %177, label %921, label %996

; <label>:921                                     ; preds = %701
  br i1 %101, label %987, label %922

; <label>:922                                     ; preds = %921
  br label %923

; <label>:923                                     ; preds = %923, %922
  %924 = phi float [ %983, %923 ], [ 0.000000e+00, %922 ]
  %925 = phi i32 [ %984, %923 ], [ 0, %922 ]
  %926 = shl i32 %925, 2
  %927 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 %926)  ; CBufferLoadLegacy(handle,regIndex)
  %928 = extractvalue %dx.types.CBufRet.i32 %927, 0
  %929 = extractvalue %dx.types.CBufRet.i32 %927, 1
  %930 = call float @dx.op.legacyF16ToF32(i32 131, i32 %928)  ; LegacyF16ToF32(value)
  %931 = lshr i32 %928, 16
  %932 = call float @dx.op.legacyF16ToF32(i32 131, i32 %931)  ; LegacyF16ToF32(value)
  %933 = call float @dx.op.legacyF16ToF32(i32 131, i32 %929)  ; LegacyF16ToF32(value)
  %934 = lshr i32 %929, 16
  %935 = call float @dx.op.legacyF16ToF32(i32 131, i32 %934)  ; LegacyF16ToF32(value)
  %936 = or i32 %926, 1
  %937 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %936)  ; CBufferLoadLegacy(handle,regIndex)
  %938 = extractvalue %dx.types.CBufRet.f32 %937, 0
  %939 = extractvalue %dx.types.CBufRet.f32 %937, 1
  %940 = extractvalue %dx.types.CBufRet.f32 %937, 2
  %941 = extractvalue %dx.types.CBufRet.f32 %937, 3
  %942 = or i32 %926, 2
  %943 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %942)  ; CBufferLoadLegacy(handle,regIndex)
  %944 = extractvalue %dx.types.CBufRet.f32 %943, 0
  %945 = extractvalue %dx.types.CBufRet.f32 %943, 1
  %946 = extractvalue %dx.types.CBufRet.f32 %943, 2
  %947 = extractvalue %dx.types.CBufRet.f32 %943, 3
  %948 = call float @dx.op.dot4.f32(i32 56, float %930, float %932, float %933, float %935, float %912, float %916, float %920, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %949 = fmul fast float %948, -1.000000e+01
  %950 = call float @dx.op.unary.f32(i32 7, float %949)  ; Saturate(value)
  %951 = fsub fast float 1.000000e+00, %950
  %952 = fsub fast float %912, %938
  %953 = fsub fast float %916, %939
  %954 = fsub fast float %920, %940
  %955 = fsub fast float %944, %938
  %956 = fsub fast float %945, %939
  %957 = fsub fast float %946, %940
  %958 = call float @dx.op.dot3.f32(i32 55, float %952, float %953, float %954, float %955, float %956, float %957)  ; Dot3(ax,ay,az,bx,by,bz)
  %959 = call float @dx.op.dot3.f32(i32 55, float %955, float %956, float %957, float %955, float %956, float %957)  ; Dot3(ax,ay,az,bx,by,bz)
  %960 = fdiv fast float %958, %959
  %961 = fmul fast float %960, %955
  %962 = fmul fast float %960, %956
  %963 = fmul fast float %960, %957
  %964 = fsub fast float %938, %912
  %965 = fadd fast float %964, %961
  %966 = fsub fast float %939, %916
  %967 = fadd fast float %966, %962
  %968 = fsub fast float %940, %920
  %969 = fadd fast float %968, %963
  %970 = call float @dx.op.dot3.f32(i32 55, float %965, float %967, float %969, float %965, float %967, float %969)  ; Dot3(ax,ay,az,bx,by,bz)
  %971 = call float @dx.op.unary.f32(i32 24, float %970)  ; Sqrt(value)
  %972 = fmul fast float %941, 5.000000e-01
  %973 = fsub fast float %971, %972
  %974 = fdiv fast float %973, %972
  %975 = call float @dx.op.unary.f32(i32 7, float %974)  ; Saturate(value)
  %976 = fmul fast float %975, 2.000000e+00
  %977 = fsub fast float 3.000000e+00, %976
  %978 = fmul fast float %975, %975
  %979 = fmul fast float %978, %977
  %980 = fsub fast float 1.000000e+00, %979
  %981 = fmul fast float %951, %947
  %982 = fmul fast float %981, %980
  %983 = call float @dx.op.binary.f32(i32 35, float %982, float %924)  ; FMax(a,b)
  %984 = add nuw i32 %925, 1
  %985 = icmp eq i32 %984, %100
  br i1 %985, label %986, label %923

; <label>:986                                     ; preds = %923
  br label %987

; <label>:987                                     ; preds = %986, %921
  %988 = phi float [ 0.000000e+00, %921 ], [ %983, %986 ]
  %989 = call float @dx.op.unary.f32(i32 7, float %988)  ; Saturate(value)
  %990 = fmul fast float %989, %8
  %991 = fmul fast float %989, %9
  %992 = fmul fast float %989, %10
  %993 = fadd fast float %990, %912
  %994 = fadd fast float %991, %916
  %995 = fadd fast float %992, %920
  br label %996

; <label>:996                                     ; preds = %987, %701
  %997 = phi float [ %993, %987 ], [ %912, %701 ]
  %998 = phi float [ %994, %987 ], [ %916, %701 ]
  %999 = phi float [ %995, %987 ], [ %920, %701 ]
  %1000 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1001 = extractvalue %dx.types.CBufRet.f32 %1000, 0
  %1002 = extractvalue %dx.types.CBufRet.f32 %1000, 1
  %1003 = extractvalue %dx.types.CBufRet.f32 %1000, 2
  %1004 = extractvalue %dx.types.CBufRet.f32 %1000, 3
  %1005 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1006 = extractvalue %dx.types.CBufRet.f32 %1005, 0
  %1007 = extractvalue %dx.types.CBufRet.f32 %1005, 1
  %1008 = extractvalue %dx.types.CBufRet.f32 %1005, 2
  %1009 = extractvalue %dx.types.CBufRet.f32 %1005, 3
  %1010 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1011 = extractvalue %dx.types.CBufRet.f32 %1010, 0
  %1012 = extractvalue %dx.types.CBufRet.f32 %1010, 1
  %1013 = extractvalue %dx.types.CBufRet.f32 %1010, 2
  %1014 = extractvalue %dx.types.CBufRet.f32 %1010, 3
  %1015 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %5, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %1016 = extractvalue %dx.types.CBufRet.i32 %1015, 0
  %1017 = extractvalue %dx.types.CBufRet.i32 %1015, 1
  %1018 = extractvalue %dx.types.CBufRet.i32 %1015, 2
  %1019 = bitcast float %1004 to i32
  %1020 = bitcast float %1009 to i32
  %1021 = bitcast float %1014 to i32
  %1022 = sub i32 %1019, %1016
  %1023 = sub i32 %1020, %1017
  %1024 = sub i32 %1021, %1018
  %1025 = sitofp i32 %1022 to float
  %1026 = sitofp i32 %1023 to float
  %1027 = sitofp i32 %1024 to float
  %1028 = fmul fast float %1025, 0x3EE0000000000000
  %1029 = fmul fast float %1026, 0x3EE0000000000000
  %1030 = fmul fast float %1027, 0x3EE0000000000000
  %1031 = fmul fast float %1001, %997
  %1032 = call float @dx.op.tertiary.f32(i32 46, float %1002, float %998, float %1031)  ; FMad(a,b,c)
  %1033 = call float @dx.op.tertiary.f32(i32 46, float %1003, float %999, float %1032)  ; FMad(a,b,c)
  %1034 = fadd fast float %1028, %1033
  %1035 = fmul fast float %1006, %997
  %1036 = call float @dx.op.tertiary.f32(i32 46, float %1007, float %998, float %1035)  ; FMad(a,b,c)
  %1037 = call float @dx.op.tertiary.f32(i32 46, float %1008, float %999, float %1036)  ; FMad(a,b,c)
  %1038 = fadd fast float %1029, %1037
  %1039 = fmul fast float %1011, %997
  %1040 = call float @dx.op.tertiary.f32(i32 46, float %1012, float %998, float %1039)  ; FMad(a,b,c)
  %1041 = call float @dx.op.tertiary.f32(i32 46, float %1013, float %999, float %1040)  ; FMad(a,b,c)
  %1042 = fadd fast float %1041, %1030
  %1043 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %1044 = extractvalue %dx.types.CBufRet.f32 %1043, 0
  %1045 = extractvalue %dx.types.CBufRet.f32 %1043, 1
  %1046 = extractvalue %dx.types.CBufRet.f32 %1043, 2
  %1047 = extractvalue %dx.types.CBufRet.f32 %1043, 3
  %1048 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %1049 = extractvalue %dx.types.CBufRet.f32 %1048, 0
  %1050 = extractvalue %dx.types.CBufRet.f32 %1048, 1
  %1051 = extractvalue %dx.types.CBufRet.f32 %1048, 2
  %1052 = extractvalue %dx.types.CBufRet.f32 %1048, 3
  %1053 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 18)  ; CBufferLoadLegacy(handle,regIndex)
  %1054 = extractvalue %dx.types.CBufRet.f32 %1053, 0
  %1055 = extractvalue %dx.types.CBufRet.f32 %1053, 1
  %1056 = extractvalue %dx.types.CBufRet.f32 %1053, 2
  %1057 = extractvalue %dx.types.CBufRet.f32 %1053, 3
  %1058 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %1059 = extractvalue %dx.types.CBufRet.f32 %1058, 0
  %1060 = extractvalue %dx.types.CBufRet.f32 %1058, 1
  %1061 = extractvalue %dx.types.CBufRet.f32 %1058, 2
  %1062 = extractvalue %dx.types.CBufRet.f32 %1058, 3
  %1063 = fmul fast float %1044, %1034
  %1064 = call float @dx.op.tertiary.f32(i32 46, float %1038, float %1045, float %1063)  ; FMad(a,b,c)
  %1065 = call float @dx.op.tertiary.f32(i32 46, float %1042, float %1046, float %1064)  ; FMad(a,b,c)
  %1066 = fadd fast float %1065, %1047
  %1067 = fmul fast float %1049, %1034
  %1068 = call float @dx.op.tertiary.f32(i32 46, float %1038, float %1050, float %1067)  ; FMad(a,b,c)
  %1069 = call float @dx.op.tertiary.f32(i32 46, float %1042, float %1051, float %1068)  ; FMad(a,b,c)
  %1070 = fadd fast float %1069, %1052
  %1071 = fmul fast float %1054, %1034
  %1072 = call float @dx.op.tertiary.f32(i32 46, float %1038, float %1055, float %1071)  ; FMad(a,b,c)
  %1073 = call float @dx.op.tertiary.f32(i32 46, float %1042, float %1056, float %1072)  ; FMad(a,b,c)
  %1074 = fadd fast float %1073, %1057
  %1075 = fmul fast float %1059, %1034
  %1076 = call float @dx.op.tertiary.f32(i32 46, float %1038, float %1060, float %1075)  ; FMad(a,b,c)
  %1077 = call float @dx.op.tertiary.f32(i32 46, float %1042, float %1061, float %1076)  ; FMad(a,b,c)
  %1078 = fadd fast float %1077, %1062
  %1079 = fmul fast float %459, %38
  %1080 = call float @dx.op.tertiary.f32(i32 46, float %460, float %39, float %1079)  ; FMad(a,b,c)
  %1081 = call float @dx.op.tertiary.f32(i32 46, float %461, float %40, float %1080)  ; FMad(a,b,c)
  %1082 = fmul fast float %459, %42
  %1083 = call float @dx.op.tertiary.f32(i32 46, float %460, float %43, float %1082)  ; FMad(a,b,c)
  %1084 = call float @dx.op.tertiary.f32(i32 46, float %461, float %44, float %1083)  ; FMad(a,b,c)
  %1085 = fmul fast float %459, %46
  %1086 = call float @dx.op.tertiary.f32(i32 46, float %460, float %47, float %1085)  ; FMad(a,b,c)
  %1087 = call float @dx.op.tertiary.f32(i32 46, float %461, float %48, float %1086)  ; FMad(a,b,c)
  %1088 = fmul fast float %462, %38
  %1089 = call float @dx.op.tertiary.f32(i32 46, float %463, float %39, float %1088)  ; FMad(a,b,c)
  %1090 = call float @dx.op.tertiary.f32(i32 46, float %464, float %40, float %1089)  ; FMad(a,b,c)
  %1091 = fmul fast float %462, %42
  %1092 = call float @dx.op.tertiary.f32(i32 46, float %463, float %43, float %1091)  ; FMad(a,b,c)
  %1093 = call float @dx.op.tertiary.f32(i32 46, float %464, float %44, float %1092)  ; FMad(a,b,c)
  %1094 = fmul fast float %462, %46
  %1095 = call float @dx.op.tertiary.f32(i32 46, float %463, float %47, float %1094)  ; FMad(a,b,c)
  %1096 = call float @dx.op.tertiary.f32(i32 46, float %464, float %48, float %1095)  ; FMad(a,b,c)
  %1097 = fmul fast float %465, %38
  %1098 = call float @dx.op.tertiary.f32(i32 46, float %466, float %39, float %1097)  ; FMad(a,b,c)
  %1099 = call float @dx.op.tertiary.f32(i32 46, float %467, float %40, float %1098)  ; FMad(a,b,c)
  %1100 = fmul fast float %465, %42
  %1101 = call float @dx.op.tertiary.f32(i32 46, float %466, float %43, float %1100)  ; FMad(a,b,c)
  %1102 = call float @dx.op.tertiary.f32(i32 46, float %467, float %44, float %1101)  ; FMad(a,b,c)
  %1103 = fmul fast float %465, %46
  %1104 = call float @dx.op.tertiary.f32(i32 46, float %466, float %47, float %1103)  ; FMad(a,b,c)
  %1105 = call float @dx.op.tertiary.f32(i32 46, float %467, float %48, float %1104)  ; FMad(a,b,c)
  %1106 = fmul fast float %22, 2.000000e+00
  %1107 = fmul fast float %23, 2.000000e+00
  %1108 = fmul fast float %24, 2.000000e+00
  %1109 = fadd fast float %1106, -1.000000e+00
  %1110 = fadd fast float %1107, -1.000000e+00
  %1111 = fadd fast float %1108, -1.000000e+00
  %1112 = fmul fast float %18, 2.000000e+00
  %1113 = fmul fast float %19, 2.000000e+00
  %1114 = fmul fast float %20, 2.000000e+00
  %1115 = fadd fast float %1112, -1.000000e+00
  %1116 = fadd fast float %1113, -1.000000e+00
  %1117 = fadd fast float %1114, -1.000000e+00
  %1118 = fmul fast float %21, 2.000000e+00
  %1119 = fadd fast float %1118, -1.000000e+00
  %1120 = fmul fast float %1110, %1117
  %1121 = fmul fast float %1111, %1116
  %1122 = fsub fast float %1120, %1121
  %1123 = fmul fast float %1111, %1115
  %1124 = fmul fast float %1109, %1117
  %1125 = fsub fast float %1123, %1124
  %1126 = fmul fast float %1109, %1116
  %1127 = fmul fast float %1110, %1115
  %1128 = fsub fast float %1126, %1127
  %1129 = fmul fast float %1122, %1119
  %1130 = fmul fast float %1125, %1119
  %1131 = fmul fast float %1128, %1119
  %1132 = fmul fast float %1081, %1115
  %1133 = call float @dx.op.tertiary.f32(i32 46, float %1116, float %1090, float %1132)  ; FMad(a,b,c)
  %1134 = call float @dx.op.tertiary.f32(i32 46, float %1117, float %1099, float %1133)  ; FMad(a,b,c)
  %1135 = fmul fast float %1084, %1115
  %1136 = call float @dx.op.tertiary.f32(i32 46, float %1116, float %1093, float %1135)  ; FMad(a,b,c)
  %1137 = call float @dx.op.tertiary.f32(i32 46, float %1117, float %1102, float %1136)  ; FMad(a,b,c)
  %1138 = fmul fast float %1087, %1115
  %1139 = call float @dx.op.tertiary.f32(i32 46, float %1116, float %1096, float %1138)  ; FMad(a,b,c)
  %1140 = call float @dx.op.tertiary.f32(i32 46, float %1117, float %1105, float %1139)  ; FMad(a,b,c)
  %1141 = fmul fast float %1081, %1129
  %1142 = call float @dx.op.tertiary.f32(i32 46, float %1130, float %1090, float %1141)  ; FMad(a,b,c)
  %1143 = call float @dx.op.tertiary.f32(i32 46, float %1131, float %1099, float %1142)  ; FMad(a,b,c)
  %1144 = fmul fast float %1084, %1129
  %1145 = call float @dx.op.tertiary.f32(i32 46, float %1130, float %1093, float %1144)  ; FMad(a,b,c)
  %1146 = call float @dx.op.tertiary.f32(i32 46, float %1131, float %1102, float %1145)  ; FMad(a,b,c)
  %1147 = fmul fast float %1087, %1129
  %1148 = call float @dx.op.tertiary.f32(i32 46, float %1130, float %1096, float %1147)  ; FMad(a,b,c)
  %1149 = call float @dx.op.tertiary.f32(i32 46, float %1131, float %1105, float %1148)  ; FMad(a,b,c)
  %1150 = fmul fast float %1081, %1109
  %1151 = call float @dx.op.tertiary.f32(i32 46, float %1110, float %1090, float %1150)  ; FMad(a,b,c)
  %1152 = call float @dx.op.tertiary.f32(i32 46, float %1111, float %1099, float %1151)  ; FMad(a,b,c)
  %1153 = fmul fast float %1084, %1109
  %1154 = call float @dx.op.tertiary.f32(i32 46, float %1110, float %1093, float %1153)  ; FMad(a,b,c)
  %1155 = call float @dx.op.tertiary.f32(i32 46, float %1111, float %1102, float %1154)  ; FMad(a,b,c)
  %1156 = fmul fast float %1087, %1109
  %1157 = call float @dx.op.tertiary.f32(i32 46, float %1110, float %1096, float %1156)  ; FMad(a,b,c)
  %1158 = call float @dx.op.tertiary.f32(i32 46, float %1111, float %1105, float %1157)  ; FMad(a,b,c)
  %1159 = call float @dx.op.dot3.f32(i32 55, float %1152, float %1155, float %1158, float %1152, float %1155, float %1158)  ; Dot3(ax,ay,az,bx,by,bz)
  %1160 = call float @dx.op.unary.f32(i32 25, float %1159)  ; Rsqrt(value)
  %1161 = fmul fast float %1160, %1152
  %1162 = fmul fast float %1160, %1155
  %1163 = fmul fast float %1160, %1158
  %1164 = call float @dx.op.dot3.f32(i32 55, float %1143, float %1146, float %1149, float %1143, float %1146, float %1149)  ; Dot3(ax,ay,az,bx,by,bz)
  %1165 = call float @dx.op.unary.f32(i32 25, float %1164)  ; Rsqrt(value)
  %1166 = fmul fast float %1165, %1143
  %1167 = fmul fast float %1165, %1146
  %1168 = fmul fast float %1165, %1149
  %1169 = call float @dx.op.dot3.f32(i32 55, float %1134, float %1137, float %1140, float %1134, float %1137, float %1140)  ; Dot3(ax,ay,az,bx,by,bz)
  %1170 = call float @dx.op.unary.f32(i32 25, float %1169)  ; Rsqrt(value)
  %1171 = fmul fast float %1170, %1134
  %1172 = fmul fast float %1170, %1137
  %1173 = fmul fast float %1170, %1140
  %1174 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %1175 = extractvalue %dx.types.CBufRet.f32 %1174, 0
  %1176 = extractvalue %dx.types.CBufRet.f32 %1174, 1
  %1177 = fmul fast float %1175, %625
  %1178 = fmul fast float %1176, %625
  %1179 = fsub fast float %613, %1177
  %1180 = fsub fast float %617, %1178
  %1181 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %1182 = extractvalue %dx.types.CBufRet.f32 %1181, 0
  %1183 = extractvalue %dx.types.CBufRet.f32 %1181, 1
  %1184 = extractvalue %dx.types.CBufRet.f32 %1181, 2
  %1185 = extractvalue %dx.types.CBufRet.f32 %1181, 3
  %1186 = call float @dx.op.dot4.f32(i32 56, float %1182, float %1183, float %1184, float %1185, float %587, float %588, float %589, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %613)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %617)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %621)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %625)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %1161)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %1162)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %1163)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %1166)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %1167)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %1168)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %1171)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float %1172)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %1173)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %25)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %26)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %587)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %588)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float %589)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float %14)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float %15)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 0, float %16)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 1, float %17)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 2, float %582)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 3, float %1179)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 0, float %1180)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 1, float %621)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 2, float %625)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 3, float %1066)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 0, float %1070)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 1, float %1074)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 2, float %1078)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 3, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 8, i32 0, i8 0, float %1186)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!14}
!dx.entryPoints = !{!15}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{!5, null, !9, null}
!5 = !{!6, !7}
!6 = !{i32 0, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 10, i32 1, i32 11, i32 0, null}
!7 = !{i32 1, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 77, i32 1, i32 2, i32 0, !8}
!8 = !{i32 0, i32 9}
!9 = !{!10, !11, !12, !13}
!10 = !{i32 0, %MaterialModifiersConsts* undef, !"", i32 0, i32 7, i32 1, i32 496, null}
!11 = !{i32 1, %hostlayout.CameraShaderConsts* undef, !"", i32 0, i32 1, i32 1, i32 848, null}
!12 = !{i32 2, %hostlayout.FrequentVertexConsts* undef, !"", i32 0, i32 5, i32 1, i32 112, null}
!13 = !{i32 3, %CullObjectsCB* undef, !"", i32 0, i32 8, i32 1, i32 512, null}
!14 = !{[108 x i32] [i32 53, i32 33, i32 2143518735, i32 1, i32 2143518735, i32 1, i32 2143518735, i32 1, i32 0, i32 0, i32 2143526911, i32 1, i32 2143526911, i32 1, i32 2143526911, i32 1, i32 2143526911, i32 1, i32 2143526911, i32 1, i32 2143526911, i32 1, i32 2143526911, i32 1, i32 2143526911, i32 1, i32 8192, i32 0, i32 16384, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1008, i32 0, i32 1008, i32 0, i32 1008, i32 0, i32 0, i32 0, i32 8064, i32 0, i32 8064, i32 0, i32 8064, i32 0, i32 896, i32 0, i32 262144, i32 0, i32 524288, i32 0, i32 1048576, i32 0, i32 2097152, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 130064383, i32 1, i32 130064383, i32 1, i32 130064383, i32 1, i32 130056207, i32 1, i32 130097151, i32 1, i32 130097151, i32 1, i32 130097151, i32 1, i32 130088975, i32 1, i32 130162687, i32 1, i32 130162687, i32 1, i32 130162687, i32 1, i32 130154511, i32 1, i32 130260991, i32 1, i32 2143526911, i32 1, i32 2013265920, i32 0, i32 0, i32 0, i32 2143518735, i32 1, i32 2143518735, i32 1, i32 2143518735, i32 1, i32 0, i32 0, i32 2143518735, i32 1]}
!15 = !{void ()* @vs_main_, !"vs_main_", !16, !4, !52}
!16 = !{!17, !37, null}
!17 = !{!18, !21, !23, !24, !26, !27, !28, !29, !31, !33, !34, !35}
!18 = !{i32 0, !"POSITION", i8 9, i8 0, !19, i8 0, i32 1, i8 3, i32 0, i8 0, !20}
!19 = !{i32 0}
!20 = !{i32 3, i32 7}
!21 = !{i32 1, !"BLENDINDICES", i8 5, i8 0, !19, i8 0, i32 1, i8 4, i32 1, i8 0, !22}
!22 = !{i32 3, i32 15}
!23 = !{i32 2, !"BLENDWEIGHT", i8 9, i8 0, !19, i8 0, i32 1, i8 4, i32 2, i8 0, !22}
!24 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !19, i8 0, i32 1, i8 2, i32 3, i8 0, !25}
!25 = !{i32 3, i32 3}
!26 = !{i32 4, !"NORMAL", i8 9, i8 0, !19, i8 0, i32 1, i8 3, i32 4, i8 0, !20}
!27 = !{i32 5, !"TANGENT", i8 9, i8 0, !19, i8 0, i32 1, i8 4, i32 5, i8 0, !22}
!28 = !{i32 6, !"COLOR", i8 9, i8 0, !19, i8 0, i32 1, i8 4, i32 6, i8 0, !22}
!29 = !{i32 7, !"TEXCOORD", i8 9, i8 0, !30, i8 0, i32 1, i8 2, i32 7, i8 0, null}
!30 = !{i32 1}
!31 = !{i32 8, !"INSTANCE_TRANSFORM", i8 9, i8 0, !32, i8 0, i32 3, i8 4, i32 8, i8 0, !22}
!32 = !{i32 0, i32 1, i32 2}
!33 = !{i32 9, !"INSTANCE_SKINNING_DATA", i8 5, i8 0, !19, i8 0, i32 1, i8 4, i32 11, i8 0, !20}
!34 = !{i32 10, !"EXTRA_DATA", i8 9, i8 0, !19, i8 0, i32 1, i8 3, i32 12, i8 0, !20}
!35 = !{i32 11, !"SV_VertexID", i8 5, i8 1, !19, i8 0, i32 1, i8 1, i32 13, i8 0, !36}
!36 = !{i32 3, i32 1}
!37 = !{!38, !39, !40, !41, !43, !45, !47, !49, !51}
!38 = !{i32 0, !"SV_Position", i8 9, i8 3, !19, i8 4, i32 1, i8 4, i32 0, i8 0, !22}
!39 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !19, i8 2, i32 1, i8 4, i32 1, i8 0, !22}
!40 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !30, i8 2, i32 1, i8 4, i32 2, i8 0, !22}
!41 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !42, i8 2, i32 1, i8 4, i32 3, i8 0, !22}
!42 = !{i32 2}
!43 = !{i32 4, !"TEXCOORD", i8 9, i8 0, !44, i8 2, i32 1, i8 4, i32 4, i8 0, !22}
!44 = !{i32 3}
!45 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !46, i8 2, i32 1, i8 4, i32 5, i8 0, !22}
!46 = !{i32 4}
!47 = !{i32 6, !"TEXCOORD", i8 9, i8 0, !48, i8 2, i32 1, i8 4, i32 6, i8 0, !22}
!48 = !{i32 5}
!49 = !{i32 7, !"TEXCOORD", i8 9, i8 0, !50, i8 2, i32 1, i8 4, i32 7, i8 0, !22}
!50 = !{i32 6}
!51 = !{i32 8, !"SV_ClipDistance", i8 9, i8 6, !19, i8 2, i32 1, i8 1, i32 8, i8 0, !36}
!52 = !{i32 0, i64 16}
 