;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; POSITION                 0   xyz         0     NONE   float   xyz 
; BLENDINDICES             0   xyzw        1     NONE    uint   xyzw
; BLENDWEIGHT              0   xyzw        2     NONE   float   xyzw
; BLENDINDICES             1   xyzw        3     NONE    uint   xyzw
; BLENDWEIGHT              1   xyzw        4     NONE   float   xyzw
; TEXCOORD                 0   xy          5     NONE   float   xy  
; NORMAL                   0   xyz         6     NONE   float   xyz 
; TANGENT                  0   xyzw        7     NONE   float   xyzw
; COLOR                    0   xyzw        8     NONE   float       
; TEXCOORD                 1   xy          9     NONE   float       
; INSTANCE_TRANSFORM       0   xyzw       10     NONE   float   xyzw
; INSTANCE_TRANSFORM       1   xyzw       11     NONE   float   xyzw
; INSTANCE_TRANSFORM       2   xyzw       12     NONE   float   xyzw
; INSTANCE_SKINNING_DATA     0   xyzw       13     NONE    uint   xy  
; SV_VertexID              0   x          14   VERTID    uint       
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; TEXCOORD                 0   xyzw        1     NONE   float   xyzw
; TEXCOORD                 1   xyzw        2     NONE   float   xyzw
; TEXCOORD                 2   xyzw        3     NONE   float   xyzw
; SV_ClipDistance          0   x           4  CLIPDST   float   x   
;
; shader hash: d63f30cffc381f46317d43796dcb0ce7
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; POSITION                 0                              
; BLENDINDICES             0                              
; BLENDWEIGHT              0                              
; BLENDINDICES             1                              
; BLENDWEIGHT              1                              
; TEXCOORD                 0                              
; NORMAL                   0                              
; TANGENT                  0                              
; COLOR                    0                              
; TEXCOORD                 1                              
; INSTANCE_TRANSFORM       0                              
; INSTANCE_SKINNING_DATA     0                              
; SV_VertexID              0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; SV_ClipDistance          0                 linear       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [848 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [4 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [112 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb1     1
;                                   cbuffer      NA          NA     CB1            cb4     1
;                                   cbuffer      NA          NA     CB2            cb5     1
;                                   texture    byte         r/o      T0            t10     1
;
;
; ViewId state:
;
; Number of inputs: 57, outputs: 17
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 1 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 2 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 3 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 4 depends on inputs: { 20 }
;   output 5 depends on inputs: { 21 }
;   output 6 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 7 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 8 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 9 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 10 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 11 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 12 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 28, 29, 30, 31, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 13 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 28, 29, 30, 31, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 14 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 28, 29, 30, 31, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 15 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 16 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%struct.ByteAddressBuffer = type { i32 }
%hostlayout.CameraShaderConsts = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, i32, i32, <2 x i32>, float, float }
%ShaderSpecificConstants = type { float }
%hostlayout.FrequentVertexConsts = type { [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float> }

define void @vs_main_() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 10, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 2, i32 5, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 1, i32 4, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call i32 @dx.op.loadInput.i32(i32 4, i32 11, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call i32 @dx.op.loadInput.i32(i32 4, i32 11, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %20 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %21 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %22 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %23 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %24 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %25 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %26 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %27 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %28 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %29 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %30 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %31 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %32 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %33 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %34 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %35 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %36 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %37 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %38 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %39 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %40 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %41 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %42 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %43 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %44 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %45 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %46 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %47 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %48 = extractvalue %dx.types.CBufRet.i32 %47, 0
  %49 = extractvalue %dx.types.CBufRet.i32 %47, 1
  %50 = extractvalue %dx.types.CBufRet.i32 %47, 2
  %51 = bitcast float %38 to i32
  %52 = bitcast float %42 to i32
  %53 = bitcast float %46 to i32
  %54 = sub i32 %51, %48
  %55 = sub i32 %52, %49
  %56 = sub i32 %53, %50
  %57 = sitofp i32 %54 to float
  %58 = sitofp i32 %55 to float
  %59 = sitofp i32 %56 to float
  %60 = fmul fast float %57, 0x3EE0000000000000
  %61 = fmul fast float %58, 0x3EE0000000000000
  %62 = fmul fast float %59, 0x3EE0000000000000
  %63 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %64 = extractvalue %dx.types.CBufRet.f32 %63, 0
  %65 = extractvalue %dx.types.CBufRet.f32 %63, 1
  %66 = extractvalue %dx.types.CBufRet.f32 %63, 2
  %67 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %68 = extractvalue %dx.types.CBufRet.f32 %67, 0
  %69 = extractvalue %dx.types.CBufRet.f32 %67, 1
  %70 = extractvalue %dx.types.CBufRet.f32 %67, 2
  %71 = fmul fast float %68, %32
  %72 = fmul fast float %69, %33
  %73 = fmul fast float %70, %34
  %74 = fadd fast float %71, %64
  %75 = fadd fast float %72, %65
  %76 = fadd fast float %73, %66
  %77 = call float @dx.op.dot4.f32(i32 56, float %24, float %25, float %26, float %27, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %78 = call float @dx.op.dot4.f32(i32 56, float %16, float %17, float %18, float %19, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %79 = fadd fast float %78, %77
  %80 = call float @dx.op.binary.f32(i32 35, float 0x3EE4F8B580000000, float %79)  ; FMax(a,b)
  %81 = fdiv fast float %24, %80
  %82 = fdiv fast float %25, %80
  %83 = fdiv fast float %26, %80
  %84 = fdiv fast float %27, %80
  %85 = fdiv fast float %16, %80
  %86 = fdiv fast float %17, %80
  %87 = fdiv fast float %18, %80
  %88 = fdiv fast float %19, %80
  %89 = mul i32 %28, %6
  %90 = add i32 %89, %5
  %91 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %90, i32 undef)  ; BufferLoad(srv,index,wot)
  %92 = extractvalue %dx.types.ResRet.i32 %91, 0
  %93 = extractvalue %dx.types.ResRet.i32 %91, 1
  %94 = extractvalue %dx.types.ResRet.i32 %91, 2
  %95 = extractvalue %dx.types.ResRet.i32 %91, 3
  %96 = bitcast i32 %92 to float
  %97 = bitcast i32 %93 to float
  %98 = bitcast i32 %94 to float
  %99 = bitcast i32 %95 to float
  %100 = add i32 %90, 16
  %101 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %100, i32 undef)  ; BufferLoad(srv,index,wot)
  %102 = extractvalue %dx.types.ResRet.i32 %101, 0
  %103 = extractvalue %dx.types.ResRet.i32 %101, 1
  %104 = extractvalue %dx.types.ResRet.i32 %101, 2
  %105 = extractvalue %dx.types.ResRet.i32 %101, 3
  %106 = bitcast i32 %102 to float
  %107 = bitcast i32 %103 to float
  %108 = bitcast i32 %104 to float
  %109 = bitcast i32 %105 to float
  %110 = add i32 %90, 32
  %111 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %110, i32 undef)  ; BufferLoad(srv,index,wot)
  %112 = extractvalue %dx.types.ResRet.i32 %111, 0
  %113 = extractvalue %dx.types.ResRet.i32 %111, 1
  %114 = extractvalue %dx.types.ResRet.i32 %111, 2
  %115 = extractvalue %dx.types.ResRet.i32 %111, 3
  %116 = bitcast i32 %112 to float
  %117 = bitcast i32 %113 to float
  %118 = bitcast i32 %114 to float
  %119 = bitcast i32 %115 to float
  %120 = mul i32 %20, %6
  %121 = add i32 %120, %5
  %122 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %121, i32 undef)  ; BufferLoad(srv,index,wot)
  %123 = extractvalue %dx.types.ResRet.i32 %122, 0
  %124 = extractvalue %dx.types.ResRet.i32 %122, 1
  %125 = extractvalue %dx.types.ResRet.i32 %122, 2
  %126 = extractvalue %dx.types.ResRet.i32 %122, 3
  %127 = bitcast i32 %123 to float
  %128 = bitcast i32 %124 to float
  %129 = bitcast i32 %125 to float
  %130 = bitcast i32 %126 to float
  %131 = add i32 %121, 16
  %132 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %131, i32 undef)  ; BufferLoad(srv,index,wot)
  %133 = extractvalue %dx.types.ResRet.i32 %132, 0
  %134 = extractvalue %dx.types.ResRet.i32 %132, 1
  %135 = extractvalue %dx.types.ResRet.i32 %132, 2
  %136 = extractvalue %dx.types.ResRet.i32 %132, 3
  %137 = bitcast i32 %133 to float
  %138 = bitcast i32 %134 to float
  %139 = bitcast i32 %135 to float
  %140 = bitcast i32 %136 to float
  %141 = add i32 %121, 32
  %142 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %141, i32 undef)  ; BufferLoad(srv,index,wot)
  %143 = extractvalue %dx.types.ResRet.i32 %142, 0
  %144 = extractvalue %dx.types.ResRet.i32 %142, 1
  %145 = extractvalue %dx.types.ResRet.i32 %142, 2
  %146 = extractvalue %dx.types.ResRet.i32 %142, 3
  %147 = bitcast i32 %143 to float
  %148 = bitcast i32 %144 to float
  %149 = bitcast i32 %145 to float
  %150 = bitcast i32 %146 to float
  %151 = fmul fast float %96, %81
  %152 = fmul fast float %106, %81
  %153 = fmul fast float %116, %81
  %154 = fmul fast float %97, %81
  %155 = fmul fast float %107, %81
  %156 = fmul fast float %117, %81
  %157 = fmul fast float %98, %81
  %158 = fmul fast float %108, %81
  %159 = fmul fast float %118, %81
  %160 = fmul fast float %99, %81
  %161 = fmul fast float %109, %81
  %162 = fmul fast float %119, %81
  %163 = fmul fast float %127, %85
  %164 = fmul fast float %137, %85
  %165 = fmul fast float %147, %85
  %166 = fmul fast float %128, %85
  %167 = fmul fast float %138, %85
  %168 = fmul fast float %148, %85
  %169 = fmul fast float %129, %85
  %170 = fmul fast float %139, %85
  %171 = fmul fast float %149, %85
  %172 = fmul fast float %130, %85
  %173 = fmul fast float %140, %85
  %174 = fmul fast float %150, %85
  %175 = fadd fast float %163, %151
  %176 = fadd fast float %164, %152
  %177 = fadd fast float %165, %153
  %178 = fadd fast float %166, %154
  %179 = fadd fast float %167, %155
  %180 = fadd fast float %168, %156
  %181 = fadd fast float %169, %157
  %182 = fadd fast float %170, %158
  %183 = fadd fast float %171, %159
  %184 = fadd fast float %172, %160
  %185 = fadd fast float %173, %161
  %186 = fadd fast float %174, %162
  %187 = mul i32 %29, %6
  %188 = add i32 %187, %5
  %189 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %188, i32 undef)  ; BufferLoad(srv,index,wot)
  %190 = extractvalue %dx.types.ResRet.i32 %189, 0
  %191 = extractvalue %dx.types.ResRet.i32 %189, 1
  %192 = extractvalue %dx.types.ResRet.i32 %189, 2
  %193 = extractvalue %dx.types.ResRet.i32 %189, 3
  %194 = bitcast i32 %190 to float
  %195 = bitcast i32 %191 to float
  %196 = bitcast i32 %192 to float
  %197 = bitcast i32 %193 to float
  %198 = add i32 %188, 16
  %199 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %198, i32 undef)  ; BufferLoad(srv,index,wot)
  %200 = extractvalue %dx.types.ResRet.i32 %199, 0
  %201 = extractvalue %dx.types.ResRet.i32 %199, 1
  %202 = extractvalue %dx.types.ResRet.i32 %199, 2
  %203 = extractvalue %dx.types.ResRet.i32 %199, 3
  %204 = bitcast i32 %200 to float
  %205 = bitcast i32 %201 to float
  %206 = bitcast i32 %202 to float
  %207 = bitcast i32 %203 to float
  %208 = add i32 %188, 32
  %209 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %208, i32 undef)  ; BufferLoad(srv,index,wot)
  %210 = extractvalue %dx.types.ResRet.i32 %209, 0
  %211 = extractvalue %dx.types.ResRet.i32 %209, 1
  %212 = extractvalue %dx.types.ResRet.i32 %209, 2
  %213 = extractvalue %dx.types.ResRet.i32 %209, 3
  %214 = bitcast i32 %210 to float
  %215 = bitcast i32 %211 to float
  %216 = bitcast i32 %212 to float
  %217 = bitcast i32 %213 to float
  %218 = mul i32 %21, %6
  %219 = add i32 %218, %5
  %220 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %219, i32 undef)  ; BufferLoad(srv,index,wot)
  %221 = extractvalue %dx.types.ResRet.i32 %220, 0
  %222 = extractvalue %dx.types.ResRet.i32 %220, 1
  %223 = extractvalue %dx.types.ResRet.i32 %220, 2
  %224 = extractvalue %dx.types.ResRet.i32 %220, 3
  %225 = bitcast i32 %221 to float
  %226 = bitcast i32 %222 to float
  %227 = bitcast i32 %223 to float
  %228 = bitcast i32 %224 to float
  %229 = add i32 %219, 16
  %230 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %229, i32 undef)  ; BufferLoad(srv,index,wot)
  %231 = extractvalue %dx.types.ResRet.i32 %230, 0
  %232 = extractvalue %dx.types.ResRet.i32 %230, 1
  %233 = extractvalue %dx.types.ResRet.i32 %230, 2
  %234 = extractvalue %dx.types.ResRet.i32 %230, 3
  %235 = bitcast i32 %231 to float
  %236 = bitcast i32 %232 to float
  %237 = bitcast i32 %233 to float
  %238 = bitcast i32 %234 to float
  %239 = add i32 %219, 32
  %240 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %239, i32 undef)  ; BufferLoad(srv,index,wot)
  %241 = extractvalue %dx.types.ResRet.i32 %240, 0
  %242 = extractvalue %dx.types.ResRet.i32 %240, 1
  %243 = extractvalue %dx.types.ResRet.i32 %240, 2
  %244 = extractvalue %dx.types.ResRet.i32 %240, 3
  %245 = bitcast i32 %241 to float
  %246 = bitcast i32 %242 to float
  %247 = bitcast i32 %243 to float
  %248 = bitcast i32 %244 to float
  %249 = fmul fast float %194, %82
  %250 = fmul fast float %204, %82
  %251 = fmul fast float %214, %82
  %252 = fmul fast float %195, %82
  %253 = fmul fast float %205, %82
  %254 = fmul fast float %215, %82
  %255 = fmul fast float %196, %82
  %256 = fmul fast float %206, %82
  %257 = fmul fast float %216, %82
  %258 = fmul fast float %197, %82
  %259 = fmul fast float %207, %82
  %260 = fmul fast float %217, %82
  %261 = fadd fast float %175, %249
  %262 = fadd fast float %176, %250
  %263 = fadd fast float %177, %251
  %264 = fadd fast float %178, %252
  %265 = fadd fast float %179, %253
  %266 = fadd fast float %180, %254
  %267 = fadd fast float %181, %255
  %268 = fadd fast float %182, %256
  %269 = fadd fast float %183, %257
  %270 = fadd fast float %184, %258
  %271 = fadd fast float %185, %259
  %272 = fadd fast float %186, %260
  %273 = fmul fast float %225, %86
  %274 = fmul fast float %235, %86
  %275 = fmul fast float %245, %86
  %276 = fmul fast float %226, %86
  %277 = fmul fast float %236, %86
  %278 = fmul fast float %246, %86
  %279 = fmul fast float %227, %86
  %280 = fmul fast float %237, %86
  %281 = fmul fast float %247, %86
  %282 = fmul fast float %228, %86
  %283 = fmul fast float %238, %86
  %284 = fmul fast float %248, %86
  %285 = fadd fast float %261, %273
  %286 = fadd fast float %262, %274
  %287 = fadd fast float %263, %275
  %288 = fadd fast float %264, %276
  %289 = fadd fast float %265, %277
  %290 = fadd fast float %266, %278
  %291 = fadd fast float %267, %279
  %292 = fadd fast float %268, %280
  %293 = fadd fast float %269, %281
  %294 = fadd fast float %270, %282
  %295 = fadd fast float %271, %283
  %296 = fadd fast float %272, %284
  %297 = mul i32 %30, %6
  %298 = add i32 %297, %5
  %299 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %298, i32 undef)  ; BufferLoad(srv,index,wot)
  %300 = extractvalue %dx.types.ResRet.i32 %299, 0
  %301 = extractvalue %dx.types.ResRet.i32 %299, 1
  %302 = extractvalue %dx.types.ResRet.i32 %299, 2
  %303 = extractvalue %dx.types.ResRet.i32 %299, 3
  %304 = bitcast i32 %300 to float
  %305 = bitcast i32 %301 to float
  %306 = bitcast i32 %302 to float
  %307 = bitcast i32 %303 to float
  %308 = add i32 %298, 16
  %309 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %308, i32 undef)  ; BufferLoad(srv,index,wot)
  %310 = extractvalue %dx.types.ResRet.i32 %309, 0
  %311 = extractvalue %dx.types.ResRet.i32 %309, 1
  %312 = extractvalue %dx.types.ResRet.i32 %309, 2
  %313 = extractvalue %dx.types.ResRet.i32 %309, 3
  %314 = bitcast i32 %310 to float
  %315 = bitcast i32 %311 to float
  %316 = bitcast i32 %312 to float
  %317 = bitcast i32 %313 to float
  %318 = add i32 %298, 32
  %319 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %318, i32 undef)  ; BufferLoad(srv,index,wot)
  %320 = extractvalue %dx.types.ResRet.i32 %319, 0
  %321 = extractvalue %dx.types.ResRet.i32 %319, 1
  %322 = extractvalue %dx.types.ResRet.i32 %319, 2
  %323 = extractvalue %dx.types.ResRet.i32 %319, 3
  %324 = bitcast i32 %320 to float
  %325 = bitcast i32 %321 to float
  %326 = bitcast i32 %322 to float
  %327 = bitcast i32 %323 to float
  %328 = mul i32 %22, %6
  %329 = add i32 %328, %5
  %330 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %329, i32 undef)  ; BufferLoad(srv,index,wot)
  %331 = extractvalue %dx.types.ResRet.i32 %330, 0
  %332 = extractvalue %dx.types.ResRet.i32 %330, 1
  %333 = extractvalue %dx.types.ResRet.i32 %330, 2
  %334 = extractvalue %dx.types.ResRet.i32 %330, 3
  %335 = bitcast i32 %331 to float
  %336 = bitcast i32 %332 to float
  %337 = bitcast i32 %333 to float
  %338 = bitcast i32 %334 to float
  %339 = add i32 %329, 16
  %340 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %339, i32 undef)  ; BufferLoad(srv,index,wot)
  %341 = extractvalue %dx.types.ResRet.i32 %340, 0
  %342 = extractvalue %dx.types.ResRet.i32 %340, 1
  %343 = extractvalue %dx.types.ResRet.i32 %340, 2
  %344 = extractvalue %dx.types.ResRet.i32 %340, 3
  %345 = bitcast i32 %341 to float
  %346 = bitcast i32 %342 to float
  %347 = bitcast i32 %343 to float
  %348 = bitcast i32 %344 to float
  %349 = add i32 %329, 32
  %350 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %349, i32 undef)  ; BufferLoad(srv,index,wot)
  %351 = extractvalue %dx.types.ResRet.i32 %350, 0
  %352 = extractvalue %dx.types.ResRet.i32 %350, 1
  %353 = extractvalue %dx.types.ResRet.i32 %350, 2
  %354 = extractvalue %dx.types.ResRet.i32 %350, 3
  %355 = bitcast i32 %351 to float
  %356 = bitcast i32 %352 to float
  %357 = bitcast i32 %353 to float
  %358 = bitcast i32 %354 to float
  %359 = fmul fast float %304, %83
  %360 = fmul fast float %314, %83
  %361 = fmul fast float %324, %83
  %362 = fmul fast float %305, %83
  %363 = fmul fast float %315, %83
  %364 = fmul fast float %325, %83
  %365 = fmul fast float %306, %83
  %366 = fmul fast float %316, %83
  %367 = fmul fast float %326, %83
  %368 = fmul fast float %307, %83
  %369 = fmul fast float %317, %83
  %370 = fmul fast float %327, %83
  %371 = fadd fast float %285, %359
  %372 = fadd fast float %286, %360
  %373 = fadd fast float %287, %361
  %374 = fadd fast float %288, %362
  %375 = fadd fast float %289, %363
  %376 = fadd fast float %290, %364
  %377 = fadd fast float %291, %365
  %378 = fadd fast float %292, %366
  %379 = fadd fast float %293, %367
  %380 = fadd fast float %294, %368
  %381 = fadd fast float %295, %369
  %382 = fadd fast float %296, %370
  %383 = fmul fast float %335, %87
  %384 = fmul fast float %345, %87
  %385 = fmul fast float %355, %87
  %386 = fmul fast float %336, %87
  %387 = fmul fast float %346, %87
  %388 = fmul fast float %356, %87
  %389 = fmul fast float %337, %87
  %390 = fmul fast float %347, %87
  %391 = fmul fast float %357, %87
  %392 = fmul fast float %338, %87
  %393 = fmul fast float %348, %87
  %394 = fmul fast float %358, %87
  %395 = fadd fast float %371, %383
  %396 = fadd fast float %372, %384
  %397 = fadd fast float %373, %385
  %398 = fadd fast float %374, %386
  %399 = fadd fast float %375, %387
  %400 = fadd fast float %376, %388
  %401 = fadd fast float %377, %389
  %402 = fadd fast float %378, %390
  %403 = fadd fast float %379, %391
  %404 = fadd fast float %380, %392
  %405 = fadd fast float %381, %393
  %406 = fadd fast float %382, %394
  %407 = mul i32 %31, %6
  %408 = add i32 %407, %5
  %409 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %408, i32 undef)  ; BufferLoad(srv,index,wot)
  %410 = extractvalue %dx.types.ResRet.i32 %409, 0
  %411 = extractvalue %dx.types.ResRet.i32 %409, 1
  %412 = extractvalue %dx.types.ResRet.i32 %409, 2
  %413 = extractvalue %dx.types.ResRet.i32 %409, 3
  %414 = bitcast i32 %410 to float
  %415 = bitcast i32 %411 to float
  %416 = bitcast i32 %412 to float
  %417 = bitcast i32 %413 to float
  %418 = add i32 %408, 16
  %419 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %418, i32 undef)  ; BufferLoad(srv,index,wot)
  %420 = extractvalue %dx.types.ResRet.i32 %419, 0
  %421 = extractvalue %dx.types.ResRet.i32 %419, 1
  %422 = extractvalue %dx.types.ResRet.i32 %419, 2
  %423 = extractvalue %dx.types.ResRet.i32 %419, 3
  %424 = bitcast i32 %420 to float
  %425 = bitcast i32 %421 to float
  %426 = bitcast i32 %422 to float
  %427 = bitcast i32 %423 to float
  %428 = add i32 %408, 32
  %429 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %428, i32 undef)  ; BufferLoad(srv,index,wot)
  %430 = extractvalue %dx.types.ResRet.i32 %429, 0
  %431 = extractvalue %dx.types.ResRet.i32 %429, 1
  %432 = extractvalue %dx.types.ResRet.i32 %429, 2
  %433 = extractvalue %dx.types.ResRet.i32 %429, 3
  %434 = bitcast i32 %430 to float
  %435 = bitcast i32 %431 to float
  %436 = bitcast i32 %432 to float
  %437 = bitcast i32 %433 to float
  %438 = mul i32 %23, %6
  %439 = add i32 %438, %5
  %440 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %439, i32 undef)  ; BufferLoad(srv,index,wot)
  %441 = extractvalue %dx.types.ResRet.i32 %440, 0
  %442 = extractvalue %dx.types.ResRet.i32 %440, 1
  %443 = extractvalue %dx.types.ResRet.i32 %440, 2
  %444 = extractvalue %dx.types.ResRet.i32 %440, 3
  %445 = bitcast i32 %441 to float
  %446 = bitcast i32 %442 to float
  %447 = bitcast i32 %443 to float
  %448 = bitcast i32 %444 to float
  %449 = add i32 %439, 16
  %450 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %449, i32 undef)  ; BufferLoad(srv,index,wot)
  %451 = extractvalue %dx.types.ResRet.i32 %450, 0
  %452 = extractvalue %dx.types.ResRet.i32 %450, 1
  %453 = extractvalue %dx.types.ResRet.i32 %450, 2
  %454 = extractvalue %dx.types.ResRet.i32 %450, 3
  %455 = bitcast i32 %451 to float
  %456 = bitcast i32 %452 to float
  %457 = bitcast i32 %453 to float
  %458 = bitcast i32 %454 to float
  %459 = add i32 %439, 32
  %460 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %459, i32 undef)  ; BufferLoad(srv,index,wot)
  %461 = extractvalue %dx.types.ResRet.i32 %460, 0
  %462 = extractvalue %dx.types.ResRet.i32 %460, 1
  %463 = extractvalue %dx.types.ResRet.i32 %460, 2
  %464 = extractvalue %dx.types.ResRet.i32 %460, 3
  %465 = bitcast i32 %461 to float
  %466 = bitcast i32 %462 to float
  %467 = bitcast i32 %463 to float
  %468 = bitcast i32 %464 to float
  %469 = fmul fast float %414, %84
  %470 = fmul fast float %424, %84
  %471 = fmul fast float %434, %84
  %472 = fmul fast float %415, %84
  %473 = fmul fast float %425, %84
  %474 = fmul fast float %435, %84
  %475 = fmul fast float %416, %84
  %476 = fmul fast float %426, %84
  %477 = fmul fast float %436, %84
  %478 = fmul fast float %417, %84
  %479 = fmul fast float %427, %84
  %480 = fmul fast float %437, %84
  %481 = fadd fast float %395, %469
  %482 = fadd fast float %396, %470
  %483 = fadd fast float %397, %471
  %484 = fadd fast float %398, %472
  %485 = fadd fast float %399, %473
  %486 = fadd fast float %400, %474
  %487 = fadd fast float %401, %475
  %488 = fadd fast float %402, %476
  %489 = fadd fast float %403, %477
  %490 = fadd fast float %404, %478
  %491 = fadd fast float %405, %479
  %492 = fadd fast float %406, %480
  %493 = fmul fast float %445, %88
  %494 = fmul fast float %455, %88
  %495 = fmul fast float %465, %88
  %496 = fmul fast float %446, %88
  %497 = fmul fast float %456, %88
  %498 = fmul fast float %466, %88
  %499 = fmul fast float %447, %88
  %500 = fmul fast float %457, %88
  %501 = fmul fast float %467, %88
  %502 = fmul fast float %448, %88
  %503 = fmul fast float %458, %88
  %504 = fmul fast float %468, %88
  %505 = fadd fast float %481, %493
  %506 = fadd fast float %482, %494
  %507 = fadd fast float %483, %495
  %508 = fadd fast float %484, %496
  %509 = fadd fast float %485, %497
  %510 = fadd fast float %486, %498
  %511 = fadd fast float %487, %499
  %512 = fadd fast float %488, %500
  %513 = fadd fast float %489, %501
  %514 = fadd fast float %490, %502
  %515 = fadd fast float %491, %503
  %516 = fadd fast float %492, %504
  %517 = fadd fast float %17, %16
  %518 = fadd fast float %517, %18
  %519 = fadd fast float %518, %19
  %520 = fadd fast float %519, %24
  %521 = fadd fast float %520, %25
  %522 = fadd fast float %521, %26
  %523 = fadd fast float %522, %27
  %524 = fdiv fast float %523, %80
  %525 = fmul fast float %505, %35
  %526 = call float @dx.op.tertiary.f32(i32 46, float %506, float %36, float %525)  ; FMad(a,b,c)
  %527 = call float @dx.op.tertiary.f32(i32 46, float %507, float %37, float %526)  ; FMad(a,b,c)
  %528 = fmul fast float %505, %39
  %529 = call float @dx.op.tertiary.f32(i32 46, float %506, float %40, float %528)  ; FMad(a,b,c)
  %530 = call float @dx.op.tertiary.f32(i32 46, float %507, float %41, float %529)  ; FMad(a,b,c)
  %531 = fmul fast float %505, %43
  %532 = call float @dx.op.tertiary.f32(i32 46, float %506, float %44, float %531)  ; FMad(a,b,c)
  %533 = call float @dx.op.tertiary.f32(i32 46, float %507, float %45, float %532)  ; FMad(a,b,c)
  %534 = fmul fast float %508, %35
  %535 = call float @dx.op.tertiary.f32(i32 46, float %509, float %36, float %534)  ; FMad(a,b,c)
  %536 = call float @dx.op.tertiary.f32(i32 46, float %510, float %37, float %535)  ; FMad(a,b,c)
  %537 = fmul fast float %508, %39
  %538 = call float @dx.op.tertiary.f32(i32 46, float %509, float %40, float %537)  ; FMad(a,b,c)
  %539 = call float @dx.op.tertiary.f32(i32 46, float %510, float %41, float %538)  ; FMad(a,b,c)
  %540 = fmul fast float %508, %43
  %541 = call float @dx.op.tertiary.f32(i32 46, float %509, float %44, float %540)  ; FMad(a,b,c)
  %542 = call float @dx.op.tertiary.f32(i32 46, float %510, float %45, float %541)  ; FMad(a,b,c)
  %543 = fmul fast float %511, %35
  %544 = call float @dx.op.tertiary.f32(i32 46, float %512, float %36, float %543)  ; FMad(a,b,c)
  %545 = call float @dx.op.tertiary.f32(i32 46, float %513, float %37, float %544)  ; FMad(a,b,c)
  %546 = fmul fast float %511, %39
  %547 = call float @dx.op.tertiary.f32(i32 46, float %512, float %40, float %546)  ; FMad(a,b,c)
  %548 = call float @dx.op.tertiary.f32(i32 46, float %513, float %41, float %547)  ; FMad(a,b,c)
  %549 = fmul fast float %511, %43
  %550 = call float @dx.op.tertiary.f32(i32 46, float %512, float %44, float %549)  ; FMad(a,b,c)
  %551 = call float @dx.op.tertiary.f32(i32 46, float %513, float %45, float %550)  ; FMad(a,b,c)
  %552 = fmul fast float %514, %35
  %553 = call float @dx.op.tertiary.f32(i32 46, float %515, float %36, float %552)  ; FMad(a,b,c)
  %554 = call float @dx.op.tertiary.f32(i32 46, float %516, float %37, float %553)  ; FMad(a,b,c)
  %555 = call float @dx.op.tertiary.f32(i32 46, float %524, float %60, float %554)  ; FMad(a,b,c)
  %556 = fmul fast float %514, %39
  %557 = call float @dx.op.tertiary.f32(i32 46, float %515, float %40, float %556)  ; FMad(a,b,c)
  %558 = call float @dx.op.tertiary.f32(i32 46, float %516, float %41, float %557)  ; FMad(a,b,c)
  %559 = call float @dx.op.tertiary.f32(i32 46, float %524, float %61, float %558)  ; FMad(a,b,c)
  %560 = fmul fast float %514, %43
  %561 = call float @dx.op.tertiary.f32(i32 46, float %515, float %44, float %560)  ; FMad(a,b,c)
  %562 = call float @dx.op.tertiary.f32(i32 46, float %516, float %45, float %561)  ; FMad(a,b,c)
  %563 = call float @dx.op.tertiary.f32(i32 46, float %524, float %62, float %562)  ; FMad(a,b,c)
  %564 = fmul fast float %11, 2.000000e+00
  %565 = fmul fast float %12, 2.000000e+00
  %566 = fmul fast float %13, 2.000000e+00
  %567 = fadd fast float %564, -1.000000e+00
  %568 = fadd fast float %565, -1.000000e+00
  %569 = fadd fast float %566, -1.000000e+00
  %570 = fmul fast float %7, 2.000000e+00
  %571 = fmul fast float %8, 2.000000e+00
  %572 = fmul fast float %9, 2.000000e+00
  %573 = fadd fast float %570, -1.000000e+00
  %574 = fadd fast float %571, -1.000000e+00
  %575 = fadd fast float %572, -1.000000e+00
  %576 = fmul fast float %10, 2.000000e+00
  %577 = fadd fast float %576, -1.000000e+00
  %578 = fmul fast float %568, %575
  %579 = fmul fast float %569, %574
  %580 = fsub fast float %578, %579
  %581 = fmul fast float %569, %573
  %582 = fmul fast float %567, %575
  %583 = fsub fast float %581, %582
  %584 = fmul fast float %567, %574
  %585 = fmul fast float %568, %573
  %586 = fsub fast float %584, %585
  %587 = fmul fast float %580, %577
  %588 = fmul fast float %583, %577
  %589 = fmul fast float %586, %577
  %590 = fmul fast float %527, %573
  %591 = call float @dx.op.tertiary.f32(i32 46, float %574, float %536, float %590)  ; FMad(a,b,c)
  %592 = call float @dx.op.tertiary.f32(i32 46, float %575, float %545, float %591)  ; FMad(a,b,c)
  %593 = fmul fast float %530, %573
  %594 = call float @dx.op.tertiary.f32(i32 46, float %574, float %539, float %593)  ; FMad(a,b,c)
  %595 = call float @dx.op.tertiary.f32(i32 46, float %575, float %548, float %594)  ; FMad(a,b,c)
  %596 = fmul fast float %533, %573
  %597 = call float @dx.op.tertiary.f32(i32 46, float %574, float %542, float %596)  ; FMad(a,b,c)
  %598 = call float @dx.op.tertiary.f32(i32 46, float %575, float %551, float %597)  ; FMad(a,b,c)
  %599 = fmul fast float %527, %587
  %600 = call float @dx.op.tertiary.f32(i32 46, float %588, float %536, float %599)  ; FMad(a,b,c)
  %601 = call float @dx.op.tertiary.f32(i32 46, float %589, float %545, float %600)  ; FMad(a,b,c)
  %602 = fmul fast float %530, %587
  %603 = call float @dx.op.tertiary.f32(i32 46, float %588, float %539, float %602)  ; FMad(a,b,c)
  %604 = call float @dx.op.tertiary.f32(i32 46, float %589, float %548, float %603)  ; FMad(a,b,c)
  %605 = fmul fast float %533, %587
  %606 = call float @dx.op.tertiary.f32(i32 46, float %588, float %542, float %605)  ; FMad(a,b,c)
  %607 = call float @dx.op.tertiary.f32(i32 46, float %589, float %551, float %606)  ; FMad(a,b,c)
  %608 = fmul fast float %527, %567
  %609 = call float @dx.op.tertiary.f32(i32 46, float %568, float %536, float %608)  ; FMad(a,b,c)
  %610 = call float @dx.op.tertiary.f32(i32 46, float %569, float %545, float %609)  ; FMad(a,b,c)
  %611 = fmul fast float %530, %567
  %612 = call float @dx.op.tertiary.f32(i32 46, float %568, float %539, float %611)  ; FMad(a,b,c)
  %613 = call float @dx.op.tertiary.f32(i32 46, float %569, float %548, float %612)  ; FMad(a,b,c)
  %614 = fmul fast float %533, %567
  %615 = call float @dx.op.tertiary.f32(i32 46, float %568, float %542, float %614)  ; FMad(a,b,c)
  %616 = call float @dx.op.tertiary.f32(i32 46, float %569, float %551, float %615)  ; FMad(a,b,c)
  %617 = call float @dx.op.dot3.f32(i32 55, float %610, float %613, float %616, float %610, float %613, float %616)  ; Dot3(ax,ay,az,bx,by,bz)
  %618 = call float @dx.op.unary.f32(i32 25, float %617)  ; Rsqrt(value)
  %619 = fmul fast float %618, %610
  %620 = fmul fast float %618, %613
  %621 = fmul fast float %618, %616
  %622 = call float @dx.op.dot3.f32(i32 55, float %601, float %604, float %607, float %601, float %604, float %607)  ; Dot3(ax,ay,az,bx,by,bz)
  %623 = call float @dx.op.unary.f32(i32 25, float %622)  ; Rsqrt(value)
  %624 = fmul fast float %623, %601
  %625 = fmul fast float %623, %604
  %626 = fmul fast float %623, %607
  %627 = call float @dx.op.dot3.f32(i32 55, float %592, float %595, float %598, float %592, float %595, float %598)  ; Dot3(ax,ay,az,bx,by,bz)
  %628 = call float @dx.op.unary.f32(i32 25, float %627)  ; Rsqrt(value)
  %629 = fmul fast float %628, %592
  %630 = fmul fast float %628, %595
  %631 = fmul fast float %628, %598
  %632 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %633 = extractvalue %dx.types.CBufRet.f32 %632, 0
  %634 = fmul fast float %633, %619
  %635 = fmul fast float %633, %620
  %636 = fmul fast float %633, %621
  %637 = fadd fast float %74, %634
  %638 = fadd fast float %75, %635
  %639 = fadd fast float %76, %636
  %640 = fmul fast float %637, %527
  %641 = call float @dx.op.tertiary.f32(i32 46, float %638, float %536, float %640)  ; FMad(a,b,c)
  %642 = call float @dx.op.tertiary.f32(i32 46, float %639, float %545, float %641)  ; FMad(a,b,c)
  %643 = fadd fast float %642, %555
  %644 = fmul fast float %637, %530
  %645 = call float @dx.op.tertiary.f32(i32 46, float %638, float %539, float %644)  ; FMad(a,b,c)
  %646 = call float @dx.op.tertiary.f32(i32 46, float %639, float %548, float %645)  ; FMad(a,b,c)
  %647 = fadd fast float %646, %559
  %648 = fmul fast float %637, %533
  %649 = call float @dx.op.tertiary.f32(i32 46, float %638, float %542, float %648)  ; FMad(a,b,c)
  %650 = call float @dx.op.tertiary.f32(i32 46, float %639, float %551, float %649)  ; FMad(a,b,c)
  %651 = fadd fast float %650, %563
  %652 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %653 = extractvalue %dx.types.CBufRet.f32 %652, 0
  %654 = extractvalue %dx.types.CBufRet.f32 %652, 1
  %655 = extractvalue %dx.types.CBufRet.f32 %652, 2
  %656 = extractvalue %dx.types.CBufRet.f32 %652, 3
  %657 = fmul fast float %653, %643
  %658 = call float @dx.op.tertiary.f32(i32 46, float %647, float %654, float %657)  ; FMad(a,b,c)
  %659 = call float @dx.op.tertiary.f32(i32 46, float %651, float %655, float %658)  ; FMad(a,b,c)
  %660 = fadd fast float %659, %656
  %661 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 37)  ; CBufferLoadLegacy(handle,regIndex)
  %662 = extractvalue %dx.types.CBufRet.f32 %661, 0
  %663 = extractvalue %dx.types.CBufRet.f32 %661, 1
  %664 = extractvalue %dx.types.CBufRet.f32 %661, 2
  %665 = fadd fast float %662, %643
  %666 = fadd fast float %663, %647
  %667 = fadd fast float %664, %651
  %668 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %669 = extractvalue %dx.types.CBufRet.f32 %668, 0
  %670 = extractvalue %dx.types.CBufRet.f32 %668, 1
  %671 = extractvalue %dx.types.CBufRet.f32 %668, 2
  %672 = extractvalue %dx.types.CBufRet.f32 %668, 3
  %673 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %674 = extractvalue %dx.types.CBufRet.f32 %673, 0
  %675 = extractvalue %dx.types.CBufRet.f32 %673, 1
  %676 = extractvalue %dx.types.CBufRet.f32 %673, 2
  %677 = extractvalue %dx.types.CBufRet.f32 %673, 3
  %678 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %679 = extractvalue %dx.types.CBufRet.f32 %678, 0
  %680 = extractvalue %dx.types.CBufRet.f32 %678, 1
  %681 = extractvalue %dx.types.CBufRet.f32 %678, 2
  %682 = extractvalue %dx.types.CBufRet.f32 %678, 3
  %683 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %684 = extractvalue %dx.types.CBufRet.f32 %683, 0
  %685 = extractvalue %dx.types.CBufRet.f32 %683, 1
  %686 = extractvalue %dx.types.CBufRet.f32 %683, 2
  %687 = extractvalue %dx.types.CBufRet.f32 %683, 3
  %688 = fmul fast float %669, %643
  %689 = call float @dx.op.tertiary.f32(i32 46, float %647, float %670, float %688)  ; FMad(a,b,c)
  %690 = call float @dx.op.tertiary.f32(i32 46, float %651, float %671, float %689)  ; FMad(a,b,c)
  %691 = fadd fast float %690, %672
  %692 = fmul fast float %674, %643
  %693 = call float @dx.op.tertiary.f32(i32 46, float %647, float %675, float %692)  ; FMad(a,b,c)
  %694 = call float @dx.op.tertiary.f32(i32 46, float %651, float %676, float %693)  ; FMad(a,b,c)
  %695 = fadd fast float %694, %677
  %696 = fmul fast float %679, %643
  %697 = call float @dx.op.tertiary.f32(i32 46, float %647, float %680, float %696)  ; FMad(a,b,c)
  %698 = call float @dx.op.tertiary.f32(i32 46, float %651, float %681, float %697)  ; FMad(a,b,c)
  %699 = fadd fast float %698, %682
  %700 = fmul fast float %684, %643
  %701 = call float @dx.op.tertiary.f32(i32 46, float %647, float %685, float %700)  ; FMad(a,b,c)
  %702 = call float @dx.op.tertiary.f32(i32 46, float %651, float %686, float %701)  ; FMad(a,b,c)
  %703 = fadd fast float %702, %687
  %704 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %705 = extractvalue %dx.types.CBufRet.f32 %704, 0
  %706 = extractvalue %dx.types.CBufRet.f32 %704, 1
  %707 = extractvalue %dx.types.CBufRet.f32 %704, 2
  %708 = extractvalue %dx.types.CBufRet.f32 %704, 3
  %709 = call float @dx.op.dot4.f32(i32 56, float %705, float %706, float %707, float %708, float %665, float %666, float %667, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %691)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %695)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %699)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %703)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %14)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %15)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %619)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %620)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %621)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %629)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %630)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float %631)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %624)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %625)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %626)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %660)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %709)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!11}
!dx.entryPoints = !{!12}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{!5, null, !7, null}
!5 = !{!6}
!6 = !{i32 0, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 10, i32 1, i32 11, i32 0, null}
!7 = !{!8, !9, !10}
!8 = !{i32 0, %hostlayout.CameraShaderConsts* undef, !"", i32 0, i32 1, i32 1, i32 848, null}
!9 = !{i32 1, %ShaderSpecificConstants* undef, !"", i32 0, i32 4, i32 1, i32 4, null}
!10 = !{i32 2, %hostlayout.FrequentVertexConsts* undef, !"", i32 0, i32 5, i32 1, i32 112, null}
!11 = !{[59 x i32] [i32 57, i32 17, i32 98319, i32 98319, i32 98319, i32 0, i32 131023, i32 131023, i32 131023, i32 131023, i32 131023, i32 131023, i32 131023, i32 131023, i32 131023, i32 131023, i32 131023, i32 131023, i32 131023, i32 131023, i32 131023, i32 131023, i32 16, i32 32, i32 0, i32 0, i32 127439, i32 127439, i32 127439, i32 0, i32 32256, i32 32256, i32 32256, i32 28672, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 131023, i32 131023, i32 131023, i32 98319, i32 131023, i32 131023, i32 131023, i32 98319, i32 131023, i32 131023, i32 131023, i32 98319, i32 131023, i32 131023, i32 0, i32 0, i32 0]}
!12 = !{void ()* @vs_main_, !"vs_main_", !13, !4, !42}
!13 = !{!14, !34, null}
!14 = !{!15, !18, !20, !21, !23, !24, !26, !27, !28, !29, !30, !32, !33}
!15 = !{i32 0, !"POSITION", i8 9, i8 0, !16, i8 0, i32 1, i8 3, i32 0, i8 0, !17}
!16 = !{i32 0}
!17 = !{i32 3, i32 7}
!18 = !{i32 1, !"BLENDINDICES", i8 5, i8 0, !16, i8 0, i32 1, i8 4, i32 1, i8 0, !19}
!19 = !{i32 3, i32 15}
!20 = !{i32 2, !"BLENDWEIGHT", i8 9, i8 0, !16, i8 0, i32 1, i8 4, i32 2, i8 0, !19}
!21 = !{i32 3, !"BLENDINDICES", i8 5, i8 0, !22, i8 0, i32 1, i8 4, i32 3, i8 0, !19}
!22 = !{i32 1}
!23 = !{i32 4, !"BLENDWEIGHT", i8 9, i8 0, !22, i8 0, i32 1, i8 4, i32 4, i8 0, !19}
!24 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !16, i8 0, i32 1, i8 2, i32 5, i8 0, !25}
!25 = !{i32 3, i32 3}
!26 = !{i32 6, !"NORMAL", i8 9, i8 0, !16, i8 0, i32 1, i8 3, i32 6, i8 0, !17}
!27 = !{i32 7, !"TANGENT", i8 9, i8 0, !16, i8 0, i32 1, i8 4, i32 7, i8 0, !19}
!28 = !{i32 8, !"COLOR", i8 9, i8 0, !16, i8 0, i32 1, i8 4, i32 8, i8 0, null}
!29 = !{i32 9, !"TEXCOORD", i8 9, i8 0, !22, i8 0, i32 1, i8 2, i32 9, i8 0, null}
!30 = !{i32 10, !"INSTANCE_TRANSFORM", i8 9, i8 0, !31, i8 0, i32 3, i8 4, i32 10, i8 0, !19}
!31 = !{i32 0, i32 1, i32 2}
!32 = !{i32 11, !"INSTANCE_SKINNING_DATA", i8 5, i8 0, !16, i8 0, i32 1, i8 4, i32 13, i8 0, !25}
!33 = !{i32 12, !"SV_VertexID", i8 5, i8 1, !16, i8 0, i32 1, i8 1, i32 14, i8 0, null}
!34 = !{!35, !36, !37, !38, !40}
!35 = !{i32 0, !"SV_Position", i8 9, i8 3, !16, i8 4, i32 1, i8 4, i32 0, i8 0, !19}
!36 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !16, i8 2, i32 1, i8 4, i32 1, i8 0, !19}
!37 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !22, i8 2, i32 1, i8 4, i32 2, i8 0, !19}
!38 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !39, i8 2, i32 1, i8 4, i32 3, i8 0, !19}
!39 = !{i32 2}
!40 = !{i32 4, !"SV_ClipDistance", i8 9, i8 6, !16, i8 2, i32 1, i8 1, i32 4, i8 0, !41}
!41 = !{i32 3, i32 1}
!42 = !{i32 0, i64 16}
 