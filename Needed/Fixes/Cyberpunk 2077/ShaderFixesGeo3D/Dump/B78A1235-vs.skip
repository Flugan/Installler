;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; POSITION                 0   xyz         0     NONE   float   xyz 
; BLENDINDICES             0   xyzw        1     NONE    uint   xyzw
; BLENDWEIGHT              0   xyzw        2     NONE   float   xyzw
; TEXCOORD                 0   xy          3     NONE   float   xy  
; NORMAL                   0   xyz         4     NONE   float   xyz 
; TANGENT                  0   xyzw        5     NONE   float   xyzw
; COLOR                    0   xyzw        6     NONE   float       
; TEXCOORD                 1   xy          7     NONE   float       
; INSTANCE_TRANSFORM       0   xyzw        8     NONE   float   xyzw
; INSTANCE_TRANSFORM       1   xyzw        9     NONE   float   xyzw
; INSTANCE_TRANSFORM       2   xyzw       10     NONE   float   xyzw
; INSTANCE_SKINNING_DATA     0   xyzw       11     NONE    uint   xyz 
; SV_VertexID              0   x          12   VERTID    uint       
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; TEXCOORD                 0   xyzw        1     NONE   float   xyzw
; TEXCOORD                 1   xyzw        2     NONE   float   xyzw
; TEXCOORD                 2   xyzw        3     NONE   float   xyzw
; TEXCOORD                 3   xyzw        4     NONE   float   xyzw
; TEXCOORD                 4   xyzw        5     NONE   float   xyzw
; SV_ClipDistance          0   x           6  CLIPDST   float   x   
;
; shader hash: 4a291ea7dc69ef5b48d1aba724cd9cfd
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; POSITION                 0                              
; BLENDINDICES             0                              
; BLENDWEIGHT              0                              
; TEXCOORD                 0                              
; NORMAL                   0                              
; TANGENT                  0                              
; COLOR                    0                              
; TEXCOORD                 1                              
; INSTANCE_TRANSFORM       0                              
; INSTANCE_SKINNING_DATA     0                              
; SV_VertexID              0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; TEXCOORD                 3                 linear       
; TEXCOORD                 4                 linear       
; SV_ClipDistance          0                 linear       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [496 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [848 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [112 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb7     1
;                                   cbuffer      NA          NA     CB1            cb1     1
;                                   cbuffer      NA          NA     CB2            cb5     1
;                                   texture    byte         r/o      T0            t10     1
;
;
; ViewId state:
;
; Number of inputs: 49, outputs: 25
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
;   output 1 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
;   output 2 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
;   output 3 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
;   output 4 depends on inputs: { 12 }
;   output 5 depends on inputs: { 13 }
;   output 6 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 7 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 8 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 9 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 20, 21, 22, 23, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 10 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 20, 21, 22, 23, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 11 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 20, 21, 22, 23, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 12 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 20, 21, 22, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 13 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 20, 21, 22, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 14 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 20, 21, 22, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45 }
;   output 15 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
;   output 16 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
;   output 17 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
;   output 18 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
;   output 19 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
;   output 20 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 45, 46 }
;   output 21 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 45, 46 }
;   output 22 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 45, 46 }
;   output 23 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 45, 46 }
;   output 24 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%struct.ByteAddressBuffer = type { i32 }
%MaterialModifiersConsts = type { [31 x <4 x float>] }
%hostlayout.CameraShaderConsts = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, i32, i32, <2 x i32>, float, float }
%hostlayout.FrequentVertexConsts = type { [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float> }

define void @vs_main_() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 10, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 2, i32 5, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 7, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call i32 @dx.op.loadInput.i32(i32 4, i32 9, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call i32 @dx.op.loadInput.i32(i32 4, i32 9, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call i32 @dx.op.loadInput.i32(i32 4, i32 9, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %20 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %21 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %22 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %23 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %24 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %25 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %26 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %27 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %28 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %29 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %30 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %31 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %32 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 1, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %33 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 1, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %34 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 1, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %35 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 1, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %36 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 2, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %37 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 2, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %38 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 2, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %39 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 2, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %40 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %41 = extractvalue %dx.types.CBufRet.i32 %40, 0
  %42 = extractvalue %dx.types.CBufRet.i32 %40, 1
  %43 = extractvalue %dx.types.CBufRet.i32 %40, 2
  %44 = bitcast float %31 to i32
  %45 = bitcast float %35 to i32
  %46 = bitcast float %39 to i32
  %47 = sub i32 %44, %41
  %48 = sub i32 %45, %42
  %49 = sub i32 %46, %43
  %50 = sitofp i32 %47 to float
  %51 = sitofp i32 %48 to float
  %52 = sitofp i32 %49 to float
  %53 = fmul fast float %50, 0x3EE0000000000000
  %54 = fmul fast float %51, 0x3EE0000000000000
  %55 = fmul fast float %52, 0x3EE0000000000000
  %56 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %57 = extractvalue %dx.types.CBufRet.f32 %56, 0
  %58 = extractvalue %dx.types.CBufRet.f32 %56, 1
  %59 = extractvalue %dx.types.CBufRet.f32 %56, 2
  %60 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %61 = extractvalue %dx.types.CBufRet.f32 %60, 0
  %62 = extractvalue %dx.types.CBufRet.f32 %60, 1
  %63 = extractvalue %dx.types.CBufRet.f32 %60, 2
  %64 = fmul fast float %61, %25
  %65 = fmul fast float %62, %26
  %66 = fmul fast float %63, %27
  %67 = fadd fast float %64, %57
  %68 = fadd fast float %65, %58
  %69 = fadd fast float %66, %59
  %70 = call float @dx.op.dot4.f32(i32 56, float %17, float %18, float %19, float %20, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %71 = call float @dx.op.binary.f32(i32 35, float 0x3EE4F8B580000000, float %70)  ; FMax(a,b)
  %72 = fdiv fast float %17, %71
  %73 = fdiv fast float %18, %71
  %74 = fdiv fast float %19, %71
  %75 = fdiv fast float %20, %71
  %76 = mul i32 %21, %6
  %77 = add i32 %76, %5
  %78 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %77, i32 undef)  ; BufferLoad(srv,index,wot)
  %79 = extractvalue %dx.types.ResRet.i32 %78, 0
  %80 = extractvalue %dx.types.ResRet.i32 %78, 1
  %81 = extractvalue %dx.types.ResRet.i32 %78, 2
  %82 = extractvalue %dx.types.ResRet.i32 %78, 3
  %83 = bitcast i32 %79 to float
  %84 = bitcast i32 %80 to float
  %85 = bitcast i32 %81 to float
  %86 = bitcast i32 %82 to float
  %87 = add i32 %77, 16
  %88 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %87, i32 undef)  ; BufferLoad(srv,index,wot)
  %89 = extractvalue %dx.types.ResRet.i32 %88, 0
  %90 = extractvalue %dx.types.ResRet.i32 %88, 1
  %91 = extractvalue %dx.types.ResRet.i32 %88, 2
  %92 = extractvalue %dx.types.ResRet.i32 %88, 3
  %93 = bitcast i32 %89 to float
  %94 = bitcast i32 %90 to float
  %95 = bitcast i32 %91 to float
  %96 = bitcast i32 %92 to float
  %97 = add i32 %77, 32
  %98 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %97, i32 undef)  ; BufferLoad(srv,index,wot)
  %99 = extractvalue %dx.types.ResRet.i32 %98, 0
  %100 = extractvalue %dx.types.ResRet.i32 %98, 1
  %101 = extractvalue %dx.types.ResRet.i32 %98, 2
  %102 = extractvalue %dx.types.ResRet.i32 %98, 3
  %103 = bitcast i32 %99 to float
  %104 = bitcast i32 %100 to float
  %105 = bitcast i32 %101 to float
  %106 = bitcast i32 %102 to float
  %107 = fmul fast float %83, %72
  %108 = fmul fast float %93, %72
  %109 = fmul fast float %103, %72
  %110 = fmul fast float %84, %72
  %111 = fmul fast float %94, %72
  %112 = fmul fast float %104, %72
  %113 = fmul fast float %85, %72
  %114 = fmul fast float %95, %72
  %115 = fmul fast float %105, %72
  %116 = fmul fast float %86, %72
  %117 = fmul fast float %96, %72
  %118 = fmul fast float %106, %72
  %119 = mul i32 %22, %6
  %120 = add i32 %119, %5
  %121 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %120, i32 undef)  ; BufferLoad(srv,index,wot)
  %122 = extractvalue %dx.types.ResRet.i32 %121, 0
  %123 = extractvalue %dx.types.ResRet.i32 %121, 1
  %124 = extractvalue %dx.types.ResRet.i32 %121, 2
  %125 = extractvalue %dx.types.ResRet.i32 %121, 3
  %126 = bitcast i32 %122 to float
  %127 = bitcast i32 %123 to float
  %128 = bitcast i32 %124 to float
  %129 = bitcast i32 %125 to float
  %130 = add i32 %120, 16
  %131 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %130, i32 undef)  ; BufferLoad(srv,index,wot)
  %132 = extractvalue %dx.types.ResRet.i32 %131, 0
  %133 = extractvalue %dx.types.ResRet.i32 %131, 1
  %134 = extractvalue %dx.types.ResRet.i32 %131, 2
  %135 = extractvalue %dx.types.ResRet.i32 %131, 3
  %136 = bitcast i32 %132 to float
  %137 = bitcast i32 %133 to float
  %138 = bitcast i32 %134 to float
  %139 = bitcast i32 %135 to float
  %140 = add i32 %120, 32
  %141 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %140, i32 undef)  ; BufferLoad(srv,index,wot)
  %142 = extractvalue %dx.types.ResRet.i32 %141, 0
  %143 = extractvalue %dx.types.ResRet.i32 %141, 1
  %144 = extractvalue %dx.types.ResRet.i32 %141, 2
  %145 = extractvalue %dx.types.ResRet.i32 %141, 3
  %146 = bitcast i32 %142 to float
  %147 = bitcast i32 %143 to float
  %148 = bitcast i32 %144 to float
  %149 = bitcast i32 %145 to float
  %150 = fmul fast float %126, %73
  %151 = fmul fast float %136, %73
  %152 = fmul fast float %146, %73
  %153 = fmul fast float %127, %73
  %154 = fmul fast float %137, %73
  %155 = fmul fast float %147, %73
  %156 = fmul fast float %128, %73
  %157 = fmul fast float %138, %73
  %158 = fmul fast float %148, %73
  %159 = fmul fast float %129, %73
  %160 = fmul fast float %139, %73
  %161 = fmul fast float %149, %73
  %162 = fadd fast float %150, %107
  %163 = fadd fast float %151, %108
  %164 = fadd fast float %152, %109
  %165 = fadd fast float %153, %110
  %166 = fadd fast float %154, %111
  %167 = fadd fast float %155, %112
  %168 = fadd fast float %156, %113
  %169 = fadd fast float %157, %114
  %170 = fadd fast float %158, %115
  %171 = fadd fast float %159, %116
  %172 = fadd fast float %160, %117
  %173 = fadd fast float %161, %118
  %174 = mul i32 %23, %6
  %175 = add i32 %174, %5
  %176 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %175, i32 undef)  ; BufferLoad(srv,index,wot)
  %177 = extractvalue %dx.types.ResRet.i32 %176, 0
  %178 = extractvalue %dx.types.ResRet.i32 %176, 1
  %179 = extractvalue %dx.types.ResRet.i32 %176, 2
  %180 = extractvalue %dx.types.ResRet.i32 %176, 3
  %181 = bitcast i32 %177 to float
  %182 = bitcast i32 %178 to float
  %183 = bitcast i32 %179 to float
  %184 = bitcast i32 %180 to float
  %185 = add i32 %175, 16
  %186 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %185, i32 undef)  ; BufferLoad(srv,index,wot)
  %187 = extractvalue %dx.types.ResRet.i32 %186, 0
  %188 = extractvalue %dx.types.ResRet.i32 %186, 1
  %189 = extractvalue %dx.types.ResRet.i32 %186, 2
  %190 = extractvalue %dx.types.ResRet.i32 %186, 3
  %191 = bitcast i32 %187 to float
  %192 = bitcast i32 %188 to float
  %193 = bitcast i32 %189 to float
  %194 = bitcast i32 %190 to float
  %195 = add i32 %175, 32
  %196 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %195, i32 undef)  ; BufferLoad(srv,index,wot)
  %197 = extractvalue %dx.types.ResRet.i32 %196, 0
  %198 = extractvalue %dx.types.ResRet.i32 %196, 1
  %199 = extractvalue %dx.types.ResRet.i32 %196, 2
  %200 = extractvalue %dx.types.ResRet.i32 %196, 3
  %201 = bitcast i32 %197 to float
  %202 = bitcast i32 %198 to float
  %203 = bitcast i32 %199 to float
  %204 = bitcast i32 %200 to float
  %205 = fmul fast float %181, %74
  %206 = fmul fast float %191, %74
  %207 = fmul fast float %201, %74
  %208 = fmul fast float %182, %74
  %209 = fmul fast float %192, %74
  %210 = fmul fast float %202, %74
  %211 = fmul fast float %183, %74
  %212 = fmul fast float %193, %74
  %213 = fmul fast float %203, %74
  %214 = fmul fast float %184, %74
  %215 = fmul fast float %194, %74
  %216 = fmul fast float %204, %74
  %217 = fadd fast float %162, %205
  %218 = fadd fast float %163, %206
  %219 = fadd fast float %164, %207
  %220 = fadd fast float %165, %208
  %221 = fadd fast float %166, %209
  %222 = fadd fast float %167, %210
  %223 = fadd fast float %168, %211
  %224 = fadd fast float %169, %212
  %225 = fadd fast float %170, %213
  %226 = fadd fast float %171, %214
  %227 = fadd fast float %172, %215
  %228 = fadd fast float %173, %216
  %229 = mul i32 %24, %6
  %230 = add i32 %229, %5
  %231 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %230, i32 undef)  ; BufferLoad(srv,index,wot)
  %232 = extractvalue %dx.types.ResRet.i32 %231, 0
  %233 = extractvalue %dx.types.ResRet.i32 %231, 1
  %234 = extractvalue %dx.types.ResRet.i32 %231, 2
  %235 = extractvalue %dx.types.ResRet.i32 %231, 3
  %236 = bitcast i32 %232 to float
  %237 = bitcast i32 %233 to float
  %238 = bitcast i32 %234 to float
  %239 = bitcast i32 %235 to float
  %240 = add i32 %230, 16
  %241 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %240, i32 undef)  ; BufferLoad(srv,index,wot)
  %242 = extractvalue %dx.types.ResRet.i32 %241, 0
  %243 = extractvalue %dx.types.ResRet.i32 %241, 1
  %244 = extractvalue %dx.types.ResRet.i32 %241, 2
  %245 = extractvalue %dx.types.ResRet.i32 %241, 3
  %246 = bitcast i32 %242 to float
  %247 = bitcast i32 %243 to float
  %248 = bitcast i32 %244 to float
  %249 = bitcast i32 %245 to float
  %250 = add i32 %230, 32
  %251 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %250, i32 undef)  ; BufferLoad(srv,index,wot)
  %252 = extractvalue %dx.types.ResRet.i32 %251, 0
  %253 = extractvalue %dx.types.ResRet.i32 %251, 1
  %254 = extractvalue %dx.types.ResRet.i32 %251, 2
  %255 = extractvalue %dx.types.ResRet.i32 %251, 3
  %256 = bitcast i32 %252 to float
  %257 = bitcast i32 %253 to float
  %258 = bitcast i32 %254 to float
  %259 = bitcast i32 %255 to float
  %260 = fmul fast float %236, %75
  %261 = fmul fast float %246, %75
  %262 = fmul fast float %256, %75
  %263 = fmul fast float %237, %75
  %264 = fmul fast float %247, %75
  %265 = fmul fast float %257, %75
  %266 = fmul fast float %238, %75
  %267 = fmul fast float %248, %75
  %268 = fmul fast float %258, %75
  %269 = fmul fast float %239, %75
  %270 = fmul fast float %249, %75
  %271 = fmul fast float %259, %75
  %272 = fadd fast float %217, %260
  %273 = fadd fast float %218, %261
  %274 = fadd fast float %219, %262
  %275 = fadd fast float %220, %263
  %276 = fadd fast float %221, %264
  %277 = fadd fast float %222, %265
  %278 = fadd fast float %223, %266
  %279 = fadd fast float %224, %267
  %280 = fadd fast float %225, %268
  %281 = fadd fast float %226, %269
  %282 = fadd fast float %227, %270
  %283 = fadd fast float %228, %271
  %284 = fmul fast float %272, %67
  %285 = call float @dx.op.tertiary.f32(i32 46, float %68, float %275, float %284)  ; FMad(a,b,c)
  %286 = call float @dx.op.tertiary.f32(i32 46, float %69, float %278, float %285)  ; FMad(a,b,c)
  %287 = fadd fast float %281, %286
  %288 = fmul fast float %273, %67
  %289 = call float @dx.op.tertiary.f32(i32 46, float %68, float %276, float %288)  ; FMad(a,b,c)
  %290 = call float @dx.op.tertiary.f32(i32 46, float %69, float %279, float %289)  ; FMad(a,b,c)
  %291 = fadd fast float %282, %290
  %292 = fmul fast float %274, %67
  %293 = call float @dx.op.tertiary.f32(i32 46, float %68, float %277, float %292)  ; FMad(a,b,c)
  %294 = call float @dx.op.tertiary.f32(i32 46, float %69, float %280, float %293)  ; FMad(a,b,c)
  %295 = fadd fast float %283, %294
  %296 = fmul fast float %287, %28
  %297 = call float @dx.op.tertiary.f32(i32 46, float %291, float %29, float %296)  ; FMad(a,b,c)
  %298 = call float @dx.op.tertiary.f32(i32 46, float %295, float %30, float %297)  ; FMad(a,b,c)
  %299 = fadd fast float %298, %53
  %300 = fmul fast float %287, %32
  %301 = call float @dx.op.tertiary.f32(i32 46, float %291, float %33, float %300)  ; FMad(a,b,c)
  %302 = call float @dx.op.tertiary.f32(i32 46, float %295, float %34, float %301)  ; FMad(a,b,c)
  %303 = fadd fast float %302, %54
  %304 = fmul fast float %287, %36
  %305 = call float @dx.op.tertiary.f32(i32 46, float %291, float %37, float %304)  ; FMad(a,b,c)
  %306 = call float @dx.op.tertiary.f32(i32 46, float %295, float %38, float %305)  ; FMad(a,b,c)
  %307 = fadd fast float %306, %55
  %308 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %309 = extractvalue %dx.types.CBufRet.f32 %308, 0
  %310 = extractvalue %dx.types.CBufRet.f32 %308, 1
  %311 = extractvalue %dx.types.CBufRet.f32 %308, 2
  %312 = extractvalue %dx.types.CBufRet.f32 %308, 3
  %313 = fmul fast float %309, %299
  %314 = call float @dx.op.tertiary.f32(i32 46, float %303, float %310, float %313)  ; FMad(a,b,c)
  %315 = call float @dx.op.tertiary.f32(i32 46, float %307, float %311, float %314)  ; FMad(a,b,c)
  %316 = fadd fast float %315, %312
  %317 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 37)  ; CBufferLoadLegacy(handle,regIndex)
  %318 = extractvalue %dx.types.CBufRet.f32 %317, 0
  %319 = extractvalue %dx.types.CBufRet.f32 %317, 1
  %320 = extractvalue %dx.types.CBufRet.f32 %317, 2
  %321 = fadd fast float %318, %299
  %322 = fadd fast float %319, %303
  %323 = fadd fast float %320, %307
  %324 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %325 = extractvalue %dx.types.CBufRet.f32 %324, 0
  %326 = extractvalue %dx.types.CBufRet.f32 %324, 1
  %327 = extractvalue %dx.types.CBufRet.f32 %324, 2
  %328 = extractvalue %dx.types.CBufRet.f32 %324, 3
  %329 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %330 = extractvalue %dx.types.CBufRet.f32 %329, 0
  %331 = extractvalue %dx.types.CBufRet.f32 %329, 1
  %332 = extractvalue %dx.types.CBufRet.f32 %329, 2
  %333 = extractvalue %dx.types.CBufRet.f32 %329, 3
  %334 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %335 = extractvalue %dx.types.CBufRet.f32 %334, 0
  %336 = extractvalue %dx.types.CBufRet.f32 %334, 1
  %337 = extractvalue %dx.types.CBufRet.f32 %334, 2
  %338 = extractvalue %dx.types.CBufRet.f32 %334, 3
  %339 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %340 = extractvalue %dx.types.CBufRet.f32 %339, 0
  %341 = extractvalue %dx.types.CBufRet.f32 %339, 1
  %342 = extractvalue %dx.types.CBufRet.f32 %339, 2
  %343 = extractvalue %dx.types.CBufRet.f32 %339, 3
  %344 = fmul fast float %325, %299
  %345 = call float @dx.op.tertiary.f32(i32 46, float %303, float %326, float %344)  ; FMad(a,b,c)
  %346 = call float @dx.op.tertiary.f32(i32 46, float %307, float %327, float %345)  ; FMad(a,b,c)
  %347 = fadd fast float %346, %328
  %348 = fmul fast float %330, %299
  %349 = call float @dx.op.tertiary.f32(i32 46, float %303, float %331, float %348)  ; FMad(a,b,c)
  %350 = call float @dx.op.tertiary.f32(i32 46, float %307, float %332, float %349)  ; FMad(a,b,c)
  %351 = fadd fast float %350, %333
  %352 = fmul fast float %335, %299
  %353 = call float @dx.op.tertiary.f32(i32 46, float %303, float %336, float %352)  ; FMad(a,b,c)
  %354 = call float @dx.op.tertiary.f32(i32 46, float %307, float %337, float %353)  ; FMad(a,b,c)
  %355 = fadd fast float %354, %338
  %356 = fmul fast float %340, %299
  %357 = call float @dx.op.tertiary.f32(i32 46, float %303, float %341, float %356)  ; FMad(a,b,c)
  %358 = call float @dx.op.tertiary.f32(i32 46, float %307, float %342, float %357)  ; FMad(a,b,c)
  %359 = fadd fast float %358, %343
  %360 = add i32 %76, %7
  %361 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %360, i32 undef)  ; BufferLoad(srv,index,wot)
  %362 = extractvalue %dx.types.ResRet.i32 %361, 0
  %363 = extractvalue %dx.types.ResRet.i32 %361, 1
  %364 = extractvalue %dx.types.ResRet.i32 %361, 2
  %365 = extractvalue %dx.types.ResRet.i32 %361, 3
  %366 = bitcast i32 %362 to float
  %367 = bitcast i32 %363 to float
  %368 = bitcast i32 %364 to float
  %369 = bitcast i32 %365 to float
  %370 = add i32 %360, 16
  %371 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %370, i32 undef)  ; BufferLoad(srv,index,wot)
  %372 = extractvalue %dx.types.ResRet.i32 %371, 0
  %373 = extractvalue %dx.types.ResRet.i32 %371, 1
  %374 = extractvalue %dx.types.ResRet.i32 %371, 2
  %375 = extractvalue %dx.types.ResRet.i32 %371, 3
  %376 = bitcast i32 %372 to float
  %377 = bitcast i32 %373 to float
  %378 = bitcast i32 %374 to float
  %379 = bitcast i32 %375 to float
  %380 = add i32 %360, 32
  %381 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %380, i32 undef)  ; BufferLoad(srv,index,wot)
  %382 = extractvalue %dx.types.ResRet.i32 %381, 0
  %383 = extractvalue %dx.types.ResRet.i32 %381, 1
  %384 = extractvalue %dx.types.ResRet.i32 %381, 2
  %385 = extractvalue %dx.types.ResRet.i32 %381, 3
  %386 = bitcast i32 %382 to float
  %387 = bitcast i32 %383 to float
  %388 = bitcast i32 %384 to float
  %389 = bitcast i32 %385 to float
  %390 = fmul fast float %366, %72
  %391 = fmul fast float %376, %72
  %392 = fmul fast float %386, %72
  %393 = fmul fast float %367, %72
  %394 = fmul fast float %377, %72
  %395 = fmul fast float %387, %72
  %396 = fmul fast float %368, %72
  %397 = fmul fast float %378, %72
  %398 = fmul fast float %388, %72
  %399 = fmul fast float %369, %72
  %400 = fmul fast float %379, %72
  %401 = fmul fast float %389, %72
  %402 = add i32 %119, %7
  %403 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %402, i32 undef)  ; BufferLoad(srv,index,wot)
  %404 = extractvalue %dx.types.ResRet.i32 %403, 0
  %405 = extractvalue %dx.types.ResRet.i32 %403, 1
  %406 = extractvalue %dx.types.ResRet.i32 %403, 2
  %407 = extractvalue %dx.types.ResRet.i32 %403, 3
  %408 = bitcast i32 %404 to float
  %409 = bitcast i32 %405 to float
  %410 = bitcast i32 %406 to float
  %411 = bitcast i32 %407 to float
  %412 = add i32 %402, 16
  %413 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %412, i32 undef)  ; BufferLoad(srv,index,wot)
  %414 = extractvalue %dx.types.ResRet.i32 %413, 0
  %415 = extractvalue %dx.types.ResRet.i32 %413, 1
  %416 = extractvalue %dx.types.ResRet.i32 %413, 2
  %417 = extractvalue %dx.types.ResRet.i32 %413, 3
  %418 = bitcast i32 %414 to float
  %419 = bitcast i32 %415 to float
  %420 = bitcast i32 %416 to float
  %421 = bitcast i32 %417 to float
  %422 = add i32 %402, 32
  %423 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %422, i32 undef)  ; BufferLoad(srv,index,wot)
  %424 = extractvalue %dx.types.ResRet.i32 %423, 0
  %425 = extractvalue %dx.types.ResRet.i32 %423, 1
  %426 = extractvalue %dx.types.ResRet.i32 %423, 2
  %427 = extractvalue %dx.types.ResRet.i32 %423, 3
  %428 = bitcast i32 %424 to float
  %429 = bitcast i32 %425 to float
  %430 = bitcast i32 %426 to float
  %431 = bitcast i32 %427 to float
  %432 = fmul fast float %408, %73
  %433 = fmul fast float %418, %73
  %434 = fmul fast float %428, %73
  %435 = fmul fast float %409, %73
  %436 = fmul fast float %419, %73
  %437 = fmul fast float %429, %73
  %438 = fmul fast float %410, %73
  %439 = fmul fast float %420, %73
  %440 = fmul fast float %430, %73
  %441 = fmul fast float %411, %73
  %442 = fmul fast float %421, %73
  %443 = fmul fast float %431, %73
  %444 = fadd fast float %432, %390
  %445 = fadd fast float %433, %391
  %446 = fadd fast float %434, %392
  %447 = fadd fast float %435, %393
  %448 = fadd fast float %436, %394
  %449 = fadd fast float %437, %395
  %450 = fadd fast float %438, %396
  %451 = fadd fast float %439, %397
  %452 = fadd fast float %440, %398
  %453 = fadd fast float %441, %399
  %454 = fadd fast float %442, %400
  %455 = fadd fast float %443, %401
  %456 = add i32 %174, %7
  %457 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %456, i32 undef)  ; BufferLoad(srv,index,wot)
  %458 = extractvalue %dx.types.ResRet.i32 %457, 0
  %459 = extractvalue %dx.types.ResRet.i32 %457, 1
  %460 = extractvalue %dx.types.ResRet.i32 %457, 2
  %461 = extractvalue %dx.types.ResRet.i32 %457, 3
  %462 = bitcast i32 %458 to float
  %463 = bitcast i32 %459 to float
  %464 = bitcast i32 %460 to float
  %465 = bitcast i32 %461 to float
  %466 = add i32 %456, 16
  %467 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %466, i32 undef)  ; BufferLoad(srv,index,wot)
  %468 = extractvalue %dx.types.ResRet.i32 %467, 0
  %469 = extractvalue %dx.types.ResRet.i32 %467, 1
  %470 = extractvalue %dx.types.ResRet.i32 %467, 2
  %471 = extractvalue %dx.types.ResRet.i32 %467, 3
  %472 = bitcast i32 %468 to float
  %473 = bitcast i32 %469 to float
  %474 = bitcast i32 %470 to float
  %475 = bitcast i32 %471 to float
  %476 = add i32 %456, 32
  %477 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %476, i32 undef)  ; BufferLoad(srv,index,wot)
  %478 = extractvalue %dx.types.ResRet.i32 %477, 0
  %479 = extractvalue %dx.types.ResRet.i32 %477, 1
  %480 = extractvalue %dx.types.ResRet.i32 %477, 2
  %481 = extractvalue %dx.types.ResRet.i32 %477, 3
  %482 = bitcast i32 %478 to float
  %483 = bitcast i32 %479 to float
  %484 = bitcast i32 %480 to float
  %485 = bitcast i32 %481 to float
  %486 = fmul fast float %462, %74
  %487 = fmul fast float %472, %74
  %488 = fmul fast float %482, %74
  %489 = fmul fast float %463, %74
  %490 = fmul fast float %473, %74
  %491 = fmul fast float %483, %74
  %492 = fmul fast float %464, %74
  %493 = fmul fast float %474, %74
  %494 = fmul fast float %484, %74
  %495 = fmul fast float %465, %74
  %496 = fmul fast float %475, %74
  %497 = fmul fast float %485, %74
  %498 = fadd fast float %444, %486
  %499 = fadd fast float %445, %487
  %500 = fadd fast float %446, %488
  %501 = fadd fast float %447, %489
  %502 = fadd fast float %448, %490
  %503 = fadd fast float %449, %491
  %504 = fadd fast float %450, %492
  %505 = fadd fast float %451, %493
  %506 = fadd fast float %452, %494
  %507 = fadd fast float %453, %495
  %508 = fadd fast float %454, %496
  %509 = fadd fast float %455, %497
  %510 = add i32 %229, %7
  %511 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %510, i32 undef)  ; BufferLoad(srv,index,wot)
  %512 = extractvalue %dx.types.ResRet.i32 %511, 0
  %513 = extractvalue %dx.types.ResRet.i32 %511, 1
  %514 = extractvalue %dx.types.ResRet.i32 %511, 2
  %515 = extractvalue %dx.types.ResRet.i32 %511, 3
  %516 = bitcast i32 %512 to float
  %517 = bitcast i32 %513 to float
  %518 = bitcast i32 %514 to float
  %519 = bitcast i32 %515 to float
  %520 = add i32 %510, 16
  %521 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %520, i32 undef)  ; BufferLoad(srv,index,wot)
  %522 = extractvalue %dx.types.ResRet.i32 %521, 0
  %523 = extractvalue %dx.types.ResRet.i32 %521, 1
  %524 = extractvalue %dx.types.ResRet.i32 %521, 2
  %525 = extractvalue %dx.types.ResRet.i32 %521, 3
  %526 = bitcast i32 %522 to float
  %527 = bitcast i32 %523 to float
  %528 = bitcast i32 %524 to float
  %529 = bitcast i32 %525 to float
  %530 = add i32 %510, 32
  %531 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %530, i32 undef)  ; BufferLoad(srv,index,wot)
  %532 = extractvalue %dx.types.ResRet.i32 %531, 0
  %533 = extractvalue %dx.types.ResRet.i32 %531, 1
  %534 = extractvalue %dx.types.ResRet.i32 %531, 2
  %535 = extractvalue %dx.types.ResRet.i32 %531, 3
  %536 = bitcast i32 %532 to float
  %537 = bitcast i32 %533 to float
  %538 = bitcast i32 %534 to float
  %539 = bitcast i32 %535 to float
  %540 = fmul fast float %516, %75
  %541 = fmul fast float %526, %75
  %542 = fmul fast float %536, %75
  %543 = fmul fast float %517, %75
  %544 = fmul fast float %527, %75
  %545 = fmul fast float %537, %75
  %546 = fmul fast float %518, %75
  %547 = fmul fast float %528, %75
  %548 = fmul fast float %538, %75
  %549 = fmul fast float %519, %75
  %550 = fmul fast float %529, %75
  %551 = fmul fast float %539, %75
  %552 = fadd fast float %498, %540
  %553 = fadd fast float %499, %541
  %554 = fadd fast float %500, %542
  %555 = fadd fast float %501, %543
  %556 = fadd fast float %502, %544
  %557 = fadd fast float %503, %545
  %558 = fadd fast float %504, %546
  %559 = fadd fast float %505, %547
  %560 = fadd fast float %506, %548
  %561 = fadd fast float %507, %549
  %562 = fadd fast float %508, %550
  %563 = fadd fast float %509, %551
  %564 = fmul fast float %552, %67
  %565 = call float @dx.op.tertiary.f32(i32 46, float %68, float %555, float %564)  ; FMad(a,b,c)
  %566 = call float @dx.op.tertiary.f32(i32 46, float %69, float %558, float %565)  ; FMad(a,b,c)
  %567 = fadd fast float %561, %566
  %568 = fmul fast float %553, %67
  %569 = call float @dx.op.tertiary.f32(i32 46, float %68, float %556, float %568)  ; FMad(a,b,c)
  %570 = call float @dx.op.tertiary.f32(i32 46, float %69, float %559, float %569)  ; FMad(a,b,c)
  %571 = fadd fast float %562, %570
  %572 = fmul fast float %554, %67
  %573 = call float @dx.op.tertiary.f32(i32 46, float %68, float %557, float %572)  ; FMad(a,b,c)
  %574 = call float @dx.op.tertiary.f32(i32 46, float %69, float %560, float %573)  ; FMad(a,b,c)
  %575 = fadd fast float %563, %574
  %576 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %577 = extractvalue %dx.types.CBufRet.f32 %576, 0
  %578 = extractvalue %dx.types.CBufRet.f32 %576, 1
  %579 = extractvalue %dx.types.CBufRet.f32 %576, 2
  %580 = extractvalue %dx.types.CBufRet.f32 %576, 3
  %581 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %582 = extractvalue %dx.types.CBufRet.f32 %581, 0
  %583 = extractvalue %dx.types.CBufRet.f32 %581, 1
  %584 = extractvalue %dx.types.CBufRet.f32 %581, 2
  %585 = extractvalue %dx.types.CBufRet.f32 %581, 3
  %586 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %587 = extractvalue %dx.types.CBufRet.f32 %586, 0
  %588 = extractvalue %dx.types.CBufRet.f32 %586, 1
  %589 = extractvalue %dx.types.CBufRet.f32 %586, 2
  %590 = extractvalue %dx.types.CBufRet.f32 %586, 3
  %591 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %592 = extractvalue %dx.types.CBufRet.i32 %591, 0
  %593 = extractvalue %dx.types.CBufRet.i32 %591, 1
  %594 = extractvalue %dx.types.CBufRet.i32 %591, 2
  %595 = bitcast float %580 to i32
  %596 = bitcast float %585 to i32
  %597 = bitcast float %590 to i32
  %598 = sub i32 %595, %592
  %599 = sub i32 %596, %593
  %600 = sub i32 %597, %594
  %601 = sitofp i32 %598 to float
  %602 = sitofp i32 %599 to float
  %603 = sitofp i32 %600 to float
  %604 = fmul fast float %601, 0x3EE0000000000000
  %605 = fmul fast float %602, 0x3EE0000000000000
  %606 = fmul fast float %603, 0x3EE0000000000000
  %607 = fmul fast float %577, %567
  %608 = call float @dx.op.tertiary.f32(i32 46, float %578, float %571, float %607)  ; FMad(a,b,c)
  %609 = call float @dx.op.tertiary.f32(i32 46, float %579, float %575, float %608)  ; FMad(a,b,c)
  %610 = fadd fast float %604, %609
  %611 = fmul fast float %582, %567
  %612 = call float @dx.op.tertiary.f32(i32 46, float %583, float %571, float %611)  ; FMad(a,b,c)
  %613 = call float @dx.op.tertiary.f32(i32 46, float %584, float %575, float %612)  ; FMad(a,b,c)
  %614 = fadd fast float %605, %613
  %615 = fmul fast float %587, %567
  %616 = call float @dx.op.tertiary.f32(i32 46, float %588, float %571, float %615)  ; FMad(a,b,c)
  %617 = call float @dx.op.tertiary.f32(i32 46, float %589, float %575, float %616)  ; FMad(a,b,c)
  %618 = fadd fast float %617, %606
  %619 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %620 = extractvalue %dx.types.CBufRet.f32 %619, 0
  %621 = extractvalue %dx.types.CBufRet.f32 %619, 1
  %622 = extractvalue %dx.types.CBufRet.f32 %619, 2
  %623 = extractvalue %dx.types.CBufRet.f32 %619, 3
  %624 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %625 = extractvalue %dx.types.CBufRet.f32 %624, 0
  %626 = extractvalue %dx.types.CBufRet.f32 %624, 1
  %627 = extractvalue %dx.types.CBufRet.f32 %624, 2
  %628 = extractvalue %dx.types.CBufRet.f32 %624, 3
  %629 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 18)  ; CBufferLoadLegacy(handle,regIndex)
  %630 = extractvalue %dx.types.CBufRet.f32 %629, 0
  %631 = extractvalue %dx.types.CBufRet.f32 %629, 1
  %632 = extractvalue %dx.types.CBufRet.f32 %629, 2
  %633 = extractvalue %dx.types.CBufRet.f32 %629, 3
  %634 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %635 = extractvalue %dx.types.CBufRet.f32 %634, 0
  %636 = extractvalue %dx.types.CBufRet.f32 %634, 1
  %637 = extractvalue %dx.types.CBufRet.f32 %634, 2
  %638 = extractvalue %dx.types.CBufRet.f32 %634, 3
  %639 = fmul fast float %620, %610
  %640 = call float @dx.op.tertiary.f32(i32 46, float %614, float %621, float %639)  ; FMad(a,b,c)
  %641 = call float @dx.op.tertiary.f32(i32 46, float %618, float %622, float %640)  ; FMad(a,b,c)
  %642 = fadd fast float %641, %623
  %643 = fmul fast float %625, %610
  %644 = call float @dx.op.tertiary.f32(i32 46, float %614, float %626, float %643)  ; FMad(a,b,c)
  %645 = call float @dx.op.tertiary.f32(i32 46, float %618, float %627, float %644)  ; FMad(a,b,c)
  %646 = fadd fast float %645, %628
  %647 = fmul fast float %630, %610
  %648 = call float @dx.op.tertiary.f32(i32 46, float %614, float %631, float %647)  ; FMad(a,b,c)
  %649 = call float @dx.op.tertiary.f32(i32 46, float %618, float %632, float %648)  ; FMad(a,b,c)
  %650 = fadd fast float %649, %633
  %651 = fmul fast float %635, %610
  %652 = call float @dx.op.tertiary.f32(i32 46, float %614, float %636, float %651)  ; FMad(a,b,c)
  %653 = call float @dx.op.tertiary.f32(i32 46, float %618, float %637, float %652)  ; FMad(a,b,c)
  %654 = fadd fast float %653, %638
  %655 = fmul fast float %272, %28
  %656 = call float @dx.op.tertiary.f32(i32 46, float %273, float %29, float %655)  ; FMad(a,b,c)
  %657 = call float @dx.op.tertiary.f32(i32 46, float %274, float %30, float %656)  ; FMad(a,b,c)
  %658 = fmul fast float %272, %32
  %659 = call float @dx.op.tertiary.f32(i32 46, float %273, float %33, float %658)  ; FMad(a,b,c)
  %660 = call float @dx.op.tertiary.f32(i32 46, float %274, float %34, float %659)  ; FMad(a,b,c)
  %661 = fmul fast float %272, %36
  %662 = call float @dx.op.tertiary.f32(i32 46, float %273, float %37, float %661)  ; FMad(a,b,c)
  %663 = call float @dx.op.tertiary.f32(i32 46, float %274, float %38, float %662)  ; FMad(a,b,c)
  %664 = fmul fast float %275, %28
  %665 = call float @dx.op.tertiary.f32(i32 46, float %276, float %29, float %664)  ; FMad(a,b,c)
  %666 = call float @dx.op.tertiary.f32(i32 46, float %277, float %30, float %665)  ; FMad(a,b,c)
  %667 = fmul fast float %275, %32
  %668 = call float @dx.op.tertiary.f32(i32 46, float %276, float %33, float %667)  ; FMad(a,b,c)
  %669 = call float @dx.op.tertiary.f32(i32 46, float %277, float %34, float %668)  ; FMad(a,b,c)
  %670 = fmul fast float %275, %36
  %671 = call float @dx.op.tertiary.f32(i32 46, float %276, float %37, float %670)  ; FMad(a,b,c)
  %672 = call float @dx.op.tertiary.f32(i32 46, float %277, float %38, float %671)  ; FMad(a,b,c)
  %673 = fmul fast float %278, %28
  %674 = call float @dx.op.tertiary.f32(i32 46, float %279, float %29, float %673)  ; FMad(a,b,c)
  %675 = call float @dx.op.tertiary.f32(i32 46, float %280, float %30, float %674)  ; FMad(a,b,c)
  %676 = fmul fast float %278, %32
  %677 = call float @dx.op.tertiary.f32(i32 46, float %279, float %33, float %676)  ; FMad(a,b,c)
  %678 = call float @dx.op.tertiary.f32(i32 46, float %280, float %34, float %677)  ; FMad(a,b,c)
  %679 = fmul fast float %278, %36
  %680 = call float @dx.op.tertiary.f32(i32 46, float %279, float %37, float %679)  ; FMad(a,b,c)
  %681 = call float @dx.op.tertiary.f32(i32 46, float %280, float %38, float %680)  ; FMad(a,b,c)
  %682 = fmul fast float %12, 2.000000e+00
  %683 = fmul fast float %13, 2.000000e+00
  %684 = fmul fast float %14, 2.000000e+00
  %685 = fadd fast float %682, -1.000000e+00
  %686 = fadd fast float %683, -1.000000e+00
  %687 = fadd fast float %684, -1.000000e+00
  %688 = fmul fast float %8, 2.000000e+00
  %689 = fmul fast float %9, 2.000000e+00
  %690 = fmul fast float %10, 2.000000e+00
  %691 = fadd fast float %688, -1.000000e+00
  %692 = fadd fast float %689, -1.000000e+00
  %693 = fadd fast float %690, -1.000000e+00
  %694 = fmul fast float %11, 2.000000e+00
  %695 = fadd fast float %694, -1.000000e+00
  %696 = fmul fast float %686, %693
  %697 = fmul fast float %687, %692
  %698 = fsub fast float %696, %697
  %699 = fmul fast float %687, %691
  %700 = fmul fast float %685, %693
  %701 = fsub fast float %699, %700
  %702 = fmul fast float %685, %692
  %703 = fmul fast float %686, %691
  %704 = fsub fast float %702, %703
  %705 = fmul fast float %698, %695
  %706 = fmul fast float %701, %695
  %707 = fmul fast float %704, %695
  %708 = fmul fast float %657, %691
  %709 = call float @dx.op.tertiary.f32(i32 46, float %692, float %666, float %708)  ; FMad(a,b,c)
  %710 = call float @dx.op.tertiary.f32(i32 46, float %693, float %675, float %709)  ; FMad(a,b,c)
  %711 = fmul fast float %660, %691
  %712 = call float @dx.op.tertiary.f32(i32 46, float %692, float %669, float %711)  ; FMad(a,b,c)
  %713 = call float @dx.op.tertiary.f32(i32 46, float %693, float %678, float %712)  ; FMad(a,b,c)
  %714 = fmul fast float %663, %691
  %715 = call float @dx.op.tertiary.f32(i32 46, float %692, float %672, float %714)  ; FMad(a,b,c)
  %716 = call float @dx.op.tertiary.f32(i32 46, float %693, float %681, float %715)  ; FMad(a,b,c)
  %717 = fmul fast float %657, %705
  %718 = call float @dx.op.tertiary.f32(i32 46, float %706, float %666, float %717)  ; FMad(a,b,c)
  %719 = call float @dx.op.tertiary.f32(i32 46, float %707, float %675, float %718)  ; FMad(a,b,c)
  %720 = fmul fast float %660, %705
  %721 = call float @dx.op.tertiary.f32(i32 46, float %706, float %669, float %720)  ; FMad(a,b,c)
  %722 = call float @dx.op.tertiary.f32(i32 46, float %707, float %678, float %721)  ; FMad(a,b,c)
  %723 = fmul fast float %663, %705
  %724 = call float @dx.op.tertiary.f32(i32 46, float %706, float %672, float %723)  ; FMad(a,b,c)
  %725 = call float @dx.op.tertiary.f32(i32 46, float %707, float %681, float %724)  ; FMad(a,b,c)
  %726 = fmul fast float %657, %685
  %727 = call float @dx.op.tertiary.f32(i32 46, float %686, float %666, float %726)  ; FMad(a,b,c)
  %728 = call float @dx.op.tertiary.f32(i32 46, float %687, float %675, float %727)  ; FMad(a,b,c)
  %729 = fmul fast float %660, %685
  %730 = call float @dx.op.tertiary.f32(i32 46, float %686, float %669, float %729)  ; FMad(a,b,c)
  %731 = call float @dx.op.tertiary.f32(i32 46, float %687, float %678, float %730)  ; FMad(a,b,c)
  %732 = fmul fast float %663, %685
  %733 = call float @dx.op.tertiary.f32(i32 46, float %686, float %672, float %732)  ; FMad(a,b,c)
  %734 = call float @dx.op.tertiary.f32(i32 46, float %687, float %681, float %733)  ; FMad(a,b,c)
  %735 = call float @dx.op.dot3.f32(i32 55, float %728, float %731, float %734, float %728, float %731, float %734)  ; Dot3(ax,ay,az,bx,by,bz)
  %736 = call float @dx.op.unary.f32(i32 25, float %735)  ; Rsqrt(value)
  %737 = fmul fast float %736, %728
  %738 = fmul fast float %736, %731
  %739 = fmul fast float %736, %734
  %740 = call float @dx.op.dot3.f32(i32 55, float %719, float %722, float %725, float %719, float %722, float %725)  ; Dot3(ax,ay,az,bx,by,bz)
  %741 = call float @dx.op.unary.f32(i32 25, float %740)  ; Rsqrt(value)
  %742 = fmul fast float %741, %719
  %743 = fmul fast float %741, %722
  %744 = fmul fast float %741, %725
  %745 = call float @dx.op.dot3.f32(i32 55, float %710, float %713, float %716, float %710, float %713, float %716)  ; Dot3(ax,ay,az,bx,by,bz)
  %746 = call float @dx.op.unary.f32(i32 25, float %745)  ; Rsqrt(value)
  %747 = fmul fast float %746, %710
  %748 = fmul fast float %746, %713
  %749 = fmul fast float %746, %716
  %750 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %751 = extractvalue %dx.types.CBufRet.f32 %750, 0
  %752 = extractvalue %dx.types.CBufRet.f32 %750, 1
  %753 = fmul fast float %751, %359
  %754 = fmul fast float %752, %359
  %755 = fsub fast float %347, %753
  %756 = fsub fast float %351, %754
  %757 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %758 = extractvalue %dx.types.CBufRet.f32 %757, 0
  %759 = extractvalue %dx.types.CBufRet.f32 %757, 1
  %760 = extractvalue %dx.types.CBufRet.f32 %757, 2
  %761 = extractvalue %dx.types.CBufRet.f32 %757, 3
  %762 = call float @dx.op.dot4.f32(i32 56, float %758, float %759, float %760, float %761, float %321, float %322, float %323, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %347)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %351)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %355)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %359)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %15)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %16)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %737)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %738)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %739)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %742)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %743)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float %744)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %747)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %748)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %749)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %316)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %755)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float %756)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float %355)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float %359)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 0, float %642)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 1, float %646)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 2, float %650)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 3, float %654)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 0, float %762)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!11}
!dx.entryPoints = !{!12}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{!5, null, !7, null}
!5 = !{!6}
!6 = !{i32 0, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 10, i32 1, i32 11, i32 0, null}
!7 = !{!8, !9, !10}
!8 = !{i32 0, %MaterialModifiersConsts* undef, !"", i32 0, i32 7, i32 1, i32 496, null}
!9 = !{i32 1, %hostlayout.CameraShaderConsts* undef, !"", i32 0, i32 1, i32 1, i32 848, null}
!10 = !{i32 2, %hostlayout.FrequentVertexConsts* undef, !"", i32 0, i32 5, i32 1, i32 112, null}
!11 = !{[51 x i32] [i32 49, i32 25, i32 33521679, i32 33521679, i32 33521679, i32 0, i32 33554383, i32 33554383, i32 33554383, i32 33554383, i32 33554383, i32 33554383, i32 33554383, i32 33554383, i32 16, i32 32, i32 0, i32 0, i32 4032, i32 4032, i32 4032, i32 0, i32 32256, i32 32256, i32 32256, i32 3584, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 17825743, i32 17825743, i32 17825743, i32 17793039, i32 17825743, i32 17825743, i32 17825743, i32 17793039, i32 17825743, i32 17825743, i32 17825743, i32 17793039, i32 17825743, i32 33554383, i32 15728640, i32 0, i32 0]}
!12 = !{void ()* @vs_main_, !"vs_main_", !13, !4, !44}
!13 = !{!14, !32, null}
!14 = !{!15, !18, !20, !21, !23, !24, !25, !26, !28, !30, !31}
!15 = !{i32 0, !"POSITION", i8 9, i8 0, !16, i8 0, i32 1, i8 3, i32 0, i8 0, !17}
!16 = !{i32 0}
!17 = !{i32 3, i32 7}
!18 = !{i32 1, !"BLENDINDICES", i8 5, i8 0, !16, i8 0, i32 1, i8 4, i32 1, i8 0, !19}
!19 = !{i32 3, i32 15}
!20 = !{i32 2, !"BLENDWEIGHT", i8 9, i8 0, !16, i8 0, i32 1, i8 4, i32 2, i8 0, !19}
!21 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !16, i8 0, i32 1, i8 2, i32 3, i8 0, !22}
!22 = !{i32 3, i32 3}
!23 = !{i32 4, !"NORMAL", i8 9, i8 0, !16, i8 0, i32 1, i8 3, i32 4, i8 0, !17}
!24 = !{i32 5, !"TANGENT", i8 9, i8 0, !16, i8 0, i32 1, i8 4, i32 5, i8 0, !19}
!25 = !{i32 6, !"COLOR", i8 9, i8 0, !16, i8 0, i32 1, i8 4, i32 6, i8 0, null}
!26 = !{i32 7, !"TEXCOORD", i8 9, i8 0, !27, i8 0, i32 1, i8 2, i32 7, i8 0, null}
!27 = !{i32 1}
!28 = !{i32 8, !"INSTANCE_TRANSFORM", i8 9, i8 0, !29, i8 0, i32 3, i8 4, i32 8, i8 0, !19}
!29 = !{i32 0, i32 1, i32 2}
!30 = !{i32 9, !"INSTANCE_SKINNING_DATA", i8 5, i8 0, !16, i8 0, i32 1, i8 4, i32 11, i8 0, !17}
!31 = !{i32 10, !"SV_VertexID", i8 5, i8 1, !16, i8 0, i32 1, i8 1, i32 12, i8 0, null}
!32 = !{!33, !34, !35, !36, !38, !40, !42}
!33 = !{i32 0, !"SV_Position", i8 9, i8 3, !16, i8 4, i32 1, i8 4, i32 0, i8 0, !19}
!34 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !16, i8 2, i32 1, i8 4, i32 1, i8 0, !19}
!35 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !27, i8 2, i32 1, i8 4, i32 2, i8 0, !19}
!36 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !37, i8 2, i32 1, i8 4, i32 3, i8 0, !19}
!37 = !{i32 2}
!38 = !{i32 4, !"TEXCOORD", i8 9, i8 0, !39, i8 2, i32 1, i8 4, i32 4, i8 0, !19}
!39 = !{i32 3}
!40 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !41, i8 2, i32 1, i8 4, i32 5, i8 0, !19}
!41 = !{i32 4}
!42 = !{i32 6, !"SV_ClipDistance", i8 9, i8 6, !16, i8 2, i32 1, i8 1, i32 6, i8 0, !43}
!43 = !{i32 3, i32 1}
!44 = !{i32 0, i64 16}
 