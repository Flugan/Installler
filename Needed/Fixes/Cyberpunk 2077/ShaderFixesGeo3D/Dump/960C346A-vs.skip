;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; POSITION                 0   xyz         0     NONE   float   xyz 
; BLENDINDICES             0   xyzw        1     NONE    uint   xyzw
; BLENDWEIGHT              0   xyzw        2     NONE   float   xyzw
; BLENDINDICES             1   xyzw        3     NONE    uint   xyzw
; BLENDWEIGHT              1   xyzw        4     NONE   float   xyzw
; TEXCOORD                 0   xy          5     NONE   float   xy  
; NORMAL                   0   xyz         6     NONE   float   xyz 
; TANGENT                  0   xyzw        7     NONE   float   xyzw
; COLOR                    0   xyzw        8     NONE   float   xyzw
; TEXCOORD                 1   xy          9     NONE   float       
; INSTANCE_TRANSFORM       0   xyzw       10     NONE   float   xyzw
; INSTANCE_TRANSFORM       1   xyzw       11     NONE   float   xyzw
; INSTANCE_TRANSFORM       2   xyzw       12     NONE   float   xyzw
; INSTANCE_SKINNING_DATA     0   xyzw       13     NONE    uint   xyz 
; SV_VertexID              0   x          14   VERTID    uint       
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; TEXCOORD                 0   xyzw        1     NONE   float   xyzw
; TEXCOORD                 1   xyzw        2     NONE   float   xyzw
; TEXCOORD                 2   xyzw        3     NONE   float   xyzw
; TEXCOORD                 3   xyzw        4     NONE   float   xyzw
; TEXCOORD                 4   xyzw        5     NONE   float   xyzw
; TEXCOORD                 5   xyzw        6     NONE   float   xyzw
; TEXCOORD                 6   xyzw        7     NONE   float   xyzw
; SV_ClipDistance          0   x           8  CLIPDST   float   x   
;
; shader hash: 0be2619a6c91db6b3b75a1ed51f8d6b1
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; POSITION                 0                              
; BLENDINDICES             0                              
; BLENDWEIGHT              0                              
; BLENDINDICES             1                              
; BLENDWEIGHT              1                              
; TEXCOORD                 0                              
; NORMAL                   0                              
; TANGENT                  0                              
; COLOR                    0                              
; TEXCOORD                 1                              
; INSTANCE_TRANSFORM       0                              
; INSTANCE_SKINNING_DATA     0                              
; SV_VertexID              0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; TEXCOORD                 3                 linear       
; TEXCOORD                 4                 linear       
; TEXCOORD                 5                 linear       
; TEXCOORD                 6                 linear       
; SV_ClipDistance          0                 linear       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [496 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [848 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [112 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb7     1
;                                   cbuffer      NA          NA     CB1            cb1     1
;                                   cbuffer      NA          NA     CB2            cb5     1
;                                   texture    byte         r/o      T0            t10     1
;
;
; ViewId state:
;
; Number of inputs: 57, outputs: 33
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 1 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 2 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 3 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 4 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 5 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 6 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 7 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 28, 29, 30, 31, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 8 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 28, 29, 30, 31, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 9 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 28, 29, 30, 31, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 10 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 11 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 12 depends on inputs: { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53 }
;   output 13 depends on inputs: { 20 }
;   output 14 depends on inputs: { 21 }
;   output 15 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 52, 53 }
;   output 16 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 44, 45, 46, 47, 52, 53 }
;   output 17 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 48, 49, 50, 51, 52, 53 }
;   output 18 depends on inputs: { 32 }
;   output 19 depends on inputs: { 33 }
;   output 20 depends on inputs: { 34 }
;   output 21 depends on inputs: { 35 }
;   output 22 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 23 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 24 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 25 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 26 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;   output 27 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 53, 54 }
;   output 28 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 53, 54 }
;   output 29 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 53, 54 }
;   output 30 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 53, 54 }
;   output 32 depends on inputs: { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%struct.ByteAddressBuffer = type { i32 }
%MaterialModifiersConsts = type { [31 x <4 x float>] }
%hostlayout.CameraShaderConsts = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, i32, i32, <2 x i32>, float, float }
%hostlayout.FrequentVertexConsts = type { [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float> }

define void @vs_main_() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 10, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 2, i32 5, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 7, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call i32 @dx.op.loadInput.i32(i32 4, i32 11, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call i32 @dx.op.loadInput.i32(i32 4, i32 11, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call i32 @dx.op.loadInput.i32(i32 4, i32 11, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 8, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %20 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %21 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %22 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %23 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %24 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %25 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %26 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %27 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %28 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %29 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %30 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %31 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %32 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %33 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %34 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %35 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %36 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %37 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %38 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %39 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %40 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %41 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %42 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %43 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %44 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %45 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %46 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %47 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 1, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %48 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %49 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %50 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %51 = call float @dx.op.loadInput.f32(i32 4, i32 10, i32 2, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %52 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %53 = extractvalue %dx.types.CBufRet.i32 %52, 0
  %54 = extractvalue %dx.types.CBufRet.i32 %52, 1
  %55 = extractvalue %dx.types.CBufRet.i32 %52, 2
  %56 = bitcast float %43 to i32
  %57 = bitcast float %47 to i32
  %58 = bitcast float %51 to i32
  %59 = sub i32 %56, %53
  %60 = sub i32 %57, %54
  %61 = sub i32 %58, %55
  %62 = sitofp i32 %59 to float
  %63 = sitofp i32 %60 to float
  %64 = sitofp i32 %61 to float
  %65 = fmul fast float %62, 0x3EE0000000000000
  %66 = fmul fast float %63, 0x3EE0000000000000
  %67 = fmul fast float %64, 0x3EE0000000000000
  %68 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %69 = extractvalue %dx.types.CBufRet.f32 %68, 0
  %70 = extractvalue %dx.types.CBufRet.f32 %68, 1
  %71 = extractvalue %dx.types.CBufRet.f32 %68, 2
  %72 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %73 = extractvalue %dx.types.CBufRet.f32 %72, 0
  %74 = extractvalue %dx.types.CBufRet.f32 %72, 1
  %75 = extractvalue %dx.types.CBufRet.f32 %72, 2
  %76 = fmul fast float %73, %37
  %77 = fmul fast float %74, %38
  %78 = fmul fast float %75, %39
  %79 = fadd fast float %76, %69
  %80 = fadd fast float %77, %70
  %81 = fadd fast float %78, %71
  %82 = call float @dx.op.dot4.f32(i32 56, float %29, float %30, float %31, float %32, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %83 = call float @dx.op.dot4.f32(i32 56, float %21, float %22, float %23, float %24, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %84 = fadd fast float %83, %82
  %85 = call float @dx.op.binary.f32(i32 35, float 0x3EE4F8B580000000, float %84)  ; FMax(a,b)
  %86 = fdiv fast float %29, %85
  %87 = fdiv fast float %30, %85
  %88 = fdiv fast float %31, %85
  %89 = fdiv fast float %32, %85
  %90 = fdiv fast float %21, %85
  %91 = fdiv fast float %22, %85
  %92 = fdiv fast float %23, %85
  %93 = fdiv fast float %24, %85
  %94 = mul i32 %33, %6
  %95 = add i32 %94, %5
  %96 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %95, i32 undef)  ; BufferLoad(srv,index,wot)
  %97 = extractvalue %dx.types.ResRet.i32 %96, 0
  %98 = extractvalue %dx.types.ResRet.i32 %96, 1
  %99 = extractvalue %dx.types.ResRet.i32 %96, 2
  %100 = extractvalue %dx.types.ResRet.i32 %96, 3
  %101 = bitcast i32 %97 to float
  %102 = bitcast i32 %98 to float
  %103 = bitcast i32 %99 to float
  %104 = bitcast i32 %100 to float
  %105 = add i32 %95, 16
  %106 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %105, i32 undef)  ; BufferLoad(srv,index,wot)
  %107 = extractvalue %dx.types.ResRet.i32 %106, 0
  %108 = extractvalue %dx.types.ResRet.i32 %106, 1
  %109 = extractvalue %dx.types.ResRet.i32 %106, 2
  %110 = extractvalue %dx.types.ResRet.i32 %106, 3
  %111 = bitcast i32 %107 to float
  %112 = bitcast i32 %108 to float
  %113 = bitcast i32 %109 to float
  %114 = bitcast i32 %110 to float
  %115 = add i32 %95, 32
  %116 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %115, i32 undef)  ; BufferLoad(srv,index,wot)
  %117 = extractvalue %dx.types.ResRet.i32 %116, 0
  %118 = extractvalue %dx.types.ResRet.i32 %116, 1
  %119 = extractvalue %dx.types.ResRet.i32 %116, 2
  %120 = extractvalue %dx.types.ResRet.i32 %116, 3
  %121 = bitcast i32 %117 to float
  %122 = bitcast i32 %118 to float
  %123 = bitcast i32 %119 to float
  %124 = bitcast i32 %120 to float
  %125 = mul i32 %25, %6
  %126 = add i32 %125, %5
  %127 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %126, i32 undef)  ; BufferLoad(srv,index,wot)
  %128 = extractvalue %dx.types.ResRet.i32 %127, 0
  %129 = extractvalue %dx.types.ResRet.i32 %127, 1
  %130 = extractvalue %dx.types.ResRet.i32 %127, 2
  %131 = extractvalue %dx.types.ResRet.i32 %127, 3
  %132 = bitcast i32 %128 to float
  %133 = bitcast i32 %129 to float
  %134 = bitcast i32 %130 to float
  %135 = bitcast i32 %131 to float
  %136 = add i32 %126, 16
  %137 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %136, i32 undef)  ; BufferLoad(srv,index,wot)
  %138 = extractvalue %dx.types.ResRet.i32 %137, 0
  %139 = extractvalue %dx.types.ResRet.i32 %137, 1
  %140 = extractvalue %dx.types.ResRet.i32 %137, 2
  %141 = extractvalue %dx.types.ResRet.i32 %137, 3
  %142 = bitcast i32 %138 to float
  %143 = bitcast i32 %139 to float
  %144 = bitcast i32 %140 to float
  %145 = bitcast i32 %141 to float
  %146 = add i32 %126, 32
  %147 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %146, i32 undef)  ; BufferLoad(srv,index,wot)
  %148 = extractvalue %dx.types.ResRet.i32 %147, 0
  %149 = extractvalue %dx.types.ResRet.i32 %147, 1
  %150 = extractvalue %dx.types.ResRet.i32 %147, 2
  %151 = extractvalue %dx.types.ResRet.i32 %147, 3
  %152 = bitcast i32 %148 to float
  %153 = bitcast i32 %149 to float
  %154 = bitcast i32 %150 to float
  %155 = bitcast i32 %151 to float
  %156 = fmul fast float %101, %86
  %157 = fmul fast float %111, %86
  %158 = fmul fast float %121, %86
  %159 = fmul fast float %102, %86
  %160 = fmul fast float %112, %86
  %161 = fmul fast float %122, %86
  %162 = fmul fast float %103, %86
  %163 = fmul fast float %113, %86
  %164 = fmul fast float %123, %86
  %165 = fmul fast float %104, %86
  %166 = fmul fast float %114, %86
  %167 = fmul fast float %124, %86
  %168 = fmul fast float %132, %90
  %169 = fmul fast float %142, %90
  %170 = fmul fast float %152, %90
  %171 = fmul fast float %133, %90
  %172 = fmul fast float %143, %90
  %173 = fmul fast float %153, %90
  %174 = fmul fast float %134, %90
  %175 = fmul fast float %144, %90
  %176 = fmul fast float %154, %90
  %177 = fmul fast float %135, %90
  %178 = fmul fast float %145, %90
  %179 = fmul fast float %155, %90
  %180 = fadd fast float %168, %156
  %181 = fadd fast float %169, %157
  %182 = fadd fast float %170, %158
  %183 = fadd fast float %171, %159
  %184 = fadd fast float %172, %160
  %185 = fadd fast float %173, %161
  %186 = fadd fast float %174, %162
  %187 = fadd fast float %175, %163
  %188 = fadd fast float %176, %164
  %189 = fadd fast float %177, %165
  %190 = fadd fast float %178, %166
  %191 = fadd fast float %179, %167
  %192 = mul i32 %34, %6
  %193 = add i32 %192, %5
  %194 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %193, i32 undef)  ; BufferLoad(srv,index,wot)
  %195 = extractvalue %dx.types.ResRet.i32 %194, 0
  %196 = extractvalue %dx.types.ResRet.i32 %194, 1
  %197 = extractvalue %dx.types.ResRet.i32 %194, 2
  %198 = extractvalue %dx.types.ResRet.i32 %194, 3
  %199 = bitcast i32 %195 to float
  %200 = bitcast i32 %196 to float
  %201 = bitcast i32 %197 to float
  %202 = bitcast i32 %198 to float
  %203 = add i32 %193, 16
  %204 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %203, i32 undef)  ; BufferLoad(srv,index,wot)
  %205 = extractvalue %dx.types.ResRet.i32 %204, 0
  %206 = extractvalue %dx.types.ResRet.i32 %204, 1
  %207 = extractvalue %dx.types.ResRet.i32 %204, 2
  %208 = extractvalue %dx.types.ResRet.i32 %204, 3
  %209 = bitcast i32 %205 to float
  %210 = bitcast i32 %206 to float
  %211 = bitcast i32 %207 to float
  %212 = bitcast i32 %208 to float
  %213 = add i32 %193, 32
  %214 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %213, i32 undef)  ; BufferLoad(srv,index,wot)
  %215 = extractvalue %dx.types.ResRet.i32 %214, 0
  %216 = extractvalue %dx.types.ResRet.i32 %214, 1
  %217 = extractvalue %dx.types.ResRet.i32 %214, 2
  %218 = extractvalue %dx.types.ResRet.i32 %214, 3
  %219 = bitcast i32 %215 to float
  %220 = bitcast i32 %216 to float
  %221 = bitcast i32 %217 to float
  %222 = bitcast i32 %218 to float
  %223 = mul i32 %26, %6
  %224 = add i32 %223, %5
  %225 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %224, i32 undef)  ; BufferLoad(srv,index,wot)
  %226 = extractvalue %dx.types.ResRet.i32 %225, 0
  %227 = extractvalue %dx.types.ResRet.i32 %225, 1
  %228 = extractvalue %dx.types.ResRet.i32 %225, 2
  %229 = extractvalue %dx.types.ResRet.i32 %225, 3
  %230 = bitcast i32 %226 to float
  %231 = bitcast i32 %227 to float
  %232 = bitcast i32 %228 to float
  %233 = bitcast i32 %229 to float
  %234 = add i32 %224, 16
  %235 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %234, i32 undef)  ; BufferLoad(srv,index,wot)
  %236 = extractvalue %dx.types.ResRet.i32 %235, 0
  %237 = extractvalue %dx.types.ResRet.i32 %235, 1
  %238 = extractvalue %dx.types.ResRet.i32 %235, 2
  %239 = extractvalue %dx.types.ResRet.i32 %235, 3
  %240 = bitcast i32 %236 to float
  %241 = bitcast i32 %237 to float
  %242 = bitcast i32 %238 to float
  %243 = bitcast i32 %239 to float
  %244 = add i32 %224, 32
  %245 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %244, i32 undef)  ; BufferLoad(srv,index,wot)
  %246 = extractvalue %dx.types.ResRet.i32 %245, 0
  %247 = extractvalue %dx.types.ResRet.i32 %245, 1
  %248 = extractvalue %dx.types.ResRet.i32 %245, 2
  %249 = extractvalue %dx.types.ResRet.i32 %245, 3
  %250 = bitcast i32 %246 to float
  %251 = bitcast i32 %247 to float
  %252 = bitcast i32 %248 to float
  %253 = bitcast i32 %249 to float
  %254 = fmul fast float %199, %87
  %255 = fmul fast float %209, %87
  %256 = fmul fast float %219, %87
  %257 = fmul fast float %200, %87
  %258 = fmul fast float %210, %87
  %259 = fmul fast float %220, %87
  %260 = fmul fast float %201, %87
  %261 = fmul fast float %211, %87
  %262 = fmul fast float %221, %87
  %263 = fmul fast float %202, %87
  %264 = fmul fast float %212, %87
  %265 = fmul fast float %222, %87
  %266 = fadd fast float %180, %254
  %267 = fadd fast float %181, %255
  %268 = fadd fast float %182, %256
  %269 = fadd fast float %183, %257
  %270 = fadd fast float %184, %258
  %271 = fadd fast float %185, %259
  %272 = fadd fast float %186, %260
  %273 = fadd fast float %187, %261
  %274 = fadd fast float %188, %262
  %275 = fadd fast float %189, %263
  %276 = fadd fast float %190, %264
  %277 = fadd fast float %191, %265
  %278 = fmul fast float %230, %91
  %279 = fmul fast float %240, %91
  %280 = fmul fast float %250, %91
  %281 = fmul fast float %231, %91
  %282 = fmul fast float %241, %91
  %283 = fmul fast float %251, %91
  %284 = fmul fast float %232, %91
  %285 = fmul fast float %242, %91
  %286 = fmul fast float %252, %91
  %287 = fmul fast float %233, %91
  %288 = fmul fast float %243, %91
  %289 = fmul fast float %253, %91
  %290 = fadd fast float %266, %278
  %291 = fadd fast float %267, %279
  %292 = fadd fast float %268, %280
  %293 = fadd fast float %269, %281
  %294 = fadd fast float %270, %282
  %295 = fadd fast float %271, %283
  %296 = fadd fast float %272, %284
  %297 = fadd fast float %273, %285
  %298 = fadd fast float %274, %286
  %299 = fadd fast float %275, %287
  %300 = fadd fast float %276, %288
  %301 = fadd fast float %277, %289
  %302 = mul i32 %35, %6
  %303 = add i32 %302, %5
  %304 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %303, i32 undef)  ; BufferLoad(srv,index,wot)
  %305 = extractvalue %dx.types.ResRet.i32 %304, 0
  %306 = extractvalue %dx.types.ResRet.i32 %304, 1
  %307 = extractvalue %dx.types.ResRet.i32 %304, 2
  %308 = extractvalue %dx.types.ResRet.i32 %304, 3
  %309 = bitcast i32 %305 to float
  %310 = bitcast i32 %306 to float
  %311 = bitcast i32 %307 to float
  %312 = bitcast i32 %308 to float
  %313 = add i32 %303, 16
  %314 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %313, i32 undef)  ; BufferLoad(srv,index,wot)
  %315 = extractvalue %dx.types.ResRet.i32 %314, 0
  %316 = extractvalue %dx.types.ResRet.i32 %314, 1
  %317 = extractvalue %dx.types.ResRet.i32 %314, 2
  %318 = extractvalue %dx.types.ResRet.i32 %314, 3
  %319 = bitcast i32 %315 to float
  %320 = bitcast i32 %316 to float
  %321 = bitcast i32 %317 to float
  %322 = bitcast i32 %318 to float
  %323 = add i32 %303, 32
  %324 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %323, i32 undef)  ; BufferLoad(srv,index,wot)
  %325 = extractvalue %dx.types.ResRet.i32 %324, 0
  %326 = extractvalue %dx.types.ResRet.i32 %324, 1
  %327 = extractvalue %dx.types.ResRet.i32 %324, 2
  %328 = extractvalue %dx.types.ResRet.i32 %324, 3
  %329 = bitcast i32 %325 to float
  %330 = bitcast i32 %326 to float
  %331 = bitcast i32 %327 to float
  %332 = bitcast i32 %328 to float
  %333 = mul i32 %27, %6
  %334 = add i32 %333, %5
  %335 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %334, i32 undef)  ; BufferLoad(srv,index,wot)
  %336 = extractvalue %dx.types.ResRet.i32 %335, 0
  %337 = extractvalue %dx.types.ResRet.i32 %335, 1
  %338 = extractvalue %dx.types.ResRet.i32 %335, 2
  %339 = extractvalue %dx.types.ResRet.i32 %335, 3
  %340 = bitcast i32 %336 to float
  %341 = bitcast i32 %337 to float
  %342 = bitcast i32 %338 to float
  %343 = bitcast i32 %339 to float
  %344 = add i32 %334, 16
  %345 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %344, i32 undef)  ; BufferLoad(srv,index,wot)
  %346 = extractvalue %dx.types.ResRet.i32 %345, 0
  %347 = extractvalue %dx.types.ResRet.i32 %345, 1
  %348 = extractvalue %dx.types.ResRet.i32 %345, 2
  %349 = extractvalue %dx.types.ResRet.i32 %345, 3
  %350 = bitcast i32 %346 to float
  %351 = bitcast i32 %347 to float
  %352 = bitcast i32 %348 to float
  %353 = bitcast i32 %349 to float
  %354 = add i32 %334, 32
  %355 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %354, i32 undef)  ; BufferLoad(srv,index,wot)
  %356 = extractvalue %dx.types.ResRet.i32 %355, 0
  %357 = extractvalue %dx.types.ResRet.i32 %355, 1
  %358 = extractvalue %dx.types.ResRet.i32 %355, 2
  %359 = extractvalue %dx.types.ResRet.i32 %355, 3
  %360 = bitcast i32 %356 to float
  %361 = bitcast i32 %357 to float
  %362 = bitcast i32 %358 to float
  %363 = bitcast i32 %359 to float
  %364 = fmul fast float %309, %88
  %365 = fmul fast float %319, %88
  %366 = fmul fast float %329, %88
  %367 = fmul fast float %310, %88
  %368 = fmul fast float %320, %88
  %369 = fmul fast float %330, %88
  %370 = fmul fast float %311, %88
  %371 = fmul fast float %321, %88
  %372 = fmul fast float %331, %88
  %373 = fmul fast float %312, %88
  %374 = fmul fast float %322, %88
  %375 = fmul fast float %332, %88
  %376 = fadd fast float %290, %364
  %377 = fadd fast float %291, %365
  %378 = fadd fast float %292, %366
  %379 = fadd fast float %293, %367
  %380 = fadd fast float %294, %368
  %381 = fadd fast float %295, %369
  %382 = fadd fast float %296, %370
  %383 = fadd fast float %297, %371
  %384 = fadd fast float %298, %372
  %385 = fadd fast float %299, %373
  %386 = fadd fast float %300, %374
  %387 = fadd fast float %301, %375
  %388 = fmul fast float %340, %92
  %389 = fmul fast float %350, %92
  %390 = fmul fast float %360, %92
  %391 = fmul fast float %341, %92
  %392 = fmul fast float %351, %92
  %393 = fmul fast float %361, %92
  %394 = fmul fast float %342, %92
  %395 = fmul fast float %352, %92
  %396 = fmul fast float %362, %92
  %397 = fmul fast float %343, %92
  %398 = fmul fast float %353, %92
  %399 = fmul fast float %363, %92
  %400 = fadd fast float %376, %388
  %401 = fadd fast float %377, %389
  %402 = fadd fast float %378, %390
  %403 = fadd fast float %379, %391
  %404 = fadd fast float %380, %392
  %405 = fadd fast float %381, %393
  %406 = fadd fast float %382, %394
  %407 = fadd fast float %383, %395
  %408 = fadd fast float %384, %396
  %409 = fadd fast float %385, %397
  %410 = fadd fast float %386, %398
  %411 = fadd fast float %387, %399
  %412 = mul i32 %36, %6
  %413 = add i32 %412, %5
  %414 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %413, i32 undef)  ; BufferLoad(srv,index,wot)
  %415 = extractvalue %dx.types.ResRet.i32 %414, 0
  %416 = extractvalue %dx.types.ResRet.i32 %414, 1
  %417 = extractvalue %dx.types.ResRet.i32 %414, 2
  %418 = extractvalue %dx.types.ResRet.i32 %414, 3
  %419 = bitcast i32 %415 to float
  %420 = bitcast i32 %416 to float
  %421 = bitcast i32 %417 to float
  %422 = bitcast i32 %418 to float
  %423 = add i32 %413, 16
  %424 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %423, i32 undef)  ; BufferLoad(srv,index,wot)
  %425 = extractvalue %dx.types.ResRet.i32 %424, 0
  %426 = extractvalue %dx.types.ResRet.i32 %424, 1
  %427 = extractvalue %dx.types.ResRet.i32 %424, 2
  %428 = extractvalue %dx.types.ResRet.i32 %424, 3
  %429 = bitcast i32 %425 to float
  %430 = bitcast i32 %426 to float
  %431 = bitcast i32 %427 to float
  %432 = bitcast i32 %428 to float
  %433 = add i32 %413, 32
  %434 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %433, i32 undef)  ; BufferLoad(srv,index,wot)
  %435 = extractvalue %dx.types.ResRet.i32 %434, 0
  %436 = extractvalue %dx.types.ResRet.i32 %434, 1
  %437 = extractvalue %dx.types.ResRet.i32 %434, 2
  %438 = extractvalue %dx.types.ResRet.i32 %434, 3
  %439 = bitcast i32 %435 to float
  %440 = bitcast i32 %436 to float
  %441 = bitcast i32 %437 to float
  %442 = bitcast i32 %438 to float
  %443 = mul i32 %28, %6
  %444 = add i32 %443, %5
  %445 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %444, i32 undef)  ; BufferLoad(srv,index,wot)
  %446 = extractvalue %dx.types.ResRet.i32 %445, 0
  %447 = extractvalue %dx.types.ResRet.i32 %445, 1
  %448 = extractvalue %dx.types.ResRet.i32 %445, 2
  %449 = extractvalue %dx.types.ResRet.i32 %445, 3
  %450 = bitcast i32 %446 to float
  %451 = bitcast i32 %447 to float
  %452 = bitcast i32 %448 to float
  %453 = bitcast i32 %449 to float
  %454 = add i32 %444, 16
  %455 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %454, i32 undef)  ; BufferLoad(srv,index,wot)
  %456 = extractvalue %dx.types.ResRet.i32 %455, 0
  %457 = extractvalue %dx.types.ResRet.i32 %455, 1
  %458 = extractvalue %dx.types.ResRet.i32 %455, 2
  %459 = extractvalue %dx.types.ResRet.i32 %455, 3
  %460 = bitcast i32 %456 to float
  %461 = bitcast i32 %457 to float
  %462 = bitcast i32 %458 to float
  %463 = bitcast i32 %459 to float
  %464 = add i32 %444, 32
  %465 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %464, i32 undef)  ; BufferLoad(srv,index,wot)
  %466 = extractvalue %dx.types.ResRet.i32 %465, 0
  %467 = extractvalue %dx.types.ResRet.i32 %465, 1
  %468 = extractvalue %dx.types.ResRet.i32 %465, 2
  %469 = extractvalue %dx.types.ResRet.i32 %465, 3
  %470 = bitcast i32 %466 to float
  %471 = bitcast i32 %467 to float
  %472 = bitcast i32 %468 to float
  %473 = bitcast i32 %469 to float
  %474 = fmul fast float %419, %89
  %475 = fmul fast float %429, %89
  %476 = fmul fast float %439, %89
  %477 = fmul fast float %420, %89
  %478 = fmul fast float %430, %89
  %479 = fmul fast float %440, %89
  %480 = fmul fast float %421, %89
  %481 = fmul fast float %431, %89
  %482 = fmul fast float %441, %89
  %483 = fmul fast float %422, %89
  %484 = fmul fast float %432, %89
  %485 = fmul fast float %442, %89
  %486 = fadd fast float %400, %474
  %487 = fadd fast float %401, %475
  %488 = fadd fast float %402, %476
  %489 = fadd fast float %403, %477
  %490 = fadd fast float %404, %478
  %491 = fadd fast float %405, %479
  %492 = fadd fast float %406, %480
  %493 = fadd fast float %407, %481
  %494 = fadd fast float %408, %482
  %495 = fadd fast float %409, %483
  %496 = fadd fast float %410, %484
  %497 = fadd fast float %411, %485
  %498 = fmul fast float %450, %93
  %499 = fmul fast float %460, %93
  %500 = fmul fast float %470, %93
  %501 = fmul fast float %451, %93
  %502 = fmul fast float %461, %93
  %503 = fmul fast float %471, %93
  %504 = fmul fast float %452, %93
  %505 = fmul fast float %462, %93
  %506 = fmul fast float %472, %93
  %507 = fmul fast float %453, %93
  %508 = fmul fast float %463, %93
  %509 = fmul fast float %473, %93
  %510 = fadd fast float %486, %498
  %511 = fadd fast float %487, %499
  %512 = fadd fast float %488, %500
  %513 = fadd fast float %489, %501
  %514 = fadd fast float %490, %502
  %515 = fadd fast float %491, %503
  %516 = fadd fast float %492, %504
  %517 = fadd fast float %493, %505
  %518 = fadd fast float %494, %506
  %519 = fadd fast float %495, %507
  %520 = fadd fast float %496, %508
  %521 = fadd fast float %497, %509
  %522 = fmul fast float %510, %79
  %523 = call float @dx.op.tertiary.f32(i32 46, float %80, float %513, float %522)  ; FMad(a,b,c)
  %524 = call float @dx.op.tertiary.f32(i32 46, float %81, float %516, float %523)  ; FMad(a,b,c)
  %525 = fadd fast float %519, %524
  %526 = fmul fast float %511, %79
  %527 = call float @dx.op.tertiary.f32(i32 46, float %80, float %514, float %526)  ; FMad(a,b,c)
  %528 = call float @dx.op.tertiary.f32(i32 46, float %81, float %517, float %527)  ; FMad(a,b,c)
  %529 = fadd fast float %520, %528
  %530 = fmul fast float %512, %79
  %531 = call float @dx.op.tertiary.f32(i32 46, float %80, float %515, float %530)  ; FMad(a,b,c)
  %532 = call float @dx.op.tertiary.f32(i32 46, float %81, float %518, float %531)  ; FMad(a,b,c)
  %533 = fadd fast float %521, %532
  %534 = fmul fast float %525, %40
  %535 = call float @dx.op.tertiary.f32(i32 46, float %529, float %41, float %534)  ; FMad(a,b,c)
  %536 = call float @dx.op.tertiary.f32(i32 46, float %533, float %42, float %535)  ; FMad(a,b,c)
  %537 = fadd fast float %536, %65
  %538 = fmul fast float %525, %44
  %539 = call float @dx.op.tertiary.f32(i32 46, float %529, float %45, float %538)  ; FMad(a,b,c)
  %540 = call float @dx.op.tertiary.f32(i32 46, float %533, float %46, float %539)  ; FMad(a,b,c)
  %541 = fadd fast float %540, %66
  %542 = fmul fast float %525, %48
  %543 = call float @dx.op.tertiary.f32(i32 46, float %529, float %49, float %542)  ; FMad(a,b,c)
  %544 = call float @dx.op.tertiary.f32(i32 46, float %533, float %50, float %543)  ; FMad(a,b,c)
  %545 = fadd fast float %544, %67
  %546 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %547 = extractvalue %dx.types.CBufRet.f32 %546, 0
  %548 = extractvalue %dx.types.CBufRet.f32 %546, 1
  %549 = extractvalue %dx.types.CBufRet.f32 %546, 2
  %550 = extractvalue %dx.types.CBufRet.f32 %546, 3
  %551 = fmul fast float %547, %537
  %552 = call float @dx.op.tertiary.f32(i32 46, float %541, float %548, float %551)  ; FMad(a,b,c)
  %553 = call float @dx.op.tertiary.f32(i32 46, float %545, float %549, float %552)  ; FMad(a,b,c)
  %554 = fadd fast float %553, %550
  %555 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 37)  ; CBufferLoadLegacy(handle,regIndex)
  %556 = extractvalue %dx.types.CBufRet.f32 %555, 0
  %557 = extractvalue %dx.types.CBufRet.f32 %555, 1
  %558 = extractvalue %dx.types.CBufRet.f32 %555, 2
  %559 = fadd fast float %556, %537
  %560 = fadd fast float %557, %541
  %561 = fadd fast float %558, %545
  %562 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %563 = extractvalue %dx.types.CBufRet.f32 %562, 0
  %564 = extractvalue %dx.types.CBufRet.f32 %562, 1
  %565 = extractvalue %dx.types.CBufRet.f32 %562, 2
  %566 = extractvalue %dx.types.CBufRet.f32 %562, 3
  %567 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %568 = extractvalue %dx.types.CBufRet.f32 %567, 0
  %569 = extractvalue %dx.types.CBufRet.f32 %567, 1
  %570 = extractvalue %dx.types.CBufRet.f32 %567, 2
  %571 = extractvalue %dx.types.CBufRet.f32 %567, 3
  %572 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %573 = extractvalue %dx.types.CBufRet.f32 %572, 0
  %574 = extractvalue %dx.types.CBufRet.f32 %572, 1
  %575 = extractvalue %dx.types.CBufRet.f32 %572, 2
  %576 = extractvalue %dx.types.CBufRet.f32 %572, 3
  %577 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %578 = extractvalue %dx.types.CBufRet.f32 %577, 0
  %579 = extractvalue %dx.types.CBufRet.f32 %577, 1
  %580 = extractvalue %dx.types.CBufRet.f32 %577, 2
  %581 = extractvalue %dx.types.CBufRet.f32 %577, 3
  %582 = fmul fast float %563, %537
  %583 = call float @dx.op.tertiary.f32(i32 46, float %541, float %564, float %582)  ; FMad(a,b,c)
  %584 = call float @dx.op.tertiary.f32(i32 46, float %545, float %565, float %583)  ; FMad(a,b,c)
  %585 = fadd fast float %584, %566
  %586 = fmul fast float %568, %537
  %587 = call float @dx.op.tertiary.f32(i32 46, float %541, float %569, float %586)  ; FMad(a,b,c)
  %588 = call float @dx.op.tertiary.f32(i32 46, float %545, float %570, float %587)  ; FMad(a,b,c)
  %589 = fadd fast float %588, %571
  %590 = fmul fast float %573, %537
  %591 = call float @dx.op.tertiary.f32(i32 46, float %541, float %574, float %590)  ; FMad(a,b,c)
  %592 = call float @dx.op.tertiary.f32(i32 46, float %545, float %575, float %591)  ; FMad(a,b,c)
  %593 = fadd fast float %592, %576
  %594 = fmul fast float %578, %537
  %595 = call float @dx.op.tertiary.f32(i32 46, float %541, float %579, float %594)  ; FMad(a,b,c)
  %596 = call float @dx.op.tertiary.f32(i32 46, float %545, float %580, float %595)  ; FMad(a,b,c)
  %597 = fadd fast float %596, %581
  %598 = add i32 %94, %7
  %599 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %598, i32 undef)  ; BufferLoad(srv,index,wot)
  %600 = extractvalue %dx.types.ResRet.i32 %599, 0
  %601 = extractvalue %dx.types.ResRet.i32 %599, 1
  %602 = extractvalue %dx.types.ResRet.i32 %599, 2
  %603 = extractvalue %dx.types.ResRet.i32 %599, 3
  %604 = bitcast i32 %600 to float
  %605 = bitcast i32 %601 to float
  %606 = bitcast i32 %602 to float
  %607 = bitcast i32 %603 to float
  %608 = add i32 %598, 16
  %609 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %608, i32 undef)  ; BufferLoad(srv,index,wot)
  %610 = extractvalue %dx.types.ResRet.i32 %609, 0
  %611 = extractvalue %dx.types.ResRet.i32 %609, 1
  %612 = extractvalue %dx.types.ResRet.i32 %609, 2
  %613 = extractvalue %dx.types.ResRet.i32 %609, 3
  %614 = bitcast i32 %610 to float
  %615 = bitcast i32 %611 to float
  %616 = bitcast i32 %612 to float
  %617 = bitcast i32 %613 to float
  %618 = add i32 %598, 32
  %619 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %618, i32 undef)  ; BufferLoad(srv,index,wot)
  %620 = extractvalue %dx.types.ResRet.i32 %619, 0
  %621 = extractvalue %dx.types.ResRet.i32 %619, 1
  %622 = extractvalue %dx.types.ResRet.i32 %619, 2
  %623 = extractvalue %dx.types.ResRet.i32 %619, 3
  %624 = bitcast i32 %620 to float
  %625 = bitcast i32 %621 to float
  %626 = bitcast i32 %622 to float
  %627 = bitcast i32 %623 to float
  %628 = add i32 %125, %7
  %629 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %628, i32 undef)  ; BufferLoad(srv,index,wot)
  %630 = extractvalue %dx.types.ResRet.i32 %629, 0
  %631 = extractvalue %dx.types.ResRet.i32 %629, 1
  %632 = extractvalue %dx.types.ResRet.i32 %629, 2
  %633 = extractvalue %dx.types.ResRet.i32 %629, 3
  %634 = bitcast i32 %630 to float
  %635 = bitcast i32 %631 to float
  %636 = bitcast i32 %632 to float
  %637 = bitcast i32 %633 to float
  %638 = add i32 %628, 16
  %639 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %638, i32 undef)  ; BufferLoad(srv,index,wot)
  %640 = extractvalue %dx.types.ResRet.i32 %639, 0
  %641 = extractvalue %dx.types.ResRet.i32 %639, 1
  %642 = extractvalue %dx.types.ResRet.i32 %639, 2
  %643 = extractvalue %dx.types.ResRet.i32 %639, 3
  %644 = bitcast i32 %640 to float
  %645 = bitcast i32 %641 to float
  %646 = bitcast i32 %642 to float
  %647 = bitcast i32 %643 to float
  %648 = add i32 %628, 32
  %649 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %648, i32 undef)  ; BufferLoad(srv,index,wot)
  %650 = extractvalue %dx.types.ResRet.i32 %649, 0
  %651 = extractvalue %dx.types.ResRet.i32 %649, 1
  %652 = extractvalue %dx.types.ResRet.i32 %649, 2
  %653 = extractvalue %dx.types.ResRet.i32 %649, 3
  %654 = bitcast i32 %650 to float
  %655 = bitcast i32 %651 to float
  %656 = bitcast i32 %652 to float
  %657 = bitcast i32 %653 to float
  %658 = fmul fast float %604, %86
  %659 = fmul fast float %614, %86
  %660 = fmul fast float %624, %86
  %661 = fmul fast float %605, %86
  %662 = fmul fast float %615, %86
  %663 = fmul fast float %625, %86
  %664 = fmul fast float %606, %86
  %665 = fmul fast float %616, %86
  %666 = fmul fast float %626, %86
  %667 = fmul fast float %607, %86
  %668 = fmul fast float %617, %86
  %669 = fmul fast float %627, %86
  %670 = fmul fast float %634, %90
  %671 = fmul fast float %644, %90
  %672 = fmul fast float %654, %90
  %673 = fmul fast float %635, %90
  %674 = fmul fast float %645, %90
  %675 = fmul fast float %655, %90
  %676 = fmul fast float %636, %90
  %677 = fmul fast float %646, %90
  %678 = fmul fast float %656, %90
  %679 = fmul fast float %637, %90
  %680 = fmul fast float %647, %90
  %681 = fmul fast float %657, %90
  %682 = fadd fast float %670, %658
  %683 = fadd fast float %671, %659
  %684 = fadd fast float %672, %660
  %685 = fadd fast float %673, %661
  %686 = fadd fast float %674, %662
  %687 = fadd fast float %675, %663
  %688 = fadd fast float %676, %664
  %689 = fadd fast float %677, %665
  %690 = fadd fast float %678, %666
  %691 = fadd fast float %679, %667
  %692 = fadd fast float %680, %668
  %693 = fadd fast float %681, %669
  %694 = add i32 %192, %7
  %695 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %694, i32 undef)  ; BufferLoad(srv,index,wot)
  %696 = extractvalue %dx.types.ResRet.i32 %695, 0
  %697 = extractvalue %dx.types.ResRet.i32 %695, 1
  %698 = extractvalue %dx.types.ResRet.i32 %695, 2
  %699 = extractvalue %dx.types.ResRet.i32 %695, 3
  %700 = bitcast i32 %696 to float
  %701 = bitcast i32 %697 to float
  %702 = bitcast i32 %698 to float
  %703 = bitcast i32 %699 to float
  %704 = add i32 %694, 16
  %705 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %704, i32 undef)  ; BufferLoad(srv,index,wot)
  %706 = extractvalue %dx.types.ResRet.i32 %705, 0
  %707 = extractvalue %dx.types.ResRet.i32 %705, 1
  %708 = extractvalue %dx.types.ResRet.i32 %705, 2
  %709 = extractvalue %dx.types.ResRet.i32 %705, 3
  %710 = bitcast i32 %706 to float
  %711 = bitcast i32 %707 to float
  %712 = bitcast i32 %708 to float
  %713 = bitcast i32 %709 to float
  %714 = add i32 %694, 32
  %715 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %714, i32 undef)  ; BufferLoad(srv,index,wot)
  %716 = extractvalue %dx.types.ResRet.i32 %715, 0
  %717 = extractvalue %dx.types.ResRet.i32 %715, 1
  %718 = extractvalue %dx.types.ResRet.i32 %715, 2
  %719 = extractvalue %dx.types.ResRet.i32 %715, 3
  %720 = bitcast i32 %716 to float
  %721 = bitcast i32 %717 to float
  %722 = bitcast i32 %718 to float
  %723 = bitcast i32 %719 to float
  %724 = add i32 %223, %7
  %725 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %724, i32 undef)  ; BufferLoad(srv,index,wot)
  %726 = extractvalue %dx.types.ResRet.i32 %725, 0
  %727 = extractvalue %dx.types.ResRet.i32 %725, 1
  %728 = extractvalue %dx.types.ResRet.i32 %725, 2
  %729 = extractvalue %dx.types.ResRet.i32 %725, 3
  %730 = bitcast i32 %726 to float
  %731 = bitcast i32 %727 to float
  %732 = bitcast i32 %728 to float
  %733 = bitcast i32 %729 to float
  %734 = add i32 %724, 16
  %735 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %734, i32 undef)  ; BufferLoad(srv,index,wot)
  %736 = extractvalue %dx.types.ResRet.i32 %735, 0
  %737 = extractvalue %dx.types.ResRet.i32 %735, 1
  %738 = extractvalue %dx.types.ResRet.i32 %735, 2
  %739 = extractvalue %dx.types.ResRet.i32 %735, 3
  %740 = bitcast i32 %736 to float
  %741 = bitcast i32 %737 to float
  %742 = bitcast i32 %738 to float
  %743 = bitcast i32 %739 to float
  %744 = add i32 %724, 32
  %745 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %744, i32 undef)  ; BufferLoad(srv,index,wot)
  %746 = extractvalue %dx.types.ResRet.i32 %745, 0
  %747 = extractvalue %dx.types.ResRet.i32 %745, 1
  %748 = extractvalue %dx.types.ResRet.i32 %745, 2
  %749 = extractvalue %dx.types.ResRet.i32 %745, 3
  %750 = bitcast i32 %746 to float
  %751 = bitcast i32 %747 to float
  %752 = bitcast i32 %748 to float
  %753 = bitcast i32 %749 to float
  %754 = fmul fast float %700, %87
  %755 = fmul fast float %710, %87
  %756 = fmul fast float %720, %87
  %757 = fmul fast float %701, %87
  %758 = fmul fast float %711, %87
  %759 = fmul fast float %721, %87
  %760 = fmul fast float %702, %87
  %761 = fmul fast float %712, %87
  %762 = fmul fast float %722, %87
  %763 = fmul fast float %703, %87
  %764 = fmul fast float %713, %87
  %765 = fmul fast float %723, %87
  %766 = fadd fast float %682, %754
  %767 = fadd fast float %683, %755
  %768 = fadd fast float %684, %756
  %769 = fadd fast float %685, %757
  %770 = fadd fast float %686, %758
  %771 = fadd fast float %687, %759
  %772 = fadd fast float %688, %760
  %773 = fadd fast float %689, %761
  %774 = fadd fast float %690, %762
  %775 = fadd fast float %691, %763
  %776 = fadd fast float %692, %764
  %777 = fadd fast float %693, %765
  %778 = fmul fast float %730, %91
  %779 = fmul fast float %740, %91
  %780 = fmul fast float %750, %91
  %781 = fmul fast float %731, %91
  %782 = fmul fast float %741, %91
  %783 = fmul fast float %751, %91
  %784 = fmul fast float %732, %91
  %785 = fmul fast float %742, %91
  %786 = fmul fast float %752, %91
  %787 = fmul fast float %733, %91
  %788 = fmul fast float %743, %91
  %789 = fmul fast float %753, %91
  %790 = fadd fast float %766, %778
  %791 = fadd fast float %767, %779
  %792 = fadd fast float %768, %780
  %793 = fadd fast float %769, %781
  %794 = fadd fast float %770, %782
  %795 = fadd fast float %771, %783
  %796 = fadd fast float %772, %784
  %797 = fadd fast float %773, %785
  %798 = fadd fast float %774, %786
  %799 = fadd fast float %775, %787
  %800 = fadd fast float %776, %788
  %801 = fadd fast float %777, %789
  %802 = add i32 %302, %7
  %803 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %802, i32 undef)  ; BufferLoad(srv,index,wot)
  %804 = extractvalue %dx.types.ResRet.i32 %803, 0
  %805 = extractvalue %dx.types.ResRet.i32 %803, 1
  %806 = extractvalue %dx.types.ResRet.i32 %803, 2
  %807 = extractvalue %dx.types.ResRet.i32 %803, 3
  %808 = bitcast i32 %804 to float
  %809 = bitcast i32 %805 to float
  %810 = bitcast i32 %806 to float
  %811 = bitcast i32 %807 to float
  %812 = add i32 %802, 16
  %813 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %812, i32 undef)  ; BufferLoad(srv,index,wot)
  %814 = extractvalue %dx.types.ResRet.i32 %813, 0
  %815 = extractvalue %dx.types.ResRet.i32 %813, 1
  %816 = extractvalue %dx.types.ResRet.i32 %813, 2
  %817 = extractvalue %dx.types.ResRet.i32 %813, 3
  %818 = bitcast i32 %814 to float
  %819 = bitcast i32 %815 to float
  %820 = bitcast i32 %816 to float
  %821 = bitcast i32 %817 to float
  %822 = add i32 %802, 32
  %823 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %822, i32 undef)  ; BufferLoad(srv,index,wot)
  %824 = extractvalue %dx.types.ResRet.i32 %823, 0
  %825 = extractvalue %dx.types.ResRet.i32 %823, 1
  %826 = extractvalue %dx.types.ResRet.i32 %823, 2
  %827 = extractvalue %dx.types.ResRet.i32 %823, 3
  %828 = bitcast i32 %824 to float
  %829 = bitcast i32 %825 to float
  %830 = bitcast i32 %826 to float
  %831 = bitcast i32 %827 to float
  %832 = add i32 %333, %7
  %833 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %832, i32 undef)  ; BufferLoad(srv,index,wot)
  %834 = extractvalue %dx.types.ResRet.i32 %833, 0
  %835 = extractvalue %dx.types.ResRet.i32 %833, 1
  %836 = extractvalue %dx.types.ResRet.i32 %833, 2
  %837 = extractvalue %dx.types.ResRet.i32 %833, 3
  %838 = bitcast i32 %834 to float
  %839 = bitcast i32 %835 to float
  %840 = bitcast i32 %836 to float
  %841 = bitcast i32 %837 to float
  %842 = add i32 %832, 16
  %843 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %842, i32 undef)  ; BufferLoad(srv,index,wot)
  %844 = extractvalue %dx.types.ResRet.i32 %843, 0
  %845 = extractvalue %dx.types.ResRet.i32 %843, 1
  %846 = extractvalue %dx.types.ResRet.i32 %843, 2
  %847 = extractvalue %dx.types.ResRet.i32 %843, 3
  %848 = bitcast i32 %844 to float
  %849 = bitcast i32 %845 to float
  %850 = bitcast i32 %846 to float
  %851 = bitcast i32 %847 to float
  %852 = add i32 %832, 32
  %853 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %852, i32 undef)  ; BufferLoad(srv,index,wot)
  %854 = extractvalue %dx.types.ResRet.i32 %853, 0
  %855 = extractvalue %dx.types.ResRet.i32 %853, 1
  %856 = extractvalue %dx.types.ResRet.i32 %853, 2
  %857 = extractvalue %dx.types.ResRet.i32 %853, 3
  %858 = bitcast i32 %854 to float
  %859 = bitcast i32 %855 to float
  %860 = bitcast i32 %856 to float
  %861 = bitcast i32 %857 to float
  %862 = fmul fast float %808, %88
  %863 = fmul fast float %818, %88
  %864 = fmul fast float %828, %88
  %865 = fmul fast float %809, %88
  %866 = fmul fast float %819, %88
  %867 = fmul fast float %829, %88
  %868 = fmul fast float %810, %88
  %869 = fmul fast float %820, %88
  %870 = fmul fast float %830, %88
  %871 = fmul fast float %811, %88
  %872 = fmul fast float %821, %88
  %873 = fmul fast float %831, %88
  %874 = fadd fast float %790, %862
  %875 = fadd fast float %791, %863
  %876 = fadd fast float %792, %864
  %877 = fadd fast float %793, %865
  %878 = fadd fast float %794, %866
  %879 = fadd fast float %795, %867
  %880 = fadd fast float %796, %868
  %881 = fadd fast float %797, %869
  %882 = fadd fast float %798, %870
  %883 = fadd fast float %799, %871
  %884 = fadd fast float %800, %872
  %885 = fadd fast float %801, %873
  %886 = fmul fast float %838, %92
  %887 = fmul fast float %848, %92
  %888 = fmul fast float %858, %92
  %889 = fmul fast float %839, %92
  %890 = fmul fast float %849, %92
  %891 = fmul fast float %859, %92
  %892 = fmul fast float %840, %92
  %893 = fmul fast float %850, %92
  %894 = fmul fast float %860, %92
  %895 = fmul fast float %841, %92
  %896 = fmul fast float %851, %92
  %897 = fmul fast float %861, %92
  %898 = fadd fast float %874, %886
  %899 = fadd fast float %875, %887
  %900 = fadd fast float %876, %888
  %901 = fadd fast float %877, %889
  %902 = fadd fast float %878, %890
  %903 = fadd fast float %879, %891
  %904 = fadd fast float %880, %892
  %905 = fadd fast float %881, %893
  %906 = fadd fast float %882, %894
  %907 = fadd fast float %883, %895
  %908 = fadd fast float %884, %896
  %909 = fadd fast float %885, %897
  %910 = add i32 %412, %7
  %911 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %910, i32 undef)  ; BufferLoad(srv,index,wot)
  %912 = extractvalue %dx.types.ResRet.i32 %911, 0
  %913 = extractvalue %dx.types.ResRet.i32 %911, 1
  %914 = extractvalue %dx.types.ResRet.i32 %911, 2
  %915 = extractvalue %dx.types.ResRet.i32 %911, 3
  %916 = bitcast i32 %912 to float
  %917 = bitcast i32 %913 to float
  %918 = bitcast i32 %914 to float
  %919 = bitcast i32 %915 to float
  %920 = add i32 %910, 16
  %921 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %920, i32 undef)  ; BufferLoad(srv,index,wot)
  %922 = extractvalue %dx.types.ResRet.i32 %921, 0
  %923 = extractvalue %dx.types.ResRet.i32 %921, 1
  %924 = extractvalue %dx.types.ResRet.i32 %921, 2
  %925 = extractvalue %dx.types.ResRet.i32 %921, 3
  %926 = bitcast i32 %922 to float
  %927 = bitcast i32 %923 to float
  %928 = bitcast i32 %924 to float
  %929 = bitcast i32 %925 to float
  %930 = add i32 %910, 32
  %931 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %930, i32 undef)  ; BufferLoad(srv,index,wot)
  %932 = extractvalue %dx.types.ResRet.i32 %931, 0
  %933 = extractvalue %dx.types.ResRet.i32 %931, 1
  %934 = extractvalue %dx.types.ResRet.i32 %931, 2
  %935 = extractvalue %dx.types.ResRet.i32 %931, 3
  %936 = bitcast i32 %932 to float
  %937 = bitcast i32 %933 to float
  %938 = bitcast i32 %934 to float
  %939 = bitcast i32 %935 to float
  %940 = add i32 %443, %7
  %941 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %940, i32 undef)  ; BufferLoad(srv,index,wot)
  %942 = extractvalue %dx.types.ResRet.i32 %941, 0
  %943 = extractvalue %dx.types.ResRet.i32 %941, 1
  %944 = extractvalue %dx.types.ResRet.i32 %941, 2
  %945 = extractvalue %dx.types.ResRet.i32 %941, 3
  %946 = bitcast i32 %942 to float
  %947 = bitcast i32 %943 to float
  %948 = bitcast i32 %944 to float
  %949 = bitcast i32 %945 to float
  %950 = add i32 %940, 16
  %951 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %950, i32 undef)  ; BufferLoad(srv,index,wot)
  %952 = extractvalue %dx.types.ResRet.i32 %951, 0
  %953 = extractvalue %dx.types.ResRet.i32 %951, 1
  %954 = extractvalue %dx.types.ResRet.i32 %951, 2
  %955 = extractvalue %dx.types.ResRet.i32 %951, 3
  %956 = bitcast i32 %952 to float
  %957 = bitcast i32 %953 to float
  %958 = bitcast i32 %954 to float
  %959 = bitcast i32 %955 to float
  %960 = add i32 %940, 32
  %961 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1, i32 %960, i32 undef)  ; BufferLoad(srv,index,wot)
  %962 = extractvalue %dx.types.ResRet.i32 %961, 0
  %963 = extractvalue %dx.types.ResRet.i32 %961, 1
  %964 = extractvalue %dx.types.ResRet.i32 %961, 2
  %965 = extractvalue %dx.types.ResRet.i32 %961, 3
  %966 = bitcast i32 %962 to float
  %967 = bitcast i32 %963 to float
  %968 = bitcast i32 %964 to float
  %969 = bitcast i32 %965 to float
  %970 = fmul fast float %916, %89
  %971 = fmul fast float %926, %89
  %972 = fmul fast float %936, %89
  %973 = fmul fast float %917, %89
  %974 = fmul fast float %927, %89
  %975 = fmul fast float %937, %89
  %976 = fmul fast float %918, %89
  %977 = fmul fast float %928, %89
  %978 = fmul fast float %938, %89
  %979 = fmul fast float %919, %89
  %980 = fmul fast float %929, %89
  %981 = fmul fast float %939, %89
  %982 = fadd fast float %898, %970
  %983 = fadd fast float %899, %971
  %984 = fadd fast float %900, %972
  %985 = fadd fast float %901, %973
  %986 = fadd fast float %902, %974
  %987 = fadd fast float %903, %975
  %988 = fadd fast float %904, %976
  %989 = fadd fast float %905, %977
  %990 = fadd fast float %906, %978
  %991 = fadd fast float %907, %979
  %992 = fadd fast float %908, %980
  %993 = fadd fast float %909, %981
  %994 = fmul fast float %946, %93
  %995 = fmul fast float %956, %93
  %996 = fmul fast float %966, %93
  %997 = fmul fast float %947, %93
  %998 = fmul fast float %957, %93
  %999 = fmul fast float %967, %93
  %1000 = fmul fast float %948, %93
  %1001 = fmul fast float %958, %93
  %1002 = fmul fast float %968, %93
  %1003 = fmul fast float %949, %93
  %1004 = fmul fast float %959, %93
  %1005 = fmul fast float %969, %93
  %1006 = fadd fast float %982, %994
  %1007 = fadd fast float %983, %995
  %1008 = fadd fast float %984, %996
  %1009 = fadd fast float %985, %997
  %1010 = fadd fast float %986, %998
  %1011 = fadd fast float %987, %999
  %1012 = fadd fast float %988, %1000
  %1013 = fadd fast float %989, %1001
  %1014 = fadd fast float %990, %1002
  %1015 = fadd fast float %991, %1003
  %1016 = fadd fast float %992, %1004
  %1017 = fadd fast float %993, %1005
  %1018 = fmul fast float %1006, %79
  %1019 = call float @dx.op.tertiary.f32(i32 46, float %80, float %1009, float %1018)  ; FMad(a,b,c)
  %1020 = call float @dx.op.tertiary.f32(i32 46, float %81, float %1012, float %1019)  ; FMad(a,b,c)
  %1021 = fadd fast float %1015, %1020
  %1022 = fmul fast float %1007, %79
  %1023 = call float @dx.op.tertiary.f32(i32 46, float %80, float %1010, float %1022)  ; FMad(a,b,c)
  %1024 = call float @dx.op.tertiary.f32(i32 46, float %81, float %1013, float %1023)  ; FMad(a,b,c)
  %1025 = fadd fast float %1016, %1024
  %1026 = fmul fast float %1008, %79
  %1027 = call float @dx.op.tertiary.f32(i32 46, float %80, float %1011, float %1026)  ; FMad(a,b,c)
  %1028 = call float @dx.op.tertiary.f32(i32 46, float %81, float %1014, float %1027)  ; FMad(a,b,c)
  %1029 = fadd fast float %1017, %1028
  %1030 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1031 = extractvalue %dx.types.CBufRet.f32 %1030, 0
  %1032 = extractvalue %dx.types.CBufRet.f32 %1030, 1
  %1033 = extractvalue %dx.types.CBufRet.f32 %1030, 2
  %1034 = extractvalue %dx.types.CBufRet.f32 %1030, 3
  %1035 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1036 = extractvalue %dx.types.CBufRet.f32 %1035, 0
  %1037 = extractvalue %dx.types.CBufRet.f32 %1035, 1
  %1038 = extractvalue %dx.types.CBufRet.f32 %1035, 2
  %1039 = extractvalue %dx.types.CBufRet.f32 %1035, 3
  %1040 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1041 = extractvalue %dx.types.CBufRet.f32 %1040, 0
  %1042 = extractvalue %dx.types.CBufRet.f32 %1040, 1
  %1043 = extractvalue %dx.types.CBufRet.f32 %1040, 2
  %1044 = extractvalue %dx.types.CBufRet.f32 %1040, 3
  %1045 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %3, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %1046 = extractvalue %dx.types.CBufRet.i32 %1045, 0
  %1047 = extractvalue %dx.types.CBufRet.i32 %1045, 1
  %1048 = extractvalue %dx.types.CBufRet.i32 %1045, 2
  %1049 = bitcast float %1034 to i32
  %1050 = bitcast float %1039 to i32
  %1051 = bitcast float %1044 to i32
  %1052 = sub i32 %1049, %1046
  %1053 = sub i32 %1050, %1047
  %1054 = sub i32 %1051, %1048
  %1055 = sitofp i32 %1052 to float
  %1056 = sitofp i32 %1053 to float
  %1057 = sitofp i32 %1054 to float
  %1058 = fmul fast float %1055, 0x3EE0000000000000
  %1059 = fmul fast float %1056, 0x3EE0000000000000
  %1060 = fmul fast float %1057, 0x3EE0000000000000
  %1061 = fmul fast float %1031, %1021
  %1062 = call float @dx.op.tertiary.f32(i32 46, float %1032, float %1025, float %1061)  ; FMad(a,b,c)
  %1063 = call float @dx.op.tertiary.f32(i32 46, float %1033, float %1029, float %1062)  ; FMad(a,b,c)
  %1064 = fadd fast float %1058, %1063
  %1065 = fmul fast float %1036, %1021
  %1066 = call float @dx.op.tertiary.f32(i32 46, float %1037, float %1025, float %1065)  ; FMad(a,b,c)
  %1067 = call float @dx.op.tertiary.f32(i32 46, float %1038, float %1029, float %1066)  ; FMad(a,b,c)
  %1068 = fadd fast float %1059, %1067
  %1069 = fmul fast float %1041, %1021
  %1070 = call float @dx.op.tertiary.f32(i32 46, float %1042, float %1025, float %1069)  ; FMad(a,b,c)
  %1071 = call float @dx.op.tertiary.f32(i32 46, float %1043, float %1029, float %1070)  ; FMad(a,b,c)
  %1072 = fadd fast float %1071, %1060
  %1073 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %1074 = extractvalue %dx.types.CBufRet.f32 %1073, 0
  %1075 = extractvalue %dx.types.CBufRet.f32 %1073, 1
  %1076 = extractvalue %dx.types.CBufRet.f32 %1073, 2
  %1077 = extractvalue %dx.types.CBufRet.f32 %1073, 3
  %1078 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %1079 = extractvalue %dx.types.CBufRet.f32 %1078, 0
  %1080 = extractvalue %dx.types.CBufRet.f32 %1078, 1
  %1081 = extractvalue %dx.types.CBufRet.f32 %1078, 2
  %1082 = extractvalue %dx.types.CBufRet.f32 %1078, 3
  %1083 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 18)  ; CBufferLoadLegacy(handle,regIndex)
  %1084 = extractvalue %dx.types.CBufRet.f32 %1083, 0
  %1085 = extractvalue %dx.types.CBufRet.f32 %1083, 1
  %1086 = extractvalue %dx.types.CBufRet.f32 %1083, 2
  %1087 = extractvalue %dx.types.CBufRet.f32 %1083, 3
  %1088 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %1089 = extractvalue %dx.types.CBufRet.f32 %1088, 0
  %1090 = extractvalue %dx.types.CBufRet.f32 %1088, 1
  %1091 = extractvalue %dx.types.CBufRet.f32 %1088, 2
  %1092 = extractvalue %dx.types.CBufRet.f32 %1088, 3
  %1093 = fmul fast float %1074, %1064
  %1094 = call float @dx.op.tertiary.f32(i32 46, float %1068, float %1075, float %1093)  ; FMad(a,b,c)
  %1095 = call float @dx.op.tertiary.f32(i32 46, float %1072, float %1076, float %1094)  ; FMad(a,b,c)
  %1096 = fadd fast float %1095, %1077
  %1097 = fmul fast float %1079, %1064
  %1098 = call float @dx.op.tertiary.f32(i32 46, float %1068, float %1080, float %1097)  ; FMad(a,b,c)
  %1099 = call float @dx.op.tertiary.f32(i32 46, float %1072, float %1081, float %1098)  ; FMad(a,b,c)
  %1100 = fadd fast float %1099, %1082
  %1101 = fmul fast float %1084, %1064
  %1102 = call float @dx.op.tertiary.f32(i32 46, float %1068, float %1085, float %1101)  ; FMad(a,b,c)
  %1103 = call float @dx.op.tertiary.f32(i32 46, float %1072, float %1086, float %1102)  ; FMad(a,b,c)
  %1104 = fadd fast float %1103, %1087
  %1105 = fmul fast float %1089, %1064
  %1106 = call float @dx.op.tertiary.f32(i32 46, float %1068, float %1090, float %1105)  ; FMad(a,b,c)
  %1107 = call float @dx.op.tertiary.f32(i32 46, float %1072, float %1091, float %1106)  ; FMad(a,b,c)
  %1108 = fadd fast float %1107, %1092
  %1109 = fmul fast float %510, %40
  %1110 = call float @dx.op.tertiary.f32(i32 46, float %511, float %41, float %1109)  ; FMad(a,b,c)
  %1111 = call float @dx.op.tertiary.f32(i32 46, float %512, float %42, float %1110)  ; FMad(a,b,c)
  %1112 = fmul fast float %510, %44
  %1113 = call float @dx.op.tertiary.f32(i32 46, float %511, float %45, float %1112)  ; FMad(a,b,c)
  %1114 = call float @dx.op.tertiary.f32(i32 46, float %512, float %46, float %1113)  ; FMad(a,b,c)
  %1115 = fmul fast float %510, %48
  %1116 = call float @dx.op.tertiary.f32(i32 46, float %511, float %49, float %1115)  ; FMad(a,b,c)
  %1117 = call float @dx.op.tertiary.f32(i32 46, float %512, float %50, float %1116)  ; FMad(a,b,c)
  %1118 = fmul fast float %513, %40
  %1119 = call float @dx.op.tertiary.f32(i32 46, float %514, float %41, float %1118)  ; FMad(a,b,c)
  %1120 = call float @dx.op.tertiary.f32(i32 46, float %515, float %42, float %1119)  ; FMad(a,b,c)
  %1121 = fmul fast float %513, %44
  %1122 = call float @dx.op.tertiary.f32(i32 46, float %514, float %45, float %1121)  ; FMad(a,b,c)
  %1123 = call float @dx.op.tertiary.f32(i32 46, float %515, float %46, float %1122)  ; FMad(a,b,c)
  %1124 = fmul fast float %513, %48
  %1125 = call float @dx.op.tertiary.f32(i32 46, float %514, float %49, float %1124)  ; FMad(a,b,c)
  %1126 = call float @dx.op.tertiary.f32(i32 46, float %515, float %50, float %1125)  ; FMad(a,b,c)
  %1127 = fmul fast float %516, %40
  %1128 = call float @dx.op.tertiary.f32(i32 46, float %517, float %41, float %1127)  ; FMad(a,b,c)
  %1129 = call float @dx.op.tertiary.f32(i32 46, float %518, float %42, float %1128)  ; FMad(a,b,c)
  %1130 = fmul fast float %516, %44
  %1131 = call float @dx.op.tertiary.f32(i32 46, float %517, float %45, float %1130)  ; FMad(a,b,c)
  %1132 = call float @dx.op.tertiary.f32(i32 46, float %518, float %46, float %1131)  ; FMad(a,b,c)
  %1133 = fmul fast float %516, %48
  %1134 = call float @dx.op.tertiary.f32(i32 46, float %517, float %49, float %1133)  ; FMad(a,b,c)
  %1135 = call float @dx.op.tertiary.f32(i32 46, float %518, float %50, float %1134)  ; FMad(a,b,c)
  %1136 = fmul fast float %16, 2.000000e+00
  %1137 = fmul fast float %17, 2.000000e+00
  %1138 = fmul fast float %18, 2.000000e+00
  %1139 = fadd fast float %1136, -1.000000e+00
  %1140 = fadd fast float %1137, -1.000000e+00
  %1141 = fadd fast float %1138, -1.000000e+00
  %1142 = fmul fast float %12, 2.000000e+00
  %1143 = fmul fast float %13, 2.000000e+00
  %1144 = fmul fast float %14, 2.000000e+00
  %1145 = fadd fast float %1142, -1.000000e+00
  %1146 = fadd fast float %1143, -1.000000e+00
  %1147 = fadd fast float %1144, -1.000000e+00
  %1148 = fmul fast float %15, 2.000000e+00
  %1149 = fadd fast float %1148, -1.000000e+00
  %1150 = fmul fast float %1140, %1147
  %1151 = fmul fast float %1141, %1146
  %1152 = fsub fast float %1150, %1151
  %1153 = fmul fast float %1141, %1145
  %1154 = fmul fast float %1139, %1147
  %1155 = fsub fast float %1153, %1154
  %1156 = fmul fast float %1139, %1146
  %1157 = fmul fast float %1140, %1145
  %1158 = fsub fast float %1156, %1157
  %1159 = fmul fast float %1152, %1149
  %1160 = fmul fast float %1155, %1149
  %1161 = fmul fast float %1158, %1149
  %1162 = fmul fast float %1111, %1145
  %1163 = call float @dx.op.tertiary.f32(i32 46, float %1146, float %1120, float %1162)  ; FMad(a,b,c)
  %1164 = call float @dx.op.tertiary.f32(i32 46, float %1147, float %1129, float %1163)  ; FMad(a,b,c)
  %1165 = fmul fast float %1114, %1145
  %1166 = call float @dx.op.tertiary.f32(i32 46, float %1146, float %1123, float %1165)  ; FMad(a,b,c)
  %1167 = call float @dx.op.tertiary.f32(i32 46, float %1147, float %1132, float %1166)  ; FMad(a,b,c)
  %1168 = fmul fast float %1117, %1145
  %1169 = call float @dx.op.tertiary.f32(i32 46, float %1146, float %1126, float %1168)  ; FMad(a,b,c)
  %1170 = call float @dx.op.tertiary.f32(i32 46, float %1147, float %1135, float %1169)  ; FMad(a,b,c)
  %1171 = fmul fast float %1111, %1159
  %1172 = call float @dx.op.tertiary.f32(i32 46, float %1160, float %1120, float %1171)  ; FMad(a,b,c)
  %1173 = call float @dx.op.tertiary.f32(i32 46, float %1161, float %1129, float %1172)  ; FMad(a,b,c)
  %1174 = fmul fast float %1114, %1159
  %1175 = call float @dx.op.tertiary.f32(i32 46, float %1160, float %1123, float %1174)  ; FMad(a,b,c)
  %1176 = call float @dx.op.tertiary.f32(i32 46, float %1161, float %1132, float %1175)  ; FMad(a,b,c)
  %1177 = fmul fast float %1117, %1159
  %1178 = call float @dx.op.tertiary.f32(i32 46, float %1160, float %1126, float %1177)  ; FMad(a,b,c)
  %1179 = call float @dx.op.tertiary.f32(i32 46, float %1161, float %1135, float %1178)  ; FMad(a,b,c)
  %1180 = fmul fast float %1111, %1139
  %1181 = call float @dx.op.tertiary.f32(i32 46, float %1140, float %1120, float %1180)  ; FMad(a,b,c)
  %1182 = call float @dx.op.tertiary.f32(i32 46, float %1141, float %1129, float %1181)  ; FMad(a,b,c)
  %1183 = fmul fast float %1114, %1139
  %1184 = call float @dx.op.tertiary.f32(i32 46, float %1140, float %1123, float %1183)  ; FMad(a,b,c)
  %1185 = call float @dx.op.tertiary.f32(i32 46, float %1141, float %1132, float %1184)  ; FMad(a,b,c)
  %1186 = fmul fast float %1117, %1139
  %1187 = call float @dx.op.tertiary.f32(i32 46, float %1140, float %1126, float %1186)  ; FMad(a,b,c)
  %1188 = call float @dx.op.tertiary.f32(i32 46, float %1141, float %1135, float %1187)  ; FMad(a,b,c)
  %1189 = call float @dx.op.dot3.f32(i32 55, float %1182, float %1185, float %1188, float %1182, float %1185, float %1188)  ; Dot3(ax,ay,az,bx,by,bz)
  %1190 = call float @dx.op.unary.f32(i32 25, float %1189)  ; Rsqrt(value)
  %1191 = fmul fast float %1190, %1182
  %1192 = fmul fast float %1190, %1185
  %1193 = fmul fast float %1190, %1188
  %1194 = call float @dx.op.dot3.f32(i32 55, float %1173, float %1176, float %1179, float %1173, float %1176, float %1179)  ; Dot3(ax,ay,az,bx,by,bz)
  %1195 = call float @dx.op.unary.f32(i32 25, float %1194)  ; Rsqrt(value)
  %1196 = fmul fast float %1195, %1173
  %1197 = fmul fast float %1195, %1176
  %1198 = fmul fast float %1195, %1179
  %1199 = call float @dx.op.dot3.f32(i32 55, float %1164, float %1167, float %1170, float %1164, float %1167, float %1170)  ; Dot3(ax,ay,az,bx,by,bz)
  %1200 = call float @dx.op.unary.f32(i32 25, float %1199)  ; Rsqrt(value)
  %1201 = fmul fast float %1200, %1164
  %1202 = fmul fast float %1200, %1167
  %1203 = fmul fast float %1200, %1170
  %1204 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %1205 = extractvalue %dx.types.CBufRet.f32 %1204, 0
  %1206 = extractvalue %dx.types.CBufRet.f32 %1204, 1
  %1207 = fmul fast float %1205, %597
  %1208 = fmul fast float %1206, %597
  %1209 = fsub fast float %585, %1207
  %1210 = fsub fast float %589, %1208
  %1211 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %1212 = extractvalue %dx.types.CBufRet.f32 %1211, 0
  %1213 = extractvalue %dx.types.CBufRet.f32 %1211, 1
  %1214 = extractvalue %dx.types.CBufRet.f32 %1211, 2
  %1215 = extractvalue %dx.types.CBufRet.f32 %1211, 3
  %1216 = call float @dx.op.dot4.f32(i32 56, float %1212, float %1213, float %1214, float %1215, float %559, float %560, float %561, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %585)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %589)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %593)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %597)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %1191)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %1192)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %1193)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %1196)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %1197)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %1198)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %1201)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float %1202)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %1203)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %19)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %20)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %559)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %560)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float %561)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float %8)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float %9)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 0, float %10)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 1, float %11)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 2, float %554)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 3, float %1209)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 0, float %1210)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 1, float %593)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 2, float %597)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 6, i32 0, i8 3, float %1096)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 0, float %1100)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 1, float %1104)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 2, float %1108)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 7, i32 0, i8 3, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 8, i32 0, i8 0, float %1216)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!11}
!dx.entryPoints = !{!12}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 6}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{!5, null, !7, null}
!5 = !{!6}
!6 = !{i32 0, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 10, i32 1, i32 11, i32 0, null}
!7 = !{!8, !9, !10}
!8 = !{i32 0, %MaterialModifiersConsts* undef, !"", i32 0, i32 7, i32 1, i32 496, null}
!9 = !{i32 1, %hostlayout.CameraShaderConsts* undef, !"", i32 0, i32 1, i32 1, i32 848, null}
!10 = !{i32 2, %hostlayout.FrequentVertexConsts* undef, !"", i32 0, i32 5, i32 1, i32 112, null}
!11 = !{[116 x i32] [i32 57, i32 33, i32 2143518735, i32 1, i32 2143518735, i32 1, i32 2143518735, i32 1, i32 0, i32 0, i32 2143526911, i32 1, i32 2143526911, i32 1, i32 2143526911, i32 1, i32 2143526911, i32 1, i32 2143526911, i32 1, i32 2143526911, i32 1, i32 2143526911, i32 1, i32 2143526911, i32 1, i32 2143526911, i32 1, i32 2143526911, i32 1, i32 2143526911, i32 1, i32 2143526911, i32 1, i32 2143526911, i32 1, i32 2143526911, i32 1, i32 2143526911, i32 1, i32 2143526911, i32 1, i32 8192, i32 0, i32 16384, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1008, i32 0, i32 1008, i32 0, i32 1008, i32 0, i32 0, i32 0, i32 8064, i32 0, i32 8064, i32 0, i32 8064, i32 0, i32 896, i32 0, i32 262144, i32 0, i32 524288, i32 0, i32 1048576, i32 0, i32 2097152, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 130064383, i32 1, i32 130064383, i32 1, i32 130064383, i32 1, i32 130056207, i32 1, i32 130097151, i32 1, i32 130097151, i32 1, i32 130097151, i32 1, i32 130088975, i32 1, i32 130162687, i32 1, i32 130162687, i32 1, i32 130162687, i32 1, i32 130154511, i32 1, i32 130260991, i32 1, i32 2143526911, i32 1, i32 2013265920, i32 0, i32 0, i32 0, i32 0, i32 0]}
!12 = !{void ()* @vs_main_, !"vs_main_", !13, !4, !50}
!13 = !{!14, !34, null}
!14 = !{!15, !18, !20, !21, !23, !24, !26, !27, !28, !29, !30, !32, !33}
!15 = !{i32 0, !"POSITION", i8 9, i8 0, !16, i8 0, i32 1, i8 3, i32 0, i8 0, !17}
!16 = !{i32 0}
!17 = !{i32 3, i32 7}
!18 = !{i32 1, !"BLENDINDICES", i8 5, i8 0, !16, i8 0, i32 1, i8 4, i32 1, i8 0, !19}
!19 = !{i32 3, i32 15}
!20 = !{i32 2, !"BLENDWEIGHT", i8 9, i8 0, !16, i8 0, i32 1, i8 4, i32 2, i8 0, !19}
!21 = !{i32 3, !"BLENDINDICES", i8 5, i8 0, !22, i8 0, i32 1, i8 4, i32 3, i8 0, !19}
!22 = !{i32 1}
!23 = !{i32 4, !"BLENDWEIGHT", i8 9, i8 0, !22, i8 0, i32 1, i8 4, i32 4, i8 0, !19}
!24 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !16, i8 0, i32 1, i8 2, i32 5, i8 0, !25}
!25 = !{i32 3, i32 3}
!26 = !{i32 6, !"NORMAL", i8 9, i8 0, !16, i8 0, i32 1, i8 3, i32 6, i8 0, !17}
!27 = !{i32 7, !"TANGENT", i8 9, i8 0, !16, i8 0, i32 1, i8 4, i32 7, i8 0, !19}
!28 = !{i32 8, !"COLOR", i8 9, i8 0, !16, i8 0, i32 1, i8 4, i32 8, i8 0, !19}
!29 = !{i32 9, !"TEXCOORD", i8 9, i8 0, !22, i8 0, i32 1, i8 2, i32 9, i8 0, null}
!30 = !{i32 10, !"INSTANCE_TRANSFORM", i8 9, i8 0, !31, i8 0, i32 3, i8 4, i32 10, i8 0, !19}
!31 = !{i32 0, i32 1, i32 2}
!32 = !{i32 11, !"INSTANCE_SKINNING_DATA", i8 5, i8 0, !16, i8 0, i32 1, i8 4, i32 13, i8 0, !17}
!33 = !{i32 12, !"SV_VertexID", i8 5, i8 1, !16, i8 0, i32 1, i8 1, i32 14, i8 0, null}
!34 = !{!35, !36, !37, !38, !40, !42, !44, !46, !48}
!35 = !{i32 0, !"SV_Position", i8 9, i8 3, !16, i8 4, i32 1, i8 4, i32 0, i8 0, !19}
!36 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !16, i8 2, i32 1, i8 4, i32 1, i8 0, !19}
!37 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !22, i8 2, i32 1, i8 4, i32 2, i8 0, !19}
!38 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !39, i8 2, i32 1, i8 4, i32 3, i8 0, !19}
!39 = !{i32 2}
!40 = !{i32 4, !"TEXCOORD", i8 9, i8 0, !41, i8 2, i32 1, i8 4, i32 4, i8 0, !19}
!41 = !{i32 3}
!42 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !43, i8 2, i32 1, i8 4, i32 5, i8 0, !19}
!43 = !{i32 4}
!44 = !{i32 6, !"TEXCOORD", i8 9, i8 0, !45, i8 2, i32 1, i8 4, i32 6, i8 0, !19}
!45 = !{i32 5}
!46 = !{i32 7, !"TEXCOORD", i8 9, i8 0, !47, i8 2, i32 1, i8 4, i32 7, i8 0, !19}
!47 = !{i32 6}
!48 = !{i32 8, !"SV_ClipDistance", i8 9, i8 6, !16, i8 2, i32 1, i8 1, i32 8, i8 0, !49}
!49 = !{i32 3, i32 1}
!50 = !{i32 0, i64 16}
 