;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; POSITION                 0   xyz         0     NONE   float   xyz 
; COLOR                    0   xyzw        1     NONE   float   xyzw
; TEXCOORD                 0   xy          2     NONE   float   xy  
; TEXCOORD                 1   xy          3     NONE   float   xy  
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; POSITION                 0   xyz         1     NONE   float   xyz 
; COLOR                    0   xyzw        2     NONE   float   xyzw
; TEXCOORD                 0   xy          3     NONE   float   xy  
; TEXCOORD                 1     zw        3     NONE   float     zw
;
; shader debug name: 31f94c36ff5c36ccf6aed8aa4f63161a.pdb
; shader hash: 31f94c36ff5c36ccf6aed8aa4f63161a
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; POSITION                 0                              
; COLOR                    0                              
; TEXCOORD                 0                              
; TEXCOORD                 1                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; POSITION                 0                 linear       
; COLOR                    0                 linear       
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
;
; Buffer Definitions:
;
; cbuffer SceneInfo
; {
;
;   struct SceneInfo
;   {
;
;       row_major float4x4 viewProjMat;               ; Offset:    0
;       row_major float3x4 transposeViewMat;          ; Offset:   64
;       row_major float3x4 transposeViewInvMat;       ; Offset:  112
;       float4 projElement[2];                        ; Offset:  160
;       float4 projInvElements[2];                    ; Offset:  192
;       row_major float4x4 viewProjInvMat;            ; Offset:  224
;       row_major float4x4 prevViewProjMat;           ; Offset:  288
;       float3 ZToLinear;                             ; Offset:  352
;       float subdivisionLevel;                       ; Offset:  364
;       float2 screenSize;                            ; Offset:  368
;       float2 screenInverseSize;                     ; Offset:  376
;       float2 cullingHelper;                         ; Offset:  384
;       float cameraNearPlane;                        ; Offset:  392
;       float cameraFarPlane;                         ; Offset:  396
;       float4 viewFrustum[6];                        ; Offset:  400
;       float4 clipplane;                             ; Offset:  496
;       float2 vrsVelocityThreshold;                  ; Offset:  512
;       uint GPUVisibleMask;                          ; Offset:  520
;       uint resolutionRatioPacked;                   ; Offset:  524
;   
;   } SceneInfo;                                      ; Offset:    0 Size:   528
;
; }
;
; cbuffer GUIConstant
; {
;
;   struct GUIConstant
;   {
;
;       row_major float4x4 guiViewMatrix;             ; Offset:    0
;       row_major float4x4 guiProjMatrix;             ; Offset:   64
;       row_major float4x4 guiWorldMat;               ; Offset:  128
;       float guiIntensity;                           ; Offset:  192
;       float guiSaturation;                          ; Offset:  196
;       float guiSoftParticleDist;                    ; Offset:  200
;       float guiFilterParam;                         ; Offset:  204
;       float4 guiScreenSizeRatio;                    ; Offset:  208
;       float2 guiCaptureSizeRatio;                   ; Offset:  224
;       float2 guiDistortionOffset;                   ; Offset:  232
;       float guiFilterMipLevel;                      ; Offset:  240
;       float guiStencilScale;                        ; Offset:  244
;       uint guiDepthTestTargetStencil;               ; Offset:  248
;       uint guiShaderCommonFlag;                     ; Offset:  252
;       float4 guiAdjustAddColor;                     ; Offset:  256
;   
;   } GUIConstant;                                    ; Offset:    0 Size:   272
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; SceneInfo                         cbuffer      NA          NA     CB0            cb0     1
; GUIConstant                       cbuffer      NA          NA     CB1            cb1     1
;
;
; ViewId state:
;
; Number of inputs: 14, outputs: 16
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2 }
;   output 1 depends on inputs: { 0, 1, 2 }
;   output 2 depends on inputs: { 0, 1, 2 }
;   output 3 depends on inputs: { 0, 1, 2 }
;   output 4 depends on inputs: { 0, 1, 2 }
;   output 5 depends on inputs: { 0, 1, 2 }
;   output 6 depends on inputs: { 0, 1, 2 }
;   output 8 depends on inputs: { 4 }
;   output 9 depends on inputs: { 5 }
;   output 10 depends on inputs: { 6 }
;   output 11 depends on inputs: { 7 }
;   output 12 depends on inputs: { 8 }
;   output 13 depends on inputs: { 9 }
;   output 14 depends on inputs: { 12 }
;   output 15 depends on inputs: { 13 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:8-i16:16-i32:32-i64:64-f16:16-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%SceneInfo = type { %class.matrix.float.4.4, %class.matrix.float.3.4, %class.matrix.float.3.4, [2 x <4 x float>], [2 x <4 x float>], %class.matrix.float.4.4, %class.matrix.float.4.4, <3 x float>, float, <2 x float>, <2 x float>, <2 x float>, float, float, [6 x <4 x float>], <4 x float>, <2 x float>, i32, i32 }
%class.matrix.float.3.4 = type { [3 x <4 x float>] }
%class.matrix.float.4.4 = type { [4 x <4 x float>] }
%GUIConstant = type { %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, float, float, float, float, <4 x float>, <2 x float>, <2 x float>, float, float, i32, i32, <4 x float> }

define void @VS_GUIMaterial() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 13, i32 272 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %4 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 13, i32 528 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %17 = extractvalue %dx.types.CBufRet.f32 %16, 0
  %18 = extractvalue %dx.types.CBufRet.f32 %16, 1
  %19 = extractvalue %dx.types.CBufRet.f32 %16, 2
  %20 = extractvalue %dx.types.CBufRet.f32 %16, 3
  %21 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %22 = extractvalue %dx.types.CBufRet.f32 %21, 0
  %23 = extractvalue %dx.types.CBufRet.f32 %21, 1
  %24 = extractvalue %dx.types.CBufRet.f32 %21, 2
  %25 = extractvalue %dx.types.CBufRet.f32 %21, 3
  %26 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %27 = extractvalue %dx.types.CBufRet.f32 %26, 0
  %28 = extractvalue %dx.types.CBufRet.f32 %26, 1
  %29 = extractvalue %dx.types.CBufRet.f32 %26, 2
  %30 = extractvalue %dx.types.CBufRet.f32 %26, 3
  %31 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %32 = extractvalue %dx.types.CBufRet.f32 %31, 0
  %33 = extractvalue %dx.types.CBufRet.f32 %31, 1
  %34 = extractvalue %dx.types.CBufRet.f32 %31, 2
  %35 = extractvalue %dx.types.CBufRet.f32 %31, 3
  %36 = fmul fast float %17, %13
  %37 = call float @dx.op.tertiary.f32(i32 46, float %14, float %22, float %36)  ; FMad(a,b,c)
  %38 = call float @dx.op.tertiary.f32(i32 46, float %15, float %27, float %37)  ; FMad(a,b,c)
  %39 = fadd fast float %38, %32
  %40 = fmul fast float %18, %13
  %41 = call float @dx.op.tertiary.f32(i32 46, float %14, float %23, float %40)  ; FMad(a,b,c)
  %42 = call float @dx.op.tertiary.f32(i32 46, float %15, float %28, float %41)  ; FMad(a,b,c)
  %43 = fadd fast float %42, %33
  %44 = fmul fast float %19, %13
  %45 = call float @dx.op.tertiary.f32(i32 46, float %14, float %24, float %44)  ; FMad(a,b,c)
  %46 = call float @dx.op.tertiary.f32(i32 46, float %15, float %29, float %45)  ; FMad(a,b,c)
  %47 = fadd fast float %46, %34
  %48 = fmul fast float %20, %13
  %49 = call float @dx.op.tertiary.f32(i32 46, float %14, float %25, float %48)  ; FMad(a,b,c)
  %50 = call float @dx.op.tertiary.f32(i32 46, float %15, float %30, float %49)  ; FMad(a,b,c)
  %51 = fadd fast float %50, %35
  %52 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %53 = extractvalue %dx.types.CBufRet.f32 %52, 0
  %54 = extractvalue %dx.types.CBufRet.f32 %52, 1
  %55 = extractvalue %dx.types.CBufRet.f32 %52, 2
  %56 = extractvalue %dx.types.CBufRet.f32 %52, 3
  %57 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %58 = extractvalue %dx.types.CBufRet.f32 %57, 0
  %59 = extractvalue %dx.types.CBufRet.f32 %57, 1
  %60 = extractvalue %dx.types.CBufRet.f32 %57, 2
  %61 = extractvalue %dx.types.CBufRet.f32 %57, 3
  %62 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %63 = extractvalue %dx.types.CBufRet.f32 %62, 0
  %64 = extractvalue %dx.types.CBufRet.f32 %62, 1
  %65 = extractvalue %dx.types.CBufRet.f32 %62, 2
  %66 = extractvalue %dx.types.CBufRet.f32 %62, 3
  %67 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %68 = extractvalue %dx.types.CBufRet.f32 %67, 0
  %69 = extractvalue %dx.types.CBufRet.f32 %67, 1
  %70 = extractvalue %dx.types.CBufRet.f32 %67, 2
  %71 = extractvalue %dx.types.CBufRet.f32 %67, 3
  %72 = fmul fast float %53, %39
  %73 = call float @dx.op.tertiary.f32(i32 46, float %43, float %58, float %72)  ; FMad(a,b,c)
  %74 = call float @dx.op.tertiary.f32(i32 46, float %47, float %63, float %73)  ; FMad(a,b,c)
  %75 = call float @dx.op.tertiary.f32(i32 46, float %51, float %68, float %74)  ; FMad(a,b,c)
  %76 = fmul fast float %54, %39
  %77 = call float @dx.op.tertiary.f32(i32 46, float %43, float %59, float %76)  ; FMad(a,b,c)
  %78 = call float @dx.op.tertiary.f32(i32 46, float %47, float %64, float %77)  ; FMad(a,b,c)
  %79 = call float @dx.op.tertiary.f32(i32 46, float %51, float %69, float %78)  ; FMad(a,b,c)
  %80 = fmul fast float %55, %39
  %81 = call float @dx.op.tertiary.f32(i32 46, float %43, float %60, float %80)  ; FMad(a,b,c)
  %82 = call float @dx.op.tertiary.f32(i32 46, float %47, float %65, float %81)  ; FMad(a,b,c)
  %83 = call float @dx.op.tertiary.f32(i32 46, float %51, float %70, float %82)  ; FMad(a,b,c)
  %84 = fmul fast float %56, %39
  %85 = call float @dx.op.tertiary.f32(i32 46, float %43, float %61, float %84)  ; FMad(a,b,c)
  %86 = call float @dx.op.tertiary.f32(i32 46, float %47, float %66, float %85)  ; FMad(a,b,c)
  %87 = call float @dx.op.tertiary.f32(i32 46, float %51, float %71, float %86)  ; FMad(a,b,c)
  %88 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %89 = extractvalue %dx.types.CBufRet.f32 %88, 0
  %90 = extractvalue %dx.types.CBufRet.f32 %88, 1
  %91 = extractvalue %dx.types.CBufRet.f32 %88, 2
  %92 = extractvalue %dx.types.CBufRet.f32 %88, 3
  %93 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %94 = extractvalue %dx.types.CBufRet.f32 %93, 0
  %95 = extractvalue %dx.types.CBufRet.f32 %93, 1
  %96 = extractvalue %dx.types.CBufRet.f32 %93, 2
  %97 = extractvalue %dx.types.CBufRet.f32 %93, 3
  %98 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %99 = extractvalue %dx.types.CBufRet.f32 %98, 0
  %100 = extractvalue %dx.types.CBufRet.f32 %98, 1
  %101 = extractvalue %dx.types.CBufRet.f32 %98, 2
  %102 = extractvalue %dx.types.CBufRet.f32 %98, 3
  %103 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %104 = extractvalue %dx.types.CBufRet.f32 %103, 0
  %105 = extractvalue %dx.types.CBufRet.f32 %103, 1
  %106 = extractvalue %dx.types.CBufRet.f32 %103, 2
  %107 = extractvalue %dx.types.CBufRet.f32 %103, 3
  %108 = fmul fast float %89, %75
  %109 = call float @dx.op.tertiary.f32(i32 46, float %79, float %94, float %108)  ; FMad(a,b,c)
  %110 = call float @dx.op.tertiary.f32(i32 46, float %83, float %99, float %109)  ; FMad(a,b,c)
  %111 = call float @dx.op.tertiary.f32(i32 46, float %87, float %104, float %110)  ; FMad(a,b,c)
  %112 = fmul fast float %90, %75
  %113 = call float @dx.op.tertiary.f32(i32 46, float %79, float %95, float %112)  ; FMad(a,b,c)
  %114 = call float @dx.op.tertiary.f32(i32 46, float %83, float %100, float %113)  ; FMad(a,b,c)
  %115 = call float @dx.op.tertiary.f32(i32 46, float %87, float %105, float %114)  ; FMad(a,b,c)
  %116 = fmul fast float %91, %75
  %117 = call float @dx.op.tertiary.f32(i32 46, float %79, float %96, float %116)  ; FMad(a,b,c)
  %118 = call float @dx.op.tertiary.f32(i32 46, float %83, float %101, float %117)  ; FMad(a,b,c)
  %119 = call float @dx.op.tertiary.f32(i32 46, float %87, float %106, float %118)  ; FMad(a,b,c)
  %120 = fmul fast float %92, %75
  %121 = call float @dx.op.tertiary.f32(i32 46, float %79, float %97, float %120)  ; FMad(a,b,c)
  %122 = call float @dx.op.tertiary.f32(i32 46, float %83, float %102, float %121)  ; FMad(a,b,c)
  %123 = call float @dx.op.tertiary.f32(i32 46, float %87, float %107, float %122)  ; FMad(a,b,c)
  %124 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %125 = extractvalue %dx.types.CBufRet.f32 %124, 2
  %126 = extractvalue %dx.types.CBufRet.f32 %124, 3
  %127 = fcmp fast une float %125, 0.000000e+00
  %128 = fcmp fast une float %126, 0.000000e+00
  %129 = or i1 %127, %128
  br i1 %129, label %130, label %136

; <label>:130                                     ; preds = %0
  %131 = fmul fast float %123, 2.000000e+00
  %132 = fmul fast float %131, %125
  %133 = fadd fast float %132, %111
  %134 = fmul fast float %131, %126
  %135 = fsub fast float %115, %134
  br label %136

; <label>:136                                     ; preds = %130, %0
  %137 = phi float [ %133, %130 ], [ %111, %0 ]
  %138 = phi float [ %135, %130 ], [ %115, %0 ]
  %139 = fmul fast float %13, 0x3F847AE140000000
  %140 = fmul fast float %14, 0x3F847AE140000000
  %141 = fmul fast float %15, 0x3F847AE140000000
  %142 = fmul fast float %17, %139
  %143 = call float @dx.op.tertiary.f32(i32 46, float %140, float %22, float %142)  ; FMad(a,b,c)
  %144 = call float @dx.op.tertiary.f32(i32 46, float %141, float %27, float %143)  ; FMad(a,b,c)
  %145 = fmul fast float %18, %139
  %146 = call float @dx.op.tertiary.f32(i32 46, float %140, float %23, float %145)  ; FMad(a,b,c)
  %147 = call float @dx.op.tertiary.f32(i32 46, float %141, float %28, float %146)  ; FMad(a,b,c)
  %148 = fmul fast float %19, %139
  %149 = call float @dx.op.tertiary.f32(i32 46, float %140, float %24, float %148)  ; FMad(a,b,c)
  %150 = call float @dx.op.tertiary.f32(i32 46, float %141, float %29, float %149)  ; FMad(a,b,c)
  %151 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %152 = extractvalue %dx.types.CBufRet.f32 %151, 3
  %153 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %154 = extractvalue %dx.types.CBufRet.f32 %153, 3
  %155 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %156 = extractvalue %dx.types.CBufRet.f32 %155, 3
  %157 = extractvalue %dx.types.CBufRet.f32 %151, 2
  %158 = extractvalue %dx.types.CBufRet.f32 %153, 2
  %159 = extractvalue %dx.types.CBufRet.f32 %155, 2
  %160 = fmul fast float %157, 5.000000e+01
  %161 = fmul fast float %158, 5.000000e+01
  %162 = fmul fast float %159, 5.000000e+01
  %163 = fadd fast float %144, %32
  %164 = fadd fast float %163, %152
  %165 = fsub fast float %164, %160
  %166 = fadd fast float %147, %33
  %167 = fadd fast float %166, %154
  %168 = fsub fast float %167, %161
  %169 = fadd fast float %150, %34
  %170 = fadd fast float %169, %156
  %171 = fsub fast float %170, %162
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %137)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %138)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %119)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %123)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %165)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %168)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %171)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %9)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %10)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %11)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float %12)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %7)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %8)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %5)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float %6)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!8}
!dx.entryPoints = !{!9}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"vs", i32 6, i32 6}
!4 = !{null, null, !5, null}
!5 = !{!6, !7}
!6 = !{i32 0, %SceneInfo* undef, !"", i32 0, i32 0, i32 1, i32 528, null}
!7 = !{i32 1, %GUIConstant* undef, !"", i32 0, i32 1, i32 1, i32 272, null}
!8 = !{[16 x i32] [i32 14, i32 16, i32 127, i32 127, i32 127, i32 0, i32 256, i32 512, i32 1024, i32 2048, i32 4096, i32 8192, i32 0, i32 0, i32 16384, i32 32768]}
!9 = !{void ()* @VS_GUIMaterial, !"VS_GUIMaterial", !10, !4, !27}
!10 = !{!11, !21, null}
!11 = !{!12, !15, !17, !19}
!12 = !{i32 0, !"POSITION", i8 9, i8 0, !13, i8 0, i32 1, i8 3, i32 0, i8 0, !14}
!13 = !{i32 0}
!14 = !{i32 3, i32 7}
!15 = !{i32 1, !"COLOR", i8 9, i8 0, !13, i8 0, i32 1, i8 4, i32 1, i8 0, !16}
!16 = !{i32 3, i32 15}
!17 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !13, i8 0, i32 1, i8 2, i32 2, i8 0, !18}
!18 = !{i32 3, i32 3}
!19 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !20, i8 0, i32 1, i8 2, i32 3, i8 0, !18}
!20 = !{i32 1}
!21 = !{!22, !23, !24, !25, !26}
!22 = !{i32 0, !"SV_Position", i8 9, i8 3, !13, i8 4, i32 1, i8 4, i32 0, i8 0, !16}
!23 = !{i32 1, !"POSITION", i8 9, i8 0, !13, i8 2, i32 1, i8 3, i32 1, i8 0, !14}
!24 = !{i32 2, !"COLOR", i8 9, i8 0, !13, i8 2, i32 1, i8 4, i32 2, i8 0, !16}
!25 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !13, i8 2, i32 1, i8 2, i32 3, i8 0, !18}
!26 = !{i32 4, !"TEXCOORD", i8 9, i8 0, !20, i8 2, i32 1, i8 2, i32 3, i8 2, !18}
!27 = !{i32 0, i64 8388864, i32 5, !13}
 