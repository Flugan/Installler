;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; POSITION                 0   xyz         0     NONE   float   xyz 
; POSITION                 1   xyz         1     NONE   float       
; NORMAL                   0   xyzw        2     NONE   float   xyz 
; TANGENT                  0   xyzw        3     NONE   float       
; TEXCOORD                 0   xy          4     NONE   float   xy  
; TEXCOORD                 2   xy          5     NONE   float   xy  
; COLOR                    0   xyzw        6     NONE   float       
; Texcoord                 1   xy          7     NONE   float   xy  
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xyzw
; INTERPOLATOR             0   xyzw        1     NONE   float   xyzw
; INTERPOLATOR             1   xyzw        2     NONE   float   xyzw
; INTERPOLATOR             2   x           3     NONE   float   x   
;
; shader debug name: 1bacd096914cfb4079ec5d1a8fb6f772.pdb
; shader hash: 1bacd096914cfb4079ec5d1a8fb6f772
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; POSITION                 0                              
; POSITION                 1                              
; NORMAL                   0                              
; TANGENT                  0                              
; TEXCOORD                 0                              
; TEXCOORD                 2                              
; COLOR                    0                              
; Texcoord                 1                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; INTERPOLATOR             0                 linear       
; INTERPOLATOR             1                 linear       
; INTERPOLATOR             2                 linear       
;
; Buffer Definitions:
;
; cbuffer SceneInfo
; {
;
;   struct SceneInfo
;   {
;
;       row_major float4x4 viewProjMat;               ; Offset:    0
;       row_major float3x4 transposeViewMat;          ; Offset:   64
;       row_major float3x4 transposeViewInvMat;       ; Offset:  112
;       float4 projElement[2];                        ; Offset:  160
;       float4 projInvElements[2];                    ; Offset:  192
;       row_major float4x4 viewProjInvMat;            ; Offset:  224
;       row_major float4x4 prevViewProjMat;           ; Offset:  288
;       float3 ZToLinear;                             ; Offset:  352
;       float subdivisionLevel;                       ; Offset:  364
;       float2 screenSize;                            ; Offset:  368
;       float2 screenInverseSize;                     ; Offset:  376
;       float2 cullingHelper;                         ; Offset:  384
;       float cameraNearPlane;                        ; Offset:  392
;       float cameraFarPlane;                         ; Offset:  396
;       float4 viewFrustum[6];                        ; Offset:  400
;       float4 clipplane;                             ; Offset:  496
;       float2 vrsVelocityThreshold;                  ; Offset:  512
;       uint GPUVisibleMask;                          ; Offset:  520
;       uint resolutionRatioPacked;                   ; Offset:  524
;   
;   } SceneInfo;                                      ; Offset:    0 Size:   528
;
; }
;
; cbuffer ShadowCastInfo
; {
;
;   struct ShadowCastInfo
;   {
;
;       float shadowCastDepthBias;                    ; Offset:    0
;       float shadowCastSlopeBias;                    ; Offset:    4
;       float shadowCastMaxDepthBias;                 ; Offset:    8
;       float shadowCastReserve;                      ; Offset:   12
;   
;   } ShadowCastInfo;                                 ; Offset:    0 Size:    16
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; SceneInfo                         cbuffer      NA          NA     CB0            cb0     1
; ShadowCastInfo                    cbuffer      NA          NA     CB1            cb1     1
;
;
; ViewId state:
;
; Number of inputs: 30, outputs: 13
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2, 8, 9, 10 }
;   output 1 depends on inputs: { 0, 1, 2, 8, 9, 10 }
;   output 2 depends on inputs: { 0, 1, 2, 8, 9, 10 }
;   output 3 depends on inputs: { 0, 1, 2, 8, 9, 10 }
;   output 4 depends on inputs: { 16 }
;   output 5 depends on inputs: { 17 }
;   output 6 depends on inputs: { 28 }
;   output 7 depends on inputs: { 29 }
;   output 8 depends on inputs: { 0, 8 }
;   output 9 depends on inputs: { 1, 9 }
;   output 10 depends on inputs: { 2, 10 }
;   output 11 depends on inputs: { 20 }
;   output 12 depends on inputs: { 21 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:8-i16:16-i32:32-i64:64-f16:16-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%SceneInfo = type { %class.matrix.float.4.4, %class.matrix.float.3.4, %class.matrix.float.3.4, [2 x <4 x float>], [2 x <4 x float>], %class.matrix.float.4.4, %class.matrix.float.4.4, <3 x float>, float, <2 x float>, <2 x float>, <2 x float>, float, float, [6 x <4 x float>], <4 x float>, <2 x float>, i32, i32 }
%class.matrix.float.3.4 = type { [3 x <4 x float>] }
%class.matrix.float.4.4 = type { [4 x <4 x float>] }
%ShadowCastInfo = type { float, float, float, float }

define void @VS_ComputeTransformMeshShadowCast() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 13, i32 16 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %4 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 13, i32 528 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 7, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %18 = extractvalue %dx.types.CBufRet.f32 %17, 1
  %19 = fcmp fast une float %18, 0.000000e+00
  %20 = fadd fast float %14, %11
  %21 = fadd fast float %15, %12
  %22 = fadd fast float %16, %13
  %23 = select i1 %19, float %20, float %14
  %24 = select i1 %19, float %21, float %15
  %25 = select i1 %19, float %22, float %16
  %26 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %27 = extractvalue %dx.types.CBufRet.f32 %26, 0
  %28 = extractvalue %dx.types.CBufRet.f32 %26, 1
  %29 = extractvalue %dx.types.CBufRet.f32 %26, 2
  %30 = extractvalue %dx.types.CBufRet.f32 %26, 3
  %31 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %32 = extractvalue %dx.types.CBufRet.f32 %31, 0
  %33 = extractvalue %dx.types.CBufRet.f32 %31, 1
  %34 = extractvalue %dx.types.CBufRet.f32 %31, 2
  %35 = extractvalue %dx.types.CBufRet.f32 %31, 3
  %36 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %37 = extractvalue %dx.types.CBufRet.f32 %36, 0
  %38 = extractvalue %dx.types.CBufRet.f32 %36, 1
  %39 = extractvalue %dx.types.CBufRet.f32 %36, 2
  %40 = extractvalue %dx.types.CBufRet.f32 %36, 3
  %41 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %42 = extractvalue %dx.types.CBufRet.f32 %41, 0
  %43 = extractvalue %dx.types.CBufRet.f32 %41, 1
  %44 = extractvalue %dx.types.CBufRet.f32 %41, 2
  %45 = extractvalue %dx.types.CBufRet.f32 %41, 3
  %46 = fmul fast float %23, %27
  %47 = call float @dx.op.tertiary.f32(i32 46, float %24, float %32, float %46)  ; FMad(a,b,c)
  %48 = call float @dx.op.tertiary.f32(i32 46, float %25, float %37, float %47)  ; FMad(a,b,c)
  %49 = fadd fast float %48, %42
  %50 = fmul fast float %23, %28
  %51 = call float @dx.op.tertiary.f32(i32 46, float %24, float %33, float %50)  ; FMad(a,b,c)
  %52 = call float @dx.op.tertiary.f32(i32 46, float %25, float %38, float %51)  ; FMad(a,b,c)
  %53 = fadd fast float %52, %43
  %54 = fmul fast float %23, %29
  %55 = call float @dx.op.tertiary.f32(i32 46, float %24, float %34, float %54)  ; FMad(a,b,c)
  %56 = call float @dx.op.tertiary.f32(i32 46, float %25, float %39, float %55)  ; FMad(a,b,c)
  %57 = fadd fast float %56, %44
  %58 = fmul fast float %23, %30
  %59 = call float @dx.op.tertiary.f32(i32 46, float %24, float %35, float %58)  ; FMad(a,b,c)
  %60 = call float @dx.op.tertiary.f32(i32 46, float %25, float %40, float %59)  ; FMad(a,b,c)
  %61 = fadd fast float %60, %45
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %49)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %53)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %57)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %61)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %9)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %10)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %5)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %6)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %23)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %24)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %25)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float %7)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %8)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!8}
!dx.entryPoints = !{!9}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"vs", i32 6, i32 6}
!4 = !{null, null, !5, null}
!5 = !{!6, !7}
!6 = !{i32 0, %SceneInfo* undef, !"", i32 0, i32 0, i32 1, i32 528, null}
!7 = !{i32 1, %ShadowCastInfo* undef, !"", i32 0, i32 1, i32 1, i32 16, null}
!8 = !{[32 x i32] [i32 30, i32 13, i32 271, i32 527, i32 1039, i32 0, i32 0, i32 0, i32 0, i32 0, i32 271, i32 527, i32 1039, i32 0, i32 0, i32 0, i32 0, i32 0, i32 16, i32 32, i32 0, i32 0, i32 2048, i32 4096, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 64, i32 128]}
!9 = !{void ()* @VS_ComputeTransformMeshShadowCast, !"VS_ComputeTransformMeshShadowCast", !10, !4, !32}
!10 = !{!11, !25, null}
!11 = !{!12, !15, !17, !18, !19, !21, !23, !24}
!12 = !{i32 0, !"POSITION", i8 9, i8 0, !13, i8 0, i32 1, i8 3, i32 0, i8 0, !14}
!13 = !{i32 0}
!14 = !{i32 3, i32 7}
!15 = !{i32 1, !"POSITION", i8 9, i8 0, !16, i8 0, i32 1, i8 3, i32 1, i8 0, null}
!16 = !{i32 1}
!17 = !{i32 2, !"NORMAL", i8 9, i8 0, !13, i8 0, i32 1, i8 4, i32 2, i8 0, !14}
!18 = !{i32 3, !"TANGENT", i8 9, i8 0, !13, i8 0, i32 1, i8 4, i32 3, i8 0, null}
!19 = !{i32 4, !"TEXCOORD", i8 9, i8 0, !13, i8 0, i32 1, i8 2, i32 4, i8 0, !20}
!20 = !{i32 3, i32 3}
!21 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !22, i8 0, i32 1, i8 2, i32 5, i8 0, !20}
!22 = !{i32 2}
!23 = !{i32 6, !"COLOR", i8 9, i8 0, !13, i8 0, i32 1, i8 4, i32 6, i8 0, null}
!24 = !{i32 7, !"Texcoord", i8 9, i8 0, !16, i8 0, i32 1, i8 2, i32 7, i8 0, !20}
!25 = !{!26, !28, !29, !30}
!26 = !{i32 0, !"SV_Position", i8 9, i8 3, !13, i8 4, i32 1, i8 4, i32 0, i8 0, !27}
!27 = !{i32 3, i32 15}
!28 = !{i32 1, !"INTERPOLATOR", i8 9, i8 0, !13, i8 2, i32 1, i8 4, i32 1, i8 0, !27}
!29 = !{i32 2, !"INTERPOLATOR", i8 9, i8 0, !16, i8 2, i32 1, i8 4, i32 2, i8 0, !27}
!30 = !{i32 3, !"INTERPOLATOR", i8 9, i8 0, !22, i8 2, i32 1, i8 1, i32 3, i8 0, !31}
!31 = !{i32 3, i32 1}
!32 = !{i32 0, i64 8388864, i32 5, !13}
 