;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; POSITION                 0   xyzw        0     NONE   float   xyz 
; TEXCOORD                 0   xy          1     NONE   float   xy  
; SV_InstanceID            0   x           2   INSTID    uint   x   
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xyzw        0     NONE   float   xyzw
; SV_Position              0   xyzw        1      POS   float   xyzw
; INSTANCE_INDEXES         0   xy          2     NONE    uint   xy  
;
; shader hash: 60e4a4bf93d53b86e2beead41a7b4d26
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; POSITION                 0                              
; TEXCOORD                 0                              
; SV_InstanceID            0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; TEXCOORD                 0                 linear       
; INSTANCE_INDEXES         0        nointerpolation       
;
; Buffer Definitions:
;
; cbuffer CBufferGlobalConstant_Z
; {
;
;   struct CBufferGlobalConstant_Z
;   {
;
;       struct struct.StructGlobalConstant_Z
;       {
;
;           float4 c[174];                            ; Offset:    0
;       
;       } Global;                                     ; Offset:    0
;
;   
;   } CBufferGlobalConstant_Z;                        ; Offset:    0 Size:  2784
;
; }
;
; cbuffer CBufferUserConstant_Z
; {
;
;   struct CBufferUserConstant_Z
;   {
;
;       struct struct.StructUserConstant_Z
;       {
;
;           float4 c[183];                            ; Offset:    0
;       
;       } User;                                       ; Offset:    0
;
;   
;   } CBufferUserConstant_Z;                          ; Offset:    0 Size:  2928
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; CBufferGlobalConstant_Z           cbuffer      NA          NA     CB0            cb1     1
; CBufferUserConstant_Z             cbuffer      NA          NA     CB1            cb0     1
;
;
; ViewId state:
;
; Number of inputs: 9, outputs: 10
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 4 }
;   output 1 depends on inputs: { 5 }
;   output 2 depends on inputs: { 4 }
;   output 3 depends on inputs: { 5 }
;   output 4 depends on inputs: { 0, 2 }
;   output 5 depends on inputs: { 1, 2 }
;   output 6 depends on inputs: { 2 }
;   output 7 depends on inputs: { 2 }
;   output 9 depends on inputs: { 8 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%CBufferGlobalConstant_Z = type { %struct.StructGlobalConstant_Z }
%struct.StructGlobalConstant_Z = type { [174 x <4 x float>] }
%CBufferUserConstant_Z = type { %struct.StructUserConstant_Z }
%struct.StructUserConstant_Z = type { [183 x <4 x float>] }

define void @vh_2d() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 1, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call i32 @dx.op.loadInput.i32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 43)  ; CBufferLoadLegacy(handle,regIndex)
  %10 = extractvalue %dx.types.CBufRet.f32 %9, 3
  %11 = bitcast float %10 to i32
  %12 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 54)  ; CBufferLoadLegacy(handle,regIndex)
  %13 = extractvalue %dx.types.CBufRet.f32 %12, 0
  %14 = extractvalue %dx.types.CBufRet.f32 %12, 1
  %15 = extractvalue %dx.types.CBufRet.f32 %12, 2
  %16 = extractvalue %dx.types.CBufRet.f32 %12, 3
  %17 = fsub fast float %6, %15
  %18 = fsub fast float %7, %16
  %19 = fdiv fast float %17, %13
  %20 = fdiv fast float %18, %14
  %21 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %22 = extractvalue %dx.types.CBufRet.f32 %21, 0
  %23 = extractvalue %dx.types.CBufRet.f32 %21, 1
  %24 = fmul fast float %22, %19
  %25 = fmul fast float %23, %20
  %26 = extractvalue %dx.types.CBufRet.f32 %21, 2
  %27 = extractvalue %dx.types.CBufRet.f32 %21, 3
  %28 = fadd fast float %24, %26
  %29 = fadd fast float %25, %27
  %30 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %31 = extractvalue %dx.types.CBufRet.f32 %30, 0
  %32 = extractvalue %dx.types.CBufRet.f32 %30, 1
  %33 = extractvalue %dx.types.CBufRet.f32 %30, 2
  %34 = extractvalue %dx.types.CBufRet.f32 %30, 3
  %35 = fsub fast float %4, %33
  %36 = fsub fast float %5, %34
  %37 = fmul fast float %35, %31
  %38 = fmul fast float %36, %32
  %39 = shl i32 %11, 5
  %40 = add i32 %39, 106
  %41 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 %40)  ; CBufferLoadLegacy(handle,regIndex)
  %42 = extractvalue %dx.types.CBufRet.f32 %41, 2
  %43 = fmul fast float %42, %8
  %44 = extractvalue %dx.types.CBufRet.f32 %41, 3
  %45 = fadd fast float %43, %44
  %46 = add i32 %39, 107
  %47 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 %46)  ; CBufferLoadLegacy(handle,regIndex)
  %48 = extractvalue %dx.types.CBufRet.f32 %47, 2
  %49 = fmul fast float %48, %8
  %50 = extractvalue %dx.types.CBufRet.f32 %47, 3
  %51 = fadd fast float %49, %50
  %52 = fmul fast float %51, %28
  %53 = fmul fast float %51, %29
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %52)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %53)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %45)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %51)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %4)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %5)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %37)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %38)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.i32(i32 5, i32 2, i32 0, i8 0, i32 %11)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.i32(i32 5, i32 2, i32 0, i8 1, i32 %3)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind
declare void @dx.op.storeOutput.i32(i32, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!8}
!dx.entryPoints = !{!9}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 2}
!2 = !{i32 1, i32 7}
!3 = !{!"vs", i32 6, i32 2}
!4 = !{null, null, !5, null}
!5 = !{!6, !7}
!6 = !{i32 0, %CBufferGlobalConstant_Z* undef, !"", i32 0, i32 1, i32 1, i32 2784, null}
!7 = !{i32 1, %CBufferUserConstant_Z* undef, !"", i32 0, i32 0, i32 1, i32 2928, null}
!8 = !{[11 x i32] [i32 9, i32 10, i32 16, i32 32, i32 240, i32 0, i32 5, i32 10, i32 0, i32 0, i32 512]}
!9 = !{void ()* @vh_2d, !"vh_2d", !10, !4, null}
!10 = !{!11, !19, null}
!11 = !{!12, !15, !17}
!12 = !{i32 0, !"POSITION", i8 9, i8 0, !13, i8 0, i32 1, i8 4, i32 0, i8 0, !14}
!13 = !{i32 0}
!14 = !{i32 3, i32 7}
!15 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !13, i8 0, i32 1, i8 2, i32 1, i8 0, !16}
!16 = !{i32 3, i32 3}
!17 = !{i32 2, !"SV_InstanceID", i8 5, i8 2, !13, i8 0, i32 1, i8 1, i32 2, i8 0, !18}
!18 = !{i32 3, i32 1}
!19 = !{!20, !22, !23}
!20 = !{i32 0, !"SV_Position", i8 9, i8 3, !13, i8 4, i32 1, i8 4, i32 1, i8 0, !21}
!21 = !{i32 3, i32 15}
!22 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !13, i8 2, i32 1, i8 4, i32 0, i8 0, !21}
!23 = !{i32 2, !"INSTANCE_INDEXES", i8 5, i8 0, !13, i8 1, i32 1, i8 2, i32 2, i8 0, !16}
 